
ThrusterDynamometer_F7_STM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d4d8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d1c  0801d6d8  0801d6d8  0002d6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080203f4  080203f4  000401f8  2**0
                  CONTENTS
  4 .ARM          00000008  080203f4  080203f4  000303f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080203fc  080203fc  000401f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080203fc  080203fc  000303fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020400  08020400  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08020404  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000162f8  200001f8  080205fc  000401f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200164f0  080205fc  000464f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00050526  00000000  00000000  00040226  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009237  00000000  00000000  0009074c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002c88  00000000  00000000  00099988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002990  00000000  00000000  0009c610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003bc11  00000000  00000000  0009efa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00038bb7  00000000  00000000  000dabb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012849b  00000000  00000000  00113768  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0023bc03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c718  00000000  00000000  0023bc80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801d6c0 	.word	0x0801d6c0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0801d6c0 	.word	0x0801d6c0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <vTaskSendData>:


/*
 * task do wysylania danych z czujnikow
 */
void vTaskSendData(void *p){
 80005f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f2:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80005f6:	af16      	add	r7, sp, #88	; 0x58
 80005f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005fc:	6018      	str	r0, [r3, #0]
    char frame[150];

	char sens_value_frame[300];
	uint16_t frame_length;

	uint32_t ulNotifiedValue = 0x0;
 80005fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
	start_ms = 0;
 8000606:	4b90      	ldr	r3, [pc, #576]	; (8000848 <vTaskSendData+0x258>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
	pausa_time = 0;
 800060c:	4b8f      	ldr	r3, [pc, #572]	; (800084c <vTaskSendData+0x25c>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]

	if(xSemaphoreTake(xMutexSensValue, portMAX_DELAY) == 1){
 8000612:	4b8f      	ldr	r3, [pc, #572]	; (8000850 <vTaskSendData+0x260>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f04f 31ff 	mov.w	r1, #4294967295
 800061a:	4618      	mov	r0, r3
 800061c:	f009 fe68 	bl	800a2f0 <xQueueSemaphoreTake>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d11a      	bne.n	800065c <vTaskSendData+0x6c>

		empty_table(sens_value.vibro_value, VIBRO_TABLE_LEN);
 8000626:	210a      	movs	r1, #10
 8000628:	488a      	ldr	r0, [pc, #552]	; (8000854 <vTaskSendData+0x264>)
 800062a:	f000 fc01 	bl	8000e30 <empty_table>
		empty_table(sens_value.hal_value, HAL_TABLE_LEN);
 800062e:	210a      	movs	r1, #10
 8000630:	4889      	ldr	r0, [pc, #548]	; (8000858 <vTaskSendData+0x268>)
 8000632:	f000 fbfd 	bl	8000e30 <empty_table>
		sens_value.shunt_value = 0;
 8000636:	4b89      	ldr	r3, [pc, #548]	; (800085c <vTaskSendData+0x26c>)
 8000638:	2200      	movs	r2, #0
 800063a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		sens_value.tenso_value = 0;
 800063e:	4b87      	ldr	r3, [pc, #540]	; (800085c <vTaskSendData+0x26c>)
 8000640:	2200      	movs	r2, #0
 8000642:	635a      	str	r2, [r3, #52]	; 0x34
		strncpy(sens_value.temp, "", sizeof(sens_value.temp));
 8000644:	2232      	movs	r2, #50	; 0x32
 8000646:	4986      	ldr	r1, [pc, #536]	; (8000860 <vTaskSendData+0x270>)
 8000648:	4884      	ldr	r0, [pc, #528]	; (800085c <vTaskSendData+0x26c>)
 800064a:	f01a fcb8 	bl	801afbe <strncpy>

		xSemaphoreGive(xMutexSensValue);
 800064e:	4b80      	ldr	r3, [pc, #512]	; (8000850 <vTaskSendData+0x260>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	f009 fab0 	bl	8009bbc <xQueueGenericSend>
	}

	reset_time = 1;
 800065c:	4b81      	ldr	r3, [pc, #516]	; (8000864 <vTaskSendData+0x274>)
 800065e:	2201      	movs	r2, #1
 8000660:	701a      	strb	r2, [r3, #0]


	while(1){

		if( xTaskNotifyWait( 0xFFFFFFFF, 0, &ulNotifiedValue, portMAX_DELAY) == pdTRUE ){
 8000662:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	2100      	movs	r1, #0
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f00b fab4 	bl	800bbdc <xTaskNotifyWait>
 8000674:	4603      	mov	r3, r0
 8000676:	2b01      	cmp	r3, #1
 8000678:	d1f3      	bne.n	8000662 <vTaskSendData+0x72>

			if(xSemaphoreTake(xMutexSensValue, portMAX_DELAY) == 1){
 800067a:	4b75      	ldr	r3, [pc, #468]	; (8000850 <vTaskSendData+0x260>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f04f 31ff 	mov.w	r1, #4294967295
 8000682:	4618      	mov	r0, r3
 8000684:	f009 fe34 	bl	800a2f0 <xQueueSemaphoreTake>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d1e9      	bne.n	8000662 <vTaskSendData+0x72>

				memset(sens_value_frame, '\0', sizeof(sens_value_frame));
 800068e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000692:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f019 feed 	bl	801a478 <memset>

				if (reset_time == 1){
 800069e:	4b71      	ldr	r3, [pc, #452]	; (8000864 <vTaskSendData+0x274>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d108      	bne.n	80006b8 <vTaskSendData+0xc8>
					start_ms = HAL_GetTick();
 80006a6:	f001 ff81 	bl	80025ac <HAL_GetTick>
 80006aa:	4602      	mov	r2, r0
 80006ac:	4b66      	ldr	r3, [pc, #408]	; (8000848 <vTaskSendData+0x258>)
 80006ae:	601a      	str	r2, [r3, #0]
					reset_time = 0;
 80006b0:	4b6c      	ldr	r3, [pc, #432]	; (8000864 <vTaskSendData+0x274>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	e00e      	b.n	80006d6 <vTaskSendData+0xe6>
				}else if( pausa_time > 0) {
 80006b8:	4b64      	ldr	r3, [pc, #400]	; (800084c <vTaskSendData+0x25c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00a      	beq.n	80006d6 <vTaskSendData+0xe6>
						start_ms = HAL_GetTick() - pausa_time;
 80006c0:	f001 ff74 	bl	80025ac <HAL_GetTick>
 80006c4:	4602      	mov	r2, r0
 80006c6:	4b61      	ldr	r3, [pc, #388]	; (800084c <vTaskSendData+0x25c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	1ad3      	subs	r3, r2, r3
 80006cc:	4a5e      	ldr	r2, [pc, #376]	; (8000848 <vTaskSendData+0x258>)
 80006ce:	6013      	str	r3, [r2, #0]
						pausa_time = 0;
 80006d0:	4b5e      	ldr	r3, [pc, #376]	; (800084c <vTaskSendData+0x25c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
//			    		vibro_val,
//						shunt_val,
//						hal_val,
//						tenso_val);

				strcpy(sens_value.temp, "21.3|22.4|1025.5");
 80006d6:	4a61      	ldr	r2, [pc, #388]	; (800085c <vTaskSendData+0x26c>)
 80006d8:	4b63      	ldr	r3, [pc, #396]	; (8000868 <vTaskSendData+0x278>)
 80006da:	4614      	mov	r4, r2
 80006dc:	461d      	mov	r5, r3
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	682b      	ldr	r3, [r5, #0]
 80006e4:	7023      	strb	r3, [r4, #0]


				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 80006e6:	4b58      	ldr	r3, [pc, #352]	; (8000848 <vTaskSendData+0x258>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fb52 	bl	8000d94 <get_time>
 80006f0:	4684      	mov	ip, r0
						get_time(start_ms), sens_value.temp,
						sens_value.vibro_value[0], sens_value.vibro_value[1], sens_value.vibro_value[2], sens_value.vibro_value[3], sens_value.vibro_value[4], sens_value.vibro_value[5], sens_value.vibro_value[6], sens_value.vibro_value[7], sens_value.vibro_value[8], sens_value.vibro_value[9],
 80006f2:	4b5a      	ldr	r3, [pc, #360]	; (800085c <vTaskSendData+0x26c>)
 80006f4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
						sens_value.vibro_value[0], sens_value.vibro_value[1], sens_value.vibro_value[2], sens_value.vibro_value[3], sens_value.vibro_value[4], sens_value.vibro_value[5], sens_value.vibro_value[6], sens_value.vibro_value[7], sens_value.vibro_value[8], sens_value.vibro_value[9],
 80006f8:	4b58      	ldr	r3, [pc, #352]	; (800085c <vTaskSendData+0x26c>)
 80006fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 80006fc:	63fb      	str	r3, [r7, #60]	; 0x3c
						sens_value.vibro_value[0], sens_value.vibro_value[1], sens_value.vibro_value[2], sens_value.vibro_value[3], sens_value.vibro_value[4], sens_value.vibro_value[5], sens_value.vibro_value[6], sens_value.vibro_value[7], sens_value.vibro_value[8], sens_value.vibro_value[9],
 80006fe:	4b57      	ldr	r3, [pc, #348]	; (800085c <vTaskSendData+0x26c>)
 8000700:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
						sens_value.vibro_value[0], sens_value.vibro_value[1], sens_value.vibro_value[2], sens_value.vibro_value[3], sens_value.vibro_value[4], sens_value.vibro_value[5], sens_value.vibro_value[6], sens_value.vibro_value[7], sens_value.vibro_value[8], sens_value.vibro_value[9],
 8000704:	4b55      	ldr	r3, [pc, #340]	; (800085c <vTaskSendData+0x26c>)
 8000706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000708:	637b      	str	r3, [r7, #52]	; 0x34
						sens_value.vibro_value[0], sens_value.vibro_value[1], sens_value.vibro_value[2], sens_value.vibro_value[3], sens_value.vibro_value[4], sens_value.vibro_value[5], sens_value.vibro_value[6], sens_value.vibro_value[7], sens_value.vibro_value[8], sens_value.vibro_value[9],
 800070a:	4b54      	ldr	r3, [pc, #336]	; (800085c <vTaskSendData+0x26c>)
 800070c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000710:	633b      	str	r3, [r7, #48]	; 0x30
						sens_value.vibro_value[0], sens_value.vibro_value[1], sens_value.vibro_value[2], sens_value.vibro_value[3], sens_value.vibro_value[4], sens_value.vibro_value[5], sens_value.vibro_value[6], sens_value.vibro_value[7], sens_value.vibro_value[8], sens_value.vibro_value[9],
 8000712:	4b52      	ldr	r3, [pc, #328]	; (800085c <vTaskSendData+0x26c>)
 8000714:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
						sens_value.vibro_value[0], sens_value.vibro_value[1], sens_value.vibro_value[2], sens_value.vibro_value[3], sens_value.vibro_value[4], sens_value.vibro_value[5], sens_value.vibro_value[6], sens_value.vibro_value[7], sens_value.vibro_value[8], sens_value.vibro_value[9],
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <vTaskSendData+0x26c>)
 800071c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
						sens_value.vibro_value[0], sens_value.vibro_value[1], sens_value.vibro_value[2], sens_value.vibro_value[3], sens_value.vibro_value[4], sens_value.vibro_value[5], sens_value.vibro_value[6], sens_value.vibro_value[7], sens_value.vibro_value[8], sens_value.vibro_value[9],
 8000722:	4b4e      	ldr	r3, [pc, #312]	; (800085c <vTaskSendData+0x26c>)
 8000724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
						sens_value.vibro_value[0], sens_value.vibro_value[1], sens_value.vibro_value[2], sens_value.vibro_value[3], sens_value.vibro_value[4], sens_value.vibro_value[5], sens_value.vibro_value[6], sens_value.vibro_value[7], sens_value.vibro_value[8], sens_value.vibro_value[9],
 800072a:	4b4c      	ldr	r3, [pc, #304]	; (800085c <vTaskSendData+0x26c>)
 800072c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000730:	623b      	str	r3, [r7, #32]
						sens_value.vibro_value[0], sens_value.vibro_value[1], sens_value.vibro_value[2], sens_value.vibro_value[3], sens_value.vibro_value[4], sens_value.vibro_value[5], sens_value.vibro_value[6], sens_value.vibro_value[7], sens_value.vibro_value[8], sens_value.vibro_value[9],
 8000732:	4b4a      	ldr	r3, [pc, #296]	; (800085c <vTaskSendData+0x26c>)
 8000734:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000738:	61fb      	str	r3, [r7, #28]
						sens_value.shunt_value,
 800073a:	4b48      	ldr	r3, [pc, #288]	; (800085c <vTaskSendData+0x26c>)
 800073c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000740:	61bb      	str	r3, [r7, #24]
						sens_value.hal_value[0], sens_value.hal_value[1], sens_value.hal_value[2], sens_value.hal_value[3], sens_value.hal_value[4], sens_value.hal_value[5], sens_value.hal_value[6], sens_value.hal_value[7], sens_value.hal_value[8], sens_value.hal_value[9],
 8000742:	4b46      	ldr	r3, [pc, #280]	; (800085c <vTaskSendData+0x26c>)
 8000744:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000748:	617b      	str	r3, [r7, #20]
						sens_value.hal_value[0], sens_value.hal_value[1], sens_value.hal_value[2], sens_value.hal_value[3], sens_value.hal_value[4], sens_value.hal_value[5], sens_value.hal_value[6], sens_value.hal_value[7], sens_value.hal_value[8], sens_value.hal_value[9],
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <vTaskSendData+0x26c>)
 800074c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000750:	613b      	str	r3, [r7, #16]
						sens_value.hal_value[0], sens_value.hal_value[1], sens_value.hal_value[2], sens_value.hal_value[3], sens_value.hal_value[4], sens_value.hal_value[5], sens_value.hal_value[6], sens_value.hal_value[7], sens_value.hal_value[8], sens_value.hal_value[9],
 8000752:	4b42      	ldr	r3, [pc, #264]	; (800085c <vTaskSendData+0x26c>)
 8000754:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000758:	60fb      	str	r3, [r7, #12]
						sens_value.hal_value[0], sens_value.hal_value[1], sens_value.hal_value[2], sens_value.hal_value[3], sens_value.hal_value[4], sens_value.hal_value[5], sens_value.hal_value[6], sens_value.hal_value[7], sens_value.hal_value[8], sens_value.hal_value[9],
 800075a:	4b40      	ldr	r3, [pc, #256]	; (800085c <vTaskSendData+0x26c>)
 800075c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000760:	60bb      	str	r3, [r7, #8]
						sens_value.hal_value[0], sens_value.hal_value[1], sens_value.hal_value[2], sens_value.hal_value[3], sens_value.hal_value[4], sens_value.hal_value[5], sens_value.hal_value[6], sens_value.hal_value[7], sens_value.hal_value[8], sens_value.hal_value[9],
 8000762:	4b3e      	ldr	r3, [pc, #248]	; (800085c <vTaskSendData+0x26c>)
 8000764:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000768:	607b      	str	r3, [r7, #4]
						sens_value.hal_value[0], sens_value.hal_value[1], sens_value.hal_value[2], sens_value.hal_value[3], sens_value.hal_value[4], sens_value.hal_value[5], sens_value.hal_value[6], sens_value.hal_value[7], sens_value.hal_value[8], sens_value.hal_value[9],
 800076a:	4b3c      	ldr	r3, [pc, #240]	; (800085c <vTaskSendData+0x26c>)
 800076c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000770:	461e      	mov	r6, r3
						sens_value.hal_value[0], sens_value.hal_value[1], sens_value.hal_value[2], sens_value.hal_value[3], sens_value.hal_value[4], sens_value.hal_value[5], sens_value.hal_value[6], sens_value.hal_value[7], sens_value.hal_value[8], sens_value.hal_value[9],
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <vTaskSendData+0x26c>)
 8000774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000778:	461d      	mov	r5, r3
						sens_value.hal_value[0], sens_value.hal_value[1], sens_value.hal_value[2], sens_value.hal_value[3], sens_value.hal_value[4], sens_value.hal_value[5], sens_value.hal_value[6], sens_value.hal_value[7], sens_value.hal_value[8], sens_value.hal_value[9],
 800077a:	4b38      	ldr	r3, [pc, #224]	; (800085c <vTaskSendData+0x26c>)
 800077c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000780:	461c      	mov	r4, r3
						sens_value.hal_value[0], sens_value.hal_value[1], sens_value.hal_value[2], sens_value.hal_value[3], sens_value.hal_value[4], sens_value.hal_value[5], sens_value.hal_value[6], sens_value.hal_value[7], sens_value.hal_value[8], sens_value.hal_value[9],
 8000782:	4b36      	ldr	r3, [pc, #216]	; (800085c <vTaskSendData+0x26c>)
 8000784:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000788:	4619      	mov	r1, r3
						sens_value.hal_value[0], sens_value.hal_value[1], sens_value.hal_value[2], sens_value.hal_value[3], sens_value.hal_value[4], sens_value.hal_value[5], sens_value.hal_value[6], sens_value.hal_value[7], sens_value.hal_value[8], sens_value.hal_value[9],
 800078a:	4b34      	ldr	r3, [pc, #208]	; (800085c <vTaskSendData+0x26c>)
 800078c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
				frame_length = sprintf(sens_value_frame, "[%11s|%18s|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d|%4d]",
 8000790:	461a      	mov	r2, r3
 8000792:	4b32      	ldr	r3, [pc, #200]	; (800085c <vTaskSendData+0x26c>)
 8000794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000796:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800079a:	9315      	str	r3, [sp, #84]	; 0x54
 800079c:	9214      	str	r2, [sp, #80]	; 0x50
 800079e:	9113      	str	r1, [sp, #76]	; 0x4c
 80007a0:	9412      	str	r4, [sp, #72]	; 0x48
 80007a2:	9511      	str	r5, [sp, #68]	; 0x44
 80007a4:	9610      	str	r6, [sp, #64]	; 0x40
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	920f      	str	r2, [sp, #60]	; 0x3c
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	920e      	str	r2, [sp, #56]	; 0x38
 80007ae:	68fa      	ldr	r2, [r7, #12]
 80007b0:	920d      	str	r2, [sp, #52]	; 0x34
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	920c      	str	r2, [sp, #48]	; 0x30
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80007ba:	69ba      	ldr	r2, [r7, #24]
 80007bc:	920a      	str	r2, [sp, #40]	; 0x28
 80007be:	69fa      	ldr	r2, [r7, #28]
 80007c0:	9209      	str	r2, [sp, #36]	; 0x24
 80007c2:	6a3a      	ldr	r2, [r7, #32]
 80007c4:	9208      	str	r2, [sp, #32]
 80007c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007c8:	9207      	str	r2, [sp, #28]
 80007ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007cc:	9206      	str	r2, [sp, #24]
 80007ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d0:	9205      	str	r2, [sp, #20]
 80007d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007d4:	9204      	str	r2, [sp, #16]
 80007d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007d8:	9203      	str	r2, [sp, #12]
 80007da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80007dc:	9202      	str	r2, [sp, #8]
 80007de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007e0:	9201      	str	r2, [sp, #4]
 80007e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <vTaskSendData+0x26c>)
 80007e8:	4662      	mov	r2, ip
 80007ea:	4920      	ldr	r1, [pc, #128]	; (800086c <vTaskSendData+0x27c>)
 80007ec:	f01a fb58 	bl	801aea0 <siprintf>
 80007f0:	4603      	mov	r3, r0
 80007f2:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
						sens_value.tenso_value);

				if (accept_err == ERR_OK) {
 80007f6:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <vTaskSendData+0x280>)
 80007f8:	f993 3000 	ldrsb.w	r3, [r3]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d10f      	bne.n	8000820 <vTaskSendData+0x230>

					netconn_write(newconn, (const unsigned char* )sens_value_frame, strlen(sens_value_frame), NETCONN_COPY);
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <vTaskSendData+0x284>)
 8000802:	681c      	ldr	r4, [r3, #0]
 8000804:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd19 	bl	8000240 <strlen>
 800080e:	4602      	mov	r2, r0
 8000810:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000814:	2300      	movs	r3, #0
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	2301      	movs	r3, #1
 800081a:	4620      	mov	r0, r4
 800081c:	f00c fa8e 	bl	800cd3c <netconn_write_partly>

				}

//				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_GREEN_Pin);

				empty_table(sens_value.vibro_value, VIBRO_TABLE_LEN);
 8000820:	210a      	movs	r1, #10
 8000822:	480c      	ldr	r0, [pc, #48]	; (8000854 <vTaskSendData+0x264>)
 8000824:	f000 fb04 	bl	8000e30 <empty_table>
				empty_table(sens_value.hal_value, HAL_TABLE_LEN);
 8000828:	210a      	movs	r1, #10
 800082a:	480b      	ldr	r0, [pc, #44]	; (8000858 <vTaskSendData+0x268>)
 800082c:	f000 fb00 	bl	8000e30 <empty_table>
				sens_value.shunt_value = 0;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <vTaskSendData+0x26c>)
 8000832:	2200      	movs	r2, #0
 8000834:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

				xSemaphoreGive(xMutexSensValue);
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <vTaskSendData+0x260>)
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	2300      	movs	r3, #0
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	f009 f9bb 	bl	8009bbc <xQueueGenericSend>
		if( xTaskNotifyWait( 0xFFFFFFFF, 0, &ulNotifiedValue, portMAX_DELAY) == pdTRUE ){
 8000846:	e70c      	b.n	8000662 <vTaskSendData+0x72>
 8000848:	2000021c 	.word	0x2000021c
 800084c:	20000218 	.word	0x20000218
 8000850:	2000f08c 	.word	0x2000f08c
 8000854:	2000f1c8 	.word	0x2000f1c8
 8000858:	2000f1de 	.word	0x2000f1de
 800085c:	2000f190 	.word	0x2000f190
 8000860:	0801d6d8 	.word	0x0801d6d8
 8000864:	2000f235 	.word	0x2000f235
 8000868:	0801d6dc 	.word	0x0801d6dc
 800086c:	0801d6f0 	.word	0x0801d6f0
 8000870:	2000f2b4 	.word	0x2000f2b4
 8000874:	2000f2b0 	.word	0x2000f2b0

08000878 <vTaskReceivedData>:
}

/*
 * Przetworzenie odbebranych danych i wlaczenie odpowiedniej funkcji
 */
void vTaskReceivedData(void *p){
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b08b      	sub	sp, #44	; 0x2c
 800087c:	af02      	add	r7, sp, #8
 800087e:	6078      	str	r0, [r7, #4]
	struct netbuf* buffer;
	void* data;
	u16_t len;
	err_t recv_err;

	conn = netconn_new(NETCONN_TCP);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2010      	movs	r0, #16
 8000886:	f00b ff8f 	bl	800c7a8 <netconn_new_with_proto_and_callback>
 800088a:	4602      	mov	r2, r0
 800088c:	4b88      	ldr	r3, [pc, #544]	; (8000ab0 <vTaskReceivedData+0x238>)
 800088e:	601a      	str	r2, [r3, #0]

		if (conn != NULL) {
 8000890:	4b87      	ldr	r3, [pc, #540]	; (8000ab0 <vTaskReceivedData+0x238>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d015      	beq.n	80008c4 <vTaskReceivedData+0x4c>
			err = netconn_bind(conn, NULL, 80);
 8000898:	4b85      	ldr	r3, [pc, #532]	; (8000ab0 <vTaskReceivedData+0x238>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2250      	movs	r2, #80	; 0x50
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f00c f821 	bl	800c8e8 <netconn_bind>
 80008a6:	4603      	mov	r3, r0
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b82      	ldr	r3, [pc, #520]	; (8000ab4 <vTaskReceivedData+0x23c>)
 80008ac:	701a      	strb	r2, [r3, #0]
			if (err == ERR_OK) {
 80008ae:	4b81      	ldr	r3, [pc, #516]	; (8000ab4 <vTaskReceivedData+0x23c>)
 80008b0:	f993 3000 	ldrsb.w	r3, [r3]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d105      	bne.n	80008c4 <vTaskReceivedData+0x4c>
				netconn_listen(conn);
 80008b8:	4b7d      	ldr	r3, [pc, #500]	; (8000ab0 <vTaskReceivedData+0x238>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	21ff      	movs	r1, #255	; 0xff
 80008be:	4618      	mov	r0, r3
 80008c0:	f00c f84a 	bl	800c958 <netconn_listen_with_backlog>
			}
		}

	while(1){

		accept_err = netconn_accept(conn, &newconn);
 80008c4:	4b7a      	ldr	r3, [pc, #488]	; (8000ab0 <vTaskReceivedData+0x238>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	497b      	ldr	r1, [pc, #492]	; (8000ab8 <vTaskReceivedData+0x240>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00c f870 	bl	800c9b0 <netconn_accept>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b79      	ldr	r3, [pc, #484]	; (8000abc <vTaskReceivedData+0x244>)
 80008d6:	701a      	strb	r2, [r3, #0]

			if (accept_err == ERR_OK) {
 80008d8:	4b78      	ldr	r3, [pc, #480]	; (8000abc <vTaskReceivedData+0x244>)
 80008da:	f993 3000 	ldrsb.w	r3, [r3]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d1f0      	bne.n	80008c4 <vTaskReceivedData+0x4c>

				while ((recv_err = netconn_recv(newconn, &buffer)) == ERR_OK) {
 80008e2:	e0ca      	b.n	8000a7a <vTaskReceivedData+0x202>

					do {

						netbuf_data(buffer, &data, &len);
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	f107 020e 	add.w	r2, r7, #14
 80008ea:	f107 0110 	add.w	r1, r7, #16
 80008ee:	4618      	mov	r0, r3
 80008f0:	f00d ff28 	bl	800e744 <netbuf_data>
						netconn_write(newconn, data, len, NETCONN_COPY);
 80008f4:	4b70      	ldr	r3, [pc, #448]	; (8000ab8 <vTaskReceivedData+0x240>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	6939      	ldr	r1, [r7, #16]
 80008fa:	89fb      	ldrh	r3, [r7, #14]
 80008fc:	461a      	mov	r2, r3
 80008fe:	2300      	movs	r3, #0
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	2301      	movs	r3, #1
 8000904:	f00c fa1a 	bl	800cd3c <netconn_write_partly>

					} while (netbuf_next(buffer) >= 0);
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	4618      	mov	r0, r3
 800090c:	f00d ff64 	bl	800e7d8 <netbuf_next>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	dae6      	bge.n	80008e4 <vTaskReceivedData+0x6c>

					netbuf_delete(buffer);
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	4618      	mov	r0, r3
 800091a:	f00d fef3 	bl	800e704 <netbuf_delete>

					command_mode = (CMD_MODE_t*) pvPortMalloc(sizeof(CMD_MODE_t));
 800091e:	200a      	movs	r0, #10
 8000920:	f00b fd44 	bl	800c3ac <pvPortMalloc>
 8000924:	61b8      	str	r0, [r7, #24]
					extract_arg(command_mode, data);
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	4619      	mov	r1, r3
 800092a:	69b8      	ldr	r0, [r7, #24]
 800092c:	f000 f92e 	bl	8000b8c <extract_arg>

//					uart_print(data);

				switch (command_mode->num) {
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	2b0b      	cmp	r3, #11
 8000936:	f200 809a 	bhi.w	8000a6e <vTaskReceivedData+0x1f6>
 800093a:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <vTaskReceivedData+0xc8>)
 800093c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000940:	0800097f 	.word	0x0800097f
 8000944:	08000971 	.word	0x08000971
 8000948:	08000a6f 	.word	0x08000a6f
 800094c:	080009f7 	.word	0x080009f7
 8000950:	08000a07 	.word	0x08000a07
 8000954:	08000a6f 	.word	0x08000a6f
 8000958:	08000a6f 	.word	0x08000a6f
 800095c:	08000a6f 	.word	0x08000a6f
 8000960:	08000a6f 	.word	0x08000a6f
 8000964:	08000a27 	.word	0x08000a27
 8000968:	08000a27 	.word	0x08000a27
 800096c:	08000a51 	.word	0x08000a51

					/******** Start ADC1 timer and ADC1 ***************/
//				    HAL_TIM_Base_Start_IT(&htim2);
//					HAL_ADC_Start_DMA(&hadc1, adcValue, 3);

					HAL_TIM_Base_Start_IT(&htim11); // send
 8000970:	4853      	ldr	r0, [pc, #332]	; (8000ac0 <vTaskReceivedData+0x248>)
 8000972:	f005 fde7 	bl	8006544 <HAL_TIM_Base_Start_IT>

					HAL_TIM_Base_Start_IT(&htim9); // tenso
 8000976:	4853      	ldr	r0, [pc, #332]	; (8000ac4 <vTaskReceivedData+0x24c>)
 8000978:	f005 fde4 	bl	8006544 <HAL_TIM_Base_Start_IT>

				    /******** Start receive date from stm32f4 ***************/
//				    memset(uartf4_received, '\0', sizeof(uartf4_received));
//				    HAL_UART_Receive_DMA(&huart2, (uint8_t*) uartf4_received, UARTF4_TEMP_FRAME_SIZE);

					break;
 800097c:	e07a      	b.n	8000a74 <vTaskReceivedData+0x1fc>
				}
				case STOP_COMMAND: {

				    HAL_TIM_Base_Stop_IT(&htim2);
 800097e:	4852      	ldr	r0, [pc, #328]	; (8000ac8 <vTaskReceivedData+0x250>)
 8000980:	f005 fe0a 	bl	8006598 <HAL_TIM_Base_Stop_IT>
					HAL_ADC_Stop_DMA(&hadc1);
 8000984:	4851      	ldr	r0, [pc, #324]	; (8000acc <vTaskReceivedData+0x254>)
 8000986:	f001 ff71 	bl	800286c <HAL_ADC_Stop_DMA>

					HAL_TIM_Base_Stop_IT(&htim9);
 800098a:	484e      	ldr	r0, [pc, #312]	; (8000ac4 <vTaskReceivedData+0x24c>)
 800098c:	f005 fe04 	bl	8006598 <HAL_TIM_Base_Stop_IT>
					reset_time = 1; HAL_TIM_Base_Stop_IT(&htim11);
 8000990:	4b4f      	ldr	r3, [pc, #316]	; (8000ad0 <vTaskReceivedData+0x258>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	484a      	ldr	r0, [pc, #296]	; (8000ac0 <vTaskReceivedData+0x248>)
 8000998:	f005 fdfe 	bl	8006598 <HAL_TIM_Base_Stop_IT>

					HAL_TIM_Base_Stop_IT(&htim9); // tenso
 800099c:	4849      	ldr	r0, [pc, #292]	; (8000ac4 <vTaskReceivedData+0x24c>)
 800099e:	f005 fdfb 	bl	8006598 <HAL_TIM_Base_Stop_IT>

					HAL_TIM_PWM_Stop_DMA(&htim8, TIM_CHANNEL_1);
 80009a2:	2100      	movs	r1, #0
 80009a4:	484b      	ldr	r0, [pc, #300]	; (8000ad4 <vTaskReceivedData+0x25c>)
 80009a6:	f005 fe4d 	bl	8006644 <HAL_TIM_PWM_Stop_DMA>

					if(xSemaphoreTake(xMutexSensValue, portMAX_DELAY) == 1){
 80009aa:	4b4b      	ldr	r3, [pc, #300]	; (8000ad8 <vTaskReceivedData+0x260>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f04f 31ff 	mov.w	r1, #4294967295
 80009b2:	4618      	mov	r0, r3
 80009b4:	f009 fc9c 	bl	800a2f0 <xQueueSemaphoreTake>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d159      	bne.n	8000a72 <vTaskReceivedData+0x1fa>

						empty_table(sens_value.vibro_value, VIBRO_TABLE_LEN);
 80009be:	210a      	movs	r1, #10
 80009c0:	4846      	ldr	r0, [pc, #280]	; (8000adc <vTaskReceivedData+0x264>)
 80009c2:	f000 fa35 	bl	8000e30 <empty_table>
						empty_table(sens_value.hal_value, HAL_TABLE_LEN);
 80009c6:	210a      	movs	r1, #10
 80009c8:	4845      	ldr	r0, [pc, #276]	; (8000ae0 <vTaskReceivedData+0x268>)
 80009ca:	f000 fa31 	bl	8000e30 <empty_table>
						sens_value.shunt_value = 0;
 80009ce:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <vTaskReceivedData+0x26c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						sens_value.tenso_value = 0;
 80009d6:	4b43      	ldr	r3, [pc, #268]	; (8000ae4 <vTaskReceivedData+0x26c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	635a      	str	r2, [r3, #52]	; 0x34
						strncpy(sens_value.temp, "", sizeof(sens_value.temp));
 80009dc:	2232      	movs	r2, #50	; 0x32
 80009de:	4942      	ldr	r1, [pc, #264]	; (8000ae8 <vTaskReceivedData+0x270>)
 80009e0:	4840      	ldr	r0, [pc, #256]	; (8000ae4 <vTaskReceivedData+0x26c>)
 80009e2:	f01a faec 	bl	801afbe <strncpy>

						xSemaphoreGive(xMutexSensValue);
 80009e6:	4b3c      	ldr	r3, [pc, #240]	; (8000ad8 <vTaskReceivedData+0x260>)
 80009e8:	6818      	ldr	r0, [r3, #0]
 80009ea:	2300      	movs	r3, #0
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	f009 f8e4 	bl	8009bbc <xQueueGenericSend>
					}

					break;
 80009f4:	e03d      	b.n	8000a72 <vTaskReceivedData+0x1fa>
//					duty = command_mode->arg;
//					HAL_UART_Transmit(&huart3, "Hello\n", strlen("Hello\n"), HAL_MAX_DELAY);
					break;
				}
				case TENSO_OFFSET_COMMAND: {
					HX711_Tare(10);
 80009f6:	200a      	movs	r0, #10
 80009f8:	f001 fd20 	bl	800243c <HX711_Tare>
				    HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	483b      	ldr	r0, [pc, #236]	; (8000aec <vTaskReceivedData+0x274>)
 8000a00:	f004 f8f9 	bl	8004bf6 <HAL_GPIO_TogglePin>
					break;
 8000a04:	e036      	b.n	8000a74 <vTaskReceivedData+0x1fc>
				}
				case TENSO_CALIBRATION_COMMAND: {
					HX711_Calibration(command_mode->arg, HX711_Average_Value(10));
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	885b      	ldrh	r3, [r3, #2]
 8000a0a:	461c      	mov	r4, r3
 8000a0c:	200a      	movs	r0, #10
 8000a0e:	f001 fca3 	bl	8002358 <HX711_Average_Value>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4619      	mov	r1, r3
 8000a16:	4620      	mov	r0, r4
 8000a18:	f001 fd24 	bl	8002464 <HX711_Calibration>
				    HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	4833      	ldr	r0, [pc, #204]	; (8000aec <vTaskReceivedData+0x274>)
 8000a20:	f004 f8e9 	bl	8004bf6 <HAL_GPIO_TogglePin>
					break;
 8000a24:	e026      	b.n	8000a74 <vTaskReceivedData+0x1fc>
				}
				case PAUSE: {

					// zatrzymuje pomiar z czujnikow, silnik jedzie dalej

					HAL_ADC_Stop_DMA(&hadc1);
 8000a26:	4829      	ldr	r0, [pc, #164]	; (8000acc <vTaskReceivedData+0x254>)
 8000a28:	f001 ff20 	bl	800286c <HAL_ADC_Stop_DMA>
					HAL_TIM_Base_Stop(&htim2);
 8000a2c:	4826      	ldr	r0, [pc, #152]	; (8000ac8 <vTaskReceivedData+0x250>)
 8000a2e:	f005 fd5d 	bl	80064ec <HAL_TIM_Base_Stop>

					HAL_TIM_Base_Stop_IT(&htim9);
 8000a32:	4824      	ldr	r0, [pc, #144]	; (8000ac4 <vTaskReceivedData+0x24c>)
 8000a34:	f005 fdb0 	bl	8006598 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_Base_Stop_IT(&htim11);
 8000a38:	4821      	ldr	r0, [pc, #132]	; (8000ac0 <vTaskReceivedData+0x248>)
 8000a3a:	f005 fdad 	bl	8006598 <HAL_TIM_Base_Stop_IT>

					pausa_time = (HAL_GetTick() - start_ms);
 8000a3e:	f001 fdb5 	bl	80025ac <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <vTaskReceivedData+0x278>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <vTaskReceivedData+0x27c>)
 8000a4c:	6013      	str	r3, [r2, #0]


					break;
 8000a4e:	e011      	b.n	8000a74 <vTaskReceivedData+0x1fc>
				}
				case CONTINUE: {

					HAL_TIM_Base_Start(&htim2); // adc
 8000a50:	481d      	ldr	r0, [pc, #116]	; (8000ac8 <vTaskReceivedData+0x250>)
 8000a52:	f005 fd21 	bl	8006498 <HAL_TIM_Base_Start>
					HAL_ADC_Start_DMA(&hadc1, adcValue, 3);
 8000a56:	2203      	movs	r2, #3
 8000a58:	4927      	ldr	r1, [pc, #156]	; (8000af8 <vTaskReceivedData+0x280>)
 8000a5a:	481c      	ldr	r0, [pc, #112]	; (8000acc <vTaskReceivedData+0x254>)
 8000a5c:	f001 fe18 	bl	8002690 <HAL_ADC_Start_DMA>

					HAL_TIM_Base_Start_IT(&htim11); // send
 8000a60:	4817      	ldr	r0, [pc, #92]	; (8000ac0 <vTaskReceivedData+0x248>)
 8000a62:	f005 fd6f 	bl	8006544 <HAL_TIM_Base_Start_IT>
					HAL_TIM_Base_Start_IT(&htim9); // tenso
 8000a66:	4817      	ldr	r0, [pc, #92]	; (8000ac4 <vTaskReceivedData+0x24c>)
 8000a68:	f005 fd6c 	bl	8006544 <HAL_TIM_Base_Start_IT>


					break;
 8000a6c:	e002      	b.n	8000a74 <vTaskReceivedData+0x1fc>
				}
				default: {

					break;
 8000a6e:	bf00      	nop
 8000a70:	e000      	b.n	8000a74 <vTaskReceivedData+0x1fc>
					break;
 8000a72:	bf00      	nop
				}

				}

				vPortFree(command_mode);
 8000a74:	69b8      	ldr	r0, [r7, #24]
 8000a76:	f00b fd61 	bl	800c53c <vPortFree>
				while ((recv_err = netconn_recv(newconn, &buffer)) == ERR_OK) {
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <vTaskReceivedData+0x240>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f107 0214 	add.w	r2, r7, #20
 8000a82:	4611      	mov	r1, r2
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00c f8e1 	bl	800cc4c <netconn_recv>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	77fb      	strb	r3, [r7, #31]
 8000a8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f43f af26 	beq.w	80008e4 <vTaskReceivedData+0x6c>

				}

				netconn_close(newconn);
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <vTaskReceivedData+0x240>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f00c f9f5 	bl	800ce8c <netconn_close>
				netconn_delete(newconn);
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <vTaskReceivedData+0x240>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f00b fef8 	bl	800c89c <netconn_delete>
		accept_err = netconn_accept(conn, &newconn);
 8000aac:	e70a      	b.n	80008c4 <vTaskReceivedData+0x4c>
 8000aae:	bf00      	nop
 8000ab0:	2000f084 	.word	0x2000f084
 8000ab4:	2000f234 	.word	0x2000f234
 8000ab8:	2000f2b0 	.word	0x2000f2b0
 8000abc:	2000f2b4 	.word	0x2000f2b4
 8000ac0:	2000f958 	.word	0x2000f958
 8000ac4:	2000f9f8 	.word	0x2000f9f8
 8000ac8:	2000fa38 	.word	0x2000fa38
 8000acc:	2000f910 	.word	0x2000f910
 8000ad0:	2000f235 	.word	0x2000f235
 8000ad4:	2000f38c 	.word	0x2000f38c
 8000ad8:	2000f08c 	.word	0x2000f08c
 8000adc:	2000f1c8 	.word	0x2000f1c8
 8000ae0:	2000f1de 	.word	0x2000f1de
 8000ae4:	2000f190 	.word	0x2000f190
 8000ae8:	0801d6d8 	.word	0x0801d6d8
 8000aec:	40020400 	.word	0x40020400
 8000af0:	2000021c 	.word	0x2000021c
 8000af4:	20000218 	.word	0x20000218
 8000af8:	2000f2b8 	.word	0x2000f2b8

08000afc <vTaskTenso>:


/*
 * Odbior i odczyt danych z tensometru
 */
void vTaskTenso(void *p){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]

	uint32_t ulNotifiedValue = 0x0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
	int tensor;

	while(1){


		if( xTaskNotifyWait( 0xFFFFFFFF, 0, &ulNotifiedValue, portMAX_DELAY) == pdTRUE ){
 8000b08:	f107 020c 	add.w	r2, r7, #12
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	2100      	movs	r1, #0
 8000b12:	f04f 30ff 	mov.w	r0, #4294967295
 8000b16:	f00b f861 	bl	800bbdc <xTaskNotifyWait>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d1f3      	bne.n	8000b08 <vTaskTenso+0xc>


			if (xSemaphoreTake(xMutexSensValue, portMAX_DELAY) == 1) {
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <vTaskTenso+0x5c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f009 fbe1 	bl	800a2f0 <xQueueSemaphoreTake>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d1e9      	bne.n	8000b08 <vTaskTenso+0xc>

				sens_value.tenso_value = HX711_Value_Gram();
 8000b34:	f001 fcd0 	bl	80024d8 <HX711_Value_Gram>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <vTaskTenso+0x60>)
 8000b3c:	635a      	str	r2, [r3, #52]	; 0x34

				HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <vTaskTenso+0x64>)
 8000b42:	f004 f858 	bl	8004bf6 <HAL_GPIO_TogglePin>

				xSemaphoreGive(xMutexSensValue);
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <vTaskTenso+0x5c>)
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	f009 f834 	bl	8009bbc <xQueueGenericSend>
		if( xTaskNotifyWait( 0xFFFFFFFF, 0, &ulNotifiedValue, portMAX_DELAY) == pdTRUE ){
 8000b54:	e7d8      	b.n	8000b08 <vTaskTenso+0xc>
 8000b56:	bf00      	nop
 8000b58:	2000f08c 	.word	0x2000f08c
 8000b5c:	2000f190 	.word	0x2000f190
 8000b60:	40020400 	.word	0x40020400

08000b64 <HAL_ADC_ConvCpltCallback>:

//	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) // tim2 trigger adc1 with 10000 Hz
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	BaseType_t checkIfYieldRequired = pdFALSE, xResult;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]

	count_adc++;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_ADC_ConvCpltCallback+0x24>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_ADC_ConvCpltCallback+0x24>)
 8000b78:	6013      	str	r3, [r2, #0]
//		count_adc = 0;
//
//		configASSERT(xResult == pdPASS);
//		portYIELD_FROM_ISR(checkIfYieldRequired);
//	}
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000214 	.word	0x20000214

08000b8c <extract_arg>:
	float value = (float)((part1<<8)|part0);
	value /=10;
	return value;
}

void extract_arg(CMD_MODE_t *cmd, char * received_command){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]

	char argument[10];

	memset(argument, '\0', sizeof(argument));
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	220a      	movs	r2, #10
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f019 fc6a 	bl	801a478 <memset>
	uint8_t i = 1; uint8_t j = 0;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	75fb      	strb	r3, [r7, #23]
 8000ba8:	2300      	movs	r3, #0
 8000baa:	75bb      	strb	r3, [r7, #22]
	while( received_command[i] != '|') {
 8000bac:	e00f      	b.n	8000bce <extract_arg+0x42>

		argument[j] = received_command[i];
 8000bae:	7dfb      	ldrb	r3, [r7, #23]
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	441a      	add	r2, r3
 8000bb4:	7dbb      	ldrb	r3, [r7, #22]
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	f107 0118 	add.w	r1, r7, #24
 8000bbc:	440b      	add	r3, r1
 8000bbe:	f803 2c0c 	strb.w	r2, [r3, #-12]
		j++;
 8000bc2:	7dbb      	ldrb	r3, [r7, #22]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	75bb      	strb	r3, [r7, #22]
		i++;
 8000bc8:	7dfb      	ldrb	r3, [r7, #23]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	75fb      	strb	r3, [r7, #23]
	while( received_command[i] != '|') {
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b7c      	cmp	r3, #124	; 0x7c
 8000bd8:	d1e9      	bne.n	8000bae <extract_arg+0x22>

	}
	argument[j] = '\0';
 8000bda:	7dbb      	ldrb	r3, [r7, #22]
 8000bdc:	f107 0218 	add.w	r2, r7, #24
 8000be0:	4413      	add	r3, r2
 8000be2:	2200      	movs	r2, #0
 8000be4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	sscanf(argument, "%d", (int*)&((cmd->num))); // numer komendy
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4968      	ldr	r1, [pc, #416]	; (8000d90 <extract_arg+0x204>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f01a f975 	bl	801aee0 <siscanf>

	memset(argument, '\0', sizeof(argument));
 8000bf6:	f107 030c 	add.w	r3, r7, #12
 8000bfa:	220a      	movs	r2, #10
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f019 fc3a 	bl	801a478 <memset>
	j = 0; i++;
 8000c04:	2300      	movs	r3, #0
 8000c06:	75bb      	strb	r3, [r7, #22]
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	75fb      	strb	r3, [r7, #23]
	while (received_command[i] != '|') {
 8000c0e:	e00f      	b.n	8000c30 <extract_arg+0xa4>

		argument[j] = received_command[i];
 8000c10:	7dfb      	ldrb	r3, [r7, #23]
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	441a      	add	r2, r3
 8000c16:	7dbb      	ldrb	r3, [r7, #22]
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	f107 0118 	add.w	r1, r7, #24
 8000c1e:	440b      	add	r3, r1
 8000c20:	f803 2c0c 	strb.w	r2, [r3, #-12]
		j++;
 8000c24:	7dbb      	ldrb	r3, [r7, #22]
 8000c26:	3301      	adds	r3, #1
 8000c28:	75bb      	strb	r3, [r7, #22]
		i++;
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	75fb      	strb	r3, [r7, #23]
	while (received_command[i] != '|') {
 8000c30:	7dfb      	ldrb	r3, [r7, #23]
 8000c32:	683a      	ldr	r2, [r7, #0]
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b7c      	cmp	r3, #124	; 0x7c
 8000c3a:	d1e9      	bne.n	8000c10 <extract_arg+0x84>

	}
	argument[j] = '\0';
 8000c3c:	7dbb      	ldrb	r3, [r7, #22]
 8000c3e:	f107 0218 	add.w	r2, r7, #24
 8000c42:	4413      	add	r3, r2
 8000c44:	2200      	movs	r2, #0
 8000c46:	f803 2c0c 	strb.w	r2, [r3, #-12]
	sscanf(argument, "%d", (int*)&(cmd->arg)); // duty lub tenso kalibracja
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	1c9a      	adds	r2, r3, #2
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	494f      	ldr	r1, [pc, #316]	; (8000d90 <extract_arg+0x204>)
 8000c54:	4618      	mov	r0, r3
 8000c56:	f01a f943 	bl	801aee0 <siscanf>

	memset(argument, '\0', sizeof(argument));
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	220a      	movs	r2, #10
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f019 fc08 	bl	801a478 <memset>
	j = 0; i++;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	75bb      	strb	r3, [r7, #22]
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	75fb      	strb	r3, [r7, #23]
	while (received_command[i] != '|') {
 8000c72:	e00f      	b.n	8000c94 <extract_arg+0x108>

		argument[j] = received_command[i];
 8000c74:	7dfb      	ldrb	r3, [r7, #23]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	441a      	add	r2, r3
 8000c7a:	7dbb      	ldrb	r3, [r7, #22]
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	f107 0118 	add.w	r1, r7, #24
 8000c82:	440b      	add	r3, r1
 8000c84:	f803 2c0c 	strb.w	r2, [r3, #-12]
		j++;
 8000c88:	7dbb      	ldrb	r3, [r7, #22]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	75bb      	strb	r3, [r7, #22]
		i++;
 8000c8e:	7dfb      	ldrb	r3, [r7, #23]
 8000c90:	3301      	adds	r3, #1
 8000c92:	75fb      	strb	r3, [r7, #23]
	while (received_command[i] != '|') {
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
 8000c96:	683a      	ldr	r2, [r7, #0]
 8000c98:	4413      	add	r3, r2
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b7c      	cmp	r3, #124	; 0x7c
 8000c9e:	d1e9      	bne.n	8000c74 <extract_arg+0xe8>

	}
	argument[j] = '\0';
 8000ca0:	7dbb      	ldrb	r3, [r7, #22]
 8000ca2:	f107 0218 	add.w	r2, r7, #24
 8000ca6:	4413      	add	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f803 2c0c 	strb.w	r2, [r3, #-12]
	sscanf(argument, "%d", (int*)&(cmd->rise_time)); // rise time
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	1d1a      	adds	r2, r3, #4
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	4936      	ldr	r1, [pc, #216]	; (8000d90 <extract_arg+0x204>)
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f01a f911 	bl	801aee0 <siscanf>

	memset(argument, '\0', sizeof(argument));
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	220a      	movs	r2, #10
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f019 fbd6 	bl	801a478 <memset>
	j = 0; i++;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	75bb      	strb	r3, [r7, #22]
 8000cd0:	7dfb      	ldrb	r3, [r7, #23]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	75fb      	strb	r3, [r7, #23]
	while (received_command[i] != '|') {
 8000cd6:	e00f      	b.n	8000cf8 <extract_arg+0x16c>

		argument[j] = received_command[i];
 8000cd8:	7dfb      	ldrb	r3, [r7, #23]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	441a      	add	r2, r3
 8000cde:	7dbb      	ldrb	r3, [r7, #22]
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	f107 0118 	add.w	r1, r7, #24
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f803 2c0c 	strb.w	r2, [r3, #-12]
		j++;
 8000cec:	7dbb      	ldrb	r3, [r7, #22]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	75bb      	strb	r3, [r7, #22]
		i++;
 8000cf2:	7dfb      	ldrb	r3, [r7, #23]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	75fb      	strb	r3, [r7, #23]
	while (received_command[i] != '|') {
 8000cf8:	7dfb      	ldrb	r3, [r7, #23]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b7c      	cmp	r3, #124	; 0x7c
 8000d02:	d1e9      	bne.n	8000cd8 <extract_arg+0x14c>

	}
	argument[j] = '\0';
 8000d04:	7dbb      	ldrb	r3, [r7, #22]
 8000d06:	f107 0218 	add.w	r2, r7, #24
 8000d0a:	4413      	add	r3, r2
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	sscanf(argument, "%d", (int*)&(cmd->stay_time)); // stay time
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	1d9a      	adds	r2, r3, #6
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	491d      	ldr	r1, [pc, #116]	; (8000d90 <extract_arg+0x204>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f01a f8df 	bl	801aee0 <siscanf>

	memset(argument, '\0', sizeof(argument));
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	220a      	movs	r2, #10
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f019 fba4 	bl	801a478 <memset>
	j = 0; i++;
 8000d30:	2300      	movs	r3, #0
 8000d32:	75bb      	strb	r3, [r7, #22]
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	3301      	adds	r3, #1
 8000d38:	75fb      	strb	r3, [r7, #23]
	while (received_command[i] != ']') {
 8000d3a:	e00f      	b.n	8000d5c <extract_arg+0x1d0>

		argument[j] = received_command[i];
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	683a      	ldr	r2, [r7, #0]
 8000d40:	441a      	add	r2, r3
 8000d42:	7dbb      	ldrb	r3, [r7, #22]
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	f107 0118 	add.w	r1, r7, #24
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		j++;
 8000d50:	7dbb      	ldrb	r3, [r7, #22]
 8000d52:	3301      	adds	r3, #1
 8000d54:	75bb      	strb	r3, [r7, #22]
		i++;
 8000d56:	7dfb      	ldrb	r3, [r7, #23]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	75fb      	strb	r3, [r7, #23]
	while (received_command[i] != ']') {
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b5d      	cmp	r3, #93	; 0x5d
 8000d66:	d1e9      	bne.n	8000d3c <extract_arg+0x1b0>

	}
	argument[j] = '\0';
 8000d68:	7dbb      	ldrb	r3, [r7, #22]
 8000d6a:	f107 0218 	add.w	r2, r7, #24
 8000d6e:	4413      	add	r3, r2
 8000d70:	2200      	movs	r2, #0
 8000d72:	f803 2c0c 	strb.w	r2, [r3, #-12]
	sscanf(argument, "%d", (int*)&(cmd->fall_time)); // fall time
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f103 0208 	add.w	r2, r3, #8
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4903      	ldr	r1, [pc, #12]	; (8000d90 <extract_arg+0x204>)
 8000d82:	4618      	mov	r0, r3
 8000d84:	f01a f8ac 	bl	801aee0 <siscanf>

}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	0801d754 	.word	0x0801d754

08000d94 <get_time>:
	char msg_to_send[100];
	sprintf(msg_to_send, "%s\r\n", msg);
	HAL_UART_Transmit(&huart3, (uint8_t *) msg_to_send, strlen(msg_to_send), HAL_MAX_DELAY);
}

char * get_time(uint32_t start_ms){
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	6078      	str	r0, [r7, #4]
	uint16_t min, sec, milisec;
	uint32_t sys_tick_ms = HAL_GetTick() - start_ms;
 8000d9c:	f001 fc06 	bl	80025ac <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]


	milisec = sys_tick_ms % 1000;
 8000da8:	697a      	ldr	r2, [r7, #20]
 8000daa:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <get_time+0x88>)
 8000dac:	fba3 1302 	umull	r1, r3, r3, r2
 8000db0:	099b      	lsrs	r3, r3, #6
 8000db2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000db6:	fb01 f303 	mul.w	r3, r1, r3
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	827b      	strh	r3, [r7, #18]
	sec = (sys_tick_ms / 1000);
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <get_time+0x88>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	099b      	lsrs	r3, r3, #6
 8000dc8:	823b      	strh	r3, [r7, #16]
	min = sec / 60;
 8000dca:	8a3b      	ldrh	r3, [r7, #16]
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <get_time+0x8c>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	81fb      	strh	r3, [r7, #14]
	sec = (sys_tick_ms / 1000) % 60;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <get_time+0x88>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	0999      	lsrs	r1, r3, #6
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <get_time+0x8c>)
 8000de2:	fba3 2301 	umull	r2, r3, r3, r1
 8000de6:	095a      	lsrs	r2, r3, #5
 8000de8:	4613      	mov	r3, r2
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	1a9b      	subs	r3, r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	1aca      	subs	r2, r1, r3
 8000df2:	4613      	mov	r3, r2
 8000df4:	823b      	strh	r3, [r7, #16]

	strncpy(current_time, "", sizeof(current_time));
 8000df6:	2228      	movs	r2, #40	; 0x28
 8000df8:	490a      	ldr	r1, [pc, #40]	; (8000e24 <get_time+0x90>)
 8000dfa:	480b      	ldr	r0, [pc, #44]	; (8000e28 <get_time+0x94>)
 8000dfc:	f01a f8df 	bl	801afbe <strncpy>
	sprintf(current_time, "%d|%d|%d", min, sec, milisec);
 8000e00:	89fa      	ldrh	r2, [r7, #14]
 8000e02:	8a39      	ldrh	r1, [r7, #16]
 8000e04:	8a7b      	ldrh	r3, [r7, #18]
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <get_time+0x98>)
 8000e0c:	4806      	ldr	r0, [pc, #24]	; (8000e28 <get_time+0x94>)
 8000e0e:	f01a f847 	bl	801aea0 <siprintf>
	return current_time;
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <get_time+0x94>)
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	10624dd3 	.word	0x10624dd3
 8000e20:	88888889 	.word	0x88888889
 8000e24:	0801d6d8 	.word	0x0801d6d8
 8000e28:	2000f164 	.word	0x2000f164
 8000e2c:	0801d760 	.word	0x0801d760

08000e30 <empty_table>:
		tab_bufor[i] = tab[i];
	}

}

void empty_table(uint16_t tab[], uint8_t table_len){
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]

	for(int i = 0; i < table_len; i++){
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	e008      	b.n	8000e54 <empty_table+0x24>
		tab[i] = 0;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < table_len; i++){
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3301      	adds	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	78fb      	ldrb	r3, [r7, #3]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbf2      	blt.n	8000e42 <empty_table+0x12>
	}

}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <vApplicationGetIdleTaskMemory+0x30>)
 8000e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000220 	.word	0x20000220
 8000e98:	20000274 	.word	0x20000274

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b5b0      	push	{r4, r5, r7, lr}
 8000e9e:	b08a      	sub	sp, #40	; 0x28
 8000ea0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  DWT->CTRL |= (1 << 0);
 8000ea2:	4b3a      	ldr	r3, [pc, #232]	; (8000f8c <main+0xf0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a39      	ldr	r2, [pc, #228]	; (8000f8c <main+0xf0>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6013      	str	r3, [r2, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f001 fb5c 	bl	800256a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f889 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 fbd9 	bl	800166c <MX_GPIO_Init>
  MX_DMA_Init();
 8000eba:	f000 fb8d 	bl	80015d8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000ebe:	f000 fb2d 	bl	800151c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ec2:	f000 fb5b 	bl	800157c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000ec6:	f000 f917 	bl	80010f8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000eca:	f000 f9bb 	bl	8001244 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000ece:	f000 fa07 	bl	80012e0 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000ed2:	f000 fa95 	bl	8001400 <MX_TIM9_Init>
  MX_TIM11_Init();
 8000ed6:	f000 facd 	bl	8001474 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000eda:	f000 faef 	bl	80014bc <MX_USART2_UART_Init>
  MX_LWIP_Init();
 8000ede:	f007 fc7b 	bl	80087d8 <MX_LWIP_Init>
  MX_SPI2_Init();
 8000ee2:	f000 f977 	bl	80011d4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

//  HAL_SPI_Receive_DMA(&hspi2, sensor_data, 4);
  HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000ee6:	2180      	movs	r1, #128	; 0x80
 8000ee8:	4829      	ldr	r0, [pc, #164]	; (8000f90 <main+0xf4>)
 8000eea:	f003 fe84 	bl	8004bf6 <HAL_GPIO_TogglePin>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

    xMutexSensValue = xSemaphoreCreateMutex();
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f008 fe30 	bl	8009b54 <xQueueCreateMutex>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <main+0xf8>)
 8000ef8:	601a      	str	r2, [r3, #0]
    xSemaphoreGive(xMutexSensValue);
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <main+0xf8>)
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	2300      	movs	r3, #0
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	f008 fe5a 	bl	8009bbc <xQueueGenericSend>
    xMutexBLDC = xSemaphoreCreateMutex();
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f008 fe23 	bl	8009b54 <xQueueCreateMutex>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <main+0xfc>)
 8000f12:	601a      	str	r2, [r3, #0]
    xSemaphoreGive(xMutexBLDC);
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <main+0xfc>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	f008 fe4d 	bl	8009bbc <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <main+0x100>)
 8000f24:	1d3c      	adds	r4, r7, #4
 8000f26:	461d      	mov	r5, r3
 8000f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f008 f911 	bl	8009160 <osThreadCreate>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <main+0x104>)
 8000f42:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

    xTaskCreate(vTaskSendData, "Task-Send", 500, NULL, 3, &xTaskSendDataHandle);
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <main+0x108>)
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	2303      	movs	r3, #3
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f52:	4915      	ldr	r1, [pc, #84]	; (8000fa8 <main+0x10c>)
 8000f54:	4815      	ldr	r0, [pc, #84]	; (8000fac <main+0x110>)
 8000f56:	f009 fdcc 	bl	800aaf2 <xTaskCreate>

    xTaskCreate(vTaskTenso, "Task-Tenso", 500, NULL, 4, &xTaskTensoHandle);
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <main+0x114>)
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	2304      	movs	r3, #4
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2300      	movs	r3, #0
 8000f64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f68:	4912      	ldr	r1, [pc, #72]	; (8000fb4 <main+0x118>)
 8000f6a:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <main+0x11c>)
 8000f6c:	f009 fdc1 	bl	800aaf2 <xTaskCreate>

//    xTaskCreate(vTaskTempF4UART, "Task-Temp", 500, NULL, 3, &xTaskTempF4UARTHandle);

    xTaskCreate(vTaskReceivedData, "Task-Received", 500, NULL, 3, &xTaskReceivedDataHandle);
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <main+0x120>)
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	2303      	movs	r3, #3
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f7e:	4910      	ldr	r1, [pc, #64]	; (8000fc0 <main+0x124>)
 8000f80:	4810      	ldr	r0, [pc, #64]	; (8000fc4 <main+0x128>)
 8000f82:	f009 fdb6 	bl	800aaf2 <xTaskCreate>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f86:	f008 f8d4 	bl	8009132 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <main+0xee>
 8000f8c:	e0001000 	.word	0xe0001000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	2000f08c 	.word	0x2000f08c
 8000f98:	2000f230 	.word	0x2000f230
 8000f9c:	0801d7ac 	.word	0x0801d7ac
 8000fa0:	2000f2c4 	.word	0x2000f2c4
 8000fa4:	2000f238 	.word	0x2000f238
 8000fa8:	0801d778 	.word	0x0801d778
 8000fac:	080005f1 	.word	0x080005f1
 8000fb0:	2000f090 	.word	0x2000f090
 8000fb4:	0801d784 	.word	0x0801d784
 8000fb8:	08000afd 	.word	0x08000afd
 8000fbc:	2000f088 	.word	0x2000f088
 8000fc0:	0801d790 	.word	0x0801d790
 8000fc4:	08000879 	.word	0x08000879

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b0b8      	sub	sp, #224	; 0xe0
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fd2:	2234      	movs	r2, #52	; 0x34
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f019 fa4e 	bl	801a478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	2290      	movs	r2, #144	; 0x90
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f019 fa3f 	bl	801a478 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000ffa:	f003 ff53 	bl	8004ea4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <SystemClock_Config+0x124>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a3a      	ldr	r2, [pc, #232]	; (80010ec <SystemClock_Config+0x124>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <SystemClock_Config+0x124>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001016:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <SystemClock_Config+0x128>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a35      	ldr	r2, [pc, #212]	; (80010f0 <SystemClock_Config+0x128>)
 800101c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <SystemClock_Config+0x128>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800102e:	2301      	movs	r3, #1
 8001030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001034:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001042:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800104a:	2304      	movs	r3, #4
 800104c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001050:	23d8      	movs	r3, #216	; 0xd8
 8001052:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001056:	2302      	movs	r3, #2
 8001058:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800105c:	2309      	movs	r3, #9
 800105e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001062:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001066:	4618      	mov	r0, r3
 8001068:	f003 ff7c 	bl	8004f64 <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001072:	f000 fc2f 	bl	80018d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001076:	f003 ff25 	bl	8004ec4 <HAL_PWREx_EnableOverDrive>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001080:	f000 fc28 	bl	80018d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108a:	2302      	movs	r3, #2
 800108c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001096:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800109a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010aa:	2107      	movs	r1, #7
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 f9cb 	bl	8005448 <HAL_RCC_ClockConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80010b8:	f000 fc0c 	bl	80018d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <SystemClock_Config+0x12c>)
 80010be:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 fbde 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80010de:	f000 fbf9 	bl	80018d4 <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	37e0      	adds	r7, #224	; 0xe0
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40007000 	.word	0x40007000
 80010f4:	00200180 	.word	0x00200180

080010f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800110a:	4b30      	ldr	r3, [pc, #192]	; (80011cc <MX_ADC1_Init+0xd4>)
 800110c:	4a30      	ldr	r2, [pc, #192]	; (80011d0 <MX_ADC1_Init+0xd8>)
 800110e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001110:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <MX_ADC1_Init+0xd4>)
 8001112:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001116:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <MX_ADC1_Init+0xd4>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <MX_ADC1_Init+0xd4>)
 8001120:	2201      	movs	r2, #1
 8001122:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <MX_ADC1_Init+0xd4>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_ADC1_Init+0xd4>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_ADC1_Init+0xd4>)
 8001134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001138:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <MX_ADC1_Init+0xd4>)
 800113c:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <MX_ADC1_Init+0xd4>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <MX_ADC1_Init+0xd4>)
 800114a:	2203      	movs	r2, #3
 800114c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_ADC1_Init+0xd4>)
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_ADC1_Init+0xd4>)
 8001158:	2201      	movs	r2, #1
 800115a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115c:	481b      	ldr	r0, [pc, #108]	; (80011cc <MX_ADC1_Init+0xd4>)
 800115e:	f001 fa53 	bl	8002608 <HAL_ADC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001168:	f000 fbb4 	bl	80018d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800116c:	2303      	movs	r3, #3
 800116e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001170:	2301      	movs	r3, #1
 8001172:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001174:	2307      	movs	r3, #7
 8001176:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	4813      	ldr	r0, [pc, #76]	; (80011cc <MX_ADC1_Init+0xd4>)
 800117e:	f001 fbd3 	bl	8002928 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001188:	f000 fba4 	bl	80018d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800118c:	2304      	movs	r3, #4
 800118e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001190:	2302      	movs	r3, #2
 8001192:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	480c      	ldr	r0, [pc, #48]	; (80011cc <MX_ADC1_Init+0xd4>)
 800119a:	f001 fbc5 	bl	8002928 <HAL_ADC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80011a4:	f000 fb96 	bl	80018d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011a8:	2306      	movs	r3, #6
 80011aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011ac:	2303      	movs	r3, #3
 80011ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_ADC1_Init+0xd4>)
 80011b6:	f001 fbb7 	bl	8002928 <HAL_ADC_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80011c0:	f000 fb88 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000f910 	.word	0x2000f910
 80011d0:	40012000 	.word	0x40012000

080011d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_SPI2_Init+0x68>)
 80011da:	4a19      	ldr	r2, [pc, #100]	; (8001240 <MX_SPI2_Init+0x6c>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI2_Init+0x68>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_SPI2_Init+0x68>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI2_Init+0x68>)
 80011ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI2_Init+0x68>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_SPI2_Init+0x68>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI2_Init+0x68>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <MX_SPI2_Init+0x68>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI2_Init+0x68>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_SPI2_Init+0x68>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI2_Init+0x68>)
 8001218:	2207      	movs	r2, #7
 800121a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_SPI2_Init+0x68>)
 800121e:	2200      	movs	r2, #0
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI2_Init+0x68>)
 8001224:	2200      	movs	r2, #0
 8001226:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_SPI2_Init+0x68>)
 800122a:	f004 ff59 	bl	80060e0 <HAL_SPI_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8001234:	f000 fb4e 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000f328 	.word	0x2000f328
 8001240:	40003800 	.word	0x40003800

08001244 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_TIM2_Init+0x98>)
 8001264:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001268:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1079;
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_TIM2_Init+0x98>)
 800126c:	f240 4237 	movw	r2, #1079	; 0x437
 8001270:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_TIM2_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001278:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_TIM2_Init+0x98>)
 800127a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800127e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_TIM2_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_TIM2_Init+0x98>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800128c:	4813      	ldr	r0, [pc, #76]	; (80012dc <MX_TIM2_Init+0x98>)
 800128e:	f005 f8d8 	bl	8006442 <HAL_TIM_Base_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001298:	f000 fb1c 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4619      	mov	r1, r3
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <MX_TIM2_Init+0x98>)
 80012aa:	f005 fcb5 	bl	8006c18 <HAL_TIM_ConfigClockSource>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80012b4:	f000 fb0e 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012b8:	2320      	movs	r3, #32
 80012ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_TIM2_Init+0x98>)
 80012c6:	f006 f947 	bl	8007558 <HAL_TIMEx_MasterConfigSynchronization>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80012d0:	f000 fb00 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000fa38 	.word	0x2000fa38

080012e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b096      	sub	sp, #88	; 0x58
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	222c      	movs	r2, #44	; 0x2c
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f019 f8b3 	bl	801a478 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001312:	4b39      	ldr	r3, [pc, #228]	; (80013f8 <MX_TIM8_Init+0x118>)
 8001314:	4a39      	ldr	r2, [pc, #228]	; (80013fc <MX_TIM8_Init+0x11c>)
 8001316:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 440;
 8001318:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <MX_TIM8_Init+0x118>)
 800131a:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800131e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001320:	4b35      	ldr	r3, [pc, #212]	; (80013f8 <MX_TIM8_Init+0x118>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 8001326:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <MX_TIM8_Init+0x118>)
 8001328:	f242 7210 	movw	r2, #10000	; 0x2710
 800132c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132e:	4b32      	ldr	r3, [pc, #200]	; (80013f8 <MX_TIM8_Init+0x118>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001334:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <MX_TIM8_Init+0x118>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <MX_TIM8_Init+0x118>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001340:	482d      	ldr	r0, [pc, #180]	; (80013f8 <MX_TIM8_Init+0x118>)
 8001342:	f005 f954 	bl	80065ee <HAL_TIM_PWM_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 800134c:	f000 fac2 	bl	80018d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800135c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001360:	4619      	mov	r1, r3
 8001362:	4825      	ldr	r0, [pc, #148]	; (80013f8 <MX_TIM8_Init+0x118>)
 8001364:	f006 f8f8 	bl	8007558 <HAL_TIMEx_MasterConfigSynchronization>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800136e:	f000 fab1 	bl	80018d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001372:	2360      	movs	r3, #96	; 0x60
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137a:	2300      	movs	r3, #0
 800137c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800137e:	2300      	movs	r3, #0
 8001380:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800138e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001392:	2200      	movs	r2, #0
 8001394:	4619      	mov	r1, r3
 8001396:	4818      	ldr	r0, [pc, #96]	; (80013f8 <MX_TIM8_Init+0x118>)
 8001398:	f005 fb26 	bl	80069e8 <HAL_TIM_PWM_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80013a2:	f000 fa97 	bl	80018d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <MX_TIM8_Init+0x118>)
 80013dc:	f006 f918 	bl	8007610 <HAL_TIMEx_ConfigBreakDeadTime>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 80013e6:	f000 fa75 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <MX_TIM8_Init+0x118>)
 80013ec:	f000 fca4 	bl	8001d38 <HAL_TIM_MspPostInit>

}
 80013f0:	bf00      	nop
 80013f2:	3758      	adds	r7, #88	; 0x58
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000f38c 	.word	0x2000f38c
 80013fc:	40010400 	.word	0x40010400

08001400 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	463b      	mov	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_TIM9_Init+0x6c>)
 8001414:	4a16      	ldr	r2, [pc, #88]	; (8001470 <MX_TIM9_Init+0x70>)
 8001416:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2159;
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <MX_TIM9_Init+0x6c>)
 800141a:	f640 026f 	movw	r2, #2159	; 0x86f
 800141e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <MX_TIM9_Init+0x6c>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <MX_TIM9_Init+0x6c>)
 8001428:	f242 720f 	movw	r2, #9999	; 0x270f
 800142c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <MX_TIM9_Init+0x6c>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <MX_TIM9_Init+0x6c>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_TIM9_Init+0x6c>)
 800143c:	f005 f801 	bl	8006442 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8001446:	f000 fa45 	bl	80018d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_TIM9_Init+0x6c>)
 8001456:	f005 fbdf 	bl	8006c18 <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001460:	f000 fa38 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	2000f9f8 	.word	0x2000f9f8
 8001470:	40014000 	.word	0x40014000

08001474 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <MX_TIM11_Init+0x40>)
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <MX_TIM11_Init+0x44>)
 800147c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2159;
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <MX_TIM11_Init+0x40>)
 8001480:	f640 026f 	movw	r2, #2159	; 0x86f
 8001484:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <MX_TIM11_Init+0x40>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <MX_TIM11_Init+0x40>)
 800148e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001492:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <MX_TIM11_Init+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <MX_TIM11_Init+0x40>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014a0:	4804      	ldr	r0, [pc, #16]	; (80014b4 <MX_TIM11_Init+0x40>)
 80014a2:	f004 ffce 	bl	8006442 <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 80014ac:	f000 fa12 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000f958 	.word	0x2000f958
 80014b8:	40014800 	.word	0x40014800

080014bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014c2:	4a15      	ldr	r2, [pc, #84]	; (8001518 <MX_USART2_UART_Init+0x5c>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USART2_UART_Init+0x58>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USART2_UART_Init+0x58>)
 8001500:	f006 f922 	bl	8007748 <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800150a:	f000 f9e3 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000fa78 	.word	0x2000fa78
 8001518:	40004400 	.word	0x40004400

0800151c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_USART3_UART_Init+0x58>)
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <MX_USART3_UART_Init+0x5c>)
 8001524:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_USART3_UART_Init+0x58>)
 8001528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800152c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART3_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_USART3_UART_Init+0x58>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART3_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART3_UART_Init+0x58>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART3_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART3_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART3_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART3_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART3_UART_Init+0x58>)
 8001560:	f006 f8f2 	bl	8007748 <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800156a:	f000 f9b3 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000f3cc 	.word	0x2000f3cc
 8001578:	40004800 	.word	0x40004800

0800157c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001582:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001586:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800158a:	2206      	movs	r2, #6
 800158c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001590:	2202      	movs	r2, #2
 8001592:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800159c:	2202      	movs	r2, #2
 800159e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015c0:	f003 fb34 	bl	8004c2c <HAL_PCD_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80015ca:	f000 f983 	bl	80018d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000f44c 	.word	0x2000f44c

080015d8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <MX_DMA_Init+0x90>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a21      	ldr	r2, [pc, #132]	; (8001668 <MX_DMA_Init+0x90>)
 80015e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <MX_DMA_Init+0x90>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <MX_DMA_Init+0x90>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <MX_DMA_Init+0x90>)
 80015fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <MX_DMA_Init+0x90>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2105      	movs	r1, #5
 8001612:	200c      	movs	r0, #12
 8001614:	f001 fcf0 	bl	8002ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001618:	200c      	movs	r0, #12
 800161a:	f001 fd09 	bl	8003030 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2105      	movs	r1, #5
 8001622:	200f      	movs	r0, #15
 8001624:	f001 fce8 	bl	8002ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001628:	200f      	movs	r0, #15
 800162a:	f001 fd01 	bl	8003030 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2105      	movs	r1, #5
 8001632:	2010      	movs	r0, #16
 8001634:	f001 fce0 	bl	8002ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001638:	2010      	movs	r0, #16
 800163a:	f001 fcf9 	bl	8003030 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2105      	movs	r1, #5
 8001642:	2038      	movs	r0, #56	; 0x38
 8001644:	f001 fcd8 	bl	8002ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001648:	2038      	movs	r0, #56	; 0x38
 800164a:	f001 fcf1 	bl	8003030 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2105      	movs	r1, #5
 8001652:	203a      	movs	r0, #58	; 0x3a
 8001654:	f001 fcd0 	bl	8002ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001658:	203a      	movs	r0, #58	; 0x3a
 800165a:	f001 fce9 	bl	8003030 <HAL_NVIC_EnableIRQ>

}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800

0800166c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08c      	sub	sp, #48	; 0x30
 8001670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001672:	f107 031c 	add.w	r3, r7, #28
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	4b4c      	ldr	r3, [pc, #304]	; (80017b4 <MX_GPIO_Init+0x148>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a4b      	ldr	r2, [pc, #300]	; (80017b4 <MX_GPIO_Init+0x148>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b49      	ldr	r3, [pc, #292]	; (80017b4 <MX_GPIO_Init+0x148>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169a:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <MX_GPIO_Init+0x148>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a45      	ldr	r2, [pc, #276]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b43      	ldr	r3, [pc, #268]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b40      	ldr	r3, [pc, #256]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a3f      	ldr	r2, [pc, #252]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ca:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	4b34      	ldr	r3, [pc, #208]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a33      	ldr	r2, [pc, #204]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016e8:	f043 0308 	orr.w	r3, r3, #8
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016fa:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <MX_GPIO_Init+0x148>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a2d      	ldr	r2, [pc, #180]	; (80017b4 <MX_GPIO_Init+0x148>)
 8001700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <MX_GPIO_Init+0x148>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|gpioSck_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f244 0185 	movw	r1, #16517	; 0x4085
 8001718:	4827      	ldr	r0, [pc, #156]	; (80017b8 <MX_GPIO_Init+0x14c>)
 800171a:	f003 fa53 	bl	8004bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	4826      	ldr	r0, [pc, #152]	; (80017bc <MX_GPIO_Init+0x150>)
 8001724:	f003 fa4e 	bl	8004bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <MX_GPIO_Init+0x154>)
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	4821      	ldr	r0, [pc, #132]	; (80017c4 <MX_GPIO_Init+0x158>)
 800173e:	f003 f87f 	bl	8004840 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin gpioSck_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|gpioSck_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8001742:	f244 0385 	movw	r3, #16517	; 0x4085
 8001746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4619      	mov	r1, r3
 800175a:	4817      	ldr	r0, [pc, #92]	; (80017b8 <MX_GPIO_Init+0x14c>)
 800175c:	f003 f870 	bl	8004840 <HAL_GPIO_Init>

  /*Configure GPIO pin : gpioData_Pin */
  GPIO_InitStruct.Pin = gpioData_Pin;
 8001760:	2302      	movs	r3, #2
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001764:	2300      	movs	r3, #0
 8001766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(gpioData_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4811      	ldr	r0, [pc, #68]	; (80017b8 <MX_GPIO_Init+0x14c>)
 8001774:	f003 f864 	bl	8004840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001778:	2340      	movs	r3, #64	; 0x40
 800177a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	480b      	ldr	r0, [pc, #44]	; (80017bc <MX_GPIO_Init+0x150>)
 8001790:	f003 f856 	bl	8004840 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_GPIO_Init+0x150>)
 80017a8:	f003 f84a 	bl	8004840 <HAL_GPIO_Init>

}
 80017ac:	bf00      	nop
 80017ae:	3730      	adds	r7, #48	; 0x30
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40021800 	.word	0x40021800
 80017c0:	10110000 	.word	0x10110000
 80017c4:	40020800 	.word	0x40020800

080017c8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

      SEGGER_SYSVIEW_Conf();
 80017d0:	f016 ffe6 	bl	80187a0 <SEGGER_SYSVIEW_Conf>
      SEGGER_SYSVIEW_Start();
 80017d4:	f018 f8ae 	bl	8019934 <SEGGER_SYSVIEW_Start>

	  osThreadId id;
	  id = osThreadGetId ();
 80017d8:	f007 fd0e 	bl	80091f8 <osThreadGetId>
 80017dc:	60f8      	str	r0, [r7, #12]
	  osThreadTerminate (id);
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f007 fd11 	bl	8009206 <osThreadTerminate>

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1000);
 80017e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e8:	f007 fd19 	bl	800921e <osDelay>
 80017ec:	e7fa      	b.n	80017e4 <StartDefaultTask+0x1c>
	...

080017f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	BaseType_t checkIfYieldRequired = pdFALSE, xResult;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a2e      	ldr	r2, [pc, #184]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 8001806:	f000 febd 	bl	8002584 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(htim->Instance == TIM9){ // tenso - 10 Hz
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a2c      	ldr	r2, [pc, #176]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d125      	bne.n	8001860 <HAL_TIM_PeriodElapsedCallback+0x70>

 	  	xResult = xTaskNotifyFromISR(xTaskTensoHandle, 0, eNoAction, &checkIfYieldRequired);
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2300      	movs	r3, #0
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	f00a fa3e 	bl	800bca4 <xTaskGenericNotifyFromISR>
 8001828:	6178      	str	r0, [r7, #20]

 	  	configASSERT( xResult == pdPASS );
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d00b      	beq.n	8001848 <HAL_TIM_PeriodElapsedCallback+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001834:	b672      	cpsid	i
 8001836:	f383 8811 	msr	BASEPRI, r3
 800183a:	f3bf 8f6f 	isb	sy
 800183e:	f3bf 8f4f 	dsb	sy
 8001842:	b662      	cpsie	i
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e7fe      	b.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x56>
 		portYIELD_FROM_ISR(checkIfYieldRequired);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d032      	beq.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0xc4>
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f3bf 8f4f 	dsb	sy
 800185a:	f3bf 8f6f 	isb	sy
 	  	configASSERT( xResult == pdPASS );
 		portYIELD_FROM_ISR(checkIfYieldRequired);

   }
  /* USER CODE END Callback 1 */
}
 800185e:	e029      	b.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0xc4>
   }else if(htim->Instance == TIM11){ // send - 1000 Hz
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a19      	ldr	r2, [pc, #100]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d124      	bne.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0xc4>
 	  	xResult = xTaskNotifyFromISR(xTaskSendDataHandle, 0, eNoAction, &checkIfYieldRequired);
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	f00a fa13 	bl	800bca4 <xTaskGenericNotifyFromISR>
 800187e:	6178      	str	r0, [r7, #20]
 	  	configASSERT( xResult == pdPASS );
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d00b      	beq.n	800189e <HAL_TIM_PeriodElapsedCallback+0xae>
 8001886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188a:	b672      	cpsid	i
 800188c:	f383 8811 	msr	BASEPRI, r3
 8001890:	f3bf 8f6f 	isb	sy
 8001894:	f3bf 8f4f 	dsb	sy
 8001898:	b662      	cpsie	i
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e7fe      	b.n	800189c <HAL_TIM_PeriodElapsedCallback+0xac>
 		portYIELD_FROM_ISR(checkIfYieldRequired);
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	f3bf 8f4f 	dsb	sy
 80018b0:	f3bf 8f6f 	isb	sy
}
 80018b4:	bf00      	nop
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40010000 	.word	0x40010000
 80018c0:	40014000 	.word	0x40014000
 80018c4:	2000f090 	.word	0x2000f090
 80018c8:	e000ed04 	.word	0xe000ed04
 80018cc:	40014800 	.word	0x40014800
 80018d0:	2000f238 	.word	0x2000f238

080018d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_MspInit+0x4c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	6413      	str	r3, [r2, #64]	; 0x40
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_MspInit+0x4c>)
 8001908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800190c:	6453      	str	r3, [r2, #68]	; 0x44
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_MspInit+0x4c>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	210f      	movs	r1, #15
 800191e:	f06f 0001 	mvn.w	r0, #1
 8001922:	f001 fb69 	bl	8002ff8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800

08001934 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	; 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2d      	ldr	r2, [pc, #180]	; (8001a08 <HAL_ADC_MspInit+0xd4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d153      	bne.n	80019fe <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_ADC_MspInit+0xd8>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a2c      	ldr	r2, [pc, #176]	; (8001a0c <HAL_ADC_MspInit+0xd8>)
 800195c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_ADC_MspInit+0xd8>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_ADC_MspInit+0xd8>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a26      	ldr	r2, [pc, #152]	; (8001a0c <HAL_ADC_MspInit+0xd8>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_ADC_MspInit+0xd8>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8001986:	2358      	movs	r3, #88	; 0x58
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198a:	2303      	movs	r3, #3
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	481d      	ldr	r0, [pc, #116]	; (8001a10 <HAL_ADC_MspInit+0xdc>)
 800199a:	f002 ff51 	bl	8004840 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019a0:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_ADC_MspInit+0xe4>)
 80019a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b0:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019b6:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019d6:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019e2:	480c      	ldr	r0, [pc, #48]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019e4:	f001 fb32 	bl	800304c <HAL_DMA_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80019ee:	f7ff ff71 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019f6:	639a      	str	r2, [r3, #56]	; 0x38
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_ADC_MspInit+0xe0>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	; 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40012000 	.word	0x40012000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	2000f998 	.word	0x2000f998
 8001a18:	40026410 	.word	0x40026410

08001a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a60      	ldr	r2, [pc, #384]	; (8001bbc <HAL_SPI_MspInit+0x1a0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	f040 80ba 	bne.w	8001bb4 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a40:	4b5f      	ldr	r3, [pc, #380]	; (8001bc0 <HAL_SPI_MspInit+0x1a4>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <HAL_SPI_MspInit+0x1a4>)
 8001a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4c:	4b5c      	ldr	r3, [pc, #368]	; (8001bc0 <HAL_SPI_MspInit+0x1a4>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <HAL_SPI_MspInit+0x1a4>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_SPI_MspInit+0x1a4>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	6313      	str	r3, [r2, #48]	; 0x30
 8001a64:	4b56      	ldr	r3, [pc, #344]	; (8001bc0 <HAL_SPI_MspInit+0x1a4>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_SPI_MspInit+0x1a4>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_SPI_MspInit+0x1a4>)
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7c:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_SPI_MspInit+0x1a4>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a88:	230c      	movs	r3, #12
 8001a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a98:	2305      	movs	r3, #5
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4848      	ldr	r0, [pc, #288]	; (8001bc4 <HAL_SPI_MspInit+0x1a8>)
 8001aa4:	f002 fecc 	bl	8004840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001aa8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aba:	2305      	movs	r3, #5
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4840      	ldr	r0, [pc, #256]	; (8001bc8 <HAL_SPI_MspInit+0x1ac>)
 8001ac6:	f002 febb 	bl	8004840 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001aca:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001acc:	4a40      	ldr	r2, [pc, #256]	; (8001bd0 <HAL_SPI_MspInit+0x1b4>)
 8001ace:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_9;
 8001ad0:	4b3e      	ldr	r3, [pc, #248]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001ad2:	f04f 5290 	mov.w	r2, #301989888	; 0x12000000
 8001ad6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ad8:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ade:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ae4:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aea:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aec:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af2:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001af8:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001afe:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b04:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001b06:	2204      	movs	r2, #4
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b0a:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b10:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001b1c:	482b      	ldr	r0, [pc, #172]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001b1e:	f001 fa95 	bl	800304c <HAL_DMA_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8001b28:	f7ff fed4 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a27      	ldr	r2, [pc, #156]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001b30:	659a      	str	r2, [r3, #88]	; 0x58
 8001b32:	4a26      	ldr	r2, [pc, #152]	; (8001bcc <HAL_SPI_MspInit+0x1b0>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b3a:	4a27      	ldr	r2, [pc, #156]	; (8001bd8 <HAL_SPI_MspInit+0x1bc>)
 8001b3c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001b3e:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b46:	2240      	movs	r2, #64	; 0x40
 8001b48:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b56:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b72:	2204      	movs	r2, #4
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b78:	2203      	movs	r2, #3
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b8a:	f001 fa5f 	bl	800304c <HAL_DMA_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_SPI_MspInit+0x17c>
    {
      Error_Handler();
 8001b94:	f7ff fe9e 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
 8001b9e:	4a0d      	ldr	r2, [pc, #52]	; (8001bd4 <HAL_SPI_MspInit+0x1b8>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2105      	movs	r1, #5
 8001ba8:	2024      	movs	r0, #36	; 0x24
 8001baa:	f001 fa25 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bae:	2024      	movs	r0, #36	; 0x24
 8001bb0:	f001 fa3e 	bl	8003030 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40003800 	.word	0x40003800
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	2000f850 	.word	0x2000f850
 8001bd0:	40026028 	.word	0x40026028
 8001bd4:	2000faf8 	.word	0x2000faf8
 8001bd8:	40026070 	.word	0x40026070

08001bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bec:	d114      	bne.n	8001c18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bee:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_TIM_Base_MspInit+0xac>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <HAL_TIM_Base_MspInit+0xac>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <HAL_TIM_Base_MspInit+0xac>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2105      	movs	r1, #5
 8001c0a:	201c      	movs	r0, #28
 8001c0c:	f001 f9f4 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c10:	201c      	movs	r0, #28
 8001c12:	f001 fa0d 	bl	8003030 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001c16:	e032      	b.n	8001c7e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM9)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1b      	ldr	r2, [pc, #108]	; (8001c8c <HAL_TIM_Base_MspInit+0xb0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d114      	bne.n	8001c4c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_TIM_Base_MspInit+0xac>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a18      	ldr	r2, [pc, #96]	; (8001c88 <HAL_TIM_Base_MspInit+0xac>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_TIM_Base_MspInit+0xac>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2105      	movs	r1, #5
 8001c3e:	2018      	movs	r0, #24
 8001c40:	f001 f9da 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001c44:	2018      	movs	r0, #24
 8001c46:	f001 f9f3 	bl	8003030 <HAL_NVIC_EnableIRQ>
}
 8001c4a:	e018      	b.n	8001c7e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM11)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <HAL_TIM_Base_MspInit+0xb4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d113      	bne.n	8001c7e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_TIM_Base_MspInit+0xac>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <HAL_TIM_Base_MspInit+0xac>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c60:	6453      	str	r3, [r2, #68]	; 0x44
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_TIM_Base_MspInit+0xac>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2105      	movs	r1, #5
 8001c72:	201a      	movs	r0, #26
 8001c74:	f001 f9c0 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c78:	201a      	movs	r0, #26
 8001c7a:	f001 f9d9 	bl	8003030 <HAL_NVIC_EnableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40014000 	.word	0x40014000
 8001c90:	40014800 	.word	0x40014800

08001c94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_TIM_PWM_MspInit+0x94>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d13c      	bne.n	8001d20 <HAL_TIM_PWM_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ca6:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_TIM_PWM_MspInit+0x98>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a20      	ldr	r2, [pc, #128]	; (8001d2c <HAL_TIM_PWM_MspInit+0x98>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b1e      	ldr	r3, [pc, #120]	; (8001d2c <HAL_TIM_PWM_MspInit+0x98>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM8 DMA Init */
    /* TIM8_CH1 Init */
    hdma_tim8_ch1.Instance = DMA2_Stream2;
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cc0:	4a1c      	ldr	r2, [pc, #112]	; (8001d34 <HAL_TIM_PWM_MspInit+0xa0>)
 8001cc2:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Channel = DMA_CHANNEL_7;
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cc6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001cca:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cde:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ce6:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cee:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_CIRCULAR;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cf6:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8001d04:	480a      	ldr	r0, [pc, #40]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001d06:	f001 f9a1 	bl	800304c <HAL_DMA_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_TIM_PWM_MspInit+0x80>
    {
      Error_Handler();
 8001d10:	f7ff fde0 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24
 8001d1a:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_TIM_PWM_MspInit+0x9c>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40010400 	.word	0x40010400
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	2000f8b0 	.word	0x2000f8b0
 8001d34:	40026440 	.word	0x40026440

08001d38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a11      	ldr	r2, [pc, #68]	; (8001d9c <HAL_TIM_MspPostInit+0x64>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d11b      	bne.n	8001d92 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_TIM_MspPostInit+0x68>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_TIM_MspPostInit+0x68>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_TIM_MspPostInit+0x68>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d72:	2340      	movs	r3, #64	; 0x40
 8001d74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001d82:	2303      	movs	r3, #3
 8001d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <HAL_TIM_MspPostInit+0x6c>)
 8001d8e:	f002 fd57 	bl	8004840 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001d92:	bf00      	nop
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40010400 	.word	0x40010400
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020800 	.word	0x40020800

08001da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	; 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a4d      	ldr	r2, [pc, #308]	; (8001efc <HAL_UART_MspInit+0x154>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d15e      	bne.n	8001e88 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dca:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a4c      	ldr	r2, [pc, #304]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b4a      	ldr	r3, [pc, #296]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a46      	ldr	r2, [pc, #280]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b44      	ldr	r3, [pc, #272]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001dfa:	2360      	movs	r3, #96	; 0x60
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4619      	mov	r1, r3
 8001e14:	483b      	ldr	r0, [pc, #236]	; (8001f04 <HAL_UART_MspInit+0x15c>)
 8001e16:	f002 fd13 	bl	8004840 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e1c:	4a3b      	ldr	r2, [pc, #236]	; (8001f0c <HAL_UART_MspInit+0x164>)
 8001e1e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e20:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e26:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e28:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e34:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e3a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e3c:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e42:	4b31      	ldr	r3, [pc, #196]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e48:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e54:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e5a:	482b      	ldr	r0, [pc, #172]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e5c:	f001 f8f6 	bl	800304c <HAL_DMA_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001e66:	f7ff fd35 	bl	80018d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a26      	ldr	r2, [pc, #152]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e6e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001e70:	4a25      	ldr	r2, [pc, #148]	; (8001f08 <HAL_UART_MspInit+0x160>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	2026      	movs	r0, #38	; 0x26
 8001e7c:	f001 f8bc 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e80:	2026      	movs	r0, #38	; 0x26
 8001e82:	f001 f8d5 	bl	8003030 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e86:	e035      	b.n	8001ef4 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART3)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a20      	ldr	r2, [pc, #128]	; (8001f10 <HAL_UART_MspInit+0x168>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d130      	bne.n	8001ef4 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a14      	ldr	r2, [pc, #80]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001eb0:	f043 0308 	orr.w	r3, r3, #8
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_UART_MspInit+0x158>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ec2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ed4:	2307      	movs	r3, #7
 8001ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4619      	mov	r1, r3
 8001ede:	4809      	ldr	r0, [pc, #36]	; (8001f04 <HAL_UART_MspInit+0x15c>)
 8001ee0:	f002 fcae 	bl	8004840 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2105      	movs	r1, #5
 8001ee8:	2027      	movs	r0, #39	; 0x27
 8001eea:	f001 f885 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001eee:	2027      	movs	r0, #39	; 0x27
 8001ef0:	f001 f89e 	bl	8003030 <HAL_NVIC_EnableIRQ>
}
 8001ef4:	bf00      	nop
 8001ef6:	3730      	adds	r7, #48	; 0x30
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40004400 	.word	0x40004400
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	2000f2c8 	.word	0x2000f2c8
 8001f0c:	40026088 	.word	0x40026088
 8001f10:	40004800 	.word	0x40004800

08001f14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f34:	d141      	bne.n	8001fba <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_PCD_MspInit+0xb0>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <HAL_PCD_MspInit+0xb0>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <HAL_PCD_MspInit+0xb0>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f60:	230a      	movs	r3, #10
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4817      	ldr	r0, [pc, #92]	; (8001fc8 <HAL_PCD_MspInit+0xb4>)
 8001f6c:	f002 fc68 	bl	8004840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	4810      	ldr	r0, [pc, #64]	; (8001fc8 <HAL_PCD_MspInit+0xb4>)
 8001f86:	f002 fc5b 	bl	8004840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_PCD_MspInit+0xb0>)
 8001f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8e:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <HAL_PCD_MspInit+0xb0>)
 8001f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f94:	6353      	str	r3, [r2, #52]	; 0x34
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_PCD_MspInit+0xb0>)
 8001f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_PCD_MspInit+0xb0>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_PCD_MspInit+0xb0>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_PCD_MspInit+0xb0>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020000 	.word	0x40020000

08001fcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	2019      	movs	r0, #25
 8001fe2:	f001 f809 	bl	8002ff8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001fe6:	2019      	movs	r0, #25
 8001fe8:	f001 f822 	bl	8003030 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_InitTick+0xa0>)
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	4a1e      	ldr	r2, [pc, #120]	; (800206c <HAL_InitTick+0xa0>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_InitTick+0xa0>)
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002004:	f107 0210 	add.w	r2, r7, #16
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f003 fc0e 	bl	8005830 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002014:	f003 fbf8 	bl	8005808 <HAL_RCC_GetPCLK2Freq>
 8002018:	4603      	mov	r3, r0
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002020:	4a13      	ldr	r2, [pc, #76]	; (8002070 <HAL_InitTick+0xa4>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9b      	lsrs	r3, r3, #18
 8002028:	3b01      	subs	r3, #1
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_InitTick+0xa8>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <HAL_InitTick+0xac>)
 8002030:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_InitTick+0xa8>)
 8002034:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002038:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800203a:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <HAL_InitTick+0xa8>)
 800203c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800203e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_InitTick+0xa8>)
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_InitTick+0xa8>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800204c:	4809      	ldr	r0, [pc, #36]	; (8002074 <HAL_InitTick+0xa8>)
 800204e:	f004 f9f8 	bl	8006442 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d104      	bne.n	8002062 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002058:	4806      	ldr	r0, [pc, #24]	; (8002074 <HAL_InitTick+0xa8>)
 800205a:	f004 fa73 	bl	8006544 <HAL_TIM_Base_Start_IT>
 800205e:	4603      	mov	r3, r0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3730      	adds	r7, #48	; 0x30
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	431bde83 	.word	0x431bde83
 8002074:	2000fb58 	.word	0x2000fb58
 8002078:	40010000 	.word	0x40010000

0800207c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800208e:	e7fe      	b.n	800208e <HardFault_Handler+0x4>

08002090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002094:	e7fe      	b.n	8002094 <MemManage_Handler+0x4>

08002096 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002096:	b480      	push	{r7}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800209a:	e7fe      	b.n	800209a <BusFault_Handler+0x4>

0800209c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <UsageFault_Handler+0x4>

080020a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <DMA1_Stream1_IRQHandler+0x10>)
 80020b6:	f001 f969 	bl	800338c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	2000f850 	.word	0x2000f850

080020c4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <DMA1_Stream4_IRQHandler+0x10>)
 80020ca:	f001 f95f 	bl	800338c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000faf8 	.word	0x2000faf8

080020d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80020dc:	4802      	ldr	r0, [pc, #8]	; (80020e8 <DMA1_Stream5_IRQHandler+0x10>)
 80020de:	f001 f955 	bl	800338c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000f2c8 	.word	0x2000f2c8

080020ec <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80020f2:	f004 fb59 	bl	80067a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000f9f8 	.word	0x2000f9f8

08002100 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002106:	f004 fb4f 	bl	80067a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000fb58 	.word	0x2000fb58

08002114 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800211a:	f004 fb45 	bl	80067a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000f958 	.word	0x2000f958

08002128 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <TIM2_IRQHandler+0x10>)
 800212e:	f004 fb3b 	bl	80067a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000fa38 	.word	0x2000fa38

0800213c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <SPI2_IRQHandler+0x10>)
 8002142:	f004 f85f 	bl	8006204 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000f328 	.word	0x2000f328

08002150 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <USART2_IRQHandler+0x10>)
 8002156:	f005 fb45 	bl	80077e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	2000fa78 	.word	0x2000fa78

08002164 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <USART3_IRQHandler+0x10>)
 800216a:	f005 fb3b 	bl	80077e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000f3cc 	.word	0x2000f3cc

08002178 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <DMA2_Stream0_IRQHandler+0x10>)
 800217e:	f001 f905 	bl	800338c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000f998 	.word	0x2000f998

0800218c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <DMA2_Stream2_IRQHandler+0x10>)
 8002192:	f001 f8fb 	bl	800338c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	2000f8b0 	.word	0x2000f8b0

080021a0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <ETH_IRQHandler+0x10>)
 80021a6:	f001 ff3d 	bl	8004024 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200114b4 	.word	0x200114b4

080021b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e00a      	b.n	80021dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021c6:	f3af 8000 	nop.w
 80021ca:	4601      	mov	r1, r0
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	60ba      	str	r2, [r7, #8]
 80021d2:	b2ca      	uxtb	r2, r1
 80021d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3301      	adds	r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	dbf0      	blt.n	80021c6 <_read+0x12>
	}

return len;
 80021e4:	687b      	ldr	r3, [r7, #4]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	e009      	b.n	8002214 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	60ba      	str	r2, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	dbf1      	blt.n	8002200 <_write+0x12>
	}
	return len;
 800221c:	687b      	ldr	r3, [r7, #4]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_close>:

int _close(int file)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
	return -1;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800224e:	605a      	str	r2, [r3, #4]
	return 0;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <_isatty>:

int _isatty(int file)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	return 1;
 8002266:	2301      	movs	r3, #1
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
	return 0;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <_sbrk+0x50>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <_sbrk+0x16>
		heap_end = &end;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <_sbrk+0x50>)
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <_sbrk+0x54>)
 80022a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <_sbrk+0x50>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <_sbrk+0x50>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	466a      	mov	r2, sp
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d905      	bls.n	80022c6 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <_sbrk+0x58>)
 80022bc:	220c      	movs	r2, #12
 80022be:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	e006      	b.n	80022d4 <_sbrk+0x44>
	}

	heap_end += incr;
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <_sbrk+0x50>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <_sbrk+0x50>)
 80022d0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	20000474 	.word	0x20000474
 80022e4:	200164f0 	.word	0x200164f0
 80022e8:	20016440 	.word	0x20016440

080022ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <SystemInit+0x5c>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	4a14      	ldr	r2, [pc, #80]	; (8002348 <SystemInit+0x5c>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <SystemInit+0x60>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a11      	ldr	r2, [pc, #68]	; (800234c <SystemInit+0x60>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <SystemInit+0x60>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <SystemInit+0x60>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	490d      	ldr	r1, [pc, #52]	; (800234c <SystemInit+0x60>)
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <SystemInit+0x64>)
 800231a:	4013      	ands	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <SystemInit+0x60>)
 8002320:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <SystemInit+0x68>)
 8002322:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <SystemInit+0x60>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a08      	ldr	r2, [pc, #32]	; (800234c <SystemInit+0x60>)
 800232a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <SystemInit+0x60>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SystemInit+0x5c>)
 8002338:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800233c:	609a      	str	r2, [r3, #8]
#endif
}
 800233e:	bf00      	nop
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00
 800234c:	40023800 	.word	0x40023800
 8002350:	fef6ffff 	.word	0xfef6ffff
 8002354:	24003010 	.word	0x24003010

08002358 <HX711_Average_Value>:

HX711 data = {0, 0, 0, DATA_GAIN_FACTOR};


int HX711_Average_Value(uint8_t times)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
    int sum = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
    int i = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < times; i++)
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	e008      	b.n	8002382 <HX711_Average_Value+0x2a>
    {
        sum += HX711_Value();
 8002370:	f000 f814 	bl	800239c <HX711_Value>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4413      	add	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < times; i++)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	3301      	adds	r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	429a      	cmp	r2, r3
 8002388:	dbf2      	blt.n	8002370 <HX711_Average_Value+0x18>
    }

    return sum / times;
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HX711_Value>:

int HX711_Value()
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
    int buffer;
    buffer = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]

    while (HAL_GPIO_ReadPin(gpioData_GPIO_Port, gpioData_Pin)==1);
 80023a6:	bf00      	nop
 80023a8:	2102      	movs	r1, #2
 80023aa:	4822      	ldr	r0, [pc, #136]	; (8002434 <HX711_Value+0x98>)
 80023ac:	f002 fbf2 	bl	8004b94 <HAL_GPIO_ReadPin>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d0f8      	beq.n	80023a8 <HX711_Value+0xc>

    uint8_t i;
    for (i = 0; i < 24; i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	70fb      	strb	r3, [r7, #3]
 80023ba:	e019      	b.n	80023f0 <HX711_Value+0x54>
    {
    	HAL_GPIO_WritePin(gpioSck_GPIO_Port, gpioSck_Pin, GPIO_PIN_SET);
 80023bc:	2201      	movs	r2, #1
 80023be:	2104      	movs	r1, #4
 80023c0:	481c      	ldr	r0, [pc, #112]	; (8002434 <HX711_Value+0x98>)
 80023c2:	f002 fbff 	bl	8004bc4 <HAL_GPIO_WritePin>

        buffer = buffer << 1 ;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	607b      	str	r3, [r7, #4]

        if (HAL_GPIO_ReadPin(gpioData_GPIO_Port, gpioData_Pin))
 80023cc:	2102      	movs	r1, #2
 80023ce:	4819      	ldr	r0, [pc, #100]	; (8002434 <HX711_Value+0x98>)
 80023d0:	f002 fbe0 	bl	8004b94 <HAL_GPIO_ReadPin>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HX711_Value+0x44>
        {
            buffer ++;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3301      	adds	r3, #1
 80023de:	607b      	str	r3, [r7, #4]
        }

        HAL_GPIO_WritePin(gpioSck_GPIO_Port, gpioSck_Pin, GPIO_PIN_RESET);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2104      	movs	r1, #4
 80023e4:	4813      	ldr	r0, [pc, #76]	; (8002434 <HX711_Value+0x98>)
 80023e6:	f002 fbed 	bl	8004bc4 <HAL_GPIO_WritePin>
    for (i = 0; i < 24; i++)
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	3301      	adds	r3, #1
 80023ee:	70fb      	strb	r3, [r7, #3]
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	2b17      	cmp	r3, #23
 80023f4:	d9e2      	bls.n	80023bc <HX711_Value+0x20>
    }

    for (i = 0; i < data.gain; i++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	70fb      	strb	r3, [r7, #3]
 80023fa:	e00c      	b.n	8002416 <HX711_Value+0x7a>
    {
    	HAL_GPIO_WritePin(gpioSck_GPIO_Port, gpioSck_Pin, GPIO_PIN_SET);
 80023fc:	2201      	movs	r2, #1
 80023fe:	2104      	movs	r1, #4
 8002400:	480c      	ldr	r0, [pc, #48]	; (8002434 <HX711_Value+0x98>)
 8002402:	f002 fbdf 	bl	8004bc4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(gpioSck_GPIO_Port, gpioSck_Pin, GPIO_PIN_RESET);
 8002406:	2200      	movs	r2, #0
 8002408:	2104      	movs	r1, #4
 800240a:	480a      	ldr	r0, [pc, #40]	; (8002434 <HX711_Value+0x98>)
 800240c:	f002 fbda 	bl	8004bc4 <HAL_GPIO_WritePin>
    for (i = 0; i < data.gain; i++)
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	3301      	adds	r3, #1
 8002414:	70fb      	strb	r3, [r7, #3]
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HX711_Value+0x9c>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	dbed      	blt.n	80023fc <HX711_Value+0x60>
    }

    buffer = buffer ^ 0x800000;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8002426:	607b      	str	r3, [r7, #4]

    return buffer;
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40020400 	.word	0x40020400
 8002438:	20000004 	.word	0x20000004

0800243c <HX711_Tare>:

void HX711_Tare(uint8_t times)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
    int sum = HX711_Average_Value(times);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff85 	bl	8002358 <HX711_Average_Value>
 800244e:	60f8      	str	r0, [r7, #12]
    data.offset = sum;
 8002450:	4a03      	ldr	r2, [pc, #12]	; (8002460 <HX711_Tare+0x24>)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6093      	str	r3, [r2, #8]
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000004 	.word	0x20000004

08002464 <HX711_Calibration>:

void HX711_Calibration(int weight, int value){
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
	data.a = (float)(weight)/(value - data.offset);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HX711_Calibration+0x70>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HX711_Calibration+0x70>)
 800248e:	edc3 7a00 	vstr	s15, [r3]
	data.b = (float)(weight)/(value - data.offset)*data.offset;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HX711_Calibration+0x70>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	ee07 3a90 	vmov	s15, r3
 80024a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HX711_Calibration+0x70>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	ee07 3a90 	vmov	s15, r3
 80024b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c0:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HX711_Calibration+0x70>)
 80024c2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000004 	.word	0x20000004

080024d8 <HX711_Value_Gram>:

int HX711_Value_Gram(){
 80024d8:	b580      	push	{r7, lr}
 80024da:	ed2d 8b02 	vpush	{d8}
 80024de:	af00      	add	r7, sp, #0
	return ((data.a*HX711_Value()) - data.b);
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HX711_Value_Gram+0x3c>)
 80024e2:	ed93 8a00 	vldr	s16, [r3]
 80024e6:	f7ff ff59 	bl	800239c <HX711_Value>
 80024ea:	ee07 0a90 	vmov	s15, r0
 80024ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f2:	ee28 7a27 	vmul.f32	s14, s16, s15
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <HX711_Value_Gram+0x3c>)
 80024f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80024fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002504:	ee17 3a90 	vmov	r3, s15
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	ecbd 8b02 	vpop	{d8}
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000004 	.word	0x20000004

08002518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002550 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800251c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800251e:	e003      	b.n	8002528 <LoopCopyDataInit>

08002520 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002522:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002524:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002526:	3104      	adds	r1, #4

08002528 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002528:	480b      	ldr	r0, [pc, #44]	; (8002558 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800252c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800252e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002530:	d3f6      	bcc.n	8002520 <CopyDataInit>
  ldr  r2, =_sbss
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002534:	e002      	b.n	800253c <LoopFillZerobss>

08002536 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002536:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002538:	f842 3b04 	str.w	r3, [r2], #4

0800253c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800253e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002540:	d3f9      	bcc.n	8002536 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002542:	f7ff fed3 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002546:	f017 ff51 	bl	801a3ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800254a:	f7fe fca7 	bl	8000e9c <main>
  bx  lr    
 800254e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002550:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002554:	08020404 	.word	0x08020404
  ldr  r0, =_sdata
 8002558:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800255c:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8002560:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8002564:	200164f0 	.word	0x200164f0

08002568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002568:	e7fe      	b.n	8002568 <ADC_IRQHandler>

0800256a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256e:	2003      	movs	r0, #3
 8002570:	f000 fd37 	bl	8002fe2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002574:	2000      	movs	r0, #0
 8002576:	f7ff fd29 	bl	8001fcc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800257a:	f7ff f9b3 	bl	80018e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_IncTick+0x20>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_IncTick+0x24>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
 8002594:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <HAL_IncTick+0x24>)
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	20000014 	.word	0x20000014
 80025a8:	2000fb98 	.word	0x2000fb98

080025ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return uwTick;
 80025b0:	4b03      	ldr	r3, [pc, #12]	; (80025c0 <HAL_GetTick+0x14>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	2000fb98 	.word	0x2000fb98

080025c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025cc:	f7ff ffee 	bl	80025ac <HAL_GetTick>
 80025d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d005      	beq.n	80025ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_Delay+0x40>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4413      	add	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ea:	bf00      	nop
 80025ec:	f7ff ffde 	bl	80025ac <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d8f7      	bhi.n	80025ec <HAL_Delay+0x28>
  {
  }
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000014 	.word	0x20000014

08002608 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e031      	b.n	8002682 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff f984 	bl	8001934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 0310 	and.w	r3, r3, #16
 8002642:	2b00      	cmp	r3, #0
 8002644:	d116      	bne.n	8002674 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800264a:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_ADC_Init+0x84>)
 800264c:	4013      	ands	r3, r2
 800264e:	f043 0202 	orr.w	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fa9a 	bl	8002b90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f023 0303 	bic.w	r3, r3, #3
 800266a:	f043 0201 	orr.w	r2, r3, #1
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40
 8002672:	e001      	b.n	8002678 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	ffffeefd 	.word	0xffffeefd

08002690 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Start_DMA+0x1e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e0c7      	b.n	800283e <HAL_ADC_Start_DMA+0x1ae>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d018      	beq.n	80026f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80026d4:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <HAL_ADC_Start_DMA+0x1b8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a5c      	ldr	r2, [pc, #368]	; (800284c <HAL_ADC_Start_DMA+0x1bc>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0c9a      	lsrs	r2, r3, #18
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f9      	bne.n	80026ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	f040 809b 	bne.w	800283c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800270a:	4b51      	ldr	r3, [pc, #324]	; (8002850 <HAL_ADC_Start_DMA+0x1c0>)
 800270c:	4013      	ands	r3, r2
 800270e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800272c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800273c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002740:	d106      	bne.n	8002750 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f023 0206 	bic.w	r2, r3, #6
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
 800274e:	e002      	b.n	8002756 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	4a3c      	ldr	r2, [pc, #240]	; (8002854 <HAL_ADC_Start_DMA+0x1c4>)
 8002764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	4a3b      	ldr	r2, [pc, #236]	; (8002858 <HAL_ADC_Start_DMA+0x1c8>)
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	4a3a      	ldr	r2, [pc, #232]	; (800285c <HAL_ADC_Start_DMA+0x1cc>)
 8002774:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800277e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800278e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800279e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	334c      	adds	r3, #76	; 0x4c
 80027aa:	4619      	mov	r1, r3
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f000 fcfa 	bl	80031a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80027b4:	4b2a      	ldr	r3, [pc, #168]	; (8002860 <HAL_ADC_Start_DMA+0x1d0>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10f      	bne.n	80027e0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d136      	bne.n	800283c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	e02d      	b.n	800283c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <HAL_ADC_Start_DMA+0x1d4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d10e      	bne.n	8002808 <HAL_ADC_Start_DMA+0x178>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d107      	bne.n	8002808 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002806:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_ADC_Start_DMA+0x1d0>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d113      	bne.n	800283c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a13      	ldr	r2, [pc, #76]	; (8002868 <HAL_ADC_Start_DMA+0x1d8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10e      	bne.n	800283c <HAL_ADC_Start_DMA+0x1ac>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800283a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000000 	.word	0x20000000
 800284c:	431bde83 	.word	0x431bde83
 8002850:	fffff8fe 	.word	0xfffff8fe
 8002854:	08002d85 	.word	0x08002d85
 8002858:	08002e3f 	.word	0x08002e3f
 800285c:	08002e5b 	.word	0x08002e5b
 8002860:	40012300 	.word	0x40012300
 8002864:	40012000 	.word	0x40012000
 8002868:	40012200 	.word	0x40012200

0800286c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_ADC_Stop_DMA+0x1a>
 8002882:	2302      	movs	r3, #2
 8002884:	e036      	b.n	80028f4 <HAL_ADC_Stop_DMA+0x88>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d11e      	bne.n	80028ea <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ba:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 fcd1 	bl	8003268 <HAL_DMA_Abort>
 80028c6:	4603      	mov	r3, r0
 80028c8:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80028d8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <HAL_ADC_Stop_DMA+0x90>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	ffffeefe 	.word	0xffffeefe

08002900 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1c>
 8002940:	2302      	movs	r3, #2
 8002942:	e115      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x248>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b09      	cmp	r3, #9
 8002952:	d935      	bls.n	80029c0 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68d9      	ldr	r1, [r3, #12]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	3b1e      	subs	r3, #30
 800296a:	2207      	movs	r2, #7
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43da      	mvns	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	400a      	ands	r2, r1
 8002978:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7f      	ldr	r2, [pc, #508]	; (8002b7c <HAL_ADC_ConfigChannel+0x254>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d10a      	bne.n	800299a <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68d9      	ldr	r1, [r3, #12]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	061a      	lsls	r2, r3, #24
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	e035      	b.n	8002a06 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68d9      	ldr	r1, [r3, #12]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	4618      	mov	r0, r3
 80029ac:	4603      	mov	r3, r0
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4403      	add	r3, r0
 80029b2:	3b1e      	subs	r3, #30
 80029b4:	409a      	lsls	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	e022      	b.n	8002a06 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6919      	ldr	r1, [r3, #16]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	2207      	movs	r2, #7
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	400a      	ands	r2, r1
 80029e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6919      	ldr	r1, [r3, #16]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	4618      	mov	r0, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4403      	add	r3, r0
 80029fc:	409a      	lsls	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d824      	bhi.n	8002a58 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3b05      	subs	r3, #5
 8002a20:	221f      	movs	r2, #31
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	3b05      	subs	r3, #5
 8002a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34
 8002a56:	e04c      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b0c      	cmp	r3, #12
 8002a5e:	d824      	bhi.n	8002aaa <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b23      	subs	r3, #35	; 0x23
 8002a72:	221f      	movs	r2, #31
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43da      	mvns	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	400a      	ands	r2, r1
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	4618      	mov	r0, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b23      	subs	r3, #35	; 0x23
 8002a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa8:	e023      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	3b41      	subs	r3, #65	; 0x41
 8002abc:	221f      	movs	r2, #31
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	400a      	ands	r2, r1
 8002aca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	4618      	mov	r0, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3b41      	subs	r3, #65	; 0x41
 8002ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <HAL_ADC_ConfigChannel+0x258>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d109      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x1e8>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b12      	cmp	r3, #18
 8002b02:	d105      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <HAL_ADC_ConfigChannel+0x25c>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_ADC_ConfigChannel+0x25c>)
 8002b0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b0e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a1a      	ldr	r2, [pc, #104]	; (8002b80 <HAL_ADC_ConfigChannel+0x258>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d125      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x23e>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <HAL_ADC_ConfigChannel+0x254>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <HAL_ADC_ConfigChannel+0x204>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b11      	cmp	r3, #17
 8002b2a:	d11c      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <HAL_ADC_ConfigChannel+0x25c>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <HAL_ADC_ConfigChannel+0x25c>)
 8002b32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b36:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <HAL_ADC_ConfigChannel+0x254>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d111      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_ADC_ConfigChannel+0x260>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a11      	ldr	r2, [pc, #68]	; (8002b8c <HAL_ADC_ConfigChannel+0x264>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	0c9a      	lsrs	r2, r3, #18
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b58:	e002      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f9      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	10000012 	.word	0x10000012
 8002b80:	40012000 	.word	0x40012000
 8002b84:	40012300 	.word	0x40012300
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	431bde83 	.word	0x431bde83

08002b90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b98:	4b78      	ldr	r3, [pc, #480]	; (8002d7c <ADC_Init+0x1ec>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4a77      	ldr	r2, [pc, #476]	; (8002d7c <ADC_Init+0x1ec>)
 8002b9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ba2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ba4:	4b75      	ldr	r3, [pc, #468]	; (8002d7c <ADC_Init+0x1ec>)
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4973      	ldr	r1, [pc, #460]	; (8002d7c <ADC_Init+0x1ec>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	021a      	lsls	r2, r3, #8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6899      	ldr	r1, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <ADC_Init+0x1f0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d022      	beq.n	8002c6a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6899      	ldr	r1, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	e00f      	b.n	8002c8a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0202 	bic.w	r2, r2, #2
 8002c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	005a      	lsls	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01b      	beq.n	8002cf0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	035a      	lsls	r2, r3, #13
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	e007      	b.n	8002d00 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	051a      	lsls	r2, r3, #20
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6899      	ldr	r1, [r3, #8]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d42:	025a      	lsls	r2, r3, #9
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6899      	ldr	r1, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	029a      	lsls	r2, r3, #10
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40012300 	.word	0x40012300
 8002d80:	0f000001 	.word	0x0f000001

08002d84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d13c      	bne.n	8002e18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d12b      	bne.n	8002e10 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d127      	bne.n	8002e10 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d119      	bne.n	8002e10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0220 	bic.w	r2, r2, #32
 8002dea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7fd fea7 	bl	8000b64 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e16:	e00e      	b.n	8002e36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fd75 	bl	8002914 <HAL_ADC_ErrorCallback>
}
 8002e2a:	e004      	b.n	8002e36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff fd57 	bl	8002900 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f043 0204 	orr.w	r2, r3, #4
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff fd4a 	bl	8002914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eb6:	4a04      	ldr	r2, [pc, #16]	; (8002ec8 <__NVIC_SetPriorityGrouping+0x40>)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	60d3      	str	r3, [r2, #12]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000ed00 	.word	0xe000ed00
 8002ecc:	05fa0000 	.word	0x05fa0000

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0b      	blt.n	8002f16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <__NVIC_EnableIRQ+0x38>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	; (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	; (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ff4c 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800300a:	f7ff ff61 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 800300e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	6978      	ldr	r0, [r7, #20]
 8003016:	f7ff ffb1 	bl	8002f7c <NVIC_EncodePriority>
 800301a:	4602      	mov	r2, r0
 800301c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ff80 	bl	8002f28 <__NVIC_SetPriority>
}
 8003028:	bf00      	nop
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff ff54 	bl	8002eec <__NVIC_EnableIRQ>
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003058:	f7ff faa8 	bl	80025ac <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e099      	b.n	800319c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003088:	e00f      	b.n	80030aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800308a:	f7ff fa8f 	bl	80025ac <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b05      	cmp	r3, #5
 8003096:	d908      	bls.n	80030aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2203      	movs	r2, #3
 80030a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e078      	b.n	800319c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e8      	bne.n	800308a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4b38      	ldr	r3, [pc, #224]	; (80031a4 <HAL_DMA_Init+0x158>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	2b04      	cmp	r3, #4
 8003102:	d107      	bne.n	8003114 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	4313      	orrs	r3, r2
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f023 0307 	bic.w	r3, r3, #7
 800312a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b04      	cmp	r3, #4
 800313c:	d117      	bne.n	800316e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fb09 	bl	8003768 <DMA_CheckFifoParam>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d008      	beq.n	800316e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800316a:	2301      	movs	r3, #1
 800316c:	e016      	b.n	800319c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fac0 	bl	80036fc <DMA_CalcBaseAndBitshift>
 800317c:	4603      	mov	r3, r0
 800317e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	223f      	movs	r2, #63	; 0x3f
 8003186:	409a      	lsls	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	e010803f 	.word	0xe010803f

080031a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_DMA_Start_IT+0x26>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e048      	b.n	8003260 <HAL_DMA_Start_IT+0xb8>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d137      	bne.n	8003252 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fa52 	bl	80036a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	223f      	movs	r2, #63	; 0x3f
 8003202:	409a      	lsls	r2, r3
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0216 	orr.w	r2, r2, #22
 8003216:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003226:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0208 	orr.w	r2, r2, #8
 800323e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e005      	b.n	800325e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800325a:	2302      	movs	r3, #2
 800325c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800325e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003276:	f7ff f999 	bl	80025ac <HAL_GetTick>
 800327a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d008      	beq.n	800329a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e052      	b.n	8003340 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0216 	bic.w	r2, r2, #22
 80032a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_DMA_Abort+0x62>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0208 	bic.w	r2, r2, #8
 80032d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ea:	e013      	b.n	8003314 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ec:	f7ff f95e 	bl	80025ac <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d90c      	bls.n	8003314 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2203      	movs	r2, #3
 800330c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e015      	b.n	8003340 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e4      	bne.n	80032ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	223f      	movs	r2, #63	; 0x3f
 8003328:	409a      	lsls	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d004      	beq.n	8003366 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e00c      	b.n	8003380 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2205      	movs	r2, #5
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003398:	4b92      	ldr	r3, [pc, #584]	; (80035e4 <HAL_DMA_IRQHandler+0x258>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a92      	ldr	r2, [pc, #584]	; (80035e8 <HAL_DMA_IRQHandler+0x25c>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	0a9b      	lsrs	r3, r3, #10
 80033a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b6:	2208      	movs	r2, #8
 80033b8:	409a      	lsls	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01a      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0204 	bic.w	r2, r2, #4
 80033de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	2208      	movs	r2, #8
 80033e6:	409a      	lsls	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	2201      	movs	r2, #1
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341a:	2201      	movs	r2, #1
 800341c:	409a      	lsls	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	2204      	movs	r2, #4
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	2204      	movs	r2, #4
 8003452:	409a      	lsls	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	2210      	movs	r2, #16
 800346a:	409a      	lsls	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d043      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d03c      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003486:	2210      	movs	r2, #16
 8003488:	409a      	lsls	r2, r3
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d018      	beq.n	80034ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d108      	bne.n	80034bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d024      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
 80034ba:	e01f      	b.n	80034fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01b      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
 80034cc:	e016      	b.n	80034fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0208 	bic.w	r2, r2, #8
 80034ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	2220      	movs	r2, #32
 8003502:	409a      	lsls	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 808e 	beq.w	800362a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8086 	beq.w	800362a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	2220      	movs	r2, #32
 8003524:	409a      	lsls	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b05      	cmp	r3, #5
 8003534:	d136      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0216 	bic.w	r2, r2, #22
 8003544:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003554:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_DMA_IRQHandler+0x1da>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357a:	223f      	movs	r2, #63	; 0x3f
 800357c:	409a      	lsls	r2, r3
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003596:	2b00      	cmp	r3, #0
 8003598:	d07d      	beq.n	8003696 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
        }
        return;
 80035a2:	e078      	b.n	8003696 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01c      	beq.n	80035ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d108      	bne.n	80035d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d030      	beq.n	800362a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
 80035d0:	e02b      	b.n	800362a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d027      	beq.n	800362a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
 80035e2:	e022      	b.n	800362a <HAL_DMA_IRQHandler+0x29e>
 80035e4:	20000000 	.word	0x20000000
 80035e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10f      	bne.n	800361a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0210 	bic.w	r2, r2, #16
 8003608:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362e:	2b00      	cmp	r3, #0
 8003630:	d032      	beq.n	8003698 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d022      	beq.n	8003684 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2205      	movs	r2, #5
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3301      	adds	r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	429a      	cmp	r2, r3
 8003660:	d307      	bcc.n	8003672 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f2      	bne.n	8003656 <HAL_DMA_IRQHandler+0x2ca>
 8003670:	e000      	b.n	8003674 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003672:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
 8003694:	e000      	b.n	8003698 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003696:	bf00      	nop
    }
  }
}
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop

080036a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d108      	bne.n	80036e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036de:	e007      	b.n	80036f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	3b10      	subs	r3, #16
 800370c:	4a13      	ldr	r2, [pc, #76]	; (800375c <DMA_CalcBaseAndBitshift+0x60>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003716:	4a12      	ldr	r2, [pc, #72]	; (8003760 <DMA_CalcBaseAndBitshift+0x64>)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b03      	cmp	r3, #3
 8003728:	d908      	bls.n	800373c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <DMA_CalcBaseAndBitshift+0x68>)
 8003732:	4013      	ands	r3, r2
 8003734:	1d1a      	adds	r2, r3, #4
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	659a      	str	r2, [r3, #88]	; 0x58
 800373a:	e006      	b.n	800374a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b08      	ldr	r3, [pc, #32]	; (8003764 <DMA_CalcBaseAndBitshift+0x68>)
 8003744:	4013      	ands	r3, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	aaaaaaab 	.word	0xaaaaaaab
 8003760:	0801ffd0 	.word	0x0801ffd0
 8003764:	fffffc00 	.word	0xfffffc00

08003768 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d11f      	bne.n	80037c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d855      	bhi.n	8003834 <DMA_CheckFifoParam+0xcc>
 8003788:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <DMA_CheckFifoParam+0x28>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037b3 	.word	0x080037b3
 8003798:	080037a1 	.word	0x080037a1
 800379c:	08003835 	.word	0x08003835
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d045      	beq.n	8003838 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b0:	e042      	b.n	8003838 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037ba:	d13f      	bne.n	800383c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c0:	e03c      	b.n	800383c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ca:	d121      	bne.n	8003810 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d836      	bhi.n	8003840 <DMA_CheckFifoParam+0xd8>
 80037d2:	a201      	add	r2, pc, #4	; (adr r2, 80037d8 <DMA_CheckFifoParam+0x70>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	080037ef 	.word	0x080037ef
 80037e0:	080037e9 	.word	0x080037e9
 80037e4:	08003801 	.word	0x08003801
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      break;
 80037ec:	e02f      	b.n	800384e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d024      	beq.n	8003844 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fe:	e021      	b.n	8003844 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003808:	d11e      	bne.n	8003848 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800380e:	e01b      	b.n	8003848 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d902      	bls.n	800381c <DMA_CheckFifoParam+0xb4>
 8003816:	2b03      	cmp	r3, #3
 8003818:	d003      	beq.n	8003822 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800381a:	e018      	b.n	800384e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      break;
 8003820:	e015      	b.n	800384e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00e      	beq.n	800384c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
      break;
 8003832:	e00b      	b.n	800384c <DMA_CheckFifoParam+0xe4>
      break;
 8003834:	bf00      	nop
 8003836:	e00a      	b.n	800384e <DMA_CheckFifoParam+0xe6>
      break;
 8003838:	bf00      	nop
 800383a:	e008      	b.n	800384e <DMA_CheckFifoParam+0xe6>
      break;
 800383c:	bf00      	nop
 800383e:	e006      	b.n	800384e <DMA_CheckFifoParam+0xe6>
      break;
 8003840:	bf00      	nop
 8003842:	e004      	b.n	800384e <DMA_CheckFifoParam+0xe6>
      break;
 8003844:	bf00      	nop
 8003846:	e002      	b.n	800384e <DMA_CheckFifoParam+0xe6>
      break;   
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <DMA_CheckFifoParam+0xe6>
      break;
 800384c:	bf00      	nop
    }
  } 
  
  return status; 
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800386c:	4ba9      	ldr	r3, [pc, #676]	; (8003b14 <HAL_ETH_Init+0x2b8>)
 800386e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e183      	b.n	8003b8a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f005 f8cc 	bl	8008a34 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389c:	4b9e      	ldr	r3, [pc, #632]	; (8003b18 <HAL_ETH_Init+0x2bc>)
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	4a9d      	ldr	r2, [pc, #628]	; (8003b18 <HAL_ETH_Init+0x2bc>)
 80038a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a6:	6453      	str	r3, [r2, #68]	; 0x44
 80038a8:	4b9b      	ldr	r3, [pc, #620]	; (8003b18 <HAL_ETH_Init+0x2bc>)
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80038b4:	4b99      	ldr	r3, [pc, #612]	; (8003b1c <HAL_ETH_Init+0x2c0>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4a98      	ldr	r2, [pc, #608]	; (8003b1c <HAL_ETH_Init+0x2c0>)
 80038ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038be:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80038c0:	4b96      	ldr	r3, [pc, #600]	; (8003b1c <HAL_ETH_Init+0x2c0>)
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	4994      	ldr	r1, [pc, #592]	; (8003b1c <HAL_ETH_Init+0x2c0>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 0201 	orr.w	r2, r2, #1
 80038e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038e4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80038e6:	f7fe fe61 	bl	80025ac <HAL_GetTick>
 80038ea:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80038ec:	e011      	b.n	8003912 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80038ee:	f7fe fe5d 	bl	80025ac <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80038fc:	d909      	bls.n	8003912 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2203      	movs	r2, #3
 8003902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e13b      	b.n	8003b8a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e4      	bne.n	80038ee <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f023 031c 	bic.w	r3, r3, #28
 8003932:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003934:	f001 ff48 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 8003938:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	4a78      	ldr	r2, [pc, #480]	; (8003b20 <HAL_ETH_Init+0x2c4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d908      	bls.n	8003954 <HAL_ETH_Init+0xf8>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	4a77      	ldr	r2, [pc, #476]	; (8003b24 <HAL_ETH_Init+0x2c8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d804      	bhi.n	8003954 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f043 0308 	orr.w	r3, r3, #8
 8003950:	61fb      	str	r3, [r7, #28]
 8003952:	e027      	b.n	80039a4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	4a73      	ldr	r2, [pc, #460]	; (8003b24 <HAL_ETH_Init+0x2c8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d908      	bls.n	800396e <HAL_ETH_Init+0x112>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	4a72      	ldr	r2, [pc, #456]	; (8003b28 <HAL_ETH_Init+0x2cc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d804      	bhi.n	800396e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f043 030c 	orr.w	r3, r3, #12
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	e01a      	b.n	80039a4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	4a6d      	ldr	r2, [pc, #436]	; (8003b28 <HAL_ETH_Init+0x2cc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d903      	bls.n	800397e <HAL_ETH_Init+0x122>
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	4a6c      	ldr	r2, [pc, #432]	; (8003b2c <HAL_ETH_Init+0x2d0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d911      	bls.n	80039a2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	4a6a      	ldr	r2, [pc, #424]	; (8003b2c <HAL_ETH_Init+0x2d0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d908      	bls.n	8003998 <HAL_ETH_Init+0x13c>
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	4a69      	ldr	r2, [pc, #420]	; (8003b30 <HAL_ETH_Init+0x2d4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d804      	bhi.n	8003998 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f043 0304 	orr.w	r3, r3, #4
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	e005      	b.n	80039a4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f043 0310 	orr.w	r3, r3, #16
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	e000      	b.n	80039a4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80039a2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80039ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80039b0:	2100      	movs	r1, #0
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fc19 	bl	80041ea <HAL_ETH_WritePHYRegister>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00b      	beq.n	80039d6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80039c2:	6939      	ldr	r1, [r7, #16]
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fca5 	bl	8004314 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0d9      	b.n	8003b8a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80039d6:	20ff      	movs	r0, #255	; 0xff
 80039d8:	f7fe fdf4 	bl	80025c4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a7 	beq.w	8003b34 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80039e6:	f7fe fde1 	bl	80025ac <HAL_GetTick>
 80039ea:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	461a      	mov	r2, r3
 80039f2:	2101      	movs	r1, #1
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fb90 	bl	800411a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80039fa:	f7fe fdd7 	bl	80025ac <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d90f      	bls.n	8003a2c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003a10:	6939      	ldr	r1, [r7, #16]
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fc7e 	bl	8004314 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e0ae      	b.n	8003b8a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0da      	beq.n	80039ec <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003a36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fbd4 	bl	80041ea <HAL_ETH_WritePHYRegister>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003a4c:	6939      	ldr	r1, [r7, #16]
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fc60 	bl	8004314 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e094      	b.n	8003b8a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a60:	f7fe fda4 	bl	80025ac <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003a66:	f107 030c 	add.w	r3, r7, #12
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fb53 	bl	800411a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003a74:	f7fe fd9a 	bl	80025ac <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d90f      	bls.n	8003aa6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003a8a:	6939      	ldr	r1, [r7, #16]
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fc41 	bl	8004314 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e071      	b.n	8003b8a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0da      	beq.n	8003a66 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	211f      	movs	r1, #31
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fb2e 	bl	800411a <HAL_ETH_ReadPHYRegister>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00b      	beq.n	8003adc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003ac8:	6939      	ldr	r1, [r7, #16]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fc22 	bl	8004314 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e056      	b.n	8003b8a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	e002      	b.n	8003af6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	e037      	b.n	8003b78 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	e032      	b.n	8003b78 <HAL_ETH_Init+0x31c>
 8003b12:	bf00      	nop
 8003b14:	03938700 	.word	0x03938700
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	01312cff 	.word	0x01312cff
 8003b24:	02160ebf 	.word	0x02160ebf
 8003b28:	039386ff 	.word	0x039386ff
 8003b2c:	05f5e0ff 	.word	0x05f5e0ff
 8003b30:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	08db      	lsrs	r3, r3, #3
 8003b3a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	085b      	lsrs	r3, r3, #1
 8003b42:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003b44:	4313      	orrs	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 fb4c 	bl	80041ea <HAL_ETH_WritePHYRegister>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003b5c:	6939      	ldr	r1, [r7, #16]
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 fbd8 	bl	8004314 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e00c      	b.n	8003b8a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003b70:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003b74:	f7fe fd26 	bl	80025c4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003b78:	6939      	ldr	r1, [r7, #16]
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fbca 	bl	8004314 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop

08003b94 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_ETH_DMATxDescListInit+0x20>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e052      	b.n	8003c5a <HAL_ETH_DMATxDescListInit+0xc6>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e030      	b.n	8003c32 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	015b      	lsls	r3, r3, #5
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003be0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003be8:	fb02 f303 	mul.w	r3, r2, r3
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d105      	bne.n	8003c0a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d208      	bcs.n	8003c26 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	3301      	adds	r3, #1
 8003c18:	015b      	lsls	r3, r3, #5
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	461a      	mov	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	60da      	str	r2, [r3, #12]
 8003c24:	e002      	b.n	8003c2c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d3ca      	bcc.n	8003bd0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6819      	ldr	r1, [r3, #0]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	f241 0310 	movw	r3, #4112	; 0x1010
 8003c44:	440b      	add	r3, r1
 8003c46:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b087      	sub	sp, #28
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_ETH_DMARxDescListInit+0x20>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e056      	b.n	8003d34 <HAL_ETH_DMARxDescListInit+0xce>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2202      	movs	r2, #2
 8003c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e034      	b.n	8003d0c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	015b      	lsls	r3, r3, #5
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4413      	add	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cb2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003cba:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4413      	add	r3, r2
 8003cca:	461a      	mov	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d208      	bcs.n	8003d00 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	015b      	lsls	r3, r3, #5
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	e002      	b.n	8003d06 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d3c6      	bcc.n	8003ca2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6819      	ldr	r1, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	f241 030c 	movw	r3, #4108	; 0x100c
 8003d1e:	440b      	add	r3, r1
 8003d20:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_ETH_TransmitFrame+0x24>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e0cd      	b.n	8003f00 <HAL_ETH_TransmitFrame+0x1c0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0b8      	b.n	8003f00 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da09      	bge.n	8003dac <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2212      	movs	r2, #18
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e0a9      	b.n	8003f00 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d915      	bls.n	8003de2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	4a54      	ldr	r2, [pc, #336]	; (8003f0c <HAL_ETH_TransmitFrame+0x1cc>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	0a9b      	lsrs	r3, r3, #10
 8003dc0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	4b51      	ldr	r3, [pc, #324]	; (8003f0c <HAL_ETH_TransmitFrame+0x1cc>)
 8003dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dca:	0a9b      	lsrs	r3, r3, #10
 8003dcc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e001      	b.n	8003de6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d11c      	bne.n	8003e26 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003dfa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003e06:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e16:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e24:	e04b      	b.n	8003ebe <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	e044      	b.n	8003eb6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e3a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003e50:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003e5a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d116      	bne.n	8003e94 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003e74:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4a25      	ldr	r2, [pc, #148]	; (8003f10 <HAL_ETH_TransmitFrame+0x1d0>)
 8003e7a:	fb02 f203 	mul.w	r2, r2, r3
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	4413      	add	r3, r2
 8003e82:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003e86:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003e92:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ea2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d3b6      	bcc.n	8003e2c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	f241 0314 	movw	r3, #4116	; 0x1014
 8003ec6:	4413      	add	r3, r2
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	f241 0314 	movw	r3, #4116	; 0x1014
 8003eda:	4413      	add	r3, r2
 8003edc:	2204      	movs	r2, #4
 8003ede:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	f241 0304 	movw	r3, #4100	; 0x1004
 8003ee8:	4413      	add	r3, r2
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	ac02b00b 	.word	0xac02b00b
 8003f10:	fffffa0c 	.word	0xfffffa0c

08003f14 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e074      	b.n	8004018 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003f3e:	e05a      	b.n	8003ff6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3301      	adds	r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f54:	d10d      	bne.n	8003f72 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003f70:	e041      	b.n	8003ff6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10b      	bne.n	8003f98 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	461a      	mov	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
 8003f96:	e02e      	b.n	8003ff6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d103      	bne.n	8003fba <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003fc6:	1f1a      	subs	r2, r3, #4
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e010      	b.n	8004018 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	db02      	blt.n	8004006 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d99c      	bls.n	8003f40 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	f241 0314 	movw	r3, #4116	; 0x1014
 8004034:	4413      	add	r3, r2
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d112      	bne.n	8004066 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f004 fdb7 	bl	8008bb4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	f241 0314 	movw	r3, #4116	; 0x1014
 800404e:	4413      	add	r3, r2
 8004050:	2240      	movs	r2, #64	; 0x40
 8004052:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004064:	e01b      	b.n	800409e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	f241 0314 	movw	r3, #4116	; 0x1014
 800406e:	4413      	add	r3, r2
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d111      	bne.n	800409e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f839 	bl	80040f2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	f241 0314 	movw	r3, #4116	; 0x1014
 8004088:	4413      	add	r3, r2
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	f241 0314 	movw	r3, #4116	; 0x1014
 80040a6:	4413      	add	r3, r2
 80040a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80040ac:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	f241 0314 	movw	r3, #4116	; 0x1014
 80040b6:	4413      	add	r3, r2
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c2:	d112      	bne.n	80040ea <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f81e 	bl	8004106 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80040d2:	4413      	add	r3, r2
 80040d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80040d8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b086      	sub	sp, #24
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	460b      	mov	r3, r1
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b82      	cmp	r3, #130	; 0x82
 800413a:	d101      	bne.n	8004140 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800413c:	2302      	movs	r3, #2
 800413e:	e050      	b.n	80041e2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2282      	movs	r2, #130	; 0x82
 8004144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f003 031c 	and.w	r3, r3, #28
 8004156:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8a1b      	ldrh	r3, [r3, #16]
 800415c:	02db      	lsls	r3, r3, #11
 800415e:	b29b      	uxth	r3, r3
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004166:	897b      	ldrh	r3, [r7, #10]
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 0302 	bic.w	r3, r3, #2
 800417a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800418c:	f7fe fa0e 	bl	80025ac <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004192:	e015      	b.n	80041c0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004194:	f7fe fa0a 	bl	80025ac <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a2:	d309      	bcc.n	80041b8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e014      	b.n	80041e2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e4      	bne.n	8004194 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	460b      	mov	r3, r1
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b42      	cmp	r3, #66	; 0x42
 800420a:	d101      	bne.n	8004210 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
 800420e:	e04e      	b.n	80042ae <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2242      	movs	r2, #66	; 0x42
 8004214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f003 031c 	and.w	r3, r3, #28
 8004226:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8a1b      	ldrh	r3, [r3, #16]
 800422c:	02db      	lsls	r3, r3, #11
 800422e:	b29b      	uxth	r3, r3
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004236:	897b      	ldrh	r3, [r7, #10]
 8004238:	019b      	lsls	r3, r3, #6
 800423a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f043 0302 	orr.w	r3, r3, #2
 800424a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f043 0301 	orr.w	r3, r3, #1
 8004252:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	b29a      	uxth	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004266:	f7fe f9a1 	bl	80025ac <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800426c:	e015      	b.n	800429a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800426e:	f7fe f99d 	bl	80025ac <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427c:	d309      	bcc.n	8004292 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e00d      	b.n	80042ae <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e4      	bne.n	800426e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_ETH_Start+0x16>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e01f      	b.n	800430c <HAL_ETH_Start+0x56>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 fa1b 	bl	8004718 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fa35 	bl	8004752 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 fa7f 	bl	80047ec <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fa4c 	bl	800478c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fa61 	bl	80047bc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b0b0      	sub	sp, #192	; 0xc0
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004330:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004338:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800433a:	2300      	movs	r3, #0
 800433c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800433e:	2300      	movs	r3, #0
 8004340:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8004342:	2300      	movs	r3, #0
 8004344:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004346:	2300      	movs	r3, #0
 8004348:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800434a:	2300      	movs	r3, #0
 800434c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800434e:	2300      	movs	r3, #0
 8004350:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800435a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800435e:	663b      	str	r3, [r7, #96]	; 0x60
 8004360:	e001      	b.n	8004366 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004362:	2300      	movs	r3, #0
 8004364:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800436a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800436c:	2300      	movs	r3, #0
 800436e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004370:	2300      	movs	r3, #0
 8004372:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004374:	2300      	movs	r3, #0
 8004376:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004378:	2300      	movs	r3, #0
 800437a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800437c:	2300      	movs	r3, #0
 800437e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004380:	2340      	movs	r3, #64	; 0x40
 8004382:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800438a:	2300      	movs	r3, #0
 800438c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004390:	2300      	movs	r3, #0
 8004392:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004396:	2300      	movs	r3, #0
 8004398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80043ba:	2300      	movs	r3, #0
 80043bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80043d8:	2300      	movs	r3, #0
 80043da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80043e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043ec:	4bab      	ldr	r3, [pc, #684]	; (800469c <ETH_MACDMAConfig+0x388>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80043f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80043f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80043f8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80043fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80043fc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80043fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004400:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004406:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800440a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800440c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800440e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004414:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004418:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800441a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800441c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800441e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004420:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004424:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004426:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004428:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800442a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800443c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004448:	2001      	movs	r0, #1
 800444a:	f7fe f8bb 	bl	80025c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004456:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004458:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800445a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800445c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800445e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004460:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004462:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004466:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800446c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800446e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004472:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004474:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004478:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800447c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004484:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004486:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004492:	2001      	movs	r0, #1
 8004494:	f7fe f896 	bl	80025c4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044a0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044aa:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80044b4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80044c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044c4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80044c8:	4013      	ands	r3, r2
 80044ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80044ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044d2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80044d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80044d8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80044da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80044de:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80044e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80044e4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80044e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80044ea:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80044ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80044f0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80044f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004504:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004510:	2001      	movs	r0, #1
 8004512:	f7fe f857 	bl	80025c4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800451e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004520:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004524:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800453a:	2001      	movs	r0, #1
 800453c:	f7fe f842 	bl	80025c4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004548:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800454a:	2300      	movs	r3, #0
 800454c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800454e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004552:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004554:	2300      	movs	r3, #0
 8004556:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004558:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800455c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800455e:	2300      	movs	r3, #0
 8004560:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004566:	2300      	movs	r3, #0
 8004568:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800456a:	2300      	movs	r3, #0
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800456e:	2304      	movs	r3, #4
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800457c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800457e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004582:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004588:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800458e:	2300      	movs	r3, #0
 8004590:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004592:	2300      	movs	r3, #0
 8004594:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	f241 0318 	movw	r3, #4120	; 0x1018
 800459e:	4413      	add	r3, r2
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80045a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045aa:	4b3d      	ldr	r3, [pc, #244]	; (80046a0 <ETH_MACDMAConfig+0x38c>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80045b2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80045b4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80045b6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80045b8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80045ba:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80045bc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80045be:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80045c0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80045c2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80045c4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80045c6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80045c8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80045ca:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80045ce:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80045d2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80045d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	f241 0318 	movw	r3, #4120	; 0x1018
 80045e6:	4413      	add	r3, r2
 80045e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80045ec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	f241 0318 	movw	r3, #4120	; 0x1018
 80045f6:	4413      	add	r3, r2
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80045fe:	2001      	movs	r0, #1
 8004600:	f7fd ffe0 	bl	80025c4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	f241 0318 	movw	r3, #4120	; 0x1018
 800460c:	4413      	add	r3, r2
 800460e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004612:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004618:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800461c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800461e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004620:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004624:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004628:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800462a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800462c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800462e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800464c:	2001      	movs	r0, #1
 800464e:	f7fd ffb9 	bl	80025c4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800465e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d10d      	bne.n	8004684 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	f241 031c 	movw	r3, #4124	; 0x101c
 8004670:	4413      	add	r3, r2
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6811      	ldr	r1, [r2, #0]
 8004678:	4a0a      	ldr	r2, [pc, #40]	; (80046a4 <ETH_MACDMAConfig+0x390>)
 800467a:	431a      	orrs	r2, r3
 800467c:	f241 031c 	movw	r3, #4124	; 0x101c
 8004680:	440b      	add	r3, r1
 8004682:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	461a      	mov	r2, r3
 800468a:	2100      	movs	r1, #0
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f80b 	bl	80046a8 <ETH_MACAddressConfig>
}
 8004692:	bf00      	nop
 8004694:	37c0      	adds	r7, #192	; 0xc0
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	ff20810f 	.word	0xff20810f
 80046a0:	f8de3f23 	.word	0xf8de3f23
 80046a4:	00010040 	.word	0x00010040

080046a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3305      	adds	r3, #5
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	3204      	adds	r2, #4
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	4b11      	ldr	r3, [pc, #68]	; (8004710 <ETH_MACAddressConfig+0x68>)
 80046ca:	4413      	add	r3, r2
 80046cc:	461a      	mov	r2, r3
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3303      	adds	r3, #3
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	061a      	lsls	r2, r3, #24
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3302      	adds	r3, #2
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3301      	adds	r3, #1
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	4313      	orrs	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	7812      	ldrb	r2, [r2, #0]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	4b06      	ldr	r3, [pc, #24]	; (8004714 <ETH_MACAddressConfig+0x6c>)
 80046fa:	4413      	add	r3, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	6013      	str	r3, [r2, #0]
}
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	40028040 	.word	0x40028040
 8004714:	40028044 	.word	0x40028044

08004718 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0208 	orr.w	r2, r2, #8
 8004732:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800473c:	2001      	movs	r0, #1
 800473e:	f7fd ff41 	bl	80025c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	601a      	str	r2, [r3, #0]
}
 800474a:	bf00      	nop
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0204 	orr.w	r2, r2, #4
 800476c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004776:	2001      	movs	r0, #1
 8004778:	f7fd ff24 	bl	80025c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	601a      	str	r2, [r3, #0]
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	f241 0318 	movw	r3, #4120	; 0x1018
 800479c:	4413      	add	r3, r2
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6811      	ldr	r1, [r2, #0]
 80047a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80047a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80047ac:	440b      	add	r3, r1
 80047ae:	601a      	str	r2, [r3, #0]
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80047cc:	4413      	add	r3, r2
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6811      	ldr	r1, [r2, #0]
 80047d4:	f043 0202 	orr.w	r2, r3, #2
 80047d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80047dc:	440b      	add	r3, r1
 80047de:	601a      	str	r2, [r3, #0]
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8004800:	4413      	add	r3, r2
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6811      	ldr	r1, [r2, #0]
 8004808:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800480c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004810:	440b      	add	r3, r1
 8004812:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	f241 0318 	movw	r3, #4120	; 0x1018
 800481c:	4413      	add	r3, r2
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004822:	2001      	movs	r0, #1
 8004824:	f7fd fece 	bl	80025c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6819      	ldr	r1, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004832:	440b      	add	r3, r1
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	; 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004856:	2300      	movs	r3, #0
 8004858:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e175      	b.n	8004b4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004860:	2201      	movs	r2, #1
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4013      	ands	r3, r2
 8004872:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	429a      	cmp	r2, r3
 800487a:	f040 8164 	bne.w	8004b46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d003      	beq.n	800488e <HAL_GPIO_Init+0x4e>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b12      	cmp	r3, #18
 800488c:	d123      	bne.n	80048d6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	08da      	lsrs	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3208      	adds	r2, #8
 8004896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	220f      	movs	r2, #15
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	08da      	lsrs	r2, r3, #3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3208      	adds	r2, #8
 80048d0:	69b9      	ldr	r1, [r7, #24]
 80048d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	2203      	movs	r2, #3
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 0203 	and.w	r2, r3, #3
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d00b      	beq.n	800492a <HAL_GPIO_Init+0xea>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d007      	beq.n	800492a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800491e:	2b11      	cmp	r3, #17
 8004920:	d003      	beq.n	800492a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b12      	cmp	r3, #18
 8004928:	d130      	bne.n	800498c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	2203      	movs	r2, #3
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004960:	2201      	movs	r2, #1
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4013      	ands	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	f003 0201 	and.w	r2, r3, #1
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	2203      	movs	r2, #3
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 80be 	beq.w	8004b46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ca:	4b65      	ldr	r3, [pc, #404]	; (8004b60 <HAL_GPIO_Init+0x320>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	4a64      	ldr	r2, [pc, #400]	; (8004b60 <HAL_GPIO_Init+0x320>)
 80049d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049d4:	6453      	str	r3, [r2, #68]	; 0x44
 80049d6:	4b62      	ldr	r3, [pc, #392]	; (8004b60 <HAL_GPIO_Init+0x320>)
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80049e2:	4a60      	ldr	r2, [pc, #384]	; (8004b64 <HAL_GPIO_Init+0x324>)
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	089b      	lsrs	r3, r3, #2
 80049e8:	3302      	adds	r3, #2
 80049ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	220f      	movs	r2, #15
 80049fa:	fa02 f303 	lsl.w	r3, r2, r3
 80049fe:	43db      	mvns	r3, r3
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4013      	ands	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a57      	ldr	r2, [pc, #348]	; (8004b68 <HAL_GPIO_Init+0x328>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d037      	beq.n	8004a7e <HAL_GPIO_Init+0x23e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a56      	ldr	r2, [pc, #344]	; (8004b6c <HAL_GPIO_Init+0x32c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d031      	beq.n	8004a7a <HAL_GPIO_Init+0x23a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a55      	ldr	r2, [pc, #340]	; (8004b70 <HAL_GPIO_Init+0x330>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d02b      	beq.n	8004a76 <HAL_GPIO_Init+0x236>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a54      	ldr	r2, [pc, #336]	; (8004b74 <HAL_GPIO_Init+0x334>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d025      	beq.n	8004a72 <HAL_GPIO_Init+0x232>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a53      	ldr	r2, [pc, #332]	; (8004b78 <HAL_GPIO_Init+0x338>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d01f      	beq.n	8004a6e <HAL_GPIO_Init+0x22e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a52      	ldr	r2, [pc, #328]	; (8004b7c <HAL_GPIO_Init+0x33c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d019      	beq.n	8004a6a <HAL_GPIO_Init+0x22a>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a51      	ldr	r2, [pc, #324]	; (8004b80 <HAL_GPIO_Init+0x340>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d013      	beq.n	8004a66 <HAL_GPIO_Init+0x226>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a50      	ldr	r2, [pc, #320]	; (8004b84 <HAL_GPIO_Init+0x344>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00d      	beq.n	8004a62 <HAL_GPIO_Init+0x222>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a4f      	ldr	r2, [pc, #316]	; (8004b88 <HAL_GPIO_Init+0x348>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d007      	beq.n	8004a5e <HAL_GPIO_Init+0x21e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a4e      	ldr	r2, [pc, #312]	; (8004b8c <HAL_GPIO_Init+0x34c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <HAL_GPIO_Init+0x21a>
 8004a56:	2309      	movs	r3, #9
 8004a58:	e012      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a5a:	230a      	movs	r3, #10
 8004a5c:	e010      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	e00e      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a62:	2307      	movs	r3, #7
 8004a64:	e00c      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a66:	2306      	movs	r3, #6
 8004a68:	e00a      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a6a:	2305      	movs	r3, #5
 8004a6c:	e008      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a6e:	2304      	movs	r3, #4
 8004a70:	e006      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a72:	2303      	movs	r3, #3
 8004a74:	e004      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e002      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <HAL_GPIO_Init+0x240>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	f002 0203 	and.w	r2, r2, #3
 8004a86:	0092      	lsls	r2, r2, #2
 8004a88:	4093      	lsls	r3, r2
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a90:	4934      	ldr	r1, [pc, #208]	; (8004b64 <HAL_GPIO_Init+0x324>)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	3302      	adds	r3, #2
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a9e:	4b3c      	ldr	r3, [pc, #240]	; (8004b90 <HAL_GPIO_Init+0x350>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ac2:	4a33      	ldr	r2, [pc, #204]	; (8004b90 <HAL_GPIO_Init+0x350>)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ac8:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <HAL_GPIO_Init+0x350>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aec:	4a28      	ldr	r2, [pc, #160]	; (8004b90 <HAL_GPIO_Init+0x350>)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004af2:	4b27      	ldr	r3, [pc, #156]	; (8004b90 <HAL_GPIO_Init+0x350>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	43db      	mvns	r3, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4013      	ands	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b16:	4a1e      	ldr	r2, [pc, #120]	; (8004b90 <HAL_GPIO_Init+0x350>)
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <HAL_GPIO_Init+0x350>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b40:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <HAL_GPIO_Init+0x350>)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	2b0f      	cmp	r3, #15
 8004b50:	f67f ae86 	bls.w	8004860 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004b54:	bf00      	nop
 8004b56:	3724      	adds	r7, #36	; 0x24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	40023800 	.word	0x40023800
 8004b64:	40013800 	.word	0x40013800
 8004b68:	40020000 	.word	0x40020000
 8004b6c:	40020400 	.word	0x40020400
 8004b70:	40020800 	.word	0x40020800
 8004b74:	40020c00 	.word	0x40020c00
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	40021400 	.word	0x40021400
 8004b80:	40021800 	.word	0x40021800
 8004b84:	40021c00 	.word	0x40021c00
 8004b88:	40022000 	.word	0x40022000
 8004b8c:	40022400 	.word	0x40022400
 8004b90:	40013c00 	.word	0x40013c00

08004b94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	887b      	ldrh	r3, [r7, #2]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
 8004bb0:	e001      	b.n	8004bb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bd4:	787b      	ldrb	r3, [r7, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bda:	887a      	ldrh	r2, [r7, #2]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004be0:	e003      	b.n	8004bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	041a      	lsls	r2, r3, #16
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	619a      	str	r2, [r3, #24]
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	887b      	ldrh	r3, [r7, #2]
 8004c08:	401a      	ands	r2, r3
 8004c0a:	887b      	ldrh	r3, [r7, #2]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d104      	bne.n	8004c1a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c10:	887b      	ldrh	r3, [r7, #2]
 8004c12:	041a      	lsls	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004c18:	e002      	b.n	8004c20 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004c1a:	887a      	ldrh	r2, [r7, #2]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	619a      	str	r2, [r3, #24]
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c2e:	b08f      	sub	sp, #60	; 0x3c
 8004c30:	af0a      	add	r7, sp, #40	; 0x28
 8004c32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e10a      	b.n	8004e54 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fd f95e 	bl	8001f14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f003 fb51 	bl	800830c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	687e      	ldr	r6, [r7, #4]
 8004c72:	466d      	mov	r5, sp
 8004c74:	f106 0410 	add.w	r4, r6, #16
 8004c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c84:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c88:	1d33      	adds	r3, r6, #4
 8004c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c8c:	6838      	ldr	r0, [r7, #0]
 8004c8e:	f003 fae5 	bl	800825c <USB_CoreInit>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e0d7      	b.n	8004e54 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f003 fb3f 	bl	800832e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	e04a      	b.n	8004d4c <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	333d      	adds	r3, #61	; 0x3d
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004cca:	7bfa      	ldrb	r2, [r7, #15]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	1a9b      	subs	r3, r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	333c      	adds	r3, #60	; 0x3c
 8004cda:	7bfa      	ldrb	r2, [r7, #15]
 8004cdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004cde:	7bfa      	ldrb	r2, [r7, #15]
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	b298      	uxth	r0, r3
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	3342      	adds	r3, #66	; 0x42
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	333f      	adds	r3, #63	; 0x3f
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d0a:	7bfa      	ldrb	r2, [r7, #15]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	3344      	adds	r3, #68	; 0x44
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d1e:	7bfa      	ldrb	r2, [r7, #15]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	3348      	adds	r3, #72	; 0x48
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d32:	7bfa      	ldrb	r2, [r7, #15]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	3350      	adds	r3, #80	; 0x50
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	73fb      	strb	r3, [r7, #15]
 8004d4c:	7bfa      	ldrb	r2, [r7, #15]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d3af      	bcc.n	8004cb6 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d56:	2300      	movs	r3, #0
 8004d58:	73fb      	strb	r3, [r7, #15]
 8004d5a:	e044      	b.n	8004de6 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d5c:	7bfa      	ldrb	r2, [r7, #15]
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004d6e:	2200      	movs	r2, #0
 8004d70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d72:	7bfa      	ldrb	r2, [r7, #15]
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d9e:	7bfa      	ldrb	r2, [r7, #15]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004db4:	7bfa      	ldrb	r2, [r7, #15]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004dca:	7bfa      	ldrb	r2, [r7, #15]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	3301      	adds	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
 8004de6:	7bfa      	ldrb	r2, [r7, #15]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d3b5      	bcc.n	8004d5c <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	603b      	str	r3, [r7, #0]
 8004df6:	687e      	ldr	r6, [r7, #4]
 8004df8:	466d      	mov	r5, sp
 8004dfa:	f106 0410 	add.w	r4, r6, #16
 8004dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e0e:	1d33      	adds	r3, r6, #4
 8004e10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e12:	6838      	ldr	r0, [r7, #0]
 8004e14:	f003 fab6 	bl	8008384 <USB_DevInit>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e014      	b.n	8004e54 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d102      	bne.n	8004e48 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f80a 	bl	8004e5c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f003 fc76 	bl	800873e <USB_DevDisconnect>

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_PCDEx_ActivateLPM+0x44>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	10000003 	.word	0x10000003

08004ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea8:	4b05      	ldr	r3, [pc, #20]	; (8004ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb2:	6013      	str	r3, [r2, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40007000 	.word	0x40007000

08004ec4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ece:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	4a22      	ldr	r2, [pc, #136]	; (8004f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eda:	4b20      	ldr	r3, [pc, #128]	; (8004f5c <HAL_PWREx_EnableOverDrive+0x98>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	; (8004f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a1d      	ldr	r2, [pc, #116]	; (8004f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ef2:	f7fd fb5b 	bl	80025ac <HAL_GetTick>
 8004ef6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ef8:	e009      	b.n	8004f0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004efa:	f7fd fb57 	bl	80025ac <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f08:	d901      	bls.n	8004f0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e022      	b.n	8004f54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f0e:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1a:	d1ee      	bne.n	8004efa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f1c:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0f      	ldr	r2, [pc, #60]	; (8004f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f28:	f7fd fb40 	bl	80025ac <HAL_GetTick>
 8004f2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f2e:	e009      	b.n	8004f44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f30:	f7fd fb3c 	bl	80025ac <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f3e:	d901      	bls.n	8004f44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e007      	b.n	8004f54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f44:	4b06      	ldr	r3, [pc, #24]	; (8004f60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f50:	d1ee      	bne.n	8004f30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	40007000 	.word	0x40007000

08004f64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e25e      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8087 	beq.w	8005096 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f88:	4b96      	ldr	r3, [pc, #600]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d00c      	beq.n	8004fae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f94:	4b93      	ldr	r3, [pc, #588]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 030c 	and.w	r3, r3, #12
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d112      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x62>
 8004fa0:	4b90      	ldr	r3, [pc, #576]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fac:	d10b      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fae:	4b8d      	ldr	r3, [pc, #564]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d06c      	beq.n	8005094 <HAL_RCC_OscConfig+0x130>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d168      	bne.n	8005094 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e238      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fce:	d106      	bne.n	8004fde <HAL_RCC_OscConfig+0x7a>
 8004fd0:	4b84      	ldr	r3, [pc, #528]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a83      	ldr	r2, [pc, #524]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8004fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	e02e      	b.n	800503c <HAL_RCC_OscConfig+0xd8>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCC_OscConfig+0x9c>
 8004fe6:	4b7f      	ldr	r3, [pc, #508]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a7e      	ldr	r2, [pc, #504]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8004fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4b7c      	ldr	r3, [pc, #496]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a7b      	ldr	r2, [pc, #492]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8004ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e01d      	b.n	800503c <HAL_RCC_OscConfig+0xd8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0xc0>
 800500a:	4b76      	ldr	r3, [pc, #472]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a75      	ldr	r2, [pc, #468]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b73      	ldr	r3, [pc, #460]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a72      	ldr	r2, [pc, #456]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e00b      	b.n	800503c <HAL_RCC_OscConfig+0xd8>
 8005024:	4b6f      	ldr	r3, [pc, #444]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6e      	ldr	r2, [pc, #440]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 800502a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b6c      	ldr	r3, [pc, #432]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a6b      	ldr	r2, [pc, #428]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800503a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd fab2 	bl	80025ac <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800504c:	f7fd faae 	bl	80025ac <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	; 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e1ec      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505e:	4b61      	ldr	r3, [pc, #388]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0xe8>
 800506a:	e014      	b.n	8005096 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fd fa9e 	bl	80025ac <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005074:	f7fd fa9a 	bl	80025ac <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	; 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e1d8      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005086:	4b57      	ldr	r3, [pc, #348]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0x110>
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d069      	beq.n	8005176 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050a2:	4b50      	ldr	r3, [pc, #320]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ae:	4b4d      	ldr	r3, [pc, #308]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d11c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x190>
 80050ba:	4b4a      	ldr	r3, [pc, #296]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d116      	bne.n	80050f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c6:	4b47      	ldr	r3, [pc, #284]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_RCC_OscConfig+0x17a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e1ac      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050de:	4b41      	ldr	r3, [pc, #260]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	493d      	ldr	r1, [pc, #244]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f2:	e040      	b.n	8005176 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d023      	beq.n	8005144 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050fc:	4b39      	ldr	r3, [pc, #228]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a38      	ldr	r2, [pc, #224]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005102:	f043 0301 	orr.w	r3, r3, #1
 8005106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fd fa50 	bl	80025ac <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005110:	f7fd fa4c 	bl	80025ac <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e18a      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005122:	4b30      	ldr	r3, [pc, #192]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512e:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	4929      	ldr	r1, [pc, #164]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 800513e:	4313      	orrs	r3, r2
 8005140:	600b      	str	r3, [r1, #0]
 8005142:	e018      	b.n	8005176 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005144:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a26      	ldr	r2, [pc, #152]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fd fa2c 	bl	80025ac <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005158:	f7fd fa28 	bl	80025ac <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e166      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516a:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0308 	and.w	r3, r3, #8
 800517e:	2b00      	cmp	r3, #0
 8005180:	d038      	beq.n	80051f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d019      	beq.n	80051be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518a:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 800518c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 8005190:	f043 0301 	orr.w	r3, r3, #1
 8005194:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005196:	f7fd fa09 	bl	80025ac <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800519e:	f7fd fa05 	bl	80025ac <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e143      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 80051b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d0f0      	beq.n	800519e <HAL_RCC_OscConfig+0x23a>
 80051bc:	e01a      	b.n	80051f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051be:	4b09      	ldr	r3, [pc, #36]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 80051c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c2:	4a08      	ldr	r2, [pc, #32]	; (80051e4 <HAL_RCC_OscConfig+0x280>)
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ca:	f7fd f9ef 	bl	80025ac <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d0:	e00a      	b.n	80051e8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051d2:	f7fd f9eb 	bl	80025ac <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d903      	bls.n	80051e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e129      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
 80051e4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e8:	4b95      	ldr	r3, [pc, #596]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80051ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1ee      	bne.n	80051d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80a4 	beq.w	800534a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005202:	4b8f      	ldr	r3, [pc, #572]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10d      	bne.n	800522a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800520e:	4b8c      	ldr	r3, [pc, #560]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	4a8b      	ldr	r2, [pc, #556]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	6413      	str	r3, [r2, #64]	; 0x40
 800521a:	4b89      	ldr	r3, [pc, #548]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800522a:	4b86      	ldr	r3, [pc, #536]	; (8005444 <HAL_RCC_OscConfig+0x4e0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d118      	bne.n	8005268 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005236:	4b83      	ldr	r3, [pc, #524]	; (8005444 <HAL_RCC_OscConfig+0x4e0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a82      	ldr	r2, [pc, #520]	; (8005444 <HAL_RCC_OscConfig+0x4e0>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005242:	f7fd f9b3 	bl	80025ac <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800524a:	f7fd f9af 	bl	80025ac <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b64      	cmp	r3, #100	; 0x64
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e0ed      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800525c:	4b79      	ldr	r3, [pc, #484]	; (8005444 <HAL_RCC_OscConfig+0x4e0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d106      	bne.n	800527e <HAL_RCC_OscConfig+0x31a>
 8005270:	4b73      	ldr	r3, [pc, #460]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	4a72      	ldr	r2, [pc, #456]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	6713      	str	r3, [r2, #112]	; 0x70
 800527c:	e02d      	b.n	80052da <HAL_RCC_OscConfig+0x376>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10c      	bne.n	80052a0 <HAL_RCC_OscConfig+0x33c>
 8005286:	4b6e      	ldr	r3, [pc, #440]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	4a6d      	ldr	r2, [pc, #436]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	6713      	str	r3, [r2, #112]	; 0x70
 8005292:	4b6b      	ldr	r3, [pc, #428]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	4a6a      	ldr	r2, [pc, #424]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005298:	f023 0304 	bic.w	r3, r3, #4
 800529c:	6713      	str	r3, [r2, #112]	; 0x70
 800529e:	e01c      	b.n	80052da <HAL_RCC_OscConfig+0x376>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b05      	cmp	r3, #5
 80052a6:	d10c      	bne.n	80052c2 <HAL_RCC_OscConfig+0x35e>
 80052a8:	4b65      	ldr	r3, [pc, #404]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80052aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ac:	4a64      	ldr	r2, [pc, #400]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80052ae:	f043 0304 	orr.w	r3, r3, #4
 80052b2:	6713      	str	r3, [r2, #112]	; 0x70
 80052b4:	4b62      	ldr	r3, [pc, #392]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80052b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b8:	4a61      	ldr	r2, [pc, #388]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80052ba:	f043 0301 	orr.w	r3, r3, #1
 80052be:	6713      	str	r3, [r2, #112]	; 0x70
 80052c0:	e00b      	b.n	80052da <HAL_RCC_OscConfig+0x376>
 80052c2:	4b5f      	ldr	r3, [pc, #380]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80052c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c6:	4a5e      	ldr	r2, [pc, #376]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	6713      	str	r3, [r2, #112]	; 0x70
 80052ce:	4b5c      	ldr	r3, [pc, #368]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80052d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d2:	4a5b      	ldr	r2, [pc, #364]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80052d4:	f023 0304 	bic.w	r3, r3, #4
 80052d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d015      	beq.n	800530e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e2:	f7fd f963 	bl	80025ac <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e8:	e00a      	b.n	8005300 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ea:	f7fd f95f 	bl	80025ac <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e09b      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005300:	4b4f      	ldr	r3, [pc, #316]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0ee      	beq.n	80052ea <HAL_RCC_OscConfig+0x386>
 800530c:	e014      	b.n	8005338 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530e:	f7fd f94d 	bl	80025ac <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005314:	e00a      	b.n	800532c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005316:	f7fd f949 	bl	80025ac <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	f241 3288 	movw	r2, #5000	; 0x1388
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e085      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800532c:	4b44      	ldr	r3, [pc, #272]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 800532e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ee      	bne.n	8005316 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005338:	7dfb      	ldrb	r3, [r7, #23]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d105      	bne.n	800534a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533e:	4b40      	ldr	r3, [pc, #256]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	4a3f      	ldr	r2, [pc, #252]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005348:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d071      	beq.n	8005436 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005352:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 030c 	and.w	r3, r3, #12
 800535a:	2b08      	cmp	r3, #8
 800535c:	d069      	beq.n	8005432 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d14b      	bne.n	80053fe <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005366:	4b36      	ldr	r3, [pc, #216]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a35      	ldr	r2, [pc, #212]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 800536c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005372:	f7fd f91b 	bl	80025ac <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800537a:	f7fd f917 	bl	80025ac <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e055      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538c:	4b2c      	ldr	r3, [pc, #176]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69da      	ldr	r2, [r3, #28]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	019b      	lsls	r3, r3, #6
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	3b01      	subs	r3, #1
 80053b2:	041b      	lsls	r3, r3, #16
 80053b4:	431a      	orrs	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	061b      	lsls	r3, r3, #24
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	071b      	lsls	r3, r3, #28
 80053c4:	491e      	ldr	r1, [pc, #120]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ca:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1c      	ldr	r2, [pc, #112]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80053d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d6:	f7fd f8e9 	bl	80025ac <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053de:	f7fd f8e5 	bl	80025ac <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e023      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f0:	4b13      	ldr	r3, [pc, #76]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <HAL_RCC_OscConfig+0x47a>
 80053fc:	e01b      	b.n	8005436 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053fe:	4b10      	ldr	r3, [pc, #64]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a0f      	ldr	r2, [pc, #60]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005404:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540a:	f7fd f8cf 	bl	80025ac <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005410:	e008      	b.n	8005424 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005412:	f7fd f8cb 	bl	80025ac <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e009      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005424:	4b06      	ldr	r3, [pc, #24]	; (8005440 <HAL_RCC_OscConfig+0x4dc>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f0      	bne.n	8005412 <HAL_RCC_OscConfig+0x4ae>
 8005430:	e001      	b.n	8005436 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40023800 	.word	0x40023800
 8005444:	40007000 	.word	0x40007000

08005448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0ce      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005460:	4b69      	ldr	r3, [pc, #420]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d910      	bls.n	8005490 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546e:	4b66      	ldr	r3, [pc, #408]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 020f 	bic.w	r2, r3, #15
 8005476:	4964      	ldr	r1, [pc, #400]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4313      	orrs	r3, r2
 800547c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800547e:	4b62      	ldr	r3, [pc, #392]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0b6      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d020      	beq.n	80054de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d005      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054a8:	4b58      	ldr	r3, [pc, #352]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4a57      	ldr	r2, [pc, #348]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054c0:	4b52      	ldr	r3, [pc, #328]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	4a51      	ldr	r2, [pc, #324]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054cc:	4b4f      	ldr	r3, [pc, #316]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	494c      	ldr	r1, [pc, #304]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d040      	beq.n	800556c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d107      	bne.n	8005502 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054f2:	4b46      	ldr	r3, [pc, #280]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d115      	bne.n	800552a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e07d      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b02      	cmp	r3, #2
 8005508:	d107      	bne.n	800551a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800550a:	4b40      	ldr	r3, [pc, #256]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e071      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551a:	4b3c      	ldr	r3, [pc, #240]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e069      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800552a:	4b38      	ldr	r3, [pc, #224]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f023 0203 	bic.w	r2, r3, #3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4935      	ldr	r1, [pc, #212]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	4313      	orrs	r3, r2
 800553a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800553c:	f7fd f836 	bl	80025ac <HAL_GetTick>
 8005540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005542:	e00a      	b.n	800555a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005544:	f7fd f832 	bl	80025ac <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e051      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800555a:	4b2c      	ldr	r3, [pc, #176]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 020c 	and.w	r2, r3, #12
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	429a      	cmp	r2, r3
 800556a:	d1eb      	bne.n	8005544 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800556c:	4b26      	ldr	r3, [pc, #152]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d210      	bcs.n	800559c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b23      	ldr	r3, [pc, #140]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 020f 	bic.w	r2, r3, #15
 8005582:	4921      	ldr	r1, [pc, #132]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	4b1f      	ldr	r3, [pc, #124]	; (8005608 <HAL_RCC_ClockConfig+0x1c0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d001      	beq.n	800559c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e030      	b.n	80055fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055a8:	4b18      	ldr	r3, [pc, #96]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4915      	ldr	r1, [pc, #84]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0308 	and.w	r3, r3, #8
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055c6:	4b11      	ldr	r3, [pc, #68]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	490d      	ldr	r1, [pc, #52]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055da:	f000 f81d 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 80055de:	4601      	mov	r1, r0
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <HAL_RCC_ClockConfig+0x1c4>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	091b      	lsrs	r3, r3, #4
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	4a09      	ldr	r2, [pc, #36]	; (8005610 <HAL_RCC_ClockConfig+0x1c8>)
 80055ec:	5cd3      	ldrb	r3, [r2, r3]
 80055ee:	fa21 f303 	lsr.w	r3, r1, r3
 80055f2:	4a08      	ldr	r2, [pc, #32]	; (8005614 <HAL_RCC_ClockConfig+0x1cc>)
 80055f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80055f6:	2000      	movs	r0, #0
 80055f8:	f7fc fce8 	bl	8001fcc <HAL_InitTick>

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40023c00 	.word	0x40023c00
 800560c:	40023800 	.word	0x40023800
 8005610:	0801ffb8 	.word	0x0801ffb8
 8005614:	20000000 	.word	0x20000000

08005618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	2300      	movs	r3, #0
 8005628:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800562e:	4b63      	ldr	r3, [pc, #396]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b04      	cmp	r3, #4
 8005638:	d007      	beq.n	800564a <HAL_RCC_GetSysClockFreq+0x32>
 800563a:	2b08      	cmp	r3, #8
 800563c:	d008      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x38>
 800563e:	2b00      	cmp	r3, #0
 8005640:	f040 80b4 	bne.w	80057ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005644:	4b5e      	ldr	r3, [pc, #376]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005646:	60bb      	str	r3, [r7, #8]
       break;
 8005648:	e0b3      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800564a:	4b5e      	ldr	r3, [pc, #376]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800564c:	60bb      	str	r3, [r7, #8]
      break;
 800564e:	e0b0      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005650:	4b5a      	ldr	r3, [pc, #360]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005658:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800565a:	4b58      	ldr	r3, [pc, #352]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d04a      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005666:	4b55      	ldr	r3, [pc, #340]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	099b      	lsrs	r3, r3, #6
 800566c:	f04f 0400 	mov.w	r4, #0
 8005670:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	ea03 0501 	and.w	r5, r3, r1
 800567c:	ea04 0602 	and.w	r6, r4, r2
 8005680:	4629      	mov	r1, r5
 8005682:	4632      	mov	r2, r6
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	f04f 0400 	mov.w	r4, #0
 800568c:	0154      	lsls	r4, r2, #5
 800568e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005692:	014b      	lsls	r3, r1, #5
 8005694:	4619      	mov	r1, r3
 8005696:	4622      	mov	r2, r4
 8005698:	1b49      	subs	r1, r1, r5
 800569a:	eb62 0206 	sbc.w	r2, r2, r6
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	f04f 0400 	mov.w	r4, #0
 80056a6:	0194      	lsls	r4, r2, #6
 80056a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80056ac:	018b      	lsls	r3, r1, #6
 80056ae:	1a5b      	subs	r3, r3, r1
 80056b0:	eb64 0402 	sbc.w	r4, r4, r2
 80056b4:	f04f 0100 	mov.w	r1, #0
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	00e2      	lsls	r2, r4, #3
 80056be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80056c2:	00d9      	lsls	r1, r3, #3
 80056c4:	460b      	mov	r3, r1
 80056c6:	4614      	mov	r4, r2
 80056c8:	195b      	adds	r3, r3, r5
 80056ca:	eb44 0406 	adc.w	r4, r4, r6
 80056ce:	f04f 0100 	mov.w	r1, #0
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	0262      	lsls	r2, r4, #9
 80056d8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80056dc:	0259      	lsls	r1, r3, #9
 80056de:	460b      	mov	r3, r1
 80056e0:	4614      	mov	r4, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	4621      	mov	r1, r4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f04f 0400 	mov.w	r4, #0
 80056ec:	461a      	mov	r2, r3
 80056ee:	4623      	mov	r3, r4
 80056f0:	f7fa fdfe 	bl	80002f0 <__aeabi_uldivmod>
 80056f4:	4603      	mov	r3, r0
 80056f6:	460c      	mov	r4, r1
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	e049      	b.n	8005790 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056fc:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	099b      	lsrs	r3, r3, #6
 8005702:	f04f 0400 	mov.w	r4, #0
 8005706:	f240 11ff 	movw	r1, #511	; 0x1ff
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	ea03 0501 	and.w	r5, r3, r1
 8005712:	ea04 0602 	and.w	r6, r4, r2
 8005716:	4629      	mov	r1, r5
 8005718:	4632      	mov	r2, r6
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	f04f 0400 	mov.w	r4, #0
 8005722:	0154      	lsls	r4, r2, #5
 8005724:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005728:	014b      	lsls	r3, r1, #5
 800572a:	4619      	mov	r1, r3
 800572c:	4622      	mov	r2, r4
 800572e:	1b49      	subs	r1, r1, r5
 8005730:	eb62 0206 	sbc.w	r2, r2, r6
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	f04f 0400 	mov.w	r4, #0
 800573c:	0194      	lsls	r4, r2, #6
 800573e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005742:	018b      	lsls	r3, r1, #6
 8005744:	1a5b      	subs	r3, r3, r1
 8005746:	eb64 0402 	sbc.w	r4, r4, r2
 800574a:	f04f 0100 	mov.w	r1, #0
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	00e2      	lsls	r2, r4, #3
 8005754:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005758:	00d9      	lsls	r1, r3, #3
 800575a:	460b      	mov	r3, r1
 800575c:	4614      	mov	r4, r2
 800575e:	195b      	adds	r3, r3, r5
 8005760:	eb44 0406 	adc.w	r4, r4, r6
 8005764:	f04f 0100 	mov.w	r1, #0
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	02a2      	lsls	r2, r4, #10
 800576e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005772:	0299      	lsls	r1, r3, #10
 8005774:	460b      	mov	r3, r1
 8005776:	4614      	mov	r4, r2
 8005778:	4618      	mov	r0, r3
 800577a:	4621      	mov	r1, r4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f04f 0400 	mov.w	r4, #0
 8005782:	461a      	mov	r2, r3
 8005784:	4623      	mov	r3, r4
 8005786:	f7fa fdb3 	bl	80002f0 <__aeabi_uldivmod>
 800578a:	4603      	mov	r3, r0
 800578c:	460c      	mov	r4, r1
 800578e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005790:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	0c1b      	lsrs	r3, r3, #16
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	3301      	adds	r3, #1
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	60bb      	str	r3, [r7, #8]
      break;
 80057aa:	e002      	b.n	80057b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057ac:	4b04      	ldr	r3, [pc, #16]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057ae:	60bb      	str	r3, [r7, #8]
      break;
 80057b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057b2:	68bb      	ldr	r3, [r7, #8]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057bc:	40023800 	.word	0x40023800
 80057c0:	00f42400 	.word	0x00f42400
 80057c4:	007a1200 	.word	0x007a1200

080057c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057cc:	4b03      	ldr	r3, [pc, #12]	; (80057dc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ce:	681b      	ldr	r3, [r3, #0]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000000 	.word	0x20000000

080057e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057e4:	f7ff fff0 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 80057e8:	4601      	mov	r1, r0
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	0a9b      	lsrs	r3, r3, #10
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4a03      	ldr	r2, [pc, #12]	; (8005804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f6:	5cd3      	ldrb	r3, [r2, r3]
 80057f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40023800 	.word	0x40023800
 8005804:	0801ffc8 	.word	0x0801ffc8

08005808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800580c:	f7ff ffdc 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 8005810:	4601      	mov	r1, r0
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	0b5b      	lsrs	r3, r3, #13
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	4a03      	ldr	r2, [pc, #12]	; (800582c <HAL_RCC_GetPCLK2Freq+0x24>)
 800581e:	5cd3      	ldrb	r3, [r2, r3]
 8005820:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005824:	4618      	mov	r0, r3
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40023800 	.word	0x40023800
 800582c:	0801ffc8 	.word	0x0801ffc8

08005830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	220f      	movs	r2, #15
 800583e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005840:	4b12      	ldr	r3, [pc, #72]	; (800588c <HAL_RCC_GetClockConfig+0x5c>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 0203 	and.w	r2, r3, #3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800584c:	4b0f      	ldr	r3, [pc, #60]	; (800588c <HAL_RCC_GetClockConfig+0x5c>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005858:	4b0c      	ldr	r3, [pc, #48]	; (800588c <HAL_RCC_GetClockConfig+0x5c>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005864:	4b09      	ldr	r3, [pc, #36]	; (800588c <HAL_RCC_GetClockConfig+0x5c>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	08db      	lsrs	r3, r3, #3
 800586a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005872:	4b07      	ldr	r3, [pc, #28]	; (8005890 <HAL_RCC_GetClockConfig+0x60>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 020f 	and.w	r2, r3, #15
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	601a      	str	r2, [r3, #0]
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40023800 	.word	0x40023800
 8005890:	40023c00 	.word	0x40023c00

08005894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d012      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80058bc:	4b69      	ldr	r3, [pc, #420]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	4a68      	ldr	r2, [pc, #416]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80058c6:	6093      	str	r3, [r2, #8]
 80058c8:	4b66      	ldr	r3, [pc, #408]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d0:	4964      	ldr	r1, [pc, #400]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80058de:	2301      	movs	r3, #1
 80058e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d017      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058ee:	4b5d      	ldr	r3, [pc, #372]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	4959      	ldr	r1, [pc, #356]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005908:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800590c:	d101      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800590e:	2301      	movs	r3, #1
 8005910:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800591a:	2301      	movs	r3, #1
 800591c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d017      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800592a:	4b4e      	ldr	r3, [pc, #312]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005930:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	494a      	ldr	r1, [pc, #296]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800593a:	4313      	orrs	r3, r2
 800593c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005948:	d101      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800594a:	2301      	movs	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005956:	2301      	movs	r3, #1
 8005958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005966:	2301      	movs	r3, #1
 8005968:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 808b 	beq.w	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005978:	4b3a      	ldr	r3, [pc, #232]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	4a39      	ldr	r2, [pc, #228]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005982:	6413      	str	r3, [r2, #64]	; 0x40
 8005984:	4b37      	ldr	r3, [pc, #220]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598c:	60bb      	str	r3, [r7, #8]
 800598e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005990:	4b35      	ldr	r3, [pc, #212]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a34      	ldr	r2, [pc, #208]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800599a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599c:	f7fc fe06 	bl	80025ac <HAL_GetTick>
 80059a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80059a2:	e008      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a4:	f7fc fe02 	bl	80025ac <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b64      	cmp	r3, #100	; 0x64
 80059b0:	d901      	bls.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e38d      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80059b6:	4b2c      	ldr	r3, [pc, #176]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059c2:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d035      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d02e      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059e0:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059ea:	4b1e      	ldr	r3, [pc, #120]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ee:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059f6:	4b1b      	ldr	r3, [pc, #108]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fa:	4a1a      	ldr	r2, [pc, #104]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005a02:	4a18      	ldr	r2, [pc, #96]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a08:	4b16      	ldr	r3, [pc, #88]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d114      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fc fdca 	bl	80025ac <HAL_GetTick>
 8005a18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a1a:	e00a      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a1c:	f7fc fdc6 	bl	80025ac <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e34f      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a32:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0ee      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a4a:	d111      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a58:	4b04      	ldr	r3, [pc, #16]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005a5a:	400b      	ands	r3, r1
 8005a5c:	4901      	ldr	r1, [pc, #4]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	608b      	str	r3, [r1, #8]
 8005a62:	e00b      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005a64:	40023800 	.word	0x40023800
 8005a68:	40007000 	.word	0x40007000
 8005a6c:	0ffffcff 	.word	0x0ffffcff
 8005a70:	4bb3      	ldr	r3, [pc, #716]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	4ab2      	ldr	r2, [pc, #712]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a7a:	6093      	str	r3, [r2, #8]
 8005a7c:	4bb0      	ldr	r3, [pc, #704]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a88:	49ad      	ldr	r1, [pc, #692]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d010      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a9a:	4ba9      	ldr	r3, [pc, #676]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa0:	4aa7      	ldr	r2, [pc, #668]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005aaa:	4ba5      	ldr	r3, [pc, #660]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	49a2      	ldr	r1, [pc, #648]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ac8:	4b9d      	ldr	r3, [pc, #628]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad6:	499a      	ldr	r1, [pc, #616]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005aea:	4b95      	ldr	r3, [pc, #596]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af8:	4991      	ldr	r1, [pc, #580]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b0c:	4b8c      	ldr	r3, [pc, #560]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b1a:	4989      	ldr	r1, [pc, #548]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b2e:	4b84      	ldr	r3, [pc, #528]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	4980      	ldr	r1, [pc, #512]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b50:	4b7b      	ldr	r3, [pc, #492]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b56:	f023 0203 	bic.w	r2, r3, #3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5e:	4978      	ldr	r1, [pc, #480]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b72:	4b73      	ldr	r3, [pc, #460]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b78:	f023 020c 	bic.w	r2, r3, #12
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b80:	496f      	ldr	r1, [pc, #444]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b94:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba2:	4967      	ldr	r1, [pc, #412]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005bb6:	4b62      	ldr	r3, [pc, #392]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	495e      	ldr	r1, [pc, #376]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005bd8:	4b59      	ldr	r3, [pc, #356]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	4956      	ldr	r1, [pc, #344]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005bfa:	4b51      	ldr	r3, [pc, #324]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	494d      	ldr	r1, [pc, #308]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005c1c:	4b48      	ldr	r3, [pc, #288]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2a:	4945      	ldr	r1, [pc, #276]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005c3e:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4c:	493c      	ldr	r1, [pc, #240]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c60:	4b37      	ldr	r3, [pc, #220]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c6e:	4934      	ldr	r1, [pc, #208]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d011      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c82:	4b2f      	ldr	r3, [pc, #188]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c90:	492b      	ldr	r1, [pc, #172]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cc2:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd0:	491b      	ldr	r1, [pc, #108]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ce4:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cf4:	4912      	ldr	r1, [pc, #72]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005d08:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d18:	4909      	ldr	r1, [pc, #36]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00f      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d2c:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3c:	e002      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005d3e:	bf00      	nop
 8005d40:	40023800 	.word	0x40023800
 8005d44:	4985      	ldr	r1, [pc, #532]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005d58:	4b80      	ldr	r3, [pc, #512]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d68:	497c      	ldr	r1, [pc, #496]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d005      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d7e:	f040 80d6 	bne.w	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d82:	4b76      	ldr	r3, [pc, #472]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a75      	ldr	r2, [pc, #468]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8e:	f7fc fc0d 	bl	80025ac <HAL_GetTick>
 8005d92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d96:	f7fc fc09 	bl	80025ac <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b64      	cmp	r3, #100	; 0x64
 8005da2:	d901      	bls.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e194      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005da8:	4b6c      	ldr	r3, [pc, #432]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f0      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d021      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d11d      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005dc8:	4b64      	ldr	r3, [pc, #400]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dce:	0c1b      	lsrs	r3, r3, #16
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dd6:	4b61      	ldr	r3, [pc, #388]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ddc:	0e1b      	lsrs	r3, r3, #24
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	019a      	lsls	r2, r3, #6
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	041b      	lsls	r3, r3, #16
 8005dee:	431a      	orrs	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	061b      	lsls	r3, r3, #24
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	071b      	lsls	r3, r3, #28
 8005dfc:	4957      	ldr	r1, [pc, #348]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e18:	d00a      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d02e      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e2e:	d129      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005e30:	4b4a      	ldr	r3, [pc, #296]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e36:	0c1b      	lsrs	r3, r3, #16
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e3e:	4b47      	ldr	r3, [pc, #284]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e44:	0f1b      	lsrs	r3, r3, #28
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	019a      	lsls	r2, r3, #6
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	041b      	lsls	r3, r3, #16
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	061b      	lsls	r3, r3, #24
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	071b      	lsls	r3, r3, #28
 8005e64:	493d      	ldr	r1, [pc, #244]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005e6c:	4b3b      	ldr	r3, [pc, #236]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e72:	f023 021f 	bic.w	r2, r3, #31
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	4937      	ldr	r1, [pc, #220]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01d      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e90:	4b32      	ldr	r3, [pc, #200]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e96:	0e1b      	lsrs	r3, r3, #24
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e9e:	4b2f      	ldr	r3, [pc, #188]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea4:	0f1b      	lsrs	r3, r3, #28
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	019a      	lsls	r2, r3, #6
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	431a      	orrs	r2, r3
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	061b      	lsls	r3, r3, #24
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	071b      	lsls	r3, r3, #28
 8005ec4:	4925      	ldr	r1, [pc, #148]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d011      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	019a      	lsls	r2, r3, #6
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	061b      	lsls	r3, r3, #24
 8005eec:	431a      	orrs	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	071b      	lsls	r3, r3, #28
 8005ef4:	4919      	ldr	r1, [pc, #100]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005efc:	4b17      	ldr	r3, [pc, #92]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a16      	ldr	r2, [pc, #88]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f08:	f7fc fb50 	bl	80025ac <HAL_GetTick>
 8005f0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f10:	f7fc fb4c 	bl	80025ac <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	; 0x64
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e0d7      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f22:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f0      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	f040 80cd 	bne.w	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a08      	ldr	r2, [pc, #32]	; (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f42:	f7fc fb33 	bl	80025ac <HAL_GetTick>
 8005f46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f48:	e00a      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f4a:	f7fc fb2f 	bl	80025ac <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b64      	cmp	r3, #100	; 0x64
 8005f56:	d903      	bls.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e0ba      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005f5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005f60:	4b5e      	ldr	r3, [pc, #376]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f6c:	d0ed      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d02e      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d12a      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f96:	4b51      	ldr	r3, [pc, #324]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9c:	0c1b      	lsrs	r3, r3, #16
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005fa4:	4b4d      	ldr	r3, [pc, #308]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005faa:	0f1b      	lsrs	r3, r3, #28
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	019a      	lsls	r2, r3, #6
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	041b      	lsls	r3, r3, #16
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	061b      	lsls	r3, r3, #24
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	071b      	lsls	r3, r3, #28
 8005fca:	4944      	ldr	r1, [pc, #272]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005fd2:	4b42      	ldr	r3, [pc, #264]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	493d      	ldr	r1, [pc, #244]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d022      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006000:	d11d      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006002:	4b36      	ldr	r3, [pc, #216]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006008:	0e1b      	lsrs	r3, r3, #24
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006010:	4b32      	ldr	r3, [pc, #200]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006016:	0f1b      	lsrs	r3, r3, #28
 8006018:	f003 0307 	and.w	r3, r3, #7
 800601c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	019a      	lsls	r2, r3, #6
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	041b      	lsls	r3, r3, #16
 800602a:	431a      	orrs	r2, r3
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	061b      	lsls	r3, r3, #24
 8006030:	431a      	orrs	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	071b      	lsls	r3, r3, #28
 8006036:	4929      	ldr	r1, [pc, #164]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d028      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800604a:	4b24      	ldr	r3, [pc, #144]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800604c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006050:	0e1b      	lsrs	r3, r3, #24
 8006052:	f003 030f 	and.w	r3, r3, #15
 8006056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006058:	4b20      	ldr	r3, [pc, #128]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605e:	0c1b      	lsrs	r3, r3, #16
 8006060:	f003 0303 	and.w	r3, r3, #3
 8006064:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	019a      	lsls	r2, r3, #6
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	041b      	lsls	r3, r3, #16
 8006070:	431a      	orrs	r2, r3
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	061b      	lsls	r3, r3, #24
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	071b      	lsls	r3, r3, #28
 800607e:	4917      	ldr	r1, [pc, #92]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006086:	4b15      	ldr	r3, [pc, #84]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800608c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	4911      	ldr	r1, [pc, #68]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800609c:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a0e      	ldr	r2, [pc, #56]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a8:	f7fc fa80 	bl	80025ac <HAL_GetTick>
 80060ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060ae:	e008      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80060b0:	f7fc fa7c 	bl	80025ac <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b64      	cmp	r3, #100	; 0x64
 80060bc:	d901      	bls.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e007      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060c2:	4b06      	ldr	r3, [pc, #24]	; (80060dc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ce:	d1ef      	bne.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40023800 	.word	0x40023800

080060e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e084      	b.n	80061fc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7fb fc85 	bl	8001a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006128:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006132:	d902      	bls.n	800613a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e002      	b.n	8006140 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800613a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800613e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006148:	d007      	beq.n	800615a <HAL_SPI_Init+0x7a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006152:	d002      	beq.n	800615a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10b      	bne.n	800617a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800616a:	d903      	bls.n	8006174 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	631a      	str	r2, [r3, #48]	; 0x30
 8006172:	e002      	b.n	800617a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	ea42 0103 	orr.w	r1, r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	0c1b      	lsrs	r3, r3, #16
 80061ba:	f003 0204 	and.w	r2, r3, #4
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	ea42 0103 	orr.w	r1, r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	430a      	orrs	r2, r1
 80061da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69da      	ldr	r2, [r3, #28]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	099b      	lsrs	r3, r3, #6
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10f      	bne.n	8006248 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	099b      	lsrs	r3, r3, #6
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
    return;
 8006246:	e0d8      	b.n	80063fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	085b      	lsrs	r3, r3, #1
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00a      	beq.n	800626a <HAL_SPI_IRQHandler+0x66>
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	09db      	lsrs	r3, r3, #7
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
    return;
 8006268:	e0c7      	b.n	80063fa <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	095b      	lsrs	r3, r3, #5
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10c      	bne.n	8006290 <HAL_SPI_IRQHandler+0x8c>
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	099b      	lsrs	r3, r3, #6
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <HAL_SPI_IRQHandler+0x8c>
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	0a1b      	lsrs	r3, r3, #8
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 80b5 	beq.w	80063fa <HAL_SPI_IRQHandler+0x1f6>
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	095b      	lsrs	r3, r3, #5
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80ae 	beq.w	80063fa <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	099b      	lsrs	r3, r3, #6
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d023      	beq.n	80062f2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d011      	beq.n	80062da <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ba:	f043 0204 	orr.w	r2, r3, #4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062c2:	2300      	movs	r3, #0
 80062c4:	617b      	str	r3, [r7, #20]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	e00b      	b.n	80062f2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062da:	2300      	movs	r3, #0
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	693b      	ldr	r3, [r7, #16]
        return;
 80062f0:	e083      	b.n	80063fa <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d014      	beq.n	8006328 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006302:	f043 0201 	orr.w	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	0a1b      	lsrs	r3, r3, #8
 800632c:	f003 0301 	and.w	r3, r3, #1
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00c      	beq.n	800634e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006338:	f043 0208 	orr.w	r2, r3, #8
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006340:	2300      	movs	r3, #0
 8006342:	60bb      	str	r3, [r7, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	60bb      	str	r3, [r7, #8]
 800634c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006352:	2b00      	cmp	r3, #0
 8006354:	d050      	beq.n	80063f8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006364:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d104      	bne.n	8006382 <HAL_SPI_IRQHandler+0x17e>
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d034      	beq.n	80063ec <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0203 	bic.w	r2, r2, #3
 8006390:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006396:	2b00      	cmp	r3, #0
 8006398:	d011      	beq.n	80063be <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639e:	4a18      	ldr	r2, [pc, #96]	; (8006400 <HAL_SPI_IRQHandler+0x1fc>)
 80063a0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fc ffce 	bl	8003348 <HAL_DMA_Abort_IT>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d016      	beq.n	80063f4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ca:	4a0d      	ldr	r2, [pc, #52]	; (8006400 <HAL_SPI_IRQHandler+0x1fc>)
 80063cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fc ffb8 	bl	8003348 <HAL_DMA_Abort_IT>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80063ea:	e003      	b.n	80063f4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f809 	bl	8006404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80063f2:	e000      	b.n	80063f6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80063f4:	bf00      	nop
    return;
 80063f6:	bf00      	nop
 80063f8:	bf00      	nop
  }
}
 80063fa:	3720      	adds	r7, #32
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	08006419 	.word	0x08006419

08006404 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f7ff ffe5 	bl	8006404 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e01d      	b.n	8006490 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d106      	bne.n	800646e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fb fbb7 	bl	8001bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3304      	adds	r3, #4
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f000 fcab 	bl	8006ddc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <HAL_TIM_Base_Start+0x50>)
 80064b0:	4013      	ands	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b06      	cmp	r3, #6
 80064b8:	d00b      	beq.n	80064d2 <HAL_TIM_Base_Start+0x3a>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c0:	d007      	beq.n	80064d2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f042 0201 	orr.w	r2, r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	00010007 	.word	0x00010007

080064ec <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6a1a      	ldr	r2, [r3, #32]
 8006502:	f241 1311 	movw	r3, #4369	; 0x1111
 8006506:	4013      	ands	r3, r2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10f      	bne.n	800652c <HAL_TIM_Base_Stop+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a1a      	ldr	r2, [r3, #32]
 8006512:	f240 4344 	movw	r3, #1092	; 0x444
 8006516:	4013      	ands	r3, r2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d107      	bne.n	800652c <HAL_TIM_Base_Stop+0x40>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <HAL_TIM_Base_Start_IT+0x50>)
 8006564:	4013      	ands	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b06      	cmp	r3, #6
 800656c:	d00b      	beq.n	8006586 <HAL_TIM_Base_Start_IT+0x42>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006574:	d007      	beq.n	8006586 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f042 0201 	orr.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	00010007 	.word	0x00010007

08006598 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6a1a      	ldr	r2, [r3, #32]
 80065b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10f      	bne.n	80065e0 <HAL_TIM_Base_Stop_IT+0x48>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6a1a      	ldr	r2, [r3, #32]
 80065c6:	f240 4344 	movw	r3, #1092	; 0x444
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d107      	bne.n	80065e0 <HAL_TIM_Base_Stop_IT+0x48>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0201 	bic.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e01d      	b.n	800663c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f7fb fb3d 	bl	8001c94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2202      	movs	r2, #2
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3304      	adds	r3, #4
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f000 fbd5 	bl	8006ddc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b0c      	cmp	r3, #12
 8006652:	d855      	bhi.n	8006700 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8006654:	a201      	add	r2, pc, #4	; (adr r2, 800665c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8006656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665a:	bf00      	nop
 800665c:	08006691 	.word	0x08006691
 8006660:	08006701 	.word	0x08006701
 8006664:	08006701 	.word	0x08006701
 8006668:	08006701 	.word	0x08006701
 800666c:	080066ad 	.word	0x080066ad
 8006670:	08006701 	.word	0x08006701
 8006674:	08006701 	.word	0x08006701
 8006678:	08006701 	.word	0x08006701
 800667c:	080066c9 	.word	0x080066c9
 8006680:	08006701 	.word	0x08006701
 8006684:	08006701 	.word	0x08006701
 8006688:	08006701 	.word	0x08006701
 800668c:	080066e5 	.word	0x080066e5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800669e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fc fe4f 	bl	8003348 <HAL_DMA_Abort_IT>
      break;
 80066aa:	e02a      	b.n	8006702 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fc fe41 	bl	8003348 <HAL_DMA_Abort_IT>
      break;
 80066c6:	e01c      	b.n	8006702 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fc fe33 	bl	8003348 <HAL_DMA_Abort_IT>
      break;
 80066e2:	e00e      	b.n	8006702 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fc fe25 	bl	8003348 <HAL_DMA_Abort_IT>
      break;
 80066fe:	e000      	b.n	8006702 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8006700:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2200      	movs	r2, #0
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fefe 	bl	800750c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a22      	ldr	r2, [pc, #136]	; (80067a0 <HAL_TIM_PWM_Stop_DMA+0x15c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_TIM_PWM_Stop_DMA+0xe0>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a21      	ldr	r2, [pc, #132]	; (80067a4 <HAL_TIM_PWM_Stop_DMA+0x160>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d101      	bne.n	8006728 <HAL_TIM_PWM_Stop_DMA+0xe4>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <HAL_TIM_PWM_Stop_DMA+0xe6>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d017      	beq.n	800675e <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6a1a      	ldr	r2, [r3, #32]
 8006734:	f241 1311 	movw	r3, #4369	; 0x1111
 8006738:	4013      	ands	r3, r2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10f      	bne.n	800675e <HAL_TIM_PWM_Stop_DMA+0x11a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	f240 4344 	movw	r3, #1092	; 0x444
 8006748:	4013      	ands	r3, r2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d107      	bne.n	800675e <HAL_TIM_PWM_Stop_DMA+0x11a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800675c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6a1a      	ldr	r2, [r3, #32]
 8006764:	f241 1311 	movw	r3, #4369	; 0x1111
 8006768:	4013      	ands	r3, r2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10f      	bne.n	800678e <HAL_TIM_PWM_Stop_DMA+0x14a>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a1a      	ldr	r2, [r3, #32]
 8006774:	f240 4344 	movw	r3, #1092	; 0x444
 8006778:	4013      	ands	r3, r2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d107      	bne.n	800678e <HAL_TIM_PWM_Stop_DMA+0x14a>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0201 	bic.w	r2, r2, #1
 800678c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40010000 	.word	0x40010000
 80067a4:	40010400 	.word	0x40010400

080067a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d122      	bne.n	8006804 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d11b      	bne.n	8006804 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f06f 0202 	mvn.w	r2, #2
 80067d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fad8 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 80067f0:	e005      	b.n	80067fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 faca 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fadb 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b04      	cmp	r3, #4
 8006810:	d122      	bne.n	8006858 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b04      	cmp	r3, #4
 800681e:	d11b      	bne.n	8006858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f06f 0204 	mvn.w	r2, #4
 8006828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2202      	movs	r2, #2
 800682e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 faae 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 8006844:	e005      	b.n	8006852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 faa0 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fab1 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b08      	cmp	r3, #8
 8006864:	d122      	bne.n	80068ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b08      	cmp	r3, #8
 8006872:	d11b      	bne.n	80068ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f06f 0208 	mvn.w	r2, #8
 800687c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2204      	movs	r2, #4
 8006882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f003 0303 	and.w	r3, r3, #3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa84 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 8006898:	e005      	b.n	80068a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fa76 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fa87 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0310 	and.w	r3, r3, #16
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d122      	bne.n	8006900 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d11b      	bne.n	8006900 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0210 	mvn.w	r2, #16
 80068d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2208      	movs	r2, #8
 80068d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa5a 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 80068ec:	e005      	b.n	80068fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fa4c 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fa5d 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b01      	cmp	r3, #1
 800690c:	d10e      	bne.n	800692c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0301 	and.w	r3, r3, #1
 8006918:	2b01      	cmp	r3, #1
 800691a:	d107      	bne.n	800692c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f06f 0201 	mvn.w	r2, #1
 8006924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fa ff62 	bl	80017f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006936:	2b80      	cmp	r3, #128	; 0x80
 8006938:	d10e      	bne.n	8006958 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	2b80      	cmp	r3, #128	; 0x80
 8006946:	d107      	bne.n	8006958 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fee4 	bl	8007720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006966:	d10e      	bne.n	8006986 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006972:	2b80      	cmp	r3, #128	; 0x80
 8006974:	d107      	bne.n	8006986 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800697e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fed7 	bl	8007734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006990:	2b40      	cmp	r3, #64	; 0x40
 8006992:	d10e      	bne.n	80069b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699e:	2b40      	cmp	r3, #64	; 0x40
 80069a0:	d107      	bne.n	80069b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fa0b 	bl	8006dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d10e      	bne.n	80069de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d107      	bne.n	80069de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f06f 0220 	mvn.w	r2, #32
 80069d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fe97 	bl	800770c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d101      	bne.n	8006a02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80069fe:	2302      	movs	r3, #2
 8006a00:	e105      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x226>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b14      	cmp	r3, #20
 8006a16:	f200 80f0 	bhi.w	8006bfa <HAL_TIM_PWM_ConfigChannel+0x212>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	08006bfb 	.word	0x08006bfb
 8006a28:	08006bfb 	.word	0x08006bfb
 8006a2c:	08006bfb 	.word	0x08006bfb
 8006a30:	08006ab5 	.word	0x08006ab5
 8006a34:	08006bfb 	.word	0x08006bfb
 8006a38:	08006bfb 	.word	0x08006bfb
 8006a3c:	08006bfb 	.word	0x08006bfb
 8006a40:	08006af7 	.word	0x08006af7
 8006a44:	08006bfb 	.word	0x08006bfb
 8006a48:	08006bfb 	.word	0x08006bfb
 8006a4c:	08006bfb 	.word	0x08006bfb
 8006a50:	08006b37 	.word	0x08006b37
 8006a54:	08006bfb 	.word	0x08006bfb
 8006a58:	08006bfb 	.word	0x08006bfb
 8006a5c:	08006bfb 	.word	0x08006bfb
 8006a60:	08006b79 	.word	0x08006b79
 8006a64:	08006bfb 	.word	0x08006bfb
 8006a68:	08006bfb 	.word	0x08006bfb
 8006a6c:	08006bfb 	.word	0x08006bfb
 8006a70:	08006bb9 	.word	0x08006bb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f000 fa4e 	bl	8006f1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0208 	orr.w	r2, r2, #8
 8006a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0204 	bic.w	r2, r2, #4
 8006a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6999      	ldr	r1, [r3, #24]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	619a      	str	r2, [r3, #24]
      break;
 8006ab2:	e0a3      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 faa0 	bl	8007000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699a      	ldr	r2, [r3, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ace:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699a      	ldr	r2, [r3, #24]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6999      	ldr	r1, [r3, #24]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	021a      	lsls	r2, r3, #8
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	619a      	str	r2, [r3, #24]
      break;
 8006af4:	e082      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68b9      	ldr	r1, [r7, #8]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 faf7 	bl	80070f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f042 0208 	orr.w	r2, r2, #8
 8006b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0204 	bic.w	r2, r2, #4
 8006b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69d9      	ldr	r1, [r3, #28]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	691a      	ldr	r2, [r3, #16]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	61da      	str	r2, [r3, #28]
      break;
 8006b34:	e062      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68b9      	ldr	r1, [r7, #8]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fb4d 	bl	80071dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69d9      	ldr	r1, [r3, #28]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	021a      	lsls	r2, r3, #8
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	61da      	str	r2, [r3, #28]
      break;
 8006b76:	e041      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fb84 	bl	800728c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0208 	orr.w	r2, r2, #8
 8006b92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0204 	bic.w	r2, r2, #4
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	691a      	ldr	r2, [r3, #16]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bb6:	e021      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68b9      	ldr	r1, [r7, #8]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fbb6 	bl	8007330 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	021a      	lsls	r2, r3, #8
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bf8:	e000      	b.n	8006bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006bfa:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop

08006c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_TIM_ConfigClockSource+0x18>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e0a6      	b.n	8006d7e <HAL_TIM_ConfigClockSource+0x166>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4b4f      	ldr	r3, [pc, #316]	; (8006d88 <HAL_TIM_ConfigClockSource+0x170>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b40      	cmp	r3, #64	; 0x40
 8006c66:	d067      	beq.n	8006d38 <HAL_TIM_ConfigClockSource+0x120>
 8006c68:	2b40      	cmp	r3, #64	; 0x40
 8006c6a:	d80b      	bhi.n	8006c84 <HAL_TIM_ConfigClockSource+0x6c>
 8006c6c:	2b10      	cmp	r3, #16
 8006c6e:	d073      	beq.n	8006d58 <HAL_TIM_ConfigClockSource+0x140>
 8006c70:	2b10      	cmp	r3, #16
 8006c72:	d802      	bhi.n	8006c7a <HAL_TIM_ConfigClockSource+0x62>
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d06f      	beq.n	8006d58 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006c78:	e078      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d06c      	beq.n	8006d58 <HAL_TIM_ConfigClockSource+0x140>
 8006c7e:	2b30      	cmp	r3, #48	; 0x30
 8006c80:	d06a      	beq.n	8006d58 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006c82:	e073      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c84:	2b70      	cmp	r3, #112	; 0x70
 8006c86:	d00d      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0x8c>
 8006c88:	2b70      	cmp	r3, #112	; 0x70
 8006c8a:	d804      	bhi.n	8006c96 <HAL_TIM_ConfigClockSource+0x7e>
 8006c8c:	2b50      	cmp	r3, #80	; 0x50
 8006c8e:	d033      	beq.n	8006cf8 <HAL_TIM_ConfigClockSource+0xe0>
 8006c90:	2b60      	cmp	r3, #96	; 0x60
 8006c92:	d041      	beq.n	8006d18 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006c94:	e06a      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9a:	d066      	beq.n	8006d6a <HAL_TIM_ConfigClockSource+0x152>
 8006c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca0:	d017      	beq.n	8006cd2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006ca2:	e063      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	6899      	ldr	r1, [r3, #8]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f000 fc0a 	bl	80074cc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cc6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	609a      	str	r2, [r3, #8]
      break;
 8006cd0:	e04c      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6818      	ldr	r0, [r3, #0]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	6899      	ldr	r1, [r3, #8]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	f000 fbf3 	bl	80074cc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689a      	ldr	r2, [r3, #8]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cf4:	609a      	str	r2, [r3, #8]
      break;
 8006cf6:	e039      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	6859      	ldr	r1, [r3, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	461a      	mov	r2, r3
 8006d06:	f000 fb67 	bl	80073d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2150      	movs	r1, #80	; 0x50
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fbc0 	bl	8007496 <TIM_ITRx_SetConfig>
      break;
 8006d16:	e029      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	6859      	ldr	r1, [r3, #4]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	461a      	mov	r2, r3
 8006d26:	f000 fb86 	bl	8007436 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2160      	movs	r1, #96	; 0x60
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fbb0 	bl	8007496 <TIM_ITRx_SetConfig>
      break;
 8006d36:	e019      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	6859      	ldr	r1, [r3, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	461a      	mov	r2, r3
 8006d46:	f000 fb47 	bl	80073d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2140      	movs	r1, #64	; 0x40
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fba0 	bl	8007496 <TIM_ITRx_SetConfig>
      break;
 8006d56:	e009      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4619      	mov	r1, r3
 8006d62:	4610      	mov	r0, r2
 8006d64:	f000 fb97 	bl	8007496 <TIM_ITRx_SetConfig>
      break;
 8006d68:	e000      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	fffeff88 	.word	0xfffeff88

08006d8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a40      	ldr	r2, [pc, #256]	; (8006ef0 <TIM_Base_SetConfig+0x114>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d013      	beq.n	8006e1c <TIM_Base_SetConfig+0x40>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfa:	d00f      	beq.n	8006e1c <TIM_Base_SetConfig+0x40>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a3d      	ldr	r2, [pc, #244]	; (8006ef4 <TIM_Base_SetConfig+0x118>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00b      	beq.n	8006e1c <TIM_Base_SetConfig+0x40>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a3c      	ldr	r2, [pc, #240]	; (8006ef8 <TIM_Base_SetConfig+0x11c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d007      	beq.n	8006e1c <TIM_Base_SetConfig+0x40>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a3b      	ldr	r2, [pc, #236]	; (8006efc <TIM_Base_SetConfig+0x120>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <TIM_Base_SetConfig+0x40>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a3a      	ldr	r2, [pc, #232]	; (8006f00 <TIM_Base_SetConfig+0x124>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d108      	bne.n	8006e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a2f      	ldr	r2, [pc, #188]	; (8006ef0 <TIM_Base_SetConfig+0x114>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d02b      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e3c:	d027      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a2c      	ldr	r2, [pc, #176]	; (8006ef4 <TIM_Base_SetConfig+0x118>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d023      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a2b      	ldr	r2, [pc, #172]	; (8006ef8 <TIM_Base_SetConfig+0x11c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d01f      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a2a      	ldr	r2, [pc, #168]	; (8006efc <TIM_Base_SetConfig+0x120>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d01b      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a29      	ldr	r2, [pc, #164]	; (8006f00 <TIM_Base_SetConfig+0x124>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d017      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a28      	ldr	r2, [pc, #160]	; (8006f04 <TIM_Base_SetConfig+0x128>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a27      	ldr	r2, [pc, #156]	; (8006f08 <TIM_Base_SetConfig+0x12c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00f      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a26      	ldr	r2, [pc, #152]	; (8006f0c <TIM_Base_SetConfig+0x130>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00b      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a25      	ldr	r2, [pc, #148]	; (8006f10 <TIM_Base_SetConfig+0x134>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d007      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a24      	ldr	r2, [pc, #144]	; (8006f14 <TIM_Base_SetConfig+0x138>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d003      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a23      	ldr	r2, [pc, #140]	; (8006f18 <TIM_Base_SetConfig+0x13c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d108      	bne.n	8006ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a0a      	ldr	r2, [pc, #40]	; (8006ef0 <TIM_Base_SetConfig+0x114>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d003      	beq.n	8006ed4 <TIM_Base_SetConfig+0xf8>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a0c      	ldr	r2, [pc, #48]	; (8006f00 <TIM_Base_SetConfig+0x124>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d103      	bne.n	8006edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	615a      	str	r2, [r3, #20]
}
 8006ee2:	bf00      	nop
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40010000 	.word	0x40010000
 8006ef4:	40000400 	.word	0x40000400
 8006ef8:	40000800 	.word	0x40000800
 8006efc:	40000c00 	.word	0x40000c00
 8006f00:	40010400 	.word	0x40010400
 8006f04:	40014000 	.word	0x40014000
 8006f08:	40014400 	.word	0x40014400
 8006f0c:	40014800 	.word	0x40014800
 8006f10:	40001800 	.word	0x40001800
 8006f14:	40001c00 	.word	0x40001c00
 8006f18:	40002000 	.word	0x40002000

08006f1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f023 0201 	bic.w	r2, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4b2b      	ldr	r3, [pc, #172]	; (8006ff4 <TIM_OC1_SetConfig+0xd8>)
 8006f48:	4013      	ands	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0303 	bic.w	r3, r3, #3
 8006f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f023 0302 	bic.w	r3, r3, #2
 8006f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a21      	ldr	r2, [pc, #132]	; (8006ff8 <TIM_OC1_SetConfig+0xdc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_OC1_SetConfig+0x64>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a20      	ldr	r2, [pc, #128]	; (8006ffc <TIM_OC1_SetConfig+0xe0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d10c      	bne.n	8006f9a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f023 0308 	bic.w	r3, r3, #8
 8006f86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f023 0304 	bic.w	r3, r3, #4
 8006f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a16      	ldr	r2, [pc, #88]	; (8006ff8 <TIM_OC1_SetConfig+0xdc>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d003      	beq.n	8006faa <TIM_OC1_SetConfig+0x8e>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a15      	ldr	r2, [pc, #84]	; (8006ffc <TIM_OC1_SetConfig+0xe0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d111      	bne.n	8006fce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	621a      	str	r2, [r3, #32]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	fffeff8f 	.word	0xfffeff8f
 8006ff8:	40010000 	.word	0x40010000
 8006ffc:	40010400 	.word	0x40010400

08007000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0210 	bic.w	r2, r3, #16
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4b2e      	ldr	r3, [pc, #184]	; (80070e4 <TIM_OC2_SetConfig+0xe4>)
 800702c:	4013      	ands	r3, r2
 800702e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f023 0320 	bic.w	r3, r3, #32
 800704a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a23      	ldr	r2, [pc, #140]	; (80070e8 <TIM_OC2_SetConfig+0xe8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d003      	beq.n	8007068 <TIM_OC2_SetConfig+0x68>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a22      	ldr	r2, [pc, #136]	; (80070ec <TIM_OC2_SetConfig+0xec>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d10d      	bne.n	8007084 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800706e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	011b      	lsls	r3, r3, #4
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007082:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a18      	ldr	r2, [pc, #96]	; (80070e8 <TIM_OC2_SetConfig+0xe8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d003      	beq.n	8007094 <TIM_OC2_SetConfig+0x94>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a17      	ldr	r2, [pc, #92]	; (80070ec <TIM_OC2_SetConfig+0xec>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d113      	bne.n	80070bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800709a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	697a      	ldr	r2, [r7, #20]
 80070d4:	621a      	str	r2, [r3, #32]
}
 80070d6:	bf00      	nop
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	feff8fff 	.word	0xfeff8fff
 80070e8:	40010000 	.word	0x40010000
 80070ec:	40010400 	.word	0x40010400

080070f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4b2d      	ldr	r3, [pc, #180]	; (80071d0 <TIM_OC3_SetConfig+0xe0>)
 800711c:	4013      	ands	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007138:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	021b      	lsls	r3, r3, #8
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a22      	ldr	r2, [pc, #136]	; (80071d4 <TIM_OC3_SetConfig+0xe4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d003      	beq.n	8007156 <TIM_OC3_SetConfig+0x66>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a21      	ldr	r2, [pc, #132]	; (80071d8 <TIM_OC3_SetConfig+0xe8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d10d      	bne.n	8007172 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800715c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	021b      	lsls	r3, r3, #8
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4313      	orrs	r3, r2
 8007168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a17      	ldr	r2, [pc, #92]	; (80071d4 <TIM_OC3_SetConfig+0xe4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <TIM_OC3_SetConfig+0x92>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a16      	ldr	r2, [pc, #88]	; (80071d8 <TIM_OC3_SetConfig+0xe8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d113      	bne.n	80071aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	011b      	lsls	r3, r3, #4
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	621a      	str	r2, [r3, #32]
}
 80071c4:	bf00      	nop
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	fffeff8f 	.word	0xfffeff8f
 80071d4:	40010000 	.word	0x40010000
 80071d8:	40010400 	.word	0x40010400

080071dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4b1e      	ldr	r3, [pc, #120]	; (8007280 <TIM_OC4_SetConfig+0xa4>)
 8007208:	4013      	ands	r3, r2
 800720a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	4313      	orrs	r3, r2
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	031b      	lsls	r3, r3, #12
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4313      	orrs	r3, r2
 8007232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a13      	ldr	r2, [pc, #76]	; (8007284 <TIM_OC4_SetConfig+0xa8>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d003      	beq.n	8007244 <TIM_OC4_SetConfig+0x68>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a12      	ldr	r2, [pc, #72]	; (8007288 <TIM_OC4_SetConfig+0xac>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d109      	bne.n	8007258 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800724a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	019b      	lsls	r3, r3, #6
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	4313      	orrs	r3, r2
 8007256:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	621a      	str	r2, [r3, #32]
}
 8007272:	bf00      	nop
 8007274:	371c      	adds	r7, #28
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	feff8fff 	.word	0xfeff8fff
 8007284:	40010000 	.word	0x40010000
 8007288:	40010400 	.word	0x40010400

0800728c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4b1b      	ldr	r3, [pc, #108]	; (8007324 <TIM_OC5_SetConfig+0x98>)
 80072b8:	4013      	ands	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80072cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a12      	ldr	r2, [pc, #72]	; (8007328 <TIM_OC5_SetConfig+0x9c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d003      	beq.n	80072ea <TIM_OC5_SetConfig+0x5e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a11      	ldr	r2, [pc, #68]	; (800732c <TIM_OC5_SetConfig+0xa0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d109      	bne.n	80072fe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	621a      	str	r2, [r3, #32]
}
 8007318:	bf00      	nop
 800731a:	371c      	adds	r7, #28
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	fffeff8f 	.word	0xfffeff8f
 8007328:	40010000 	.word	0x40010000
 800732c:	40010400 	.word	0x40010400

08007330 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4b1c      	ldr	r3, [pc, #112]	; (80073cc <TIM_OC6_SetConfig+0x9c>)
 800735c:	4013      	ands	r3, r2
 800735e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	021b      	lsls	r3, r3, #8
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	051b      	lsls	r3, r3, #20
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a13      	ldr	r2, [pc, #76]	; (80073d0 <TIM_OC6_SetConfig+0xa0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_OC6_SetConfig+0x60>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <TIM_OC6_SetConfig+0xa4>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d109      	bne.n	80073a4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007396:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	029b      	lsls	r3, r3, #10
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	693a      	ldr	r2, [r7, #16]
 80073bc:	621a      	str	r2, [r3, #32]
}
 80073be:	bf00      	nop
 80073c0:	371c      	adds	r7, #28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	feff8fff 	.word	0xfeff8fff
 80073d0:	40010000 	.word	0x40010000
 80073d4:	40010400 	.word	0x40010400

080073d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	f023 0201 	bic.w	r2, r3, #1
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f023 030a 	bic.w	r3, r3, #10
 8007414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4313      	orrs	r3, r2
 800741c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	621a      	str	r2, [r3, #32]
}
 800742a:	bf00      	nop
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007436:	b480      	push	{r7}
 8007438:	b087      	sub	sp, #28
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	f023 0210 	bic.w	r2, r3, #16
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6a1b      	ldr	r3, [r3, #32]
 8007458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	031b      	lsls	r3, r3, #12
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007472:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4313      	orrs	r3, r2
 800747c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	621a      	str	r2, [r3, #32]
}
 800748a:	bf00      	nop
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007496:	b480      	push	{r7}
 8007498:	b085      	sub	sp, #20
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f043 0307 	orr.w	r3, r3, #7
 80074b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	609a      	str	r2, [r3, #8]
}
 80074c0:	bf00      	nop
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	021a      	lsls	r2, r3, #8
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	431a      	orrs	r2, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	609a      	str	r2, [r3, #8]
}
 8007500:	bf00      	nop
 8007502:	371c      	adds	r7, #28
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f003 031f 	and.w	r3, r3, #31
 800751e:	2201      	movs	r2, #1
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6a1a      	ldr	r2, [r3, #32]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	43db      	mvns	r3, r3
 800752e:	401a      	ands	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6a1a      	ldr	r2, [r3, #32]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f003 031f 	and.w	r3, r3, #31
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	fa01 f303 	lsl.w	r3, r1, r3
 8007544:	431a      	orrs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	621a      	str	r2, [r3, #32]
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
	...

08007558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007568:	2b01      	cmp	r3, #1
 800756a:	d101      	bne.n	8007570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800756c:	2302      	movs	r3, #2
 800756e:	e045      	b.n	80075fc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2202      	movs	r2, #2
 800757c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a1c      	ldr	r2, [pc, #112]	; (8007608 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d004      	beq.n	80075a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a1b      	ldr	r2, [pc, #108]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d108      	bne.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075ce:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	40010000 	.word	0x40010000
 800760c:	40010400 	.word	0x40010400

08007610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007628:	2302      	movs	r3, #2
 800762a:	e065      	b.n	80076f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4313      	orrs	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	041b      	lsls	r3, r3, #16
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a16      	ldr	r2, [pc, #88]	; (8007704 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a14      	ldr	r2, [pc, #80]	; (8007708 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d115      	bne.n	80076e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	051b      	lsls	r3, r3, #20
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40010000 	.word	0x40010000
 8007708:	40010400 	.word	0x40010400

0800770c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e040      	b.n	80077dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fa fb1c 	bl	8001da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2224      	movs	r2, #36	; 0x24
 8007774:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0201 	bic.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f95c 	bl	8007a44 <UART_SetConfig>
 800778c:	4603      	mov	r3, r0
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e022      	b.n	80077dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fbf4 	bl	8007f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077c2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0201 	orr.w	r2, r2, #1
 80077d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 fc7b 	bl	80080d0 <UART_CheckIdleState>
 80077da:	4603      	mov	r3, r0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d113      	bne.n	800783a <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00e      	beq.n	800783a <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 80eb 	beq.w	8007a06 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	4798      	blx	r3
      }
      return;
 8007838:	e0e5      	b.n	8007a06 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 80c0 	beq.w	80079c2 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d105      	bne.n	8007858 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 80b5 	beq.w	80079c2 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00e      	beq.n	8007880 <HAL_UART_IRQHandler+0x9c>
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007868:	2b00      	cmp	r3, #0
 800786a:	d009      	beq.n	8007880 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2201      	movs	r2, #1
 8007872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007878:	f043 0201 	orr.w	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00e      	beq.n	80078a8 <HAL_UART_IRQHandler+0xc4>
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d009      	beq.n	80078a8 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2202      	movs	r2, #2
 800789a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078a0:	f043 0204 	orr.w	r2, r3, #4
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	f003 0304 	and.w	r3, r3, #4
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00e      	beq.n	80078d0 <HAL_UART_IRQHandler+0xec>
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d009      	beq.n	80078d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2204      	movs	r2, #4
 80078c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078c8:	f043 0202 	orr.w	r2, r3, #2
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d013      	beq.n	8007902 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	f003 0320 	and.w	r3, r3, #32
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d104      	bne.n	80078ee <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2208      	movs	r2, #8
 80078f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078fa:	f043 0208 	orr.w	r2, r3, #8
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007906:	2b00      	cmp	r3, #0
 8007908:	d07f      	beq.n	8007a0a <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00c      	beq.n	800792e <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d007      	beq.n	800792e <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007932:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793e:	2b40      	cmp	r3, #64	; 0x40
 8007940:	d004      	beq.n	800794c <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007948:	2b00      	cmp	r3, #0
 800794a:	d031      	beq.n	80079b0 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fc36 	bl	80081be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795c:	2b40      	cmp	r3, #64	; 0x40
 800795e:	d123      	bne.n	80079a8 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d013      	beq.n	80079a0 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800797c:	4a26      	ldr	r2, [pc, #152]	; (8007a18 <HAL_UART_IRQHandler+0x234>)
 800797e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007984:	4618      	mov	r0, r3
 8007986:	f7fb fcdf 	bl	8003348 <HAL_DMA_Abort_IT>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d016      	beq.n	80079be <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800799a:	4610      	mov	r0, r2
 800799c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800799e:	e00e      	b.n	80079be <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f845 	bl	8007a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a6:	e00a      	b.n	80079be <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f841 	bl	8007a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ae:	e006      	b.n	80079be <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f83d 	bl	8007a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80079bc:	e025      	b.n	8007a0a <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079be:	bf00      	nop
    return;
 80079c0:	e023      	b.n	8007a0a <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00d      	beq.n	80079e8 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d008      	beq.n	80079e8 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d017      	beq.n	8007a0e <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	4798      	blx	r3
    }
    return;
 80079e6:	e012      	b.n	8007a0e <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00e      	beq.n	8007a10 <HAL_UART_IRQHandler+0x22c>
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d009      	beq.n	8007a10 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc14 	bl	800822a <UART_EndTransmit_IT>
    return;
 8007a02:	bf00      	nop
 8007a04:	e004      	b.n	8007a10 <HAL_UART_IRQHandler+0x22c>
      return;
 8007a06:	bf00      	nop
 8007a08:	e002      	b.n	8007a10 <HAL_UART_IRQHandler+0x22c>
    return;
 8007a0a:	bf00      	nop
 8007a0c:	e000      	b.n	8007a10 <HAL_UART_IRQHandler+0x22c>
    return;
 8007a0e:	bf00      	nop
  }

}
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	080081ff 	.word	0x080081ff

08007a1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	4bb1      	ldr	r3, [pc, #708]	; (8007d38 <UART_SetConfig+0x2f4>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	6939      	ldr	r1, [r7, #16]
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a9f      	ldr	r2, [pc, #636]	; (8007d3c <UART_SetConfig+0x2f8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d121      	bne.n	8007b08 <UART_SetConfig+0xc4>
 8007ac4:	4b9e      	ldr	r3, [pc, #632]	; (8007d40 <UART_SetConfig+0x2fc>)
 8007ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aca:	f003 0303 	and.w	r3, r3, #3
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d816      	bhi.n	8007b00 <UART_SetConfig+0xbc>
 8007ad2:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <UART_SetConfig+0x94>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007ae9 	.word	0x08007ae9
 8007adc:	08007af5 	.word	0x08007af5
 8007ae0:	08007aef 	.word	0x08007aef
 8007ae4:	08007afb 	.word	0x08007afb
 8007ae8:	2301      	movs	r3, #1
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e151      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007aee:	2302      	movs	r3, #2
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e14e      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007af4:	2304      	movs	r3, #4
 8007af6:	77fb      	strb	r3, [r7, #31]
 8007af8:	e14b      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007afa:	2308      	movs	r3, #8
 8007afc:	77fb      	strb	r3, [r7, #31]
 8007afe:	e148      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007b00:	2310      	movs	r3, #16
 8007b02:	77fb      	strb	r3, [r7, #31]
 8007b04:	bf00      	nop
 8007b06:	e144      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a8d      	ldr	r2, [pc, #564]	; (8007d44 <UART_SetConfig+0x300>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d134      	bne.n	8007b7c <UART_SetConfig+0x138>
 8007b12:	4b8b      	ldr	r3, [pc, #556]	; (8007d40 <UART_SetConfig+0x2fc>)
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b18:	f003 030c 	and.w	r3, r3, #12
 8007b1c:	2b0c      	cmp	r3, #12
 8007b1e:	d829      	bhi.n	8007b74 <UART_SetConfig+0x130>
 8007b20:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <UART_SetConfig+0xe4>)
 8007b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b26:	bf00      	nop
 8007b28:	08007b5d 	.word	0x08007b5d
 8007b2c:	08007b75 	.word	0x08007b75
 8007b30:	08007b75 	.word	0x08007b75
 8007b34:	08007b75 	.word	0x08007b75
 8007b38:	08007b69 	.word	0x08007b69
 8007b3c:	08007b75 	.word	0x08007b75
 8007b40:	08007b75 	.word	0x08007b75
 8007b44:	08007b75 	.word	0x08007b75
 8007b48:	08007b63 	.word	0x08007b63
 8007b4c:	08007b75 	.word	0x08007b75
 8007b50:	08007b75 	.word	0x08007b75
 8007b54:	08007b75 	.word	0x08007b75
 8007b58:	08007b6f 	.word	0x08007b6f
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	77fb      	strb	r3, [r7, #31]
 8007b60:	e117      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007b62:	2302      	movs	r3, #2
 8007b64:	77fb      	strb	r3, [r7, #31]
 8007b66:	e114      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007b68:	2304      	movs	r3, #4
 8007b6a:	77fb      	strb	r3, [r7, #31]
 8007b6c:	e111      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007b6e:	2308      	movs	r3, #8
 8007b70:	77fb      	strb	r3, [r7, #31]
 8007b72:	e10e      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007b74:	2310      	movs	r3, #16
 8007b76:	77fb      	strb	r3, [r7, #31]
 8007b78:	bf00      	nop
 8007b7a:	e10a      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a71      	ldr	r2, [pc, #452]	; (8007d48 <UART_SetConfig+0x304>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d120      	bne.n	8007bc8 <UART_SetConfig+0x184>
 8007b86:	4b6e      	ldr	r3, [pc, #440]	; (8007d40 <UART_SetConfig+0x2fc>)
 8007b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b90:	2b10      	cmp	r3, #16
 8007b92:	d00f      	beq.n	8007bb4 <UART_SetConfig+0x170>
 8007b94:	2b10      	cmp	r3, #16
 8007b96:	d802      	bhi.n	8007b9e <UART_SetConfig+0x15a>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <UART_SetConfig+0x164>
 8007b9c:	e010      	b.n	8007bc0 <UART_SetConfig+0x17c>
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	d005      	beq.n	8007bae <UART_SetConfig+0x16a>
 8007ba2:	2b30      	cmp	r3, #48	; 0x30
 8007ba4:	d009      	beq.n	8007bba <UART_SetConfig+0x176>
 8007ba6:	e00b      	b.n	8007bc0 <UART_SetConfig+0x17c>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	77fb      	strb	r3, [r7, #31]
 8007bac:	e0f1      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007bae:	2302      	movs	r3, #2
 8007bb0:	77fb      	strb	r3, [r7, #31]
 8007bb2:	e0ee      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007bb4:	2304      	movs	r3, #4
 8007bb6:	77fb      	strb	r3, [r7, #31]
 8007bb8:	e0eb      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007bba:	2308      	movs	r3, #8
 8007bbc:	77fb      	strb	r3, [r7, #31]
 8007bbe:	e0e8      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	bf00      	nop
 8007bc6:	e0e4      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a5f      	ldr	r2, [pc, #380]	; (8007d4c <UART_SetConfig+0x308>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d120      	bne.n	8007c14 <UART_SetConfig+0x1d0>
 8007bd2:	4b5b      	ldr	r3, [pc, #364]	; (8007d40 <UART_SetConfig+0x2fc>)
 8007bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007bdc:	2b40      	cmp	r3, #64	; 0x40
 8007bde:	d00f      	beq.n	8007c00 <UART_SetConfig+0x1bc>
 8007be0:	2b40      	cmp	r3, #64	; 0x40
 8007be2:	d802      	bhi.n	8007bea <UART_SetConfig+0x1a6>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <UART_SetConfig+0x1b0>
 8007be8:	e010      	b.n	8007c0c <UART_SetConfig+0x1c8>
 8007bea:	2b80      	cmp	r3, #128	; 0x80
 8007bec:	d005      	beq.n	8007bfa <UART_SetConfig+0x1b6>
 8007bee:	2bc0      	cmp	r3, #192	; 0xc0
 8007bf0:	d009      	beq.n	8007c06 <UART_SetConfig+0x1c2>
 8007bf2:	e00b      	b.n	8007c0c <UART_SetConfig+0x1c8>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	77fb      	strb	r3, [r7, #31]
 8007bf8:	e0cb      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	77fb      	strb	r3, [r7, #31]
 8007bfe:	e0c8      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007c00:	2304      	movs	r3, #4
 8007c02:	77fb      	strb	r3, [r7, #31]
 8007c04:	e0c5      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007c06:	2308      	movs	r3, #8
 8007c08:	77fb      	strb	r3, [r7, #31]
 8007c0a:	e0c2      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007c0c:	2310      	movs	r3, #16
 8007c0e:	77fb      	strb	r3, [r7, #31]
 8007c10:	bf00      	nop
 8007c12:	e0be      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a4d      	ldr	r2, [pc, #308]	; (8007d50 <UART_SetConfig+0x30c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d124      	bne.n	8007c68 <UART_SetConfig+0x224>
 8007c1e:	4b48      	ldr	r3, [pc, #288]	; (8007d40 <UART_SetConfig+0x2fc>)
 8007c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c2c:	d012      	beq.n	8007c54 <UART_SetConfig+0x210>
 8007c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c32:	d802      	bhi.n	8007c3a <UART_SetConfig+0x1f6>
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d007      	beq.n	8007c48 <UART_SetConfig+0x204>
 8007c38:	e012      	b.n	8007c60 <UART_SetConfig+0x21c>
 8007c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c3e:	d006      	beq.n	8007c4e <UART_SetConfig+0x20a>
 8007c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c44:	d009      	beq.n	8007c5a <UART_SetConfig+0x216>
 8007c46:	e00b      	b.n	8007c60 <UART_SetConfig+0x21c>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	77fb      	strb	r3, [r7, #31]
 8007c4c:	e0a1      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007c4e:	2302      	movs	r3, #2
 8007c50:	77fb      	strb	r3, [r7, #31]
 8007c52:	e09e      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007c54:	2304      	movs	r3, #4
 8007c56:	77fb      	strb	r3, [r7, #31]
 8007c58:	e09b      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007c5a:	2308      	movs	r3, #8
 8007c5c:	77fb      	strb	r3, [r7, #31]
 8007c5e:	e098      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007c60:	2310      	movs	r3, #16
 8007c62:	77fb      	strb	r3, [r7, #31]
 8007c64:	bf00      	nop
 8007c66:	e094      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a39      	ldr	r2, [pc, #228]	; (8007d54 <UART_SetConfig+0x310>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d124      	bne.n	8007cbc <UART_SetConfig+0x278>
 8007c72:	4b33      	ldr	r3, [pc, #204]	; (8007d40 <UART_SetConfig+0x2fc>)
 8007c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c80:	d012      	beq.n	8007ca8 <UART_SetConfig+0x264>
 8007c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c86:	d802      	bhi.n	8007c8e <UART_SetConfig+0x24a>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d007      	beq.n	8007c9c <UART_SetConfig+0x258>
 8007c8c:	e012      	b.n	8007cb4 <UART_SetConfig+0x270>
 8007c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c92:	d006      	beq.n	8007ca2 <UART_SetConfig+0x25e>
 8007c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c98:	d009      	beq.n	8007cae <UART_SetConfig+0x26a>
 8007c9a:	e00b      	b.n	8007cb4 <UART_SetConfig+0x270>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	77fb      	strb	r3, [r7, #31]
 8007ca0:	e077      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	77fb      	strb	r3, [r7, #31]
 8007ca6:	e074      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007ca8:	2304      	movs	r3, #4
 8007caa:	77fb      	strb	r3, [r7, #31]
 8007cac:	e071      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007cae:	2308      	movs	r3, #8
 8007cb0:	77fb      	strb	r3, [r7, #31]
 8007cb2:	e06e      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	77fb      	strb	r3, [r7, #31]
 8007cb8:	bf00      	nop
 8007cba:	e06a      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a25      	ldr	r2, [pc, #148]	; (8007d58 <UART_SetConfig+0x314>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d124      	bne.n	8007d10 <UART_SetConfig+0x2cc>
 8007cc6:	4b1e      	ldr	r3, [pc, #120]	; (8007d40 <UART_SetConfig+0x2fc>)
 8007cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ccc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cd4:	d012      	beq.n	8007cfc <UART_SetConfig+0x2b8>
 8007cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cda:	d802      	bhi.n	8007ce2 <UART_SetConfig+0x29e>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d007      	beq.n	8007cf0 <UART_SetConfig+0x2ac>
 8007ce0:	e012      	b.n	8007d08 <UART_SetConfig+0x2c4>
 8007ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce6:	d006      	beq.n	8007cf6 <UART_SetConfig+0x2b2>
 8007ce8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cec:	d009      	beq.n	8007d02 <UART_SetConfig+0x2be>
 8007cee:	e00b      	b.n	8007d08 <UART_SetConfig+0x2c4>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	77fb      	strb	r3, [r7, #31]
 8007cf4:	e04d      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	77fb      	strb	r3, [r7, #31]
 8007cfa:	e04a      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	77fb      	strb	r3, [r7, #31]
 8007d00:	e047      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007d02:	2308      	movs	r3, #8
 8007d04:	77fb      	strb	r3, [r7, #31]
 8007d06:	e044      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007d08:	2310      	movs	r3, #16
 8007d0a:	77fb      	strb	r3, [r7, #31]
 8007d0c:	bf00      	nop
 8007d0e:	e040      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a11      	ldr	r2, [pc, #68]	; (8007d5c <UART_SetConfig+0x318>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d139      	bne.n	8007d8e <UART_SetConfig+0x34a>
 8007d1a:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <UART_SetConfig+0x2fc>)
 8007d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d28:	d027      	beq.n	8007d7a <UART_SetConfig+0x336>
 8007d2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d2e:	d817      	bhi.n	8007d60 <UART_SetConfig+0x31c>
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d01c      	beq.n	8007d6e <UART_SetConfig+0x32a>
 8007d34:	e027      	b.n	8007d86 <UART_SetConfig+0x342>
 8007d36:	bf00      	nop
 8007d38:	efff69f3 	.word	0xefff69f3
 8007d3c:	40011000 	.word	0x40011000
 8007d40:	40023800 	.word	0x40023800
 8007d44:	40004400 	.word	0x40004400
 8007d48:	40004800 	.word	0x40004800
 8007d4c:	40004c00 	.word	0x40004c00
 8007d50:	40005000 	.word	0x40005000
 8007d54:	40011400 	.word	0x40011400
 8007d58:	40007800 	.word	0x40007800
 8007d5c:	40007c00 	.word	0x40007c00
 8007d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d64:	d006      	beq.n	8007d74 <UART_SetConfig+0x330>
 8007d66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d6a:	d009      	beq.n	8007d80 <UART_SetConfig+0x33c>
 8007d6c:	e00b      	b.n	8007d86 <UART_SetConfig+0x342>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	77fb      	strb	r3, [r7, #31]
 8007d72:	e00e      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007d74:	2302      	movs	r3, #2
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e00b      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007d7a:	2304      	movs	r3, #4
 8007d7c:	77fb      	strb	r3, [r7, #31]
 8007d7e:	e008      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007d80:	2308      	movs	r3, #8
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e005      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007d86:	2310      	movs	r3, #16
 8007d88:	77fb      	strb	r3, [r7, #31]
 8007d8a:	bf00      	nop
 8007d8c:	e001      	b.n	8007d92 <UART_SetConfig+0x34e>
 8007d8e:	2310      	movs	r3, #16
 8007d90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d9a:	d17c      	bne.n	8007e96 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8007d9c:	7ffb      	ldrb	r3, [r7, #31]
 8007d9e:	2b08      	cmp	r3, #8
 8007da0:	d859      	bhi.n	8007e56 <UART_SetConfig+0x412>
 8007da2:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <UART_SetConfig+0x364>)
 8007da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da8:	08007dcd 	.word	0x08007dcd
 8007dac:	08007deb 	.word	0x08007deb
 8007db0:	08007e09 	.word	0x08007e09
 8007db4:	08007e57 	.word	0x08007e57
 8007db8:	08007e21 	.word	0x08007e21
 8007dbc:	08007e57 	.word	0x08007e57
 8007dc0:	08007e57 	.word	0x08007e57
 8007dc4:	08007e57 	.word	0x08007e57
 8007dc8:	08007e3f 	.word	0x08007e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007dcc:	f7fd fd08 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	005a      	lsls	r2, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	085b      	lsrs	r3, r3, #1
 8007dda:	441a      	add	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	61bb      	str	r3, [r7, #24]
        break;
 8007de8:	e038      	b.n	8007e5c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007dea:	f7fd fd0d 	bl	8005808 <HAL_RCC_GetPCLK2Freq>
 8007dee:	4603      	mov	r3, r0
 8007df0:	005a      	lsls	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	085b      	lsrs	r3, r3, #1
 8007df8:	441a      	add	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	61bb      	str	r3, [r7, #24]
        break;
 8007e06:	e029      	b.n	8007e5c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	085a      	lsrs	r2, r3, #1
 8007e0e:	4b5d      	ldr	r3, [pc, #372]	; (8007f84 <UART_SetConfig+0x540>)
 8007e10:	4413      	add	r3, r2
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6852      	ldr	r2, [r2, #4]
 8007e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	61bb      	str	r3, [r7, #24]
        break;
 8007e1e:	e01d      	b.n	8007e5c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007e20:	f7fd fbfa 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 8007e24:	4603      	mov	r3, r0
 8007e26:	005a      	lsls	r2, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	085b      	lsrs	r3, r3, #1
 8007e2e:	441a      	add	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	61bb      	str	r3, [r7, #24]
        break;
 8007e3c:	e00e      	b.n	8007e5c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	085b      	lsrs	r3, r3, #1
 8007e44:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	61bb      	str	r3, [r7, #24]
        break;
 8007e54:	e002      	b.n	8007e5c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	75fb      	strb	r3, [r7, #23]
        break;
 8007e5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	2b0f      	cmp	r3, #15
 8007e60:	d916      	bls.n	8007e90 <UART_SetConfig+0x44c>
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e68:	d212      	bcs.n	8007e90 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f023 030f 	bic.w	r3, r3, #15
 8007e72:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	085b      	lsrs	r3, r3, #1
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	89fb      	ldrh	r3, [r7, #14]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	89fa      	ldrh	r2, [r7, #14]
 8007e8c:	60da      	str	r2, [r3, #12]
 8007e8e:	e06e      	b.n	8007f6e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	75fb      	strb	r3, [r7, #23]
 8007e94:	e06b      	b.n	8007f6e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8007e96:	7ffb      	ldrb	r3, [r7, #31]
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d857      	bhi.n	8007f4c <UART_SetConfig+0x508>
 8007e9c:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <UART_SetConfig+0x460>)
 8007e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea2:	bf00      	nop
 8007ea4:	08007ec9 	.word	0x08007ec9
 8007ea8:	08007ee5 	.word	0x08007ee5
 8007eac:	08007f01 	.word	0x08007f01
 8007eb0:	08007f4d 	.word	0x08007f4d
 8007eb4:	08007f19 	.word	0x08007f19
 8007eb8:	08007f4d 	.word	0x08007f4d
 8007ebc:	08007f4d 	.word	0x08007f4d
 8007ec0:	08007f4d 	.word	0x08007f4d
 8007ec4:	08007f35 	.word	0x08007f35
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007ec8:	f7fd fc8a 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	085b      	lsrs	r3, r3, #1
 8007ed4:	441a      	add	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	61bb      	str	r3, [r7, #24]
        break;
 8007ee2:	e036      	b.n	8007f52 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007ee4:	f7fd fc90 	bl	8005808 <HAL_RCC_GetPCLK2Freq>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	085b      	lsrs	r3, r3, #1
 8007ef0:	441a      	add	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	61bb      	str	r3, [r7, #24]
        break;
 8007efe:	e028      	b.n	8007f52 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	085a      	lsrs	r2, r3, #1
 8007f06:	4b20      	ldr	r3, [pc, #128]	; (8007f88 <UART_SetConfig+0x544>)
 8007f08:	4413      	add	r3, r2
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	6852      	ldr	r2, [r2, #4]
 8007f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	61bb      	str	r3, [r7, #24]
        break;
 8007f16:	e01c      	b.n	8007f52 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007f18:	f7fd fb7e 	bl	8005618 <HAL_RCC_GetSysClockFreq>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	441a      	add	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	61bb      	str	r3, [r7, #24]
        break;
 8007f32:	e00e      	b.n	8007f52 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	085b      	lsrs	r3, r3, #1
 8007f3a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	61bb      	str	r3, [r7, #24]
        break;
 8007f4a:	e002      	b.n	8007f52 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	75fb      	strb	r3, [r7, #23]
        break;
 8007f50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	2b0f      	cmp	r3, #15
 8007f56:	d908      	bls.n	8007f6a <UART_SetConfig+0x526>
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f5e:	d204      	bcs.n	8007f6a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	60da      	str	r2, [r3, #12]
 8007f68:	e001      	b.n	8007f6e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3720      	adds	r7, #32
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	01e84800 	.word	0x01e84800
 8007f88:	00f42400 	.word	0x00f42400

08007f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00a      	beq.n	8007ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	f003 0308 	and.w	r3, r3, #8
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	f003 0310 	and.w	r3, r3, #16
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00a      	beq.n	800803e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00a      	beq.n	8008060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01a      	beq.n	80080a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800808a:	d10a      	bne.n	80080a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	430a      	orrs	r2, r1
 80080a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00a      	beq.n	80080c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	605a      	str	r2, [r3, #4]
  }
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80080de:	f7fa fa65 	bl	80025ac <HAL_GetTick>
 80080e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0308 	and.w	r3, r3, #8
 80080ee:	2b08      	cmp	r3, #8
 80080f0:	d10e      	bne.n	8008110 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f814 	bl	800812e <UART_WaitOnFlagUntilTimeout>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d001      	beq.n	8008110 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e00a      	b.n	8008126 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2220      	movs	r2, #32
 8008114:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2220      	movs	r2, #32
 800811a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b084      	sub	sp, #16
 8008132:	af00      	add	r7, sp, #0
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	603b      	str	r3, [r7, #0]
 800813a:	4613      	mov	r3, r2
 800813c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800813e:	e02a      	b.n	8008196 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008146:	d026      	beq.n	8008196 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008148:	f7fa fa30 	bl	80025ac <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	429a      	cmp	r2, r3
 8008156:	d302      	bcc.n	800815e <UART_WaitOnFlagUntilTimeout+0x30>
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d11b      	bne.n	8008196 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800816c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0201 	bic.w	r2, r2, #1
 800817c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2220      	movs	r2, #32
 8008182:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2220      	movs	r2, #32
 8008188:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e00f      	b.n	80081b6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	69da      	ldr	r2, [r3, #28]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4013      	ands	r3, r2
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	bf0c      	ite	eq
 80081a6:	2301      	moveq	r3, #1
 80081a8:	2300      	movne	r3, #0
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	79fb      	ldrb	r3, [r7, #7]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d0c5      	beq.n	8008140 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0201 	bic.w	r2, r2, #1
 80081e4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2220      	movs	r2, #32
 80081ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f7ff fc07 	bl	8007a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008222:	bf00      	nop
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008240:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2220      	movs	r2, #32
 8008246:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff fbe4 	bl	8007a1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800825c:	b084      	sub	sp, #16
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	f107 001c 	add.w	r0, r7, #28
 800826a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	2b01      	cmp	r3, #1
 8008272:	d120      	bne.n	80082b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008278:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	4b20      	ldr	r3, [pc, #128]	; (8008308 <USB_CoreInit+0xac>)
 8008286:	4013      	ands	r3, r2
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829a:	2b01      	cmp	r3, #1
 800829c:	d105      	bne.n	80082aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fa60 	bl	8008770 <USB_CoreReset>
 80082b0:	4603      	mov	r3, r0
 80082b2:	73fb      	strb	r3, [r7, #15]
 80082b4:	e010      	b.n	80082d8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 fa54 	bl	8008770 <USB_CoreReset>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d10b      	bne.n	80082f6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f043 0206 	orr.w	r2, r3, #6
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f043 0220 	orr.w	r2, r3, #32
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008302:	b004      	add	sp, #16
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	ffbdffbf 	.word	0xffbdffbf

0800830c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f023 0201 	bic.w	r2, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d106      	bne.n	800835a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60da      	str	r2, [r3, #12]
 8008358:	e00b      	b.n	8008372 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800835a:	78fb      	ldrb	r3, [r7, #3]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	60da      	str	r2, [r3, #12]
 800836c:	e001      	b.n	8008372 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e003      	b.n	800837a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008372:	2032      	movs	r0, #50	; 0x32
 8008374:	f7fa f926 	bl	80025c4 <HAL_Delay>

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008384:	b084      	sub	sp, #16
 8008386:	b580      	push	{r7, lr}
 8008388:	b086      	sub	sp, #24
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800839e:	2300      	movs	r3, #0
 80083a0:	613b      	str	r3, [r7, #16]
 80083a2:	e009      	b.n	80083b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	3340      	adds	r3, #64	; 0x40
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	2200      	movs	r2, #0
 80083b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	3301      	adds	r3, #1
 80083b6:	613b      	str	r3, [r7, #16]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	2b0e      	cmp	r3, #14
 80083bc:	d9f2      	bls.n	80083a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d112      	bne.n	80083ea <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	e005      	b.n	80083f6 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083fc:	461a      	mov	r2, r3
 80083fe:	2300      	movs	r3, #0
 8008400:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008408:	4619      	mov	r1, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008410:	461a      	mov	r2, r3
 8008412:	680b      	ldr	r3, [r1, #0]
 8008414:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	2b01      	cmp	r3, #1
 800841a:	d10c      	bne.n	8008436 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d104      	bne.n	800842c <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008422:	2100      	movs	r1, #0
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f971 	bl	800870c <USB_SetDevSpeed>
 800842a:	e018      	b.n	800845e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800842c:	2101      	movs	r1, #1
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 f96c 	bl	800870c <USB_SetDevSpeed>
 8008434:	e013      	b.n	800845e <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008438:	2b03      	cmp	r3, #3
 800843a:	d10c      	bne.n	8008456 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d104      	bne.n	800844c <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008442:	2100      	movs	r1, #0
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f961 	bl	800870c <USB_SetDevSpeed>
 800844a:	e008      	b.n	800845e <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800844c:	2101      	movs	r1, #1
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f95c 	bl	800870c <USB_SetDevSpeed>
 8008454:	e003      	b.n	800845e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008456:	2103      	movs	r1, #3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f957 	bl	800870c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800845e:	2110      	movs	r1, #16
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f90b 	bl	800867c <USB_FlushTxFifo>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f929 	bl	80086c8 <USB_FlushRxFifo>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008486:	461a      	mov	r2, r3
 8008488:	2300      	movs	r3, #0
 800848a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008492:	461a      	mov	r2, r3
 8008494:	2300      	movs	r3, #0
 8008496:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849e:	461a      	mov	r2, r3
 80084a0:	2300      	movs	r3, #0
 80084a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084a4:	2300      	movs	r3, #0
 80084a6:	613b      	str	r3, [r7, #16]
 80084a8:	e043      	b.n	8008532 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084c0:	d118      	bne.n	80084f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d4:	461a      	mov	r2, r3
 80084d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084da:	6013      	str	r3, [r2, #0]
 80084dc:	e013      	b.n	8008506 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ea:	461a      	mov	r2, r3
 80084ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	e008      	b.n	8008506 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008500:	461a      	mov	r2, r3
 8008502:	2300      	movs	r3, #0
 8008504:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	015a      	lsls	r2, r3, #5
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4413      	add	r3, r2
 800850e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008512:	461a      	mov	r2, r3
 8008514:	2300      	movs	r3, #0
 8008516:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008524:	461a      	mov	r2, r3
 8008526:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800852a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	3301      	adds	r3, #1
 8008530:	613b      	str	r3, [r7, #16]
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	429a      	cmp	r2, r3
 8008538:	d3b7      	bcc.n	80084aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800853a:	2300      	movs	r3, #0
 800853c:	613b      	str	r3, [r7, #16]
 800853e:	e043      	b.n	80085c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	4413      	add	r3, r2
 8008548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008556:	d118      	bne.n	800858a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10a      	bne.n	8008574 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856a:	461a      	mov	r2, r3
 800856c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008570:	6013      	str	r3, [r2, #0]
 8008572:	e013      	b.n	800859c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008580:	461a      	mov	r2, r3
 8008582:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	e008      	b.n	800859c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008596:	461a      	mov	r2, r3
 8008598:	2300      	movs	r3, #0
 800859a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a8:	461a      	mov	r2, r3
 80085aa:	2300      	movs	r3, #0
 80085ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ba:	461a      	mov	r2, r3
 80085bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	3301      	adds	r3, #1
 80085c6:	613b      	str	r3, [r7, #16]
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d3b7      	bcc.n	8008540 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d6:	691b      	ldr	r3, [r3, #16]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085e2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d110      	bne.n	800860c <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f0:	461a      	mov	r2, r3
 80085f2:	4b1e      	ldr	r3, [pc, #120]	; (800866c <USB_DevInit+0x2e8>)
 80085f4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008604:	4619      	mov	r1, r3
 8008606:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <USB_DevInit+0x2ec>)
 8008608:	4313      	orrs	r3, r2
 800860a:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008618:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	2b00      	cmp	r3, #0
 800861e:	d105      	bne.n	800862c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	f043 0210 	orr.w	r2, r3, #16
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	699a      	ldr	r2, [r3, #24]
 8008630:	4b10      	ldr	r3, [pc, #64]	; (8008674 <USB_DevInit+0x2f0>)
 8008632:	4313      	orrs	r3, r2
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	f043 0208 	orr.w	r2, r3, #8
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800864a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864c:	2b01      	cmp	r3, #1
 800864e:	d105      	bne.n	800865c <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	699a      	ldr	r2, [r3, #24]
 8008654:	4b08      	ldr	r3, [pc, #32]	; (8008678 <USB_DevInit+0x2f4>)
 8008656:	4313      	orrs	r3, r2
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800865c:	7dfb      	ldrb	r3, [r7, #23]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008668:	b004      	add	sp, #16
 800866a:	4770      	bx	lr
 800866c:	00800100 	.word	0x00800100
 8008670:	00010003 	.word	0x00010003
 8008674:	803c3800 	.word	0x803c3800
 8008678:	40000004 	.word	0x40000004

0800867c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	019b      	lsls	r3, r3, #6
 800868e:	f043 0220 	orr.w	r2, r3, #32
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3301      	adds	r3, #1
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4a09      	ldr	r2, [pc, #36]	; (80086c4 <USB_FlushTxFifo+0x48>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d901      	bls.n	80086a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e006      	b.n	80086b6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	f003 0320 	and.w	r3, r3, #32
 80086b0:	2b20      	cmp	r3, #32
 80086b2:	d0f0      	beq.n	8008696 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	00030d40 	.word	0x00030d40

080086c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2210      	movs	r2, #16
 80086d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3301      	adds	r3, #1
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4a09      	ldr	r2, [pc, #36]	; (8008708 <USB_FlushRxFifo+0x40>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d901      	bls.n	80086ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e006      	b.n	80086fa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	f003 0310 	and.w	r3, r3, #16
 80086f4:	2b10      	cmp	r3, #16
 80086f6:	d0f0      	beq.n	80086da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	00030d40 	.word	0x00030d40

0800870c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	68f9      	ldr	r1, [r7, #12]
 8008728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800872c:	4313      	orrs	r3, r2
 800872e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008758:	f043 0302 	orr.w	r3, r3, #2
 800875c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800875e:	2003      	movs	r0, #3
 8008760:	f7f9 ff30 	bl	80025c4 <HAL_Delay>

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	4a13      	ldr	r2, [pc, #76]	; (80087d4 <USB_CoreReset+0x64>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d901      	bls.n	800878e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e01b      	b.n	80087c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	daf2      	bge.n	800877c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f043 0201 	orr.w	r2, r3, #1
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3301      	adds	r3, #1
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4a09      	ldr	r2, [pc, #36]	; (80087d4 <USB_CoreReset+0x64>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d901      	bls.n	80087b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e006      	b.n	80087c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d0f0      	beq.n	80087a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	00030d40 	.word	0x00030d40

080087d8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 80087de:	4b8c      	ldr	r3, [pc, #560]	; (8008a10 <MX_LWIP_Init+0x238>)
 80087e0:	22a9      	movs	r2, #169	; 0xa9
 80087e2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 80087e4:	4b8a      	ldr	r3, [pc, #552]	; (8008a10 <MX_LWIP_Init+0x238>)
 80087e6:	22fe      	movs	r2, #254	; 0xfe
 80087e8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80087ea:	4b89      	ldr	r3, [pc, #548]	; (8008a10 <MX_LWIP_Init+0x238>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 55;
 80087f0:	4b87      	ldr	r3, [pc, #540]	; (8008a10 <MX_LWIP_Init+0x238>)
 80087f2:	2237      	movs	r2, #55	; 0x37
 80087f4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80087f6:	4b87      	ldr	r3, [pc, #540]	; (8008a14 <MX_LWIP_Init+0x23c>)
 80087f8:	22ff      	movs	r2, #255	; 0xff
 80087fa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80087fc:	4b85      	ldr	r3, [pc, #532]	; (8008a14 <MX_LWIP_Init+0x23c>)
 80087fe:	22ff      	movs	r2, #255	; 0xff
 8008800:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8008802:	4b84      	ldr	r3, [pc, #528]	; (8008a14 <MX_LWIP_Init+0x23c>)
 8008804:	2200      	movs	r2, #0
 8008806:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008808:	4b82      	ldr	r3, [pc, #520]	; (8008a14 <MX_LWIP_Init+0x23c>)
 800880a:	2200      	movs	r2, #0
 800880c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800880e:	4b82      	ldr	r3, [pc, #520]	; (8008a18 <MX_LWIP_Init+0x240>)
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8008814:	4b80      	ldr	r3, [pc, #512]	; (8008a18 <MX_LWIP_Init+0x240>)
 8008816:	2200      	movs	r2, #0
 8008818:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800881a:	4b7f      	ldr	r3, [pc, #508]	; (8008a18 <MX_LWIP_Init+0x240>)
 800881c:	2200      	movs	r2, #0
 800881e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8008820:	4b7d      	ldr	r3, [pc, #500]	; (8008a18 <MX_LWIP_Init+0x240>)
 8008822:	2200      	movs	r2, #0
 8008824:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8008826:	2100      	movs	r1, #0
 8008828:	2000      	movs	r0, #0
 800882a:	f006 f931 	bl	800ea90 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800882e:	4b78      	ldr	r3, [pc, #480]	; (8008a10 <MX_LWIP_Init+0x238>)
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	061a      	lsls	r2, r3, #24
 8008834:	4b76      	ldr	r3, [pc, #472]	; (8008a10 <MX_LWIP_Init+0x238>)
 8008836:	785b      	ldrb	r3, [r3, #1]
 8008838:	041b      	lsls	r3, r3, #16
 800883a:	431a      	orrs	r2, r3
 800883c:	4b74      	ldr	r3, [pc, #464]	; (8008a10 <MX_LWIP_Init+0x238>)
 800883e:	789b      	ldrb	r3, [r3, #2]
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	4313      	orrs	r3, r2
 8008844:	4a72      	ldr	r2, [pc, #456]	; (8008a10 <MX_LWIP_Init+0x238>)
 8008846:	78d2      	ldrb	r2, [r2, #3]
 8008848:	4313      	orrs	r3, r2
 800884a:	061a      	lsls	r2, r3, #24
 800884c:	4b70      	ldr	r3, [pc, #448]	; (8008a10 <MX_LWIP_Init+0x238>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	0619      	lsls	r1, r3, #24
 8008852:	4b6f      	ldr	r3, [pc, #444]	; (8008a10 <MX_LWIP_Init+0x238>)
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	041b      	lsls	r3, r3, #16
 8008858:	4319      	orrs	r1, r3
 800885a:	4b6d      	ldr	r3, [pc, #436]	; (8008a10 <MX_LWIP_Init+0x238>)
 800885c:	789b      	ldrb	r3, [r3, #2]
 800885e:	021b      	lsls	r3, r3, #8
 8008860:	430b      	orrs	r3, r1
 8008862:	496b      	ldr	r1, [pc, #428]	; (8008a10 <MX_LWIP_Init+0x238>)
 8008864:	78c9      	ldrb	r1, [r1, #3]
 8008866:	430b      	orrs	r3, r1
 8008868:	021b      	lsls	r3, r3, #8
 800886a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800886e:	431a      	orrs	r2, r3
 8008870:	4b67      	ldr	r3, [pc, #412]	; (8008a10 <MX_LWIP_Init+0x238>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	0619      	lsls	r1, r3, #24
 8008876:	4b66      	ldr	r3, [pc, #408]	; (8008a10 <MX_LWIP_Init+0x238>)
 8008878:	785b      	ldrb	r3, [r3, #1]
 800887a:	041b      	lsls	r3, r3, #16
 800887c:	4319      	orrs	r1, r3
 800887e:	4b64      	ldr	r3, [pc, #400]	; (8008a10 <MX_LWIP_Init+0x238>)
 8008880:	789b      	ldrb	r3, [r3, #2]
 8008882:	021b      	lsls	r3, r3, #8
 8008884:	430b      	orrs	r3, r1
 8008886:	4962      	ldr	r1, [pc, #392]	; (8008a10 <MX_LWIP_Init+0x238>)
 8008888:	78c9      	ldrb	r1, [r1, #3]
 800888a:	430b      	orrs	r3, r1
 800888c:	0a1b      	lsrs	r3, r3, #8
 800888e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008892:	431a      	orrs	r2, r3
 8008894:	4b5e      	ldr	r3, [pc, #376]	; (8008a10 <MX_LWIP_Init+0x238>)
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	0619      	lsls	r1, r3, #24
 800889a:	4b5d      	ldr	r3, [pc, #372]	; (8008a10 <MX_LWIP_Init+0x238>)
 800889c:	785b      	ldrb	r3, [r3, #1]
 800889e:	041b      	lsls	r3, r3, #16
 80088a0:	4319      	orrs	r1, r3
 80088a2:	4b5b      	ldr	r3, [pc, #364]	; (8008a10 <MX_LWIP_Init+0x238>)
 80088a4:	789b      	ldrb	r3, [r3, #2]
 80088a6:	021b      	lsls	r3, r3, #8
 80088a8:	430b      	orrs	r3, r1
 80088aa:	4959      	ldr	r1, [pc, #356]	; (8008a10 <MX_LWIP_Init+0x238>)
 80088ac:	78c9      	ldrb	r1, [r1, #3]
 80088ae:	430b      	orrs	r3, r1
 80088b0:	0e1b      	lsrs	r3, r3, #24
 80088b2:	4313      	orrs	r3, r2
 80088b4:	4a59      	ldr	r2, [pc, #356]	; (8008a1c <MX_LWIP_Init+0x244>)
 80088b6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80088b8:	4b56      	ldr	r3, [pc, #344]	; (8008a14 <MX_LWIP_Init+0x23c>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	061a      	lsls	r2, r3, #24
 80088be:	4b55      	ldr	r3, [pc, #340]	; (8008a14 <MX_LWIP_Init+0x23c>)
 80088c0:	785b      	ldrb	r3, [r3, #1]
 80088c2:	041b      	lsls	r3, r3, #16
 80088c4:	431a      	orrs	r2, r3
 80088c6:	4b53      	ldr	r3, [pc, #332]	; (8008a14 <MX_LWIP_Init+0x23c>)
 80088c8:	789b      	ldrb	r3, [r3, #2]
 80088ca:	021b      	lsls	r3, r3, #8
 80088cc:	4313      	orrs	r3, r2
 80088ce:	4a51      	ldr	r2, [pc, #324]	; (8008a14 <MX_LWIP_Init+0x23c>)
 80088d0:	78d2      	ldrb	r2, [r2, #3]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	061a      	lsls	r2, r3, #24
 80088d6:	4b4f      	ldr	r3, [pc, #316]	; (8008a14 <MX_LWIP_Init+0x23c>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	0619      	lsls	r1, r3, #24
 80088dc:	4b4d      	ldr	r3, [pc, #308]	; (8008a14 <MX_LWIP_Init+0x23c>)
 80088de:	785b      	ldrb	r3, [r3, #1]
 80088e0:	041b      	lsls	r3, r3, #16
 80088e2:	4319      	orrs	r1, r3
 80088e4:	4b4b      	ldr	r3, [pc, #300]	; (8008a14 <MX_LWIP_Init+0x23c>)
 80088e6:	789b      	ldrb	r3, [r3, #2]
 80088e8:	021b      	lsls	r3, r3, #8
 80088ea:	430b      	orrs	r3, r1
 80088ec:	4949      	ldr	r1, [pc, #292]	; (8008a14 <MX_LWIP_Init+0x23c>)
 80088ee:	78c9      	ldrb	r1, [r1, #3]
 80088f0:	430b      	orrs	r3, r1
 80088f2:	021b      	lsls	r3, r3, #8
 80088f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088f8:	431a      	orrs	r2, r3
 80088fa:	4b46      	ldr	r3, [pc, #280]	; (8008a14 <MX_LWIP_Init+0x23c>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	0619      	lsls	r1, r3, #24
 8008900:	4b44      	ldr	r3, [pc, #272]	; (8008a14 <MX_LWIP_Init+0x23c>)
 8008902:	785b      	ldrb	r3, [r3, #1]
 8008904:	041b      	lsls	r3, r3, #16
 8008906:	4319      	orrs	r1, r3
 8008908:	4b42      	ldr	r3, [pc, #264]	; (8008a14 <MX_LWIP_Init+0x23c>)
 800890a:	789b      	ldrb	r3, [r3, #2]
 800890c:	021b      	lsls	r3, r3, #8
 800890e:	430b      	orrs	r3, r1
 8008910:	4940      	ldr	r1, [pc, #256]	; (8008a14 <MX_LWIP_Init+0x23c>)
 8008912:	78c9      	ldrb	r1, [r1, #3]
 8008914:	430b      	orrs	r3, r1
 8008916:	0a1b      	lsrs	r3, r3, #8
 8008918:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800891c:	431a      	orrs	r2, r3
 800891e:	4b3d      	ldr	r3, [pc, #244]	; (8008a14 <MX_LWIP_Init+0x23c>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	0619      	lsls	r1, r3, #24
 8008924:	4b3b      	ldr	r3, [pc, #236]	; (8008a14 <MX_LWIP_Init+0x23c>)
 8008926:	785b      	ldrb	r3, [r3, #1]
 8008928:	041b      	lsls	r3, r3, #16
 800892a:	4319      	orrs	r1, r3
 800892c:	4b39      	ldr	r3, [pc, #228]	; (8008a14 <MX_LWIP_Init+0x23c>)
 800892e:	789b      	ldrb	r3, [r3, #2]
 8008930:	021b      	lsls	r3, r3, #8
 8008932:	430b      	orrs	r3, r1
 8008934:	4937      	ldr	r1, [pc, #220]	; (8008a14 <MX_LWIP_Init+0x23c>)
 8008936:	78c9      	ldrb	r1, [r1, #3]
 8008938:	430b      	orrs	r3, r1
 800893a:	0e1b      	lsrs	r3, r3, #24
 800893c:	4313      	orrs	r3, r2
 800893e:	4a38      	ldr	r2, [pc, #224]	; (8008a20 <MX_LWIP_Init+0x248>)
 8008940:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008942:	4b35      	ldr	r3, [pc, #212]	; (8008a18 <MX_LWIP_Init+0x240>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	061a      	lsls	r2, r3, #24
 8008948:	4b33      	ldr	r3, [pc, #204]	; (8008a18 <MX_LWIP_Init+0x240>)
 800894a:	785b      	ldrb	r3, [r3, #1]
 800894c:	041b      	lsls	r3, r3, #16
 800894e:	431a      	orrs	r2, r3
 8008950:	4b31      	ldr	r3, [pc, #196]	; (8008a18 <MX_LWIP_Init+0x240>)
 8008952:	789b      	ldrb	r3, [r3, #2]
 8008954:	021b      	lsls	r3, r3, #8
 8008956:	4313      	orrs	r3, r2
 8008958:	4a2f      	ldr	r2, [pc, #188]	; (8008a18 <MX_LWIP_Init+0x240>)
 800895a:	78d2      	ldrb	r2, [r2, #3]
 800895c:	4313      	orrs	r3, r2
 800895e:	061a      	lsls	r2, r3, #24
 8008960:	4b2d      	ldr	r3, [pc, #180]	; (8008a18 <MX_LWIP_Init+0x240>)
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	0619      	lsls	r1, r3, #24
 8008966:	4b2c      	ldr	r3, [pc, #176]	; (8008a18 <MX_LWIP_Init+0x240>)
 8008968:	785b      	ldrb	r3, [r3, #1]
 800896a:	041b      	lsls	r3, r3, #16
 800896c:	4319      	orrs	r1, r3
 800896e:	4b2a      	ldr	r3, [pc, #168]	; (8008a18 <MX_LWIP_Init+0x240>)
 8008970:	789b      	ldrb	r3, [r3, #2]
 8008972:	021b      	lsls	r3, r3, #8
 8008974:	430b      	orrs	r3, r1
 8008976:	4928      	ldr	r1, [pc, #160]	; (8008a18 <MX_LWIP_Init+0x240>)
 8008978:	78c9      	ldrb	r1, [r1, #3]
 800897a:	430b      	orrs	r3, r1
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008982:	431a      	orrs	r2, r3
 8008984:	4b24      	ldr	r3, [pc, #144]	; (8008a18 <MX_LWIP_Init+0x240>)
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	0619      	lsls	r1, r3, #24
 800898a:	4b23      	ldr	r3, [pc, #140]	; (8008a18 <MX_LWIP_Init+0x240>)
 800898c:	785b      	ldrb	r3, [r3, #1]
 800898e:	041b      	lsls	r3, r3, #16
 8008990:	4319      	orrs	r1, r3
 8008992:	4b21      	ldr	r3, [pc, #132]	; (8008a18 <MX_LWIP_Init+0x240>)
 8008994:	789b      	ldrb	r3, [r3, #2]
 8008996:	021b      	lsls	r3, r3, #8
 8008998:	430b      	orrs	r3, r1
 800899a:	491f      	ldr	r1, [pc, #124]	; (8008a18 <MX_LWIP_Init+0x240>)
 800899c:	78c9      	ldrb	r1, [r1, #3]
 800899e:	430b      	orrs	r3, r1
 80089a0:	0a1b      	lsrs	r3, r3, #8
 80089a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80089a6:	431a      	orrs	r2, r3
 80089a8:	4b1b      	ldr	r3, [pc, #108]	; (8008a18 <MX_LWIP_Init+0x240>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	0619      	lsls	r1, r3, #24
 80089ae:	4b1a      	ldr	r3, [pc, #104]	; (8008a18 <MX_LWIP_Init+0x240>)
 80089b0:	785b      	ldrb	r3, [r3, #1]
 80089b2:	041b      	lsls	r3, r3, #16
 80089b4:	4319      	orrs	r1, r3
 80089b6:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <MX_LWIP_Init+0x240>)
 80089b8:	789b      	ldrb	r3, [r3, #2]
 80089ba:	021b      	lsls	r3, r3, #8
 80089bc:	430b      	orrs	r3, r1
 80089be:	4916      	ldr	r1, [pc, #88]	; (8008a18 <MX_LWIP_Init+0x240>)
 80089c0:	78c9      	ldrb	r1, [r1, #3]
 80089c2:	430b      	orrs	r3, r1
 80089c4:	0e1b      	lsrs	r3, r3, #24
 80089c6:	4313      	orrs	r3, r2
 80089c8:	4a16      	ldr	r2, [pc, #88]	; (8008a24 <MX_LWIP_Init+0x24c>)
 80089ca:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80089cc:	4b16      	ldr	r3, [pc, #88]	; (8008a28 <MX_LWIP_Init+0x250>)
 80089ce:	9302      	str	r3, [sp, #8]
 80089d0:	4b16      	ldr	r3, [pc, #88]	; (8008a2c <MX_LWIP_Init+0x254>)
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	2300      	movs	r3, #0
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	4b12      	ldr	r3, [pc, #72]	; (8008a24 <MX_LWIP_Init+0x24c>)
 80089da:	4a11      	ldr	r2, [pc, #68]	; (8008a20 <MX_LWIP_Init+0x248>)
 80089dc:	490f      	ldr	r1, [pc, #60]	; (8008a1c <MX_LWIP_Init+0x244>)
 80089de:	4814      	ldr	r0, [pc, #80]	; (8008a30 <MX_LWIP_Init+0x258>)
 80089e0:	f006 fd12 	bl	800f408 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80089e4:	4812      	ldr	r0, [pc, #72]	; (8008a30 <MX_LWIP_Init+0x258>)
 80089e6:	f006 fdef 	bl	800f5c8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80089ea:	4b11      	ldr	r3, [pc, #68]	; (8008a30 <MX_LWIP_Init+0x258>)
 80089ec:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80089f0:	089b      	lsrs	r3, r3, #2
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d003      	beq.n	8008a04 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80089fc:	480c      	ldr	r0, [pc, #48]	; (8008a30 <MX_LWIP_Init+0x258>)
 80089fe:	f006 fdf3 	bl	800f5e8 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008a02:	e002      	b.n	8008a0a <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8008a04:	480a      	ldr	r0, [pc, #40]	; (8008a30 <MX_LWIP_Init+0x258>)
 8008a06:	f006 fe33 	bl	800f670 <netif_set_down>
}
 8008a0a:	bf00      	nop
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	2000fbd8 	.word	0x2000fbd8
 8008a14:	2000fbd4 	.word	0x2000fbd4
 8008a18:	2000fb9c 	.word	0x2000fb9c
 8008a1c:	2000fbd0 	.word	0x2000fbd0
 8008a20:	2000fbdc 	.word	0x2000fbdc
 8008a24:	2000fbe0 	.word	0x2000fbe0
 8008a28:	0800e98d 	.word	0x0800e98d
 8008a2c:	08009075 	.word	0x08009075
 8008a30:	2000fba0 	.word	0x2000fba0

08008a34 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08e      	sub	sp, #56	; 0x38
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	605a      	str	r2, [r3, #4]
 8008a46:	609a      	str	r2, [r3, #8]
 8008a48:	60da      	str	r2, [r3, #12]
 8008a4a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a52      	ldr	r2, [pc, #328]	; (8008b9c <HAL_ETH_MspInit+0x168>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	f040 809e 	bne.w	8008b94 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008a58:	4b51      	ldr	r3, [pc, #324]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5c:	4a50      	ldr	r2, [pc, #320]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008a5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a62:	6313      	str	r3, [r2, #48]	; 0x30
 8008a64:	4b4e      	ldr	r3, [pc, #312]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a6c:	623b      	str	r3, [r7, #32]
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	4b4b      	ldr	r3, [pc, #300]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a74:	4a4a      	ldr	r2, [pc, #296]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008a76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a7a:	6313      	str	r3, [r2, #48]	; 0x30
 8008a7c:	4b48      	ldr	r3, [pc, #288]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008a84:	61fb      	str	r3, [r7, #28]
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4b45      	ldr	r3, [pc, #276]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8c:	4a44      	ldr	r2, [pc, #272]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a92:	6313      	str	r3, [r2, #48]	; 0x30
 8008a94:	4b42      	ldr	r3, [pc, #264]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008aa0:	4b3f      	ldr	r3, [pc, #252]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa4:	4a3e      	ldr	r2, [pc, #248]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008aa6:	f043 0304 	orr.w	r3, r3, #4
 8008aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8008aac:	4b3c      	ldr	r3, [pc, #240]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab0:	f003 0304 	and.w	r3, r3, #4
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ab8:	4b39      	ldr	r3, [pc, #228]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abc:	4a38      	ldr	r2, [pc, #224]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008abe:	f043 0301 	orr.w	r3, r3, #1
 8008ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8008ac4:	4b36      	ldr	r3, [pc, #216]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	613b      	str	r3, [r7, #16]
 8008ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ad0:	4b33      	ldr	r3, [pc, #204]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad4:	4a32      	ldr	r2, [pc, #200]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008ad6:	f043 0302 	orr.w	r3, r3, #2
 8008ada:	6313      	str	r3, [r2, #48]	; 0x30
 8008adc:	4b30      	ldr	r3, [pc, #192]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008ae8:	4b2d      	ldr	r3, [pc, #180]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aec:	4a2c      	ldr	r2, [pc, #176]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008af2:	6313      	str	r3, [r2, #48]	; 0x30
 8008af4:	4b2a      	ldr	r3, [pc, #168]	; (8008ba0 <HAL_ETH_MspInit+0x16c>)
 8008af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afc:	60bb      	str	r3, [r7, #8]
 8008afe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008b00:	2332      	movs	r3, #50	; 0x32
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b04:	2302      	movs	r3, #2
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b10:	230b      	movs	r3, #11
 8008b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4822      	ldr	r0, [pc, #136]	; (8008ba4 <HAL_ETH_MspInit+0x170>)
 8008b1c:	f7fb fe90 	bl	8004840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008b20:	2386      	movs	r3, #134	; 0x86
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b24:	2302      	movs	r3, #2
 8008b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b30:	230b      	movs	r3, #11
 8008b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b38:	4619      	mov	r1, r3
 8008b3a:	481b      	ldr	r0, [pc, #108]	; (8008ba8 <HAL_ETH_MspInit+0x174>)
 8008b3c:	f7fb fe80 	bl	8004840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b46:	2302      	movs	r3, #2
 8008b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b52:	230b      	movs	r3, #11
 8008b54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	4813      	ldr	r0, [pc, #76]	; (8008bac <HAL_ETH_MspInit+0x178>)
 8008b5e:	f7fb fe6f 	bl	8004840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008b62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b68:	2302      	movs	r3, #2
 8008b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b70:	2303      	movs	r3, #3
 8008b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008b74:	230b      	movs	r3, #11
 8008b76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	480c      	ldr	r0, [pc, #48]	; (8008bb0 <HAL_ETH_MspInit+0x17c>)
 8008b80:	f7fb fe5e 	bl	8004840 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008b84:	2200      	movs	r2, #0
 8008b86:	2105      	movs	r1, #5
 8008b88:	203d      	movs	r0, #61	; 0x3d
 8008b8a:	f7fa fa35 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008b8e:	203d      	movs	r0, #61	; 0x3d
 8008b90:	f7fa fa4e 	bl	8003030 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008b94:	bf00      	nop
 8008b96:	3738      	adds	r7, #56	; 0x38
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	40028000 	.word	0x40028000
 8008ba0:	40023800 	.word	0x40023800
 8008ba4:	40020800 	.word	0x40020800
 8008ba8:	40020000 	.word	0x40020000
 8008bac:	40020400 	.word	0x40020400
 8008bb0:	40021800 	.word	0x40021800

08008bb4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8008bbc:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <HAL_ETH_RxCpltCallback+0x1c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 fc5f 	bl	8009484 <osSemaphoreRelease>
}
 8008bc6:	bf00      	nop
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000478 	.word	0x20000478

08008bd4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8008bd4:	b5b0      	push	{r4, r5, r7, lr}
 8008bd6:	b090      	sub	sp, #64	; 0x40
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008be0:	4b5c      	ldr	r3, [pc, #368]	; (8008d54 <low_level_init+0x180>)
 8008be2:	4a5d      	ldr	r2, [pc, #372]	; (8008d58 <low_level_init+0x184>)
 8008be4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8008be6:	4b5b      	ldr	r3, [pc, #364]	; (8008d54 <low_level_init+0x180>)
 8008be8:	2201      	movs	r2, #1
 8008bea:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008bec:	4b59      	ldr	r3, [pc, #356]	; (8008d54 <low_level_init+0x180>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8008bf8:	2380      	movs	r3, #128	; 0x80
 8008bfa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8008bfe:	23e1      	movs	r3, #225	; 0xe1
 8008c00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8008c04:	2300      	movs	r3, #0
 8008c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8008c10:	2300      	movs	r3, #0
 8008c12:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8008c16:	4a4f      	ldr	r2, [pc, #316]	; (8008d54 <low_level_init+0x180>)
 8008c18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008c1c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8008c1e:	4b4d      	ldr	r3, [pc, #308]	; (8008d54 <low_level_init+0x180>)
 8008c20:	2201      	movs	r2, #1
 8008c22:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008c24:	4b4b      	ldr	r3, [pc, #300]	; (8008d54 <low_level_init+0x180>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008c2a:	4b4a      	ldr	r3, [pc, #296]	; (8008d54 <low_level_init+0x180>)
 8008c2c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008c30:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008c32:	4848      	ldr	r0, [pc, #288]	; (8008d54 <low_level_init+0x180>)
 8008c34:	f7fa fe12 	bl	800385c <HAL_ETH_Init>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8008c3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d108      	bne.n	8008c58 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008c4c:	f043 0304 	orr.w	r3, r3, #4
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008c58:	2304      	movs	r3, #4
 8008c5a:	4a40      	ldr	r2, [pc, #256]	; (8008d5c <low_level_init+0x188>)
 8008c5c:	4940      	ldr	r1, [pc, #256]	; (8008d60 <low_level_init+0x18c>)
 8008c5e:	483d      	ldr	r0, [pc, #244]	; (8008d54 <low_level_init+0x180>)
 8008c60:	f7fa ff98 	bl	8003b94 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008c64:	2304      	movs	r3, #4
 8008c66:	4a3f      	ldr	r2, [pc, #252]	; (8008d64 <low_level_init+0x190>)
 8008c68:	493f      	ldr	r1, [pc, #252]	; (8008d68 <low_level_init+0x194>)
 8008c6a:	483a      	ldr	r0, [pc, #232]	; (8008d54 <low_level_init+0x180>)
 8008c6c:	f7fa fffb 	bl	8003c66 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2206      	movs	r2, #6
 8008c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008c78:	4b36      	ldr	r3, [pc, #216]	; (8008d54 <low_level_init+0x180>)
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	781a      	ldrb	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008c84:	4b33      	ldr	r3, [pc, #204]	; (8008d54 <low_level_init+0x180>)
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	785a      	ldrb	r2, [r3, #1]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008c90:	4b30      	ldr	r3, [pc, #192]	; (8008d54 <low_level_init+0x180>)
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	789a      	ldrb	r2, [r3, #2]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008c9c:	4b2d      	ldr	r3, [pc, #180]	; (8008d54 <low_level_init+0x180>)
 8008c9e:	695b      	ldr	r3, [r3, #20]
 8008ca0:	78da      	ldrb	r2, [r3, #3]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008ca8:	4b2a      	ldr	r3, [pc, #168]	; (8008d54 <low_level_init+0x180>)
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	791a      	ldrb	r2, [r3, #4]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008cb4:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <low_level_init+0x180>)
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	795a      	ldrb	r2, [r3, #5]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008cc6:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008cce:	f043 030a 	orr.w	r3, r3, #10
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8008cda:	2300      	movs	r3, #0
 8008cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cde:	2300      	movs	r3, #0
 8008ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 fb49 	bl	8009380 <osSemaphoreCreate>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	4b1e      	ldr	r3, [pc, #120]	; (8008d6c <low_level_init+0x198>)
 8008cf2:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008cf4:	4b1e      	ldr	r3, [pc, #120]	; (8008d70 <low_level_init+0x19c>)
 8008cf6:	f107 040c 	add.w	r4, r7, #12
 8008cfa:	461d      	mov	r5, r3
 8008cfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008d04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008d08:	f107 030c 	add.w	r3, r7, #12
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fa26 	bl	8009160 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008d14:	480f      	ldr	r0, [pc, #60]	; (8008d54 <low_level_init+0x180>)
 8008d16:	f7fb face 	bl	80042b6 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008d1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d1e:	461a      	mov	r2, r3
 8008d20:	211d      	movs	r1, #29
 8008d22:	480c      	ldr	r0, [pc, #48]	; (8008d54 <low_level_init+0x180>)
 8008d24:	f7fb f9f9 	bl	800411a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	f043 030b 	orr.w	r3, r3, #11
 8008d2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d32:	461a      	mov	r2, r3
 8008d34:	211d      	movs	r1, #29
 8008d36:	4807      	ldr	r0, [pc, #28]	; (8008d54 <low_level_init+0x180>)
 8008d38:	f7fb fa57 	bl	80041ea <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008d3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d40:	461a      	mov	r2, r3
 8008d42:	211d      	movs	r1, #29
 8008d44:	4803      	ldr	r0, [pc, #12]	; (8008d54 <low_level_init+0x180>)
 8008d46:	f7fb f9e8 	bl	800411a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8008d4a:	bf00      	nop
 8008d4c:	3740      	adds	r7, #64	; 0x40
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bdb0      	pop	{r4, r5, r7, pc}
 8008d52:	bf00      	nop
 8008d54:	200114b4 	.word	0x200114b4
 8008d58:	40028000 	.word	0x40028000
 8008d5c:	200114fc 	.word	0x200114fc
 8008d60:	2000fbe4 	.word	0x2000fbe4
 8008d64:	2000fc64 	.word	0x2000fc64
 8008d68:	20011434 	.word	0x20011434
 8008d6c:	20000478 	.word	0x20000478
 8008d70:	0801d7d0 	.word	0x0801d7d0

08008d74 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008d7e:	4b4b      	ldr	r3, [pc, #300]	; (8008eac <low_level_output+0x138>)
 8008d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008d96:	4b45      	ldr	r3, [pc, #276]	; (8008eac <low_level_output+0x138>)
 8008d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	623b      	str	r3, [r7, #32]
 8008da4:	e05a      	b.n	8008e5c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da03      	bge.n	8008db6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008dae:	23f8      	movs	r3, #248	; 0xf8
 8008db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008db4:	e05c      	b.n	8008e70 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	895b      	ldrh	r3, [r3, #10]
 8008dba:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008dc0:	e02f      	b.n	8008e22 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008dc2:	69fa      	ldr	r2, [r7, #28]
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	18d0      	adds	r0, r2, r3
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	18d1      	adds	r1, r2, r3
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8008dd6:	1a9b      	subs	r3, r3, r2
 8008dd8:	461a      	mov	r2, r3
 8008dda:	f011 fb42 	bl	801a462 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	da03      	bge.n	8008df4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008dec:	23f8      	movs	r3, #248	; 0xf8
 8008dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008df2:	e03d      	b.n	8008e70 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008e04:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	1ad3      	subs	r3, r2, r3
 8008e0c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008e10:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008e1c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	4413      	add	r3, r2
 8008e28:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d8c8      	bhi.n	8008dc2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	18d0      	adds	r0, r2, r3
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	685a      	ldr	r2, [r3, #4]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4619      	mov	r1, r3
 8008e42:	f011 fb0e 	bl	801a462 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4413      	add	r3, r2
 8008e54:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	623b      	str	r3, [r7, #32]
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1a1      	bne.n	8008da6 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008e62:	6979      	ldr	r1, [r7, #20]
 8008e64:	4811      	ldr	r0, [pc, #68]	; (8008eac <low_level_output+0x138>)
 8008e66:	f7fa ff6b 	bl	8003d40 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008e70:	4b0e      	ldr	r3, [pc, #56]	; (8008eac <low_level_output+0x138>)
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	f241 0314 	movw	r3, #4116	; 0x1014
 8008e78:	4413      	add	r3, r2
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0320 	and.w	r3, r3, #32
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00d      	beq.n	8008ea0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008e84:	4b09      	ldr	r3, [pc, #36]	; (8008eac <low_level_output+0x138>)
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	f241 0314 	movw	r3, #4116	; 0x1014
 8008e8c:	4413      	add	r3, r2
 8008e8e:	2220      	movs	r2, #32
 8008e90:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008e92:	4b06      	ldr	r3, [pc, #24]	; (8008eac <low_level_output+0x138>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	f241 0304 	movw	r3, #4100	; 0x1004
 8008e9a:	4413      	add	r3, r2
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8008ea0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3728      	adds	r7, #40	; 0x28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	200114b4 	.word	0x200114b4

08008eb0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08c      	sub	sp, #48	; 0x30
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8008ed4:	484e      	ldr	r0, [pc, #312]	; (8009010 <low_level_input+0x160>)
 8008ed6:	f7fb f81d 	bl	8003f14 <HAL_ETH_GetReceivedFrame_IT>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <low_level_input+0x34>
  
    return NULL;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	e091      	b.n	8009008 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008ee4:	4b4a      	ldr	r3, [pc, #296]	; (8009010 <low_level_input+0x160>)
 8008ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008eea:	4b49      	ldr	r3, [pc, #292]	; (8009010 <low_level_input+0x160>)
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8008ef0:	89fb      	ldrh	r3, [r7, #14]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d006      	beq.n	8008f04 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8008ef6:	89fb      	ldrh	r3, [r7, #14]
 8008ef8:	2203      	movs	r2, #3
 8008efa:	4619      	mov	r1, r3
 8008efc:	2004      	movs	r0, #4
 8008efe:	f006 fc39 	bl	800f774 <pbuf_alloc>
 8008f02:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d04b      	beq.n	8008fa2 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008f0a:	4b41      	ldr	r3, [pc, #260]	; (8009010 <low_level_input+0x160>)
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f18:	e040      	b.n	8008f9c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8008f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1c:	895b      	ldrh	r3, [r3, #10]
 8008f1e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008f24:	e021      	b.n	8008f6a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	18d0      	adds	r0, r2, r3
 8008f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	18d1      	adds	r1, r2, r3
 8008f34:	69fa      	ldr	r2, [r7, #28]
 8008f36:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8008f3a:	1a9b      	subs	r3, r3, r2
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f011 fa90 	bl	801a462 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008f42:	6a3b      	ldr	r3, [r7, #32]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008f4e:	69fa      	ldr	r2, [r7, #28]
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	4413      	add	r3, r2
 8008f54:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008f58:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008f64:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d8d6      	bhi.n	8008f26 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	18d0      	adds	r0, r2, r3
 8008f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	4413      	add	r3, r2
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f011 fa6a 	bl	801a462 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	4413      	add	r3, r2
 8008f94:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1bb      	bne.n	8008f1a <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008fa2:	4b1b      	ldr	r3, [pc, #108]	; (8009010 <low_level_input+0x160>)
 8008fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa6:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	613b      	str	r3, [r7, #16]
 8008fac:	e00b      	b.n	8008fc6 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008fb6:	6a3b      	ldr	r3, [r7, #32]
 8008fb8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	613b      	str	r3, [r7, #16]
 8008fc6:	4b12      	ldr	r3, [pc, #72]	; (8009010 <low_level_input+0x160>)
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d3ee      	bcc.n	8008fae <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8008fd0:	4b0f      	ldr	r3, [pc, #60]	; (8009010 <low_level_input+0x160>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8008fd6:	4b0e      	ldr	r3, [pc, #56]	; (8009010 <low_level_input+0x160>)
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	f241 0314 	movw	r3, #4116	; 0x1014
 8008fde:	4413      	add	r3, r2
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00d      	beq.n	8009006 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008fea:	4b09      	ldr	r3, [pc, #36]	; (8009010 <low_level_input+0x160>)
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	f241 0314 	movw	r3, #4116	; 0x1014
 8008ff2:	4413      	add	r3, r2
 8008ff4:	2280      	movs	r2, #128	; 0x80
 8008ff6:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008ff8:	4b05      	ldr	r3, [pc, #20]	; (8009010 <low_level_input+0x160>)
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	f241 0308 	movw	r3, #4104	; 0x1008
 8009000:	4413      	add	r3, r2
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009008:	4618      	mov	r0, r3
 800900a:	3730      	adds	r7, #48	; 0x30
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	200114b4 	.word	0x200114b4

08009014 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009020:	4b12      	ldr	r3, [pc, #72]	; (800906c <ethernetif_input+0x58>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f04f 31ff 	mov.w	r1, #4294967295
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f9dd 	bl	80093e8 <osSemaphoreWait>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1f5      	bne.n	8009020 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8009034:	480e      	ldr	r0, [pc, #56]	; (8009070 <ethernetif_input+0x5c>)
 8009036:	f00f fb45 	bl	80186c4 <sys_mutex_lock>
        p = low_level_input( netif );
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f7ff ff38 	bl	8008eb0 <low_level_input>
 8009040:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00a      	beq.n	800905e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	68f9      	ldr	r1, [r7, #12]
 800904e:	68b8      	ldr	r0, [r7, #8]
 8009050:	4798      	blx	r3
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8009058:	68b8      	ldr	r0, [r7, #8]
 800905a:	f006 fefd 	bl	800fe58 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800905e:	4804      	ldr	r0, [pc, #16]	; (8009070 <ethernetif_input+0x5c>)
 8009060:	f00f fb3f 	bl	80186e2 <sys_mutex_unlock>
      } while(p!=NULL);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e4      	bne.n	8009034 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800906a:	e7d9      	b.n	8009020 <ethernetif_input+0xc>
 800906c:	20000478 	.word	0x20000478
 8009070:	20012d10 	.word	0x20012d10

08009074 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d106      	bne.n	8009090 <ethernetif_init+0x1c>
 8009082:	4b0e      	ldr	r3, [pc, #56]	; (80090bc <ethernetif_init+0x48>)
 8009084:	f240 2231 	movw	r2, #561	; 0x231
 8009088:	490d      	ldr	r1, [pc, #52]	; (80090c0 <ethernetif_init+0x4c>)
 800908a:	480e      	ldr	r0, [pc, #56]	; (80090c4 <ethernetif_init+0x50>)
 800908c:	f011 fee0 	bl	801ae50 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2273      	movs	r2, #115	; 0x73
 8009094:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2274      	movs	r2, #116	; 0x74
 800909c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <ethernetif_init+0x54>)
 80090a4:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a08      	ldr	r2, [pc, #32]	; (80090cc <ethernetif_init+0x58>)
 80090aa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7ff fd91 	bl	8008bd4 <low_level_init>

  return ERR_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	0801d7ec 	.word	0x0801d7ec
 80090c0:	0801d808 	.word	0x0801d808
 80090c4:	0801d818 	.word	0x0801d818
 80090c8:	080167c1 	.word	0x080167c1
 80090cc:	08008d75 	.word	0x08008d75

080090d0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80090d4:	f7f9 fa6a 	bl	80025ac <HAL_GetTick>
 80090d8:	4603      	mov	r3, r0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	bd80      	pop	{r7, pc}

080090de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	4603      	mov	r3, r0
 80090e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80090e8:	2300      	movs	r3, #0
 80090ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80090ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090f0:	2b84      	cmp	r3, #132	; 0x84
 80090f2:	d005      	beq.n	8009100 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80090f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4413      	add	r3, r2
 80090fc:	3303      	adds	r3, #3
 80090fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009100:	68fb      	ldr	r3, [r7, #12]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr

0800910e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800910e:	b480      	push	{r7}
 8009110:	b083      	sub	sp, #12
 8009112:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009114:	f3ef 8305 	mrs	r3, IPSR
 8009118:	607b      	str	r3, [r7, #4]
  return(result);
 800911a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800911c:	2b00      	cmp	r3, #0
 800911e:	bf14      	ite	ne
 8009120:	2301      	movne	r3, #1
 8009122:	2300      	moveq	r3, #0
 8009124:	b2db      	uxtb	r3, r3
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009136:	f001 ff01 	bl	800af3c <vTaskStartScheduler>
  
  return osOK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	bd80      	pop	{r7, pc}

08009140 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009144:	f7ff ffe3 	bl	800910e <inHandlerMode>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800914e:	f002 f817 	bl	800b180 <xTaskGetTickCountFromISR>
 8009152:	4603      	mov	r3, r0
 8009154:	e002      	b.n	800915c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009156:	f002 f803 	bl	800b160 <xTaskGetTickCount>
 800915a:	4603      	mov	r3, r0
  }
}
 800915c:	4618      	mov	r0, r3
 800915e:	bd80      	pop	{r7, pc}

08009160 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009162:	b089      	sub	sp, #36	; 0x24
 8009164:	af04      	add	r7, sp, #16
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d020      	beq.n	80091b4 <osThreadCreate+0x54>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	699b      	ldr	r3, [r3, #24]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d01c      	beq.n	80091b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685c      	ldr	r4, [r3, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681d      	ldr	r5, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691e      	ldr	r6, [r3, #16]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff ffa6 	bl	80090de <makeFreeRtosPriority>
 8009192:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800919c:	9202      	str	r2, [sp, #8]
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	9100      	str	r1, [sp, #0]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	4632      	mov	r2, r6
 80091a6:	4629      	mov	r1, r5
 80091a8:	4620      	mov	r0, r4
 80091aa:	f001 fc43 	bl	800aa34 <xTaskCreateStatic>
 80091ae:	4603      	mov	r3, r0
 80091b0:	60fb      	str	r3, [r7, #12]
 80091b2:	e01c      	b.n	80091ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685c      	ldr	r4, [r3, #4]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091c0:	b29e      	uxth	r6, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7ff ff88 	bl	80090de <makeFreeRtosPriority>
 80091ce:	4602      	mov	r2, r0
 80091d0:	f107 030c 	add.w	r3, r7, #12
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	9200      	str	r2, [sp, #0]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	4632      	mov	r2, r6
 80091dc:	4629      	mov	r1, r5
 80091de:	4620      	mov	r0, r4
 80091e0:	f001 fc87 	bl	800aaf2 <xTaskCreate>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d001      	beq.n	80091ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	e000      	b.n	80091f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80091ee:	68fb      	ldr	r3, [r7, #12]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091f8 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 80091fc:	f002 faec 	bl	800b7d8 <xTaskGetCurrentTaskHandle>
 8009200:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 8009202:	4618      	mov	r0, r3
 8009204:	bd80      	pop	{r7, pc}

08009206 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 fdbc 	bl	800ad8c <vTaskDelete>
  return osOK;
 8009214:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800921e:	b580      	push	{r7, lr}
 8009220:	b084      	sub	sp, #16
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <osDelay+0x16>
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	e000      	b.n	8009236 <osDelay+0x18>
 8009234:	2301      	movs	r3, #1
 8009236:	4618      	mov	r0, r3
 8009238:	f001 fe46 	bl	800aec8 <vTaskDelay>
  
  return osOK;
 800923c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d007      	beq.n	8009266 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	4619      	mov	r1, r3
 800925c:	2001      	movs	r0, #1
 800925e:	f000 fc91 	bl	8009b84 <xQueueCreateMutexStatic>
 8009262:	4603      	mov	r3, r0
 8009264:	e003      	b.n	800926e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009266:	2001      	movs	r0, #1
 8009268:	f000 fc74 	bl	8009b54 <xQueueCreateMutex>
 800926c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009282:	2300      	movs	r3, #0
 8009284:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <osMutexWait+0x18>
    return osErrorParameter;
 800928c:	2380      	movs	r3, #128	; 0x80
 800928e:	e03a      	b.n	8009306 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929a:	d103      	bne.n	80092a4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800929c:	f04f 33ff 	mov.w	r3, #4294967295
 80092a0:	60fb      	str	r3, [r7, #12]
 80092a2:	e009      	b.n	80092b8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d006      	beq.n	80092b8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <osMutexWait+0x40>
      ticks = 1;
 80092b4:	2301      	movs	r3, #1
 80092b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80092b8:	f7ff ff29 	bl	800910e <inHandlerMode>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d017      	beq.n	80092f2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80092c2:	f107 0308 	add.w	r3, r7, #8
 80092c6:	461a      	mov	r2, r3
 80092c8:	2100      	movs	r1, #0
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 f956 	bl	800a57c <xQueueReceiveFromISR>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d001      	beq.n	80092da <osMutexWait+0x62>
      return osErrorOS;
 80092d6:	23ff      	movs	r3, #255	; 0xff
 80092d8:	e015      	b.n	8009306 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d011      	beq.n	8009304 <osMutexWait+0x8c>
 80092e0:	4b0b      	ldr	r3, [pc, #44]	; (8009310 <osMutexWait+0x98>)
 80092e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e6:	601a      	str	r2, [r3, #0]
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	e008      	b.n	8009304 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80092f2:	68f9      	ldr	r1, [r7, #12]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 fffb 	bl	800a2f0 <xQueueSemaphoreTake>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d001      	beq.n	8009304 <osMutexWait+0x8c>
    return osErrorOS;
 8009300:	23ff      	movs	r3, #255	; 0xff
 8009302:	e000      	b.n	8009306 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	e000ed04 	.word	0xe000ed04

08009314 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800931c:	2300      	movs	r3, #0
 800931e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009320:	2300      	movs	r3, #0
 8009322:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009324:	f7ff fef3 	bl	800910e <inHandlerMode>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d016      	beq.n	800935c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800932e:	f107 0308 	add.w	r3, r7, #8
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fe1b 	bl	8009f70 <xQueueGiveFromISR>
 800933a:	4603      	mov	r3, r0
 800933c:	2b01      	cmp	r3, #1
 800933e:	d001      	beq.n	8009344 <osMutexRelease+0x30>
      return osErrorOS;
 8009340:	23ff      	movs	r3, #255	; 0xff
 8009342:	e017      	b.n	8009374 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d013      	beq.n	8009372 <osMutexRelease+0x5e>
 800934a:	4b0c      	ldr	r3, [pc, #48]	; (800937c <osMutexRelease+0x68>)
 800934c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	e00a      	b.n	8009372 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800935c:	2300      	movs	r3, #0
 800935e:	2200      	movs	r2, #0
 8009360:	2100      	movs	r1, #0
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fc2a 	bl	8009bbc <xQueueGenericSend>
 8009368:	4603      	mov	r3, r0
 800936a:	2b01      	cmp	r3, #1
 800936c:	d001      	beq.n	8009372 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800936e:	23ff      	movs	r3, #255	; 0xff
 8009370:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009372:	68fb      	ldr	r3, [r7, #12]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	e000ed04 	.word	0xe000ed04

08009380 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af02      	add	r7, sp, #8
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d010      	beq.n	80093b4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d10b      	bne.n	80093b0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	2303      	movs	r3, #3
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	4613      	mov	r3, r2
 80093a2:	2200      	movs	r2, #0
 80093a4:	2100      	movs	r1, #0
 80093a6:	2001      	movs	r0, #1
 80093a8:	f000 fada 	bl	8009960 <xQueueGenericCreateStatic>
 80093ac:	4603      	mov	r3, r0
 80093ae:	e016      	b.n	80093de <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80093b0:	2300      	movs	r3, #0
 80093b2:	e014      	b.n	80093de <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d110      	bne.n	80093dc <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80093ba:	2203      	movs	r2, #3
 80093bc:	2100      	movs	r1, #0
 80093be:	2001      	movs	r0, #1
 80093c0:	f000 fb4a 	bl	8009a58 <xQueueGenericCreate>
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d005      	beq.n	80093d8 <osSemaphoreCreate+0x58>
 80093cc:	2300      	movs	r3, #0
 80093ce:	2200      	movs	r2, #0
 80093d0:	2100      	movs	r1, #0
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f000 fbf2 	bl	8009bbc <xQueueGenericSend>
      return sema;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	e000      	b.n	80093de <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80093dc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80093f2:	2300      	movs	r3, #0
 80093f4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80093fc:	2380      	movs	r3, #128	; 0x80
 80093fe:	e03a      	b.n	8009476 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940a:	d103      	bne.n	8009414 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800940c:	f04f 33ff 	mov.w	r3, #4294967295
 8009410:	60fb      	str	r3, [r7, #12]
 8009412:	e009      	b.n	8009428 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d006      	beq.n	8009428 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d101      	bne.n	8009428 <osSemaphoreWait+0x40>
      ticks = 1;
 8009424:	2301      	movs	r3, #1
 8009426:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009428:	f7ff fe71 	bl	800910e <inHandlerMode>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d017      	beq.n	8009462 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009432:	f107 0308 	add.w	r3, r7, #8
 8009436:	461a      	mov	r2, r3
 8009438:	2100      	movs	r1, #0
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f001 f89e 	bl	800a57c <xQueueReceiveFromISR>
 8009440:	4603      	mov	r3, r0
 8009442:	2b01      	cmp	r3, #1
 8009444:	d001      	beq.n	800944a <osSemaphoreWait+0x62>
      return osErrorOS;
 8009446:	23ff      	movs	r3, #255	; 0xff
 8009448:	e015      	b.n	8009476 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d011      	beq.n	8009474 <osSemaphoreWait+0x8c>
 8009450:	4b0b      	ldr	r3, [pc, #44]	; (8009480 <osSemaphoreWait+0x98>)
 8009452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	e008      	b.n	8009474 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009462:	68f9      	ldr	r1, [r7, #12]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 ff43 	bl	800a2f0 <xQueueSemaphoreTake>
 800946a:	4603      	mov	r3, r0
 800946c:	2b01      	cmp	r3, #1
 800946e:	d001      	beq.n	8009474 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009470:	23ff      	movs	r3, #255	; 0xff
 8009472:	e000      	b.n	8009476 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	e000ed04 	.word	0xe000ed04

08009484 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009490:	2300      	movs	r3, #0
 8009492:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009494:	f7ff fe3b 	bl	800910e <inHandlerMode>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d016      	beq.n	80094cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800949e:	f107 0308 	add.w	r3, r7, #8
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fd63 	bl	8009f70 <xQueueGiveFromISR>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d001      	beq.n	80094b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80094b0:	23ff      	movs	r3, #255	; 0xff
 80094b2:	e017      	b.n	80094e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d013      	beq.n	80094e2 <osSemaphoreRelease+0x5e>
 80094ba:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <osSemaphoreRelease+0x68>)
 80094bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	e00a      	b.n	80094e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80094cc:	2300      	movs	r3, #0
 80094ce:	2200      	movs	r2, #0
 80094d0:	2100      	movs	r1, #0
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fb72 	bl	8009bbc <xQueueGenericSend>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d001      	beq.n	80094e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80094de:	23ff      	movs	r3, #255	; 0xff
 80094e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80094e2:	68fb      	ldr	r3, [r7, #12]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80094f8:	f7ff fe09 	bl	800910e <inHandlerMode>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009502:	2382      	movs	r3, #130	; 0x82
 8009504:	e003      	b.n	800950e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f001 f915 	bl	800a736 <vQueueDelete>

  return osOK; 
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009516:	b590      	push	{r4, r7, lr}
 8009518:	b085      	sub	sp, #20
 800951a:	af02      	add	r7, sp, #8
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d012      	beq.n	800954e <osMessageCreate+0x38>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00e      	beq.n	800954e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6859      	ldr	r1, [r3, #4]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68dc      	ldr	r4, [r3, #12]
 8009540:	2300      	movs	r3, #0
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	4623      	mov	r3, r4
 8009546:	f000 fa0b 	bl	8009960 <xQueueGenericCreateStatic>
 800954a:	4603      	mov	r3, r0
 800954c:	e008      	b.n	8009560 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6818      	ldr	r0, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	4619      	mov	r1, r3
 800955a:	f000 fa7d 	bl	8009a58 <xQueueGenericCreate>
 800955e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	bd90      	pop	{r4, r7, pc}

08009568 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009574:	2300      	movs	r3, #0
 8009576:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <osMessagePut+0x1e>
    ticks = 1;
 8009582:	2301      	movs	r3, #1
 8009584:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009586:	f7ff fdc2 	bl	800910e <inHandlerMode>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d018      	beq.n	80095c2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009590:	f107 0210 	add.w	r2, r7, #16
 8009594:	f107 0108 	add.w	r1, r7, #8
 8009598:	2300      	movs	r3, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fc38 	bl	8009e10 <xQueueGenericSendFromISR>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d001      	beq.n	80095aa <osMessagePut+0x42>
      return osErrorOS;
 80095a6:	23ff      	movs	r3, #255	; 0xff
 80095a8:	e018      	b.n	80095dc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d014      	beq.n	80095da <osMessagePut+0x72>
 80095b0:	4b0c      	ldr	r3, [pc, #48]	; (80095e4 <osMessagePut+0x7c>)
 80095b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095b6:	601a      	str	r2, [r3, #0]
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	e00b      	b.n	80095da <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80095c2:	f107 0108 	add.w	r1, r7, #8
 80095c6:	2300      	movs	r3, #0
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 faf6 	bl	8009bbc <xQueueGenericSend>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d001      	beq.n	80095da <osMessagePut+0x72>
      return osErrorOS;
 80095d6:	23ff      	movs	r3, #255	; 0xff
 80095d8:	e000      	b.n	80095dc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3718      	adds	r7, #24
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	e000ed04 	.word	0xe000ed04

080095e8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80095e8:	b590      	push	{r4, r7, lr}
 80095ea:	b08b      	sub	sp, #44	; 0x2c
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10a      	bne.n	8009618 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009602:	2380      	movs	r3, #128	; 0x80
 8009604:	617b      	str	r3, [r7, #20]
    return event;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	461c      	mov	r4, r3
 800960a:	f107 0314 	add.w	r3, r7, #20
 800960e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009616:	e054      	b.n	80096c2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009618:	2300      	movs	r3, #0
 800961a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009626:	d103      	bne.n	8009630 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009628:	f04f 33ff 	mov.w	r3, #4294967295
 800962c:	627b      	str	r3, [r7, #36]	; 0x24
 800962e:	e009      	b.n	8009644 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d006      	beq.n	8009644 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <osMessageGet+0x5c>
      ticks = 1;
 8009640:	2301      	movs	r3, #1
 8009642:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009644:	f7ff fd63 	bl	800910e <inHandlerMode>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d01c      	beq.n	8009688 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800964e:	f107 0220 	add.w	r2, r7, #32
 8009652:	f107 0314 	add.w	r3, r7, #20
 8009656:	3304      	adds	r3, #4
 8009658:	4619      	mov	r1, r3
 800965a:	68b8      	ldr	r0, [r7, #8]
 800965c:	f000 ff8e 	bl	800a57c <xQueueReceiveFromISR>
 8009660:	4603      	mov	r3, r0
 8009662:	2b01      	cmp	r3, #1
 8009664:	d102      	bne.n	800966c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009666:	2310      	movs	r3, #16
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	e001      	b.n	8009670 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800966c:	2300      	movs	r3, #0
 800966e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d01d      	beq.n	80096b2 <osMessageGet+0xca>
 8009676:	4b15      	ldr	r3, [pc, #84]	; (80096cc <osMessageGet+0xe4>)
 8009678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	e014      	b.n	80096b2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009688:	f107 0314 	add.w	r3, r7, #20
 800968c:	3304      	adds	r3, #4
 800968e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009690:	4619      	mov	r1, r3
 8009692:	68b8      	ldr	r0, [r7, #8]
 8009694:	f000 fd12 	bl	800a0bc <xQueueReceive>
 8009698:	4603      	mov	r3, r0
 800969a:	2b01      	cmp	r3, #1
 800969c:	d102      	bne.n	80096a4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800969e:	2310      	movs	r3, #16
 80096a0:	617b      	str	r3, [r7, #20]
 80096a2:	e006      	b.n	80096b2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <osMessageGet+0xc6>
 80096aa:	2300      	movs	r3, #0
 80096ac:	e000      	b.n	80096b0 <osMessageGet+0xc8>
 80096ae:	2340      	movs	r3, #64	; 0x40
 80096b0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	461c      	mov	r4, r3
 80096b6:	f107 0314 	add.w	r3, r7, #20
 80096ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	372c      	adds	r7, #44	; 0x2c
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd90      	pop	{r4, r7, pc}
 80096ca:	bf00      	nop
 80096cc:	e000ed04 	.word	0xe000ed04

080096d0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80096d8:	f7ff fd19 	bl	800910e <inHandlerMode>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d004      	beq.n	80096ec <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f001 f80a 	bl	800a6fc <uxQueueMessagesWaitingFromISR>
 80096e8:	4603      	mov	r3, r0
 80096ea:	e003      	b.n	80096f4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 ffe6 	bl	800a6be <uxQueueMessagesWaiting>
 80096f2:	4603      	mov	r3, r0
  }
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009704:	f7ff fd03 	bl	800910e <inHandlerMode>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <osMessageDelete+0x16>
    return osErrorISR;
 800970e:	2382      	movs	r3, #130	; 0x82
 8009710:	e003      	b.n	800971a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f001 f80f 	bl	800a736 <vQueueDelete>

  return osOK; 
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f103 0208 	add.w	r2, r3, #8
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f04f 32ff 	mov.w	r2, #4294967295
 800973a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f103 0208 	add.w	r2, r3, #8
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f103 0208 	add.w	r2, r3, #8
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	689a      	ldr	r2, [r3, #8]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	601a      	str	r2, [r3, #0]
}
 80097b8:	bf00      	nop
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097da:	d103      	bne.n	80097e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	e00c      	b.n	80097fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	3308      	adds	r3, #8
 80097e8:	60fb      	str	r3, [r7, #12]
 80097ea:	e002      	b.n	80097f2 <vListInsert+0x2e>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	60fb      	str	r3, [r7, #12]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d2f6      	bcs.n	80097ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	1c5a      	adds	r2, r3, #1
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	601a      	str	r2, [r3, #0]
}
 800982a:	bf00      	nop
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr

08009836 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009836:	b480      	push	{r7}
 8009838:	b085      	sub	sp, #20
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	6892      	ldr	r2, [r2, #8]
 800984c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6852      	ldr	r2, [r2, #4]
 8009856:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	429a      	cmp	r2, r3
 8009860:	d103      	bne.n	800986a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	689a      	ldr	r2, [r3, #8]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	1e5a      	subs	r2, r3, #1
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr
	...

0800988c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10b      	bne.n	80098b8 <xQueueGenericReset+0x2c>
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	b672      	cpsid	i
 80098a6:	f383 8811 	msr	BASEPRI, r3
 80098aa:	f3bf 8f6f 	isb	sy
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	b662      	cpsie	i
 80098b4:	60bb      	str	r3, [r7, #8]
 80098b6:	e7fe      	b.n	80098b6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80098b8:	f002 fc56 	bl	800c168 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c4:	68f9      	ldr	r1, [r7, #12]
 80098c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098c8:	fb01 f303 	mul.w	r3, r1, r3
 80098cc:	441a      	add	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e8:	3b01      	subs	r3, #1
 80098ea:	68f9      	ldr	r1, [r7, #12]
 80098ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098ee:	fb01 f303 	mul.w	r3, r1, r3
 80098f2:	441a      	add	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	22ff      	movs	r2, #255	; 0xff
 80098fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	22ff      	movs	r2, #255	; 0xff
 8009904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d114      	bne.n	8009938 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d01a      	beq.n	800994c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3310      	adds	r3, #16
 800991a:	4618      	mov	r0, r3
 800991c:	f001 fd94 	bl	800b448 <xTaskRemoveFromEventList>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d012      	beq.n	800994c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009926:	4b0d      	ldr	r3, [pc, #52]	; (800995c <xQueueGenericReset+0xd0>)
 8009928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	f3bf 8f6f 	isb	sy
 8009936:	e009      	b.n	800994c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3310      	adds	r3, #16
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff fef0 	bl	8009722 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3324      	adds	r3, #36	; 0x24
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff feeb 	bl	8009722 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800994c:	f002 fc3e 	bl	800c1cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009950:	2301      	movs	r3, #1
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	e000ed04 	.word	0xe000ed04

08009960 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08e      	sub	sp, #56	; 0x38
 8009964:	af02      	add	r7, sp, #8
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	607a      	str	r2, [r7, #4]
 800996c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10b      	bne.n	800998c <xQueueGenericCreateStatic+0x2c>
 8009974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009978:	b672      	cpsid	i
 800997a:	f383 8811 	msr	BASEPRI, r3
 800997e:	f3bf 8f6f 	isb	sy
 8009982:	f3bf 8f4f 	dsb	sy
 8009986:	b662      	cpsie	i
 8009988:	62bb      	str	r3, [r7, #40]	; 0x28
 800998a:	e7fe      	b.n	800998a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10b      	bne.n	80099aa <xQueueGenericCreateStatic+0x4a>
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	b672      	cpsid	i
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	b662      	cpsie	i
 80099a6:	627b      	str	r3, [r7, #36]	; 0x24
 80099a8:	e7fe      	b.n	80099a8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <xQueueGenericCreateStatic+0x56>
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <xQueueGenericCreateStatic+0x5a>
 80099b6:	2301      	movs	r3, #1
 80099b8:	e000      	b.n	80099bc <xQueueGenericCreateStatic+0x5c>
 80099ba:	2300      	movs	r3, #0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10b      	bne.n	80099d8 <xQueueGenericCreateStatic+0x78>
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	b672      	cpsid	i
 80099c6:	f383 8811 	msr	BASEPRI, r3
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	b662      	cpsie	i
 80099d4:	623b      	str	r3, [r7, #32]
 80099d6:	e7fe      	b.n	80099d6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d102      	bne.n	80099e4 <xQueueGenericCreateStatic+0x84>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <xQueueGenericCreateStatic+0x88>
 80099e4:	2301      	movs	r3, #1
 80099e6:	e000      	b.n	80099ea <xQueueGenericCreateStatic+0x8a>
 80099e8:	2300      	movs	r3, #0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10b      	bne.n	8009a06 <xQueueGenericCreateStatic+0xa6>
 80099ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f2:	b672      	cpsid	i
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	b662      	cpsie	i
 8009a02:	61fb      	str	r3, [r7, #28]
 8009a04:	e7fe      	b.n	8009a04 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a06:	2348      	movs	r3, #72	; 0x48
 8009a08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b48      	cmp	r3, #72	; 0x48
 8009a0e:	d00b      	beq.n	8009a28 <xQueueGenericCreateStatic+0xc8>
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	b672      	cpsid	i
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	b662      	cpsie	i
 8009a24:	61bb      	str	r3, [r7, #24]
 8009a26:	e7fe      	b.n	8009a26 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00d      	beq.n	8009a4e <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	4613      	mov	r3, r2
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	68b9      	ldr	r1, [r7, #8]
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 f844 	bl	8009ad6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3730      	adds	r7, #48	; 0x30
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b08a      	sub	sp, #40	; 0x28
 8009a5c:	af02      	add	r7, sp, #8
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	4613      	mov	r3, r2
 8009a64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10b      	bne.n	8009a84 <xQueueGenericCreate+0x2c>
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	b672      	cpsid	i
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	b662      	cpsie	i
 8009a80:	613b      	str	r3, [r7, #16]
 8009a82:	e7fe      	b.n	8009a82 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d102      	bne.n	8009a90 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	61fb      	str	r3, [r7, #28]
 8009a8e:	e004      	b.n	8009a9a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	fb02 f303 	mul.w	r3, r2, r3
 8009a98:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	3348      	adds	r3, #72	; 0x48
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f002 fc84 	bl	800c3ac <pvPortMalloc>
 8009aa4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00f      	beq.n	8009acc <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	3348      	adds	r3, #72	; 0x48
 8009ab0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009aba:	79fa      	ldrb	r2, [r7, #7]
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	697a      	ldr	r2, [r7, #20]
 8009ac4:	68b9      	ldr	r1, [r7, #8]
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 f805 	bl	8009ad6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009acc:	69bb      	ldr	r3, [r7, #24]
	}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	607a      	str	r2, [r7, #4]
 8009ae2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d103      	bne.n	8009af2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	69ba      	ldr	r2, [r7, #24]
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	e002      	b.n	8009af8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009af2:	69bb      	ldr	r3, [r7, #24]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b04:	2101      	movs	r1, #1
 8009b06:	69b8      	ldr	r0, [r7, #24]
 8009b08:	f7ff fec0 	bl	800988c <xQueueGenericReset>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8009b0c:	78fb      	ldrb	r3, [r7, #3]
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	68f9      	ldr	r1, [r7, #12]
 8009b12:	2073      	movs	r0, #115	; 0x73
 8009b14:	f00f fd58 	bl	80195c8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8009b18:	bf00      	nop
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00e      	beq.n	8009b4c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009b40:	2300      	movs	r3, #0
 8009b42:	2200      	movs	r2, #0
 8009b44:	2100      	movs	r1, #0
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f838 	bl	8009bbc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	617b      	str	r3, [r7, #20]
 8009b62:	2300      	movs	r3, #0
 8009b64:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	6939      	ldr	r1, [r7, #16]
 8009b6c:	6978      	ldr	r0, [r7, #20]
 8009b6e:	f7ff ff73 	bl	8009a58 <xQueueGenericCreate>
 8009b72:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f7ff ffd3 	bl	8009b20 <prvInitialiseMutex>

		return pxNewQueue;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
	}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af02      	add	r7, sp, #8
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009b90:	2301      	movs	r3, #1
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	2300      	movs	r3, #0
 8009b96:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009b98:	79fb      	ldrb	r3, [r7, #7]
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	6939      	ldr	r1, [r7, #16]
 8009ba2:	6978      	ldr	r0, [r7, #20]
 8009ba4:	f7ff fedc 	bl	8009960 <xQueueGenericCreateStatic>
 8009ba8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f7ff ffb8 	bl	8009b20 <prvInitialiseMutex>

		return pxNewQueue;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
	}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b090      	sub	sp, #64	; 0x40
 8009bc0:	af02      	add	r7, sp, #8
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10b      	bne.n	8009bf0 <xQueueGenericSend+0x34>
 8009bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bdc:	b672      	cpsid	i
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	b662      	cpsie	i
 8009bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bee:	e7fe      	b.n	8009bee <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d103      	bne.n	8009bfe <xQueueGenericSend+0x42>
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <xQueueGenericSend+0x46>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e000      	b.n	8009c04 <xQueueGenericSend+0x48>
 8009c02:	2300      	movs	r3, #0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10b      	bne.n	8009c20 <xQueueGenericSend+0x64>
 8009c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0c:	b672      	cpsid	i
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	b662      	cpsie	i
 8009c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c1e:	e7fe      	b.n	8009c1e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d103      	bne.n	8009c2e <xQueueGenericSend+0x72>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d101      	bne.n	8009c32 <xQueueGenericSend+0x76>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e000      	b.n	8009c34 <xQueueGenericSend+0x78>
 8009c32:	2300      	movs	r3, #0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10b      	bne.n	8009c50 <xQueueGenericSend+0x94>
 8009c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3c:	b672      	cpsid	i
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	b662      	cpsie	i
 8009c4c:	623b      	str	r3, [r7, #32]
 8009c4e:	e7fe      	b.n	8009c4e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c50:	f001 fdd2 	bl	800b7f8 <xTaskGetSchedulerState>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <xQueueGenericSend+0xa4>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d101      	bne.n	8009c64 <xQueueGenericSend+0xa8>
 8009c60:	2301      	movs	r3, #1
 8009c62:	e000      	b.n	8009c66 <xQueueGenericSend+0xaa>
 8009c64:	2300      	movs	r3, #0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10b      	bne.n	8009c82 <xQueueGenericSend+0xc6>
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	b672      	cpsid	i
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	b662      	cpsie	i
 8009c7e:	61fb      	str	r3, [r7, #28]
 8009c80:	e7fe      	b.n	8009c80 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c82:	f002 fa71 	bl	800c168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d302      	bcc.n	8009c98 <xQueueGenericSend+0xdc>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d136      	bne.n	8009d06 <xQueueGenericSend+0x14a>
			{
				traceQUEUE_SEND( pxQueue );
 8009c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f010 fa5c 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4601      	mov	r1, r0
 8009cac:	205a      	movs	r0, #90	; 0x5a
 8009cae:	f00f fd01 	bl	80196b4 <SEGGER_SYSVIEW_RecordU32x4>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	68b9      	ldr	r1, [r7, #8]
 8009cb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cb8:	f000 fd82 	bl	800a7c0 <prvCopyDataToQueue>
 8009cbc:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d010      	beq.n	8009ce8 <xQueueGenericSend+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc8:	3324      	adds	r3, #36	; 0x24
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f001 fbbc 	bl	800b448 <xTaskRemoveFromEventList>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d013      	beq.n	8009cfe <xQueueGenericSend+0x142>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009cd6:	4b4d      	ldr	r3, [pc, #308]	; (8009e0c <xQueueGenericSend+0x250>)
 8009cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	e00a      	b.n	8009cfe <xQueueGenericSend+0x142>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d007      	beq.n	8009cfe <xQueueGenericSend+0x142>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009cee:	4b47      	ldr	r3, [pc, #284]	; (8009e0c <xQueueGenericSend+0x250>)
 8009cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009cfe:	f002 fa65 	bl	800c1cc <vPortExitCritical>
				return pdPASS;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e07d      	b.n	8009e02 <xQueueGenericSend+0x246>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d110      	bne.n	8009d2e <xQueueGenericSend+0x172>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d0c:	f002 fa5e 	bl	800c1cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8009d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d12:	4618      	mov	r0, r3
 8009d14:	f010 fa20 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	6879      	ldr	r1, [r7, #4]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	460b      	mov	r3, r1
 8009d22:	4601      	mov	r1, r0
 8009d24:	205a      	movs	r0, #90	; 0x5a
 8009d26:	f00f fcc5 	bl	80196b4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	e069      	b.n	8009e02 <xQueueGenericSend+0x246>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d106      	bne.n	8009d42 <xQueueGenericSend+0x186>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d34:	f107 0314 	add.w	r3, r7, #20
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 fbed 	bl	800b518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d42:	f002 fa43 	bl	800c1cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d46:	f001 f95b 	bl	800b000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d4a:	f002 fa0d 	bl	800c168 <vPortEnterCritical>
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d54:	b25b      	sxtb	r3, r3
 8009d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5a:	d103      	bne.n	8009d64 <xQueueGenericSend+0x1a8>
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d6a:	b25b      	sxtb	r3, r3
 8009d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d70:	d103      	bne.n	8009d7a <xQueueGenericSend+0x1be>
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d7a:	f002 fa27 	bl	800c1cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d7e:	1d3a      	adds	r2, r7, #4
 8009d80:	f107 0314 	add.w	r3, r7, #20
 8009d84:	4611      	mov	r1, r2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f001 fbdc 	bl	800b544 <xTaskCheckForTimeOut>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d124      	bne.n	8009ddc <xQueueGenericSend+0x220>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d94:	f000 fe0c 	bl	800a9b0 <prvIsQueueFull>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d018      	beq.n	8009dd0 <xQueueGenericSend+0x214>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	3310      	adds	r3, #16
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	4611      	mov	r1, r2
 8009da6:	4618      	mov	r0, r3
 8009da8:	f001 fb28 	bl	800b3fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dae:	f000 fd97 	bl	800a8e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009db2:	f001 f933 	bl	800b01c <xTaskResumeAll>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f47f af62 	bne.w	8009c82 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009dbe:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <xQueueGenericSend+0x250>)
 8009dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc4:	601a      	str	r2, [r3, #0]
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	e758      	b.n	8009c82 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dd2:	f000 fd85 	bl	800a8e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dd6:	f001 f921 	bl	800b01c <xTaskResumeAll>
 8009dda:	e752      	b.n	8009c82 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dde:	f000 fd7f 	bl	800a8e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009de2:	f001 f91b 	bl	800b01c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8009de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de8:	4618      	mov	r0, r3
 8009dea:	f010 f9b5 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	6879      	ldr	r1, [r7, #4]
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	460b      	mov	r3, r1
 8009df8:	4601      	mov	r1, r0
 8009dfa:	205a      	movs	r0, #90	; 0x5a
 8009dfc:	f00f fc5a 	bl	80196b4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8009e00:	2300      	movs	r3, #0
		}
	}
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3738      	adds	r7, #56	; 0x38
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	e000ed04 	.word	0xe000ed04

08009e10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08e      	sub	sp, #56	; 0x38
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
 8009e1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10b      	bne.n	8009e40 <xQueueGenericSendFromISR+0x30>
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	b672      	cpsid	i
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	b662      	cpsie	i
 8009e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e3e:	e7fe      	b.n	8009e3e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d103      	bne.n	8009e4e <xQueueGenericSendFromISR+0x3e>
 8009e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d101      	bne.n	8009e52 <xQueueGenericSendFromISR+0x42>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e000      	b.n	8009e54 <xQueueGenericSendFromISR+0x44>
 8009e52:	2300      	movs	r3, #0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10b      	bne.n	8009e70 <xQueueGenericSendFromISR+0x60>
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	b672      	cpsid	i
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	b662      	cpsie	i
 8009e6c:	623b      	str	r3, [r7, #32]
 8009e6e:	e7fe      	b.n	8009e6e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d103      	bne.n	8009e7e <xQueueGenericSendFromISR+0x6e>
 8009e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d101      	bne.n	8009e82 <xQueueGenericSendFromISR+0x72>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e000      	b.n	8009e84 <xQueueGenericSendFromISR+0x74>
 8009e82:	2300      	movs	r3, #0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d10b      	bne.n	8009ea0 <xQueueGenericSendFromISR+0x90>
 8009e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8c:	b672      	cpsid	i
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	b662      	cpsie	i
 8009e9c:	61fb      	str	r3, [r7, #28]
 8009e9e:	e7fe      	b.n	8009e9e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ea0:	f002 fa42 	bl	800c328 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ea4:	f3ef 8211 	mrs	r2, BASEPRI
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	b672      	cpsid	i
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	b662      	cpsie	i
 8009ebc:	61ba      	str	r2, [r7, #24]
 8009ebe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ec0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d302      	bcc.n	8009ed6 <xQueueGenericSendFromISR+0xc6>
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d136      	bne.n	8009f44 <xQueueGenericSendFromISR+0x134>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f010 f938 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 8009ee8:	4601      	mov	r1, r0
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	461a      	mov	r2, r3
 8009eee:	2060      	movs	r0, #96	; 0x60
 8009ef0:	f00f fb10 	bl	8019514 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	68b9      	ldr	r1, [r7, #8]
 8009ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009efa:	f000 fc61 	bl	800a7c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009efe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f06:	d112      	bne.n	8009f2e <xQueueGenericSendFromISR+0x11e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d016      	beq.n	8009f3e <xQueueGenericSendFromISR+0x12e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f12:	3324      	adds	r3, #36	; 0x24
 8009f14:	4618      	mov	r0, r3
 8009f16:	f001 fa97 	bl	800b448 <xTaskRemoveFromEventList>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00e      	beq.n	8009f3e <xQueueGenericSendFromISR+0x12e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00b      	beq.n	8009f3e <xQueueGenericSendFromISR+0x12e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	e007      	b.n	8009f3e <xQueueGenericSendFromISR+0x12e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f32:	3301      	adds	r3, #1
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	b25a      	sxtb	r2, r3
 8009f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009f42:	e00b      	b.n	8009f5c <xQueueGenericSendFromISR+0x14c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8009f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f46:	4618      	mov	r0, r3
 8009f48:	f010 f906 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 8009f4c:	4601      	mov	r1, r0
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	461a      	mov	r2, r3
 8009f52:	2060      	movs	r0, #96	; 0x60
 8009f54:	f00f fade 	bl	8019514 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f5e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3738      	adds	r7, #56	; 0x38
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08e      	sub	sp, #56	; 0x38
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d10b      	bne.n	8009f9c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	b672      	cpsid	i
 8009f8a:	f383 8811 	msr	BASEPRI, r3
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f3bf 8f4f 	dsb	sy
 8009f96:	b662      	cpsie	i
 8009f98:	623b      	str	r3, [r7, #32]
 8009f9a:	e7fe      	b.n	8009f9a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00b      	beq.n	8009fbc <xQueueGiveFromISR+0x4c>
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	b672      	cpsid	i
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	b662      	cpsie	i
 8009fb8:	61fb      	str	r3, [r7, #28]
 8009fba:	e7fe      	b.n	8009fba <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d103      	bne.n	8009fcc <xQueueGiveFromISR+0x5c>
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d101      	bne.n	8009fd0 <xQueueGiveFromISR+0x60>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e000      	b.n	8009fd2 <xQueueGiveFromISR+0x62>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10b      	bne.n	8009fee <xQueueGiveFromISR+0x7e>
 8009fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fda:	b672      	cpsid	i
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	b662      	cpsie	i
 8009fea:	61bb      	str	r3, [r7, #24]
 8009fec:	e7fe      	b.n	8009fec <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fee:	f002 f99b 	bl	800c328 <vPortValidateInterruptPriority>
	__asm volatile
 8009ff2:	f3ef 8211 	mrs	r2, BASEPRI
 8009ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffa:	b672      	cpsid	i
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	b662      	cpsie	i
 800a00a:	617a      	str	r2, [r7, #20]
 800a00c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a00e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a010:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a016:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a01e:	429a      	cmp	r2, r3
 800a020:	d235      	bcs.n	800a08e <xQueueGiveFromISR+0x11e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	4618      	mov	r0, r3
 800a030:	f010 f892 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a034:	4601      	mov	r1, r0
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	461a      	mov	r2, r3
 800a03a:	2060      	movs	r0, #96	; 0x60
 800a03c:	f00f fa6a 	bl	8019514 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a046:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a048:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a050:	d112      	bne.n	800a078 <xQueueGiveFromISR+0x108>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	2b00      	cmp	r3, #0
 800a058:	d016      	beq.n	800a088 <xQueueGiveFromISR+0x118>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	3324      	adds	r3, #36	; 0x24
 800a05e:	4618      	mov	r0, r3
 800a060:	f001 f9f2 	bl	800b448 <xTaskRemoveFromEventList>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d00e      	beq.n	800a088 <xQueueGiveFromISR+0x118>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <xQueueGiveFromISR+0x118>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	2201      	movs	r2, #1
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	e007      	b.n	800a088 <xQueueGiveFromISR+0x118>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a07c:	3301      	adds	r3, #1
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	b25a      	sxtb	r2, r3
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a088:	2301      	movs	r3, #1
 800a08a:	637b      	str	r3, [r7, #52]	; 0x34
 800a08c:	e00b      	b.n	800a0a6 <xQueueGiveFromISR+0x136>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	4618      	mov	r0, r3
 800a092:	f010 f861 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a096:	4601      	mov	r1, r0
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	2060      	movs	r0, #96	; 0x60
 800a09e:	f00f fa39 	bl	8019514 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3738      	adds	r7, #56	; 0x38
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
	...

0800a0bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0bc:	b590      	push	{r4, r7, lr}
 800a0be:	b08f      	sub	sp, #60	; 0x3c
 800a0c0:	af02      	add	r7, sp, #8
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10b      	bne.n	800a0ee <xQueueReceive+0x32>
	__asm volatile
 800a0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0da:	b672      	cpsid	i
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	b662      	cpsie	i
 800a0ea:	623b      	str	r3, [r7, #32]
 800a0ec:	e7fe      	b.n	800a0ec <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d103      	bne.n	800a0fc <xQueueReceive+0x40>
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <xQueueReceive+0x44>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e000      	b.n	800a102 <xQueueReceive+0x46>
 800a100:	2300      	movs	r3, #0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d10b      	bne.n	800a11e <xQueueReceive+0x62>
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	b672      	cpsid	i
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	b662      	cpsie	i
 800a11a:	61fb      	str	r3, [r7, #28]
 800a11c:	e7fe      	b.n	800a11c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a11e:	f001 fb6b 	bl	800b7f8 <xTaskGetSchedulerState>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d102      	bne.n	800a12e <xQueueReceive+0x72>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d101      	bne.n	800a132 <xQueueReceive+0x76>
 800a12e:	2301      	movs	r3, #1
 800a130:	e000      	b.n	800a134 <xQueueReceive+0x78>
 800a132:	2300      	movs	r3, #0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10b      	bne.n	800a150 <xQueueReceive+0x94>
 800a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13c:	b672      	cpsid	i
 800a13e:	f383 8811 	msr	BASEPRI, r3
 800a142:	f3bf 8f6f 	isb	sy
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	b662      	cpsie	i
 800a14c:	61bb      	str	r3, [r7, #24]
 800a14e:	e7fe      	b.n	800a14e <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a150:	f002 f80a 	bl	800c168 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a158:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d031      	beq.n	800a1c4 <xQueueReceive+0x108>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a160:	68b9      	ldr	r1, [r7, #8]
 800a162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a164:	f000 fb96 	bl	800a894 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	4618      	mov	r0, r3
 800a16c:	f00f fff4 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a170:	4604      	mov	r4, r0
 800a172:	2000      	movs	r0, #0
 800a174:	f00f fff0 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a178:	4601      	mov	r1, r0
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	2301      	movs	r3, #1
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	4613      	mov	r3, r2
 800a182:	460a      	mov	r2, r1
 800a184:	4621      	mov	r1, r4
 800a186:	205c      	movs	r0, #92	; 0x5c
 800a188:	f00f fa94 	bl	80196b4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18e:	1e5a      	subs	r2, r3, #1
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00f      	beq.n	800a1bc <xQueueReceive+0x100>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19e:	3310      	adds	r3, #16
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f001 f951 	bl	800b448 <xTaskRemoveFromEventList>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d007      	beq.n	800a1bc <xQueueReceive+0x100>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1ac:	4b4f      	ldr	r3, [pc, #316]	; (800a2ec <xQueueReceive+0x230>)
 800a1ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1b2:	601a      	str	r2, [r3, #0]
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1bc:	f002 f806 	bl	800c1cc <vPortExitCritical>
				return pdPASS;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e08e      	b.n	800a2e2 <xQueueReceive+0x226>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d115      	bne.n	800a1f6 <xQueueReceive+0x13a>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1ca:	f001 ffff 	bl	800c1cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f00f ffc1 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	2000      	movs	r0, #0
 800a1da:	f00f ffbd 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a1de:	4601      	mov	r1, r0
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	4613      	mov	r3, r2
 800a1e8:	460a      	mov	r2, r1
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	205c      	movs	r0, #92	; 0x5c
 800a1ee:	f00f fa61 	bl	80196b4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e075      	b.n	800a2e2 <xQueueReceive+0x226>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d106      	bne.n	800a20a <xQueueReceive+0x14e>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1fc:	f107 0310 	add.w	r3, r7, #16
 800a200:	4618      	mov	r0, r3
 800a202:	f001 f989 	bl	800b518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a206:	2301      	movs	r3, #1
 800a208:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a20a:	f001 ffdf 	bl	800c1cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a20e:	f000 fef7 	bl	800b000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a212:	f001 ffa9 	bl	800c168 <vPortEnterCritical>
 800a216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a21c:	b25b      	sxtb	r3, r3
 800a21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a222:	d103      	bne.n	800a22c <xQueueReceive+0x170>
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	2200      	movs	r2, #0
 800a228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a232:	b25b      	sxtb	r3, r3
 800a234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a238:	d103      	bne.n	800a242 <xQueueReceive+0x186>
 800a23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a242:	f001 ffc3 	bl	800c1cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a246:	1d3a      	adds	r2, r7, #4
 800a248:	f107 0310 	add.w	r3, r7, #16
 800a24c:	4611      	mov	r1, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	f001 f978 	bl	800b544 <xTaskCheckForTimeOut>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d124      	bne.n	800a2a4 <xQueueReceive+0x1e8>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a25a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a25c:	f000 fb92 	bl	800a984 <prvIsQueueEmpty>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d018      	beq.n	800a298 <xQueueReceive+0x1dc>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	3324      	adds	r3, #36	; 0x24
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	4611      	mov	r1, r2
 800a26e:	4618      	mov	r0, r3
 800a270:	f001 f8c4 	bl	800b3fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a276:	f000 fb33 	bl	800a8e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a27a:	f000 fecf 	bl	800b01c <xTaskResumeAll>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	f47f af65 	bne.w	800a150 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a286:	4b19      	ldr	r3, [pc, #100]	; (800a2ec <xQueueReceive+0x230>)
 800a288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a28c:	601a      	str	r2, [r3, #0]
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	e75b      	b.n	800a150 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a29a:	f000 fb21 	bl	800a8e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a29e:	f000 febd 	bl	800b01c <xTaskResumeAll>
 800a2a2:	e755      	b.n	800a150 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2a6:	f000 fb1b 	bl	800a8e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2aa:	f000 feb7 	bl	800b01c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2b0:	f000 fb68 	bl	800a984 <prvIsQueueEmpty>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f43f af4a 	beq.w	800a150 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f00f ff4a 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	f00f ff46 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a2cc:	4601      	mov	r1, r0
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	460a      	mov	r2, r1
 800a2d8:	4621      	mov	r1, r4
 800a2da:	205c      	movs	r0, #92	; 0x5c
 800a2dc:	f00f f9ea 	bl	80196b4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800a2e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3734      	adds	r7, #52	; 0x34
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd90      	pop	{r4, r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	e000ed04 	.word	0xe000ed04

0800a2f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a2f0:	b590      	push	{r4, r7, lr}
 800a2f2:	b091      	sub	sp, #68	; 0x44
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a302:	2300      	movs	r3, #0
 800a304:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10b      	bne.n	800a324 <xQueueSemaphoreTake+0x34>
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	b672      	cpsid	i
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	b662      	cpsie	i
 800a320:	623b      	str	r3, [r7, #32]
 800a322:	e7fe      	b.n	800a322 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00b      	beq.n	800a344 <xQueueSemaphoreTake+0x54>
 800a32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a330:	b672      	cpsid	i
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	b662      	cpsie	i
 800a340:	61fb      	str	r3, [r7, #28]
 800a342:	e7fe      	b.n	800a342 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a344:	f001 fa58 	bl	800b7f8 <xTaskGetSchedulerState>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d102      	bne.n	800a354 <xQueueSemaphoreTake+0x64>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <xQueueSemaphoreTake+0x68>
 800a354:	2301      	movs	r3, #1
 800a356:	e000      	b.n	800a35a <xQueueSemaphoreTake+0x6a>
 800a358:	2300      	movs	r3, #0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d10b      	bne.n	800a376 <xQueueSemaphoreTake+0x86>
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	b672      	cpsid	i
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	b662      	cpsie	i
 800a372:	61bb      	str	r3, [r7, #24]
 800a374:	e7fe      	b.n	800a374 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a376:	f001 fef7 	bl	800c168 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	2b00      	cmp	r3, #0
 800a384:	d036      	beq.n	800a3f4 <xQueueSemaphoreTake+0x104>
			{
				traceQUEUE_RECEIVE( pxQueue );
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	4618      	mov	r0, r3
 800a38a:	f00f fee5 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a38e:	4604      	mov	r4, r0
 800a390:	2000      	movs	r0, #0
 800a392:	f00f fee1 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a396:	4601      	mov	r1, r0
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	2301      	movs	r3, #1
 800a39c:	9300      	str	r3, [sp, #0]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	460a      	mov	r2, r1
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	205c      	movs	r0, #92	; 0x5c
 800a3a6:	f00f f985 	bl	80196b4 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ac:	1e5a      	subs	r2, r3, #1
 800a3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d104      	bne.n	800a3c4 <xQueueSemaphoreTake+0xd4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a3ba:	f001 fbfb 	bl	800bbb4 <pvTaskIncrementMutexHeldCount>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c2:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00f      	beq.n	800a3ec <xQueueSemaphoreTake+0xfc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ce:	3310      	adds	r3, #16
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f001 f839 	bl	800b448 <xTaskRemoveFromEventList>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d007      	beq.n	800a3ec <xQueueSemaphoreTake+0xfc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3dc:	4b66      	ldr	r3, [pc, #408]	; (800a578 <xQueueSemaphoreTake+0x288>)
 800a3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3ec:	f001 feee 	bl	800c1cc <vPortExitCritical>
				return pdPASS;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e0bc      	b.n	800a56e <xQueueSemaphoreTake+0x27e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d124      	bne.n	800a444 <xQueueSemaphoreTake+0x154>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00b      	beq.n	800a418 <xQueueSemaphoreTake+0x128>
 800a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a404:	b672      	cpsid	i
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	b662      	cpsie	i
 800a414:	617b      	str	r3, [r7, #20]
 800a416:	e7fe      	b.n	800a416 <xQueueSemaphoreTake+0x126>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a418:	f001 fed8 	bl	800c1cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41e:	4618      	mov	r0, r3
 800a420:	f00f fe9a 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a424:	4604      	mov	r4, r0
 800a426:	2000      	movs	r0, #0
 800a428:	f00f fe96 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a42c:	4601      	mov	r1, r0
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	2301      	movs	r3, #1
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	4613      	mov	r3, r2
 800a436:	460a      	mov	r2, r1
 800a438:	4621      	mov	r1, r4
 800a43a:	205c      	movs	r0, #92	; 0x5c
 800a43c:	f00f f93a 	bl	80196b4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800a440:	2300      	movs	r3, #0
 800a442:	e094      	b.n	800a56e <xQueueSemaphoreTake+0x27e>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a446:	2b00      	cmp	r3, #0
 800a448:	d106      	bne.n	800a458 <xQueueSemaphoreTake+0x168>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a44a:	f107 030c 	add.w	r3, r7, #12
 800a44e:	4618      	mov	r0, r3
 800a450:	f001 f862 	bl	800b518 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a454:	2301      	movs	r3, #1
 800a456:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a458:	f001 feb8 	bl	800c1cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a45c:	f000 fdd0 	bl	800b000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a460:	f001 fe82 	bl	800c168 <vPortEnterCritical>
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a46a:	b25b      	sxtb	r3, r3
 800a46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a470:	d103      	bne.n	800a47a <xQueueSemaphoreTake+0x18a>
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	2200      	movs	r2, #0
 800a476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a480:	b25b      	sxtb	r3, r3
 800a482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a486:	d103      	bne.n	800a490 <xQueueSemaphoreTake+0x1a0>
 800a488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a490:	f001 fe9c 	bl	800c1cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a494:	463a      	mov	r2, r7
 800a496:	f107 030c 	add.w	r3, r7, #12
 800a49a:	4611      	mov	r1, r2
 800a49c:	4618      	mov	r0, r3
 800a49e:	f001 f851 	bl	800b544 <xTaskCheckForTimeOut>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d132      	bne.n	800a50e <xQueueSemaphoreTake+0x21e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4aa:	f000 fa6b 	bl	800a984 <prvIsQueueEmpty>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d026      	beq.n	800a502 <xQueueSemaphoreTake+0x212>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d109      	bne.n	800a4d0 <xQueueSemaphoreTake+0x1e0>
					{
						taskENTER_CRITICAL();
 800a4bc:	f001 fe54 	bl	800c168 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f001 f9b5 	bl	800b834 <xTaskPriorityInherit>
 800a4ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a4cc:	f001 fe7e 	bl	800c1cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d2:	3324      	adds	r3, #36	; 0x24
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 ff8f 	bl	800b3fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4e0:	f000 f9fe 	bl	800a8e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4e4:	f000 fd9a 	bl	800b01c <xTaskResumeAll>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f47f af43 	bne.w	800a376 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a4f0:	4b21      	ldr	r3, [pc, #132]	; (800a578 <xQueueSemaphoreTake+0x288>)
 800a4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f6:	601a      	str	r2, [r3, #0]
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	e739      	b.n	800a376 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a504:	f000 f9ec 	bl	800a8e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a508:	f000 fd88 	bl	800b01c <xTaskResumeAll>
 800a50c:	e733      	b.n	800a376 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a50e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a510:	f000 f9e6 	bl	800a8e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a514:	f000 fd82 	bl	800b01c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a51a:	f000 fa33 	bl	800a984 <prvIsQueueEmpty>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	f43f af28 	beq.w	800a376 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d00d      	beq.n	800a548 <xQueueSemaphoreTake+0x258>
					{
						taskENTER_CRITICAL();
 800a52c:	f001 fe1c 	bl	800c168 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a532:	f000 f92d 	bl	800a790 <prvGetDisinheritPriorityAfterTimeout>
 800a536:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a53e:	4618      	mov	r0, r3
 800a540:	f001 fa8e 	bl	800ba60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a544:	f001 fe42 	bl	800c1cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800a548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54a:	4618      	mov	r0, r3
 800a54c:	f00f fe04 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a550:	4604      	mov	r4, r0
 800a552:	2000      	movs	r0, #0
 800a554:	f00f fe00 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a558:	4601      	mov	r1, r0
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	2301      	movs	r3, #1
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	4613      	mov	r3, r2
 800a562:	460a      	mov	r2, r1
 800a564:	4621      	mov	r1, r4
 800a566:	205c      	movs	r0, #92	; 0x5c
 800a568:	f00f f8a4 	bl	80196b4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800a56c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a56e:	4618      	mov	r0, r3
 800a570:	373c      	adds	r7, #60	; 0x3c
 800a572:	46bd      	mov	sp, r7
 800a574:	bd90      	pop	{r4, r7, pc}
 800a576:	bf00      	nop
 800a578:	e000ed04 	.word	0xe000ed04

0800a57c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a57c:	b590      	push	{r4, r7, lr}
 800a57e:	b08f      	sub	sp, #60	; 0x3c
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10b      	bne.n	800a5aa <xQueueReceiveFromISR+0x2e>
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	b672      	cpsid	i
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	b662      	cpsie	i
 800a5a6:	623b      	str	r3, [r7, #32]
 800a5a8:	e7fe      	b.n	800a5a8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d103      	bne.n	800a5b8 <xQueueReceiveFromISR+0x3c>
 800a5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <xQueueReceiveFromISR+0x40>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e000      	b.n	800a5be <xQueueReceiveFromISR+0x42>
 800a5bc:	2300      	movs	r3, #0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10b      	bne.n	800a5da <xQueueReceiveFromISR+0x5e>
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	b672      	cpsid	i
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	b662      	cpsie	i
 800a5d6:	61fb      	str	r3, [r7, #28]
 800a5d8:	e7fe      	b.n	800a5d8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5da:	f001 fea5 	bl	800c328 <vPortValidateInterruptPriority>
	__asm volatile
 800a5de:	f3ef 8211 	mrs	r2, BASEPRI
 800a5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e6:	b672      	cpsid	i
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	b662      	cpsie	i
 800a5f6:	61ba      	str	r2, [r7, #24]
 800a5f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a5fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a602:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a606:	2b00      	cmp	r3, #0
 800a608:	d03e      	beq.n	800a688 <xQueueReceiveFromISR+0x10c>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	4618      	mov	r0, r3
 800a618:	f00f fd9e 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a61c:	4604      	mov	r4, r0
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	4618      	mov	r0, r3
 800a622:	f00f fd99 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a626:	4602      	mov	r2, r0
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4621      	mov	r1, r4
 800a62c:	2062      	movs	r0, #98	; 0x62
 800a62e:	f00e ffcb 	bl	80195c8 <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a632:	68b9      	ldr	r1, [r7, #8]
 800a634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a636:	f000 f92d 	bl	800a894 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63c:	1e5a      	subs	r2, r3, #1
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a642:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64a:	d112      	bne.n	800a672 <xQueueReceiveFromISR+0xf6>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d016      	beq.n	800a682 <xQueueReceiveFromISR+0x106>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a656:	3310      	adds	r3, #16
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 fef5 	bl	800b448 <xTaskRemoveFromEventList>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00e      	beq.n	800a682 <xQueueReceiveFromISR+0x106>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00b      	beq.n	800a682 <xQueueReceiveFromISR+0x106>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2201      	movs	r2, #1
 800a66e:	601a      	str	r2, [r3, #0]
 800a670:	e007      	b.n	800a682 <xQueueReceiveFromISR+0x106>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a676:	3301      	adds	r3, #1
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	b25a      	sxtb	r2, r3
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a682:	2301      	movs	r3, #1
 800a684:	637b      	str	r3, [r7, #52]	; 0x34
 800a686:	e010      	b.n	800a6aa <xQueueReceiveFromISR+0x12e>
		}
		else
		{
			xReturn = pdFAIL;
 800a688:	2300      	movs	r3, #0
 800a68a:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	4618      	mov	r0, r3
 800a690:	f00f fd62 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a694:	4604      	mov	r4, r0
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	4618      	mov	r0, r3
 800a69a:	f00f fd5d 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	2062      	movs	r0, #98	; 0x62
 800a6a6:	f00e ff8f 	bl	80195c8 <SEGGER_SYSVIEW_RecordU32x3>
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	373c      	adds	r7, #60	; 0x3c
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd90      	pop	{r4, r7, pc}

0800a6be <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10b      	bne.n	800a6e4 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	b672      	cpsid	i
 800a6d2:	f383 8811 	msr	BASEPRI, r3
 800a6d6:	f3bf 8f6f 	isb	sy
 800a6da:	f3bf 8f4f 	dsb	sy
 800a6de:	b662      	cpsie	i
 800a6e0:	60bb      	str	r3, [r7, #8]
 800a6e2:	e7fe      	b.n	800a6e2 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 800a6e4:	f001 fd40 	bl	800c168 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ec:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a6ee:	f001 fd6d 	bl	800c1cc <vPortExitCritical>

	return uxReturn;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10b      	bne.n	800a722 <uxQueueMessagesWaitingFromISR+0x26>
 800a70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70e:	b672      	cpsid	i
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	b662      	cpsie	i
 800a71e:	60bb      	str	r3, [r7, #8]
 800a720:	e7fe      	b.n	800a720 <uxQueueMessagesWaitingFromISR+0x24>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a726:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800a728:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr

0800a736 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b084      	sub	sp, #16
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10b      	bne.n	800a760 <vQueueDelete+0x2a>
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	b672      	cpsid	i
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	b662      	cpsie	i
 800a75c:	60bb      	str	r3, [r7, #8]
 800a75e:	e7fe      	b.n	800a75e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4618      	mov	r0, r3
 800a764:	f00f fcf8 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800a768:	4603      	mov	r3, r0
 800a76a:	4619      	mov	r1, r3
 800a76c:	205f      	movs	r0, #95	; 0x5f
 800a76e:	f00e fe95 	bl	801949c <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 f934 	bl	800a9e0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d102      	bne.n	800a788 <vQueueDelete+0x52>
		{
			vPortFree( pxQueue );
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f001 feda 	bl	800c53c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a788:	bf00      	nop
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d006      	beq.n	800a7ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f1c3 0307 	rsb	r3, r3, #7
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	e001      	b.n	800a7b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
	}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10d      	bne.n	800a7fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d14d      	bne.n	800a882 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f001 f8ac 	bl	800b948 <xTaskPriorityDisinherit>
 800a7f0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	605a      	str	r2, [r3, #4]
 800a7f8:	e043      	b.n	800a882 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d119      	bne.n	800a834 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6898      	ldr	r0, [r3, #8]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a808:	461a      	mov	r2, r3
 800a80a:	68b9      	ldr	r1, [r7, #8]
 800a80c:	f00f fe29 	bl	801a462 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	689a      	ldr	r2, [r3, #8]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a818:	441a      	add	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	689a      	ldr	r2, [r3, #8]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	429a      	cmp	r2, r3
 800a828:	d32b      	bcc.n	800a882 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	609a      	str	r2, [r3, #8]
 800a832:	e026      	b.n	800a882 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	68d8      	ldr	r0, [r3, #12]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83c:	461a      	mov	r2, r3
 800a83e:	68b9      	ldr	r1, [r7, #8]
 800a840:	f00f fe0f 	bl	801a462 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	68da      	ldr	r2, [r3, #12]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84c:	425b      	negs	r3, r3
 800a84e:	441a      	add	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	68da      	ldr	r2, [r3, #12]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d207      	bcs.n	800a870 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	685a      	ldr	r2, [r3, #4]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a868:	425b      	negs	r3, r3
 800a86a:	441a      	add	r2, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2b02      	cmp	r3, #2
 800a874:	d105      	bne.n	800a882 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	3b01      	subs	r3, #1
 800a880:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a88a:	697b      	ldr	r3, [r7, #20]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3718      	adds	r7, #24
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d018      	beq.n	800a8d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	68da      	ldr	r2, [r3, #12]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	441a      	add	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68da      	ldr	r2, [r3, #12]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d303      	bcc.n	800a8c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68d9      	ldr	r1, [r3, #12]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	6838      	ldr	r0, [r7, #0]
 800a8d4:	f00f fdc5 	bl	801a462 <memcpy>
	}
}
 800a8d8:	bf00      	nop
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a8e8:	f001 fc3e 	bl	800c168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8f4:	e011      	b.n	800a91a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d012      	beq.n	800a924 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	3324      	adds	r3, #36	; 0x24
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fda0 	bl	800b448 <xTaskRemoveFromEventList>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d001      	beq.n	800a912 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a90e:	f000 fe7d 	bl	800b60c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a912:	7bfb      	ldrb	r3, [r7, #15]
 800a914:	3b01      	subs	r3, #1
 800a916:	b2db      	uxtb	r3, r3
 800a918:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	dce9      	bgt.n	800a8f6 <prvUnlockQueue+0x16>
 800a922:	e000      	b.n	800a926 <prvUnlockQueue+0x46>
					break;
 800a924:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	22ff      	movs	r2, #255	; 0xff
 800a92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a92e:	f001 fc4d 	bl	800c1cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a932:	f001 fc19 	bl	800c168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a93c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a93e:	e011      	b.n	800a964 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d012      	beq.n	800a96e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3310      	adds	r3, #16
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 fd7b 	bl	800b448 <xTaskRemoveFromEventList>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a958:	f000 fe58 	bl	800b60c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	3b01      	subs	r3, #1
 800a960:	b2db      	uxtb	r3, r3
 800a962:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	dce9      	bgt.n	800a940 <prvUnlockQueue+0x60>
 800a96c:	e000      	b.n	800a970 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a96e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	22ff      	movs	r2, #255	; 0xff
 800a974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a978:	f001 fc28 	bl	800c1cc <vPortExitCritical>
}
 800a97c:	bf00      	nop
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a98c:	f001 fbec 	bl	800c168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a994:	2b00      	cmp	r3, #0
 800a996:	d102      	bne.n	800a99e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a998:	2301      	movs	r3, #1
 800a99a:	60fb      	str	r3, [r7, #12]
 800a99c:	e001      	b.n	800a9a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9a2:	f001 fc13 	bl	800c1cc <vPortExitCritical>

	return xReturn;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9b8:	f001 fbd6 	bl	800c168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d102      	bne.n	800a9ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	60fb      	str	r3, [r7, #12]
 800a9cc:	e001      	b.n	800a9d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9d2:	f001 fbfb 	bl	800c1cc <vPortExitCritical>

	return xReturn;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	e016      	b.n	800aa1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a9ee:	4a10      	ldr	r2, [pc, #64]	; (800aa30 <vQueueUnregisterQueue+0x50>)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	4413      	add	r3, r2
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d10b      	bne.n	800aa16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a9fe:	4a0c      	ldr	r2, [pc, #48]	; (800aa30 <vQueueUnregisterQueue+0x50>)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2100      	movs	r1, #0
 800aa04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aa08:	4a09      	ldr	r2, [pc, #36]	; (800aa30 <vQueueUnregisterQueue+0x50>)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	00db      	lsls	r3, r3, #3
 800aa0e:	4413      	add	r3, r2
 800aa10:	2200      	movs	r2, #0
 800aa12:	605a      	str	r2, [r3, #4]
				break;
 800aa14:	e005      	b.n	800aa22 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	60fb      	str	r3, [r7, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2b07      	cmp	r3, #7
 800aa20:	d9e5      	bls.n	800a9ee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aa22:	bf00      	nop
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	20012ccc 	.word	0x20012ccc

0800aa34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08e      	sub	sp, #56	; 0x38
 800aa38:	af04      	add	r7, sp, #16
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10b      	bne.n	800aa60 <xTaskCreateStatic+0x2c>
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	b672      	cpsid	i
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	b662      	cpsie	i
 800aa5c:	623b      	str	r3, [r7, #32]
 800aa5e:	e7fe      	b.n	800aa5e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10b      	bne.n	800aa7e <xTaskCreateStatic+0x4a>
 800aa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6a:	b672      	cpsid	i
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	b662      	cpsie	i
 800aa7a:	61fb      	str	r3, [r7, #28]
 800aa7c:	e7fe      	b.n	800aa7c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa7e:	2354      	movs	r3, #84	; 0x54
 800aa80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b54      	cmp	r3, #84	; 0x54
 800aa86:	d00b      	beq.n	800aaa0 <xTaskCreateStatic+0x6c>
 800aa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8c:	b672      	cpsid	i
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	b662      	cpsie	i
 800aa9c:	61bb      	str	r3, [r7, #24]
 800aa9e:	e7fe      	b.n	800aa9e <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d01e      	beq.n	800aae4 <xTaskCreateStatic+0xb0>
 800aaa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d01b      	beq.n	800aae4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aaac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aab4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab8:	2202      	movs	r2, #2
 800aaba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aabe:	2300      	movs	r3, #0
 800aac0:	9303      	str	r3, [sp, #12]
 800aac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac4:	9302      	str	r3, [sp, #8]
 800aac6:	f107 0314 	add.w	r3, r7, #20
 800aaca:	9301      	str	r3, [sp, #4]
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	68b9      	ldr	r1, [r7, #8]
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 f850 	bl	800ab7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aadc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aade:	f000 f8cd 	bl	800ac7c <prvAddNewTaskToReadyList>
 800aae2:	e001      	b.n	800aae8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800aae4:	2300      	movs	r3, #0
 800aae6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aae8:	697b      	ldr	r3, [r7, #20]
	}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3728      	adds	r7, #40	; 0x28
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b08c      	sub	sp, #48	; 0x30
 800aaf6:	af04      	add	r7, sp, #16
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	603b      	str	r3, [r7, #0]
 800aafe:	4613      	mov	r3, r2
 800ab00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab02:	88fb      	ldrh	r3, [r7, #6]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f001 fc50 	bl	800c3ac <pvPortMalloc>
 800ab0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00e      	beq.n	800ab32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ab14:	2054      	movs	r0, #84	; 0x54
 800ab16:	f001 fc49 	bl	800c3ac <pvPortMalloc>
 800ab1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	631a      	str	r2, [r3, #48]	; 0x30
 800ab28:	e005      	b.n	800ab36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab2a:	6978      	ldr	r0, [r7, #20]
 800ab2c:	f001 fd06 	bl	800c53c <vPortFree>
 800ab30:	e001      	b.n	800ab36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab32:	2300      	movs	r3, #0
 800ab34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d017      	beq.n	800ab6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab44:	88fa      	ldrh	r2, [r7, #6]
 800ab46:	2300      	movs	r3, #0
 800ab48:	9303      	str	r3, [sp, #12]
 800ab4a:	69fb      	ldr	r3, [r7, #28]
 800ab4c:	9302      	str	r3, [sp, #8]
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	9301      	str	r3, [sp, #4]
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	9300      	str	r3, [sp, #0]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	68b9      	ldr	r1, [r7, #8]
 800ab5a:	68f8      	ldr	r0, [r7, #12]
 800ab5c:	f000 f80e 	bl	800ab7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab60:	69f8      	ldr	r0, [r7, #28]
 800ab62:	f000 f88b 	bl	800ac7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab66:	2301      	movs	r3, #1
 800ab68:	61bb      	str	r3, [r7, #24]
 800ab6a:	e002      	b.n	800ab72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab72:	69bb      	ldr	r3, [r7, #24]
	}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3720      	adds	r7, #32
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b088      	sub	sp, #32
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
 800ab88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab8e:	6879      	ldr	r1, [r7, #4]
 800ab90:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ab94:	440b      	add	r3, r1
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	f023 0307 	bic.w	r3, r3, #7
 800aba2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	f003 0307 	and.w	r3, r3, #7
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00b      	beq.n	800abc6 <prvInitialiseNewTask+0x4a>
 800abae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb2:	b672      	cpsid	i
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	b662      	cpsie	i
 800abc2:	617b      	str	r3, [r7, #20]
 800abc4:	e7fe      	b.n	800abc4 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abc6:	2300      	movs	r3, #0
 800abc8:	61fb      	str	r3, [r7, #28]
 800abca:	e012      	b.n	800abf2 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	4413      	add	r3, r2
 800abd2:	7819      	ldrb	r1, [r3, #0]
 800abd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	4413      	add	r3, r2
 800abda:	3334      	adds	r3, #52	; 0x34
 800abdc:	460a      	mov	r2, r1
 800abde:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	4413      	add	r3, r2
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d006      	beq.n	800abfa <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	3301      	adds	r3, #1
 800abf0:	61fb      	str	r3, [r7, #28]
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	2b0f      	cmp	r3, #15
 800abf6:	d9e9      	bls.n	800abcc <prvInitialiseNewTask+0x50>
 800abf8:	e000      	b.n	800abfc <prvInitialiseNewTask+0x80>
		{
			break;
 800abfa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac06:	2b06      	cmp	r3, #6
 800ac08:	d901      	bls.n	800ac0e <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac0a:	2306      	movs	r3, #6
 800ac0c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac12:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac18:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac22:	3304      	adds	r3, #4
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fe fd9c 	bl	8009762 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	3318      	adds	r3, #24
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe fd97 	bl	8009762 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3c:	f1c3 0207 	rsb	r2, r3, #7
 800ac40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac48:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac58:	683a      	ldr	r2, [r7, #0]
 800ac5a:	68f9      	ldr	r1, [r7, #12]
 800ac5c:	69b8      	ldr	r0, [r7, #24]
 800ac5e:	f001 f979 	bl	800bf54 <pxPortInitialiseStack>
 800ac62:	4602      	mov	r2, r0
 800ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac66:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800ac68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d002      	beq.n	800ac74 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac74:	bf00      	nop
 800ac76:	3720      	adds	r7, #32
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac7c:	b5b0      	push	{r4, r5, r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af02      	add	r7, sp, #8
 800ac82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac84:	f001 fa70 	bl	800c168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac88:	4b39      	ldr	r3, [pc, #228]	; (800ad70 <prvAddNewTaskToReadyList+0xf4>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	4a38      	ldr	r2, [pc, #224]	; (800ad70 <prvAddNewTaskToReadyList+0xf4>)
 800ac90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac92:	4b38      	ldr	r3, [pc, #224]	; (800ad74 <prvAddNewTaskToReadyList+0xf8>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d109      	bne.n	800acae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac9a:	4a36      	ldr	r2, [pc, #216]	; (800ad74 <prvAddNewTaskToReadyList+0xf8>)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aca0:	4b33      	ldr	r3, [pc, #204]	; (800ad70 <prvAddNewTaskToReadyList+0xf4>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d110      	bne.n	800acca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aca8:	f000 fcd4 	bl	800b654 <prvInitialiseTaskLists>
 800acac:	e00d      	b.n	800acca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800acae:	4b32      	ldr	r3, [pc, #200]	; (800ad78 <prvAddNewTaskToReadyList+0xfc>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d109      	bne.n	800acca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800acb6:	4b2f      	ldr	r3, [pc, #188]	; (800ad74 <prvAddNewTaskToReadyList+0xf8>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d802      	bhi.n	800acca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acc4:	4a2b      	ldr	r2, [pc, #172]	; (800ad74 <prvAddNewTaskToReadyList+0xf8>)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acca:	4b2c      	ldr	r3, [pc, #176]	; (800ad7c <prvAddNewTaskToReadyList+0x100>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3301      	adds	r3, #1
 800acd0:	4a2a      	ldr	r2, [pc, #168]	; (800ad7c <prvAddNewTaskToReadyList+0x100>)
 800acd2:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d016      	beq.n	800ad08 <prvAddNewTaskToReadyList+0x8c>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4618      	mov	r0, r3
 800acde:	f00f f90f 	bl	8019f00 <SEGGER_SYSVIEW_OnTaskCreate>
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf2:	461d      	mov	r5, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	461c      	mov	r4, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfe:	1ae3      	subs	r3, r4, r3
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	462b      	mov	r3, r5
 800ad04:	f00d fde6 	bl	80188d4 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f00f f980 	bl	801a010 <SEGGER_SYSVIEW_OnTaskStartReady>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	2201      	movs	r2, #1
 800ad16:	409a      	lsls	r2, r3
 800ad18:	4b19      	ldr	r3, [pc, #100]	; (800ad80 <prvAddNewTaskToReadyList+0x104>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	4a18      	ldr	r2, [pc, #96]	; (800ad80 <prvAddNewTaskToReadyList+0x104>)
 800ad20:	6013      	str	r3, [r2, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad26:	4613      	mov	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4a15      	ldr	r2, [pc, #84]	; (800ad84 <prvAddNewTaskToReadyList+0x108>)
 800ad30:	441a      	add	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3304      	adds	r3, #4
 800ad36:	4619      	mov	r1, r3
 800ad38:	4610      	mov	r0, r2
 800ad3a:	f7fe fd1f 	bl	800977c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad3e:	f001 fa45 	bl	800c1cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad42:	4b0d      	ldr	r3, [pc, #52]	; (800ad78 <prvAddNewTaskToReadyList+0xfc>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00e      	beq.n	800ad68 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad4a:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <prvAddNewTaskToReadyList+0xf8>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d207      	bcs.n	800ad68 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad58:	4b0b      	ldr	r3, [pc, #44]	; (800ad88 <prvAddNewTaskToReadyList+0x10c>)
 800ad5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad5e:	601a      	str	r2, [r3, #0]
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad70:	2000057c 	.word	0x2000057c
 800ad74:	2000047c 	.word	0x2000047c
 800ad78:	20000588 	.word	0x20000588
 800ad7c:	20000598 	.word	0x20000598
 800ad80:	20000584 	.word	0x20000584
 800ad84:	20000480 	.word	0x20000480
 800ad88:	e000ed04 	.word	0xe000ed04

0800ad8c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ad94:	f001 f9e8 	bl	800c168 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d102      	bne.n	800ada4 <vTaskDelete+0x18>
 800ad9e:	4b40      	ldr	r3, [pc, #256]	; (800aea0 <vTaskDelete+0x114>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	e000      	b.n	800ada6 <vTaskDelete+0x1a>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	3304      	adds	r3, #4
 800adac:	4618      	mov	r0, r3
 800adae:	f7fe fd42 	bl	8009836 <uxListRemove>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d115      	bne.n	800ade4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adbc:	4939      	ldr	r1, [pc, #228]	; (800aea4 <vTaskDelete+0x118>)
 800adbe:	4613      	mov	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	440b      	add	r3, r1
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10a      	bne.n	800ade4 <vTaskDelete+0x58>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add2:	2201      	movs	r2, #1
 800add4:	fa02 f303 	lsl.w	r3, r2, r3
 800add8:	43da      	mvns	r2, r3
 800adda:	4b33      	ldr	r3, [pc, #204]	; (800aea8 <vTaskDelete+0x11c>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4013      	ands	r3, r2
 800ade0:	4a31      	ldr	r2, [pc, #196]	; (800aea8 <vTaskDelete+0x11c>)
 800ade2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d004      	beq.n	800adf6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3318      	adds	r3, #24
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7fe fd20 	bl	8009836 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800adf6:	4b2d      	ldr	r3, [pc, #180]	; (800aeac <vTaskDelete+0x120>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	3301      	adds	r3, #1
 800adfc:	4a2b      	ldr	r2, [pc, #172]	; (800aeac <vTaskDelete+0x120>)
 800adfe:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ae00:	4b27      	ldr	r3, [pc, #156]	; (800aea0 <vTaskDelete+0x114>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d10b      	bne.n	800ae22 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4827      	ldr	r0, [pc, #156]	; (800aeb0 <vTaskDelete+0x124>)
 800ae12:	f7fe fcb3 	bl	800977c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800ae16:	4b27      	ldr	r3, [pc, #156]	; (800aeb4 <vTaskDelete+0x128>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	4a25      	ldr	r2, [pc, #148]	; (800aeb4 <vTaskDelete+0x128>)
 800ae1e:	6013      	str	r3, [r2, #0]
 800ae20:	e009      	b.n	800ae36 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800ae22:	4b25      	ldr	r3, [pc, #148]	; (800aeb8 <vTaskDelete+0x12c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3b01      	subs	r3, #1
 800ae28:	4a23      	ldr	r2, [pc, #140]	; (800aeb8 <vTaskDelete+0x12c>)
 800ae2a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800ae2c:	68f8      	ldr	r0, [r7, #12]
 800ae2e:	f000 fc7d 	bl	800b72c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800ae32:	f000 fcab 	bl	800b78c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f00f f98d 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	4619      	mov	r1, r3
 800ae42:	2022      	movs	r0, #34	; 0x22
 800ae44:	f00e fb2a 	bl	801949c <SEGGER_SYSVIEW_RecordU32>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f00d fdaa 	bl	80189a4 <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 800ae50:	f001 f9bc 	bl	800c1cc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800ae54:	4b19      	ldr	r3, [pc, #100]	; (800aebc <vTaskDelete+0x130>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d01c      	beq.n	800ae96 <vTaskDelete+0x10a>
		{
			if( pxTCB == pxCurrentTCB )
 800ae5c:	4b10      	ldr	r3, [pc, #64]	; (800aea0 <vTaskDelete+0x114>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d117      	bne.n	800ae96 <vTaskDelete+0x10a>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800ae66:	4b16      	ldr	r3, [pc, #88]	; (800aec0 <vTaskDelete+0x134>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00b      	beq.n	800ae86 <vTaskDelete+0xfa>
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	b672      	cpsid	i
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	b662      	cpsie	i
 800ae82:	60bb      	str	r3, [r7, #8]
 800ae84:	e7fe      	b.n	800ae84 <vTaskDelete+0xf8>
				portYIELD_WITHIN_API();
 800ae86:	4b0f      	ldr	r3, [pc, #60]	; (800aec4 <vTaskDelete+0x138>)
 800ae88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae96:	bf00      	nop
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	2000047c 	.word	0x2000047c
 800aea4:	20000480 	.word	0x20000480
 800aea8:	20000584 	.word	0x20000584
 800aeac:	20000598 	.word	0x20000598
 800aeb0:	20000550 	.word	0x20000550
 800aeb4:	20000564 	.word	0x20000564
 800aeb8:	2000057c 	.word	0x2000057c
 800aebc:	20000588 	.word	0x20000588
 800aec0:	200005a4 	.word	0x200005a4
 800aec4:	e000ed04 	.word	0xe000ed04

0800aec8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d01c      	beq.n	800af14 <vTaskDelay+0x4c>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aeda:	4b16      	ldr	r3, [pc, #88]	; (800af34 <vTaskDelay+0x6c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00b      	beq.n	800aefa <vTaskDelay+0x32>
 800aee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee6:	b672      	cpsid	i
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	b662      	cpsie	i
 800aef6:	60bb      	str	r3, [r7, #8]
 800aef8:	e7fe      	b.n	800aef8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800aefa:	f000 f881 	bl	800b000 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 800aefe:	6879      	ldr	r1, [r7, #4]
 800af00:	2023      	movs	r0, #35	; 0x23
 800af02:	f00e facb 	bl	801949c <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af06:	2100      	movs	r1, #0
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 ffab 	bl	800be64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af0e:	f000 f885 	bl	800b01c <xTaskResumeAll>
 800af12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d107      	bne.n	800af2a <vTaskDelay+0x62>
		{
			portYIELD_WITHIN_API();
 800af1a:	4b07      	ldr	r3, [pc, #28]	; (800af38 <vTaskDelay+0x70>)
 800af1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	f3bf 8f4f 	dsb	sy
 800af26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af2a:	bf00      	nop
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	200005a4 	.word	0x200005a4
 800af38:	e000ed04 	.word	0xe000ed04

0800af3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b08a      	sub	sp, #40	; 0x28
 800af40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af42:	2300      	movs	r3, #0
 800af44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af46:	2300      	movs	r3, #0
 800af48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af4a:	463a      	mov	r2, r7
 800af4c:	1d39      	adds	r1, r7, #4
 800af4e:	f107 0308 	add.w	r3, r7, #8
 800af52:	4618      	mov	r0, r3
 800af54:	f7f5 ff88 	bl	8000e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	9202      	str	r2, [sp, #8]
 800af60:	9301      	str	r3, [sp, #4]
 800af62:	2300      	movs	r3, #0
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	2300      	movs	r3, #0
 800af68:	460a      	mov	r2, r1
 800af6a:	491f      	ldr	r1, [pc, #124]	; (800afe8 <vTaskStartScheduler+0xac>)
 800af6c:	481f      	ldr	r0, [pc, #124]	; (800afec <vTaskStartScheduler+0xb0>)
 800af6e:	f7ff fd61 	bl	800aa34 <xTaskCreateStatic>
 800af72:	4602      	mov	r2, r0
 800af74:	4b1e      	ldr	r3, [pc, #120]	; (800aff0 <vTaskStartScheduler+0xb4>)
 800af76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af78:	4b1d      	ldr	r3, [pc, #116]	; (800aff0 <vTaskStartScheduler+0xb4>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d002      	beq.n	800af86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af80:	2301      	movs	r3, #1
 800af82:	617b      	str	r3, [r7, #20]
 800af84:	e001      	b.n	800af8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af86:	2300      	movs	r3, #0
 800af88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d117      	bne.n	800afc0 <vTaskStartScheduler+0x84>
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	b672      	cpsid	i
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	b662      	cpsie	i
 800afa4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afa6:	4b13      	ldr	r3, [pc, #76]	; (800aff4 <vTaskStartScheduler+0xb8>)
 800afa8:	f04f 32ff 	mov.w	r2, #4294967295
 800afac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afae:	4b12      	ldr	r3, [pc, #72]	; (800aff8 <vTaskStartScheduler+0xbc>)
 800afb0:	2201      	movs	r2, #1
 800afb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800afb4:	4b11      	ldr	r3, [pc, #68]	; (800affc <vTaskStartScheduler+0xc0>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afba:	f001 f859 	bl	800c070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afbe:	e00f      	b.n	800afe0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc6:	d10b      	bne.n	800afe0 <vTaskStartScheduler+0xa4>
 800afc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afcc:	b672      	cpsid	i
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	b662      	cpsie	i
 800afdc:	60fb      	str	r3, [r7, #12]
 800afde:	e7fe      	b.n	800afde <vTaskStartScheduler+0xa2>
}
 800afe0:	bf00      	nop
 800afe2:	3718      	adds	r7, #24
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	0801d840 	.word	0x0801d840
 800afec:	0800b625 	.word	0x0800b625
 800aff0:	200005a0 	.word	0x200005a0
 800aff4:	2000059c 	.word	0x2000059c
 800aff8:	20000588 	.word	0x20000588
 800affc:	20000580 	.word	0x20000580

0800b000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b000:	b480      	push	{r7}
 800b002:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b004:	4b04      	ldr	r3, [pc, #16]	; (800b018 <vTaskSuspendAll+0x18>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3301      	adds	r3, #1
 800b00a:	4a03      	ldr	r2, [pc, #12]	; (800b018 <vTaskSuspendAll+0x18>)
 800b00c:	6013      	str	r3, [r2, #0]
}
 800b00e:	bf00      	nop
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	200005a4 	.word	0x200005a4

0800b01c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b026:	2300      	movs	r3, #0
 800b028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b02a:	4b44      	ldr	r3, [pc, #272]	; (800b13c <xTaskResumeAll+0x120>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d10b      	bne.n	800b04a <xTaskResumeAll+0x2e>
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	b672      	cpsid	i
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	b662      	cpsie	i
 800b046:	603b      	str	r3, [r7, #0]
 800b048:	e7fe      	b.n	800b048 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b04a:	f001 f88d 	bl	800c168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b04e:	4b3b      	ldr	r3, [pc, #236]	; (800b13c <xTaskResumeAll+0x120>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	3b01      	subs	r3, #1
 800b054:	4a39      	ldr	r2, [pc, #228]	; (800b13c <xTaskResumeAll+0x120>)
 800b056:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b058:	4b38      	ldr	r3, [pc, #224]	; (800b13c <xTaskResumeAll+0x120>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d165      	bne.n	800b12c <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b060:	4b37      	ldr	r3, [pc, #220]	; (800b140 <xTaskResumeAll+0x124>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d061      	beq.n	800b12c <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b068:	e032      	b.n	800b0d0 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b06a:	4b36      	ldr	r3, [pc, #216]	; (800b144 <xTaskResumeAll+0x128>)
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3318      	adds	r3, #24
 800b076:	4618      	mov	r0, r3
 800b078:	f7fe fbdd 	bl	8009836 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	3304      	adds	r3, #4
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe fbd8 	bl	8009836 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	4618      	mov	r0, r3
 800b08a:	f00e ffc1 	bl	801a010 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b092:	2201      	movs	r2, #1
 800b094:	409a      	lsls	r2, r3
 800b096:	4b2c      	ldr	r3, [pc, #176]	; (800b148 <xTaskResumeAll+0x12c>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	4a2a      	ldr	r2, [pc, #168]	; (800b148 <xTaskResumeAll+0x12c>)
 800b09e:	6013      	str	r3, [r2, #0]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4413      	add	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4a27      	ldr	r2, [pc, #156]	; (800b14c <xTaskResumeAll+0x130>)
 800b0ae:	441a      	add	r2, r3
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	4610      	mov	r0, r2
 800b0b8:	f7fe fb60 	bl	800977c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c0:	4b23      	ldr	r3, [pc, #140]	; (800b150 <xTaskResumeAll+0x134>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d302      	bcc.n	800b0d0 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 800b0ca:	4b22      	ldr	r3, [pc, #136]	; (800b154 <xTaskResumeAll+0x138>)
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0d0:	4b1c      	ldr	r3, [pc, #112]	; (800b144 <xTaskResumeAll+0x128>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1c8      	bne.n	800b06a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0de:	f000 fb55 	bl	800b78c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b0e2:	4b1d      	ldr	r3, [pc, #116]	; (800b158 <xTaskResumeAll+0x13c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d010      	beq.n	800b110 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0ee:	f000 f859 	bl	800b1a4 <xTaskIncrementTick>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 800b0f8:	4b16      	ldr	r3, [pc, #88]	; (800b154 <xTaskResumeAll+0x138>)
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	3b01      	subs	r3, #1
 800b102:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1f1      	bne.n	800b0ee <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 800b10a:	4b13      	ldr	r3, [pc, #76]	; (800b158 <xTaskResumeAll+0x13c>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b110:	4b10      	ldr	r3, [pc, #64]	; (800b154 <xTaskResumeAll+0x138>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d009      	beq.n	800b12c <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b118:	2301      	movs	r3, #1
 800b11a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b11c:	4b0f      	ldr	r3, [pc, #60]	; (800b15c <xTaskResumeAll+0x140>)
 800b11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b12c:	f001 f84e 	bl	800c1cc <vPortExitCritical>

	return xAlreadyYielded;
 800b130:	68bb      	ldr	r3, [r7, #8]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	200005a4 	.word	0x200005a4
 800b140:	2000057c 	.word	0x2000057c
 800b144:	2000053c 	.word	0x2000053c
 800b148:	20000584 	.word	0x20000584
 800b14c:	20000480 	.word	0x20000480
 800b150:	2000047c 	.word	0x2000047c
 800b154:	20000590 	.word	0x20000590
 800b158:	2000058c 	.word	0x2000058c
 800b15c:	e000ed04 	.word	0xe000ed04

0800b160 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b166:	4b05      	ldr	r3, [pc, #20]	; (800b17c <xTaskGetTickCount+0x1c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b16c:	687b      	ldr	r3, [r7, #4]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	370c      	adds	r7, #12
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	20000580 	.word	0x20000580

0800b180 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b186:	f001 f8cf 	bl	800c328 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b18a:	2300      	movs	r3, #0
 800b18c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b18e:	4b04      	ldr	r3, [pc, #16]	; (800b1a0 <xTaskGetTickCountFromISR+0x20>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b194:	683b      	ldr	r3, [r7, #0]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20000580 	.word	0x20000580

0800b1a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ae:	4b53      	ldr	r3, [pc, #332]	; (800b2fc <xTaskIncrementTick+0x158>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	f040 8092 	bne.w	800b2dc <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1b8:	4b51      	ldr	r3, [pc, #324]	; (800b300 <xTaskIncrementTick+0x15c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1c0:	4a4f      	ldr	r2, [pc, #316]	; (800b300 <xTaskIncrementTick+0x15c>)
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d121      	bne.n	800b210 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1cc:	4b4d      	ldr	r3, [pc, #308]	; (800b304 <xTaskIncrementTick+0x160>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00b      	beq.n	800b1ee <xTaskIncrementTick+0x4a>
 800b1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1da:	b672      	cpsid	i
 800b1dc:	f383 8811 	msr	BASEPRI, r3
 800b1e0:	f3bf 8f6f 	isb	sy
 800b1e4:	f3bf 8f4f 	dsb	sy
 800b1e8:	b662      	cpsie	i
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	e7fe      	b.n	800b1ec <xTaskIncrementTick+0x48>
 800b1ee:	4b45      	ldr	r3, [pc, #276]	; (800b304 <xTaskIncrementTick+0x160>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	60fb      	str	r3, [r7, #12]
 800b1f4:	4b44      	ldr	r3, [pc, #272]	; (800b308 <xTaskIncrementTick+0x164>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a42      	ldr	r2, [pc, #264]	; (800b304 <xTaskIncrementTick+0x160>)
 800b1fa:	6013      	str	r3, [r2, #0]
 800b1fc:	4a42      	ldr	r2, [pc, #264]	; (800b308 <xTaskIncrementTick+0x164>)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6013      	str	r3, [r2, #0]
 800b202:	4b42      	ldr	r3, [pc, #264]	; (800b30c <xTaskIncrementTick+0x168>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3301      	adds	r3, #1
 800b208:	4a40      	ldr	r2, [pc, #256]	; (800b30c <xTaskIncrementTick+0x168>)
 800b20a:	6013      	str	r3, [r2, #0]
 800b20c:	f000 fabe 	bl	800b78c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b210:	4b3f      	ldr	r3, [pc, #252]	; (800b310 <xTaskIncrementTick+0x16c>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	429a      	cmp	r2, r3
 800b218:	d351      	bcc.n	800b2be <xTaskIncrementTick+0x11a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b21a:	4b3a      	ldr	r3, [pc, #232]	; (800b304 <xTaskIncrementTick+0x160>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <xTaskIncrementTick+0x84>
 800b224:	2301      	movs	r3, #1
 800b226:	e000      	b.n	800b22a <xTaskIncrementTick+0x86>
 800b228:	2300      	movs	r3, #0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d004      	beq.n	800b238 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b22e:	4b38      	ldr	r3, [pc, #224]	; (800b310 <xTaskIncrementTick+0x16c>)
 800b230:	f04f 32ff 	mov.w	r2, #4294967295
 800b234:	601a      	str	r2, [r3, #0]
					break;
 800b236:	e042      	b.n	800b2be <xTaskIncrementTick+0x11a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b238:	4b32      	ldr	r3, [pc, #200]	; (800b304 <xTaskIncrementTick+0x160>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d203      	bcs.n	800b258 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b250:	4a2f      	ldr	r2, [pc, #188]	; (800b310 <xTaskIncrementTick+0x16c>)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6013      	str	r3, [r2, #0]
						break;
 800b256:	e032      	b.n	800b2be <xTaskIncrementTick+0x11a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	3304      	adds	r3, #4
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fe faea 	bl	8009836 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b266:	2b00      	cmp	r3, #0
 800b268:	d004      	beq.n	800b274 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	3318      	adds	r3, #24
 800b26e:	4618      	mov	r0, r3
 800b270:	f7fe fae1 	bl	8009836 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	4618      	mov	r0, r3
 800b278:	f00e feca 	bl	801a010 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	2201      	movs	r2, #1
 800b282:	409a      	lsls	r2, r3
 800b284:	4b23      	ldr	r3, [pc, #140]	; (800b314 <xTaskIncrementTick+0x170>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4313      	orrs	r3, r2
 800b28a:	4a22      	ldr	r2, [pc, #136]	; (800b314 <xTaskIncrementTick+0x170>)
 800b28c:	6013      	str	r3, [r2, #0]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b292:	4613      	mov	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	4413      	add	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4a1f      	ldr	r2, [pc, #124]	; (800b318 <xTaskIncrementTick+0x174>)
 800b29c:	441a      	add	r2, r3
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	f7fe fa69 	bl	800977c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ae:	4b1b      	ldr	r3, [pc, #108]	; (800b31c <xTaskIncrementTick+0x178>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d3b0      	bcc.n	800b21a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2bc:	e7ad      	b.n	800b21a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2be:	4b17      	ldr	r3, [pc, #92]	; (800b31c <xTaskIncrementTick+0x178>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c4:	4914      	ldr	r1, [pc, #80]	; (800b318 <xTaskIncrementTick+0x174>)
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	009b      	lsls	r3, r3, #2
 800b2ce:	440b      	add	r3, r1
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d907      	bls.n	800b2e6 <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	617b      	str	r3, [r7, #20]
 800b2da:	e004      	b.n	800b2e6 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b2dc:	4b10      	ldr	r3, [pc, #64]	; (800b320 <xTaskIncrementTick+0x17c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	4a0f      	ldr	r2, [pc, #60]	; (800b320 <xTaskIncrementTick+0x17c>)
 800b2e4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b2e6:	4b0f      	ldr	r3, [pc, #60]	; (800b324 <xTaskIncrementTick+0x180>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b2f2:	697b      	ldr	r3, [r7, #20]
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	200005a4 	.word	0x200005a4
 800b300:	20000580 	.word	0x20000580
 800b304:	20000534 	.word	0x20000534
 800b308:	20000538 	.word	0x20000538
 800b30c:	20000594 	.word	0x20000594
 800b310:	2000059c 	.word	0x2000059c
 800b314:	20000584 	.word	0x20000584
 800b318:	20000480 	.word	0x20000480
 800b31c:	2000047c 	.word	0x2000047c
 800b320:	2000058c 	.word	0x2000058c
 800b324:	20000590 	.word	0x20000590

0800b328 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b32e:	4b2d      	ldr	r3, [pc, #180]	; (800b3e4 <vTaskSwitchContext+0xbc>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b336:	4b2c      	ldr	r3, [pc, #176]	; (800b3e8 <vTaskSwitchContext+0xc0>)
 800b338:	2201      	movs	r2, #1
 800b33a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b33c:	e04e      	b.n	800b3dc <vTaskSwitchContext+0xb4>
		xYieldPending = pdFALSE;
 800b33e:	4b2a      	ldr	r3, [pc, #168]	; (800b3e8 <vTaskSwitchContext+0xc0>)
 800b340:	2200      	movs	r2, #0
 800b342:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b344:	4b29      	ldr	r3, [pc, #164]	; (800b3ec <vTaskSwitchContext+0xc4>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	fab3 f383 	clz	r3, r3
 800b350:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b352:	7afb      	ldrb	r3, [r7, #11]
 800b354:	f1c3 031f 	rsb	r3, r3, #31
 800b358:	617b      	str	r3, [r7, #20]
 800b35a:	4925      	ldr	r1, [pc, #148]	; (800b3f0 <vTaskSwitchContext+0xc8>)
 800b35c:	697a      	ldr	r2, [r7, #20]
 800b35e:	4613      	mov	r3, r2
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	4413      	add	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	440b      	add	r3, r1
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d10b      	bne.n	800b386 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	b672      	cpsid	i
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	b662      	cpsie	i
 800b382:	607b      	str	r3, [r7, #4]
 800b384:	e7fe      	b.n	800b384 <vTaskSwitchContext+0x5c>
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	4613      	mov	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4a17      	ldr	r2, [pc, #92]	; (800b3f0 <vTaskSwitchContext+0xc8>)
 800b392:	4413      	add	r3, r2
 800b394:	613b      	str	r3, [r7, #16]
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	605a      	str	r2, [r3, #4]
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	3308      	adds	r3, #8
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d104      	bne.n	800b3b6 <vTaskSwitchContext+0x8e>
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	605a      	str	r2, [r3, #4]
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	4a0d      	ldr	r2, [pc, #52]	; (800b3f4 <vTaskSwitchContext+0xcc>)
 800b3be:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800b3c0:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <vTaskSwitchContext+0xcc>)
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	4b0c      	ldr	r3, [pc, #48]	; (800b3f8 <vTaskSwitchContext+0xd0>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d102      	bne.n	800b3d2 <vTaskSwitchContext+0xaa>
 800b3cc:	f00e fd7c 	bl	8019ec8 <SEGGER_SYSVIEW_OnIdle>
}
 800b3d0:	e004      	b.n	800b3dc <vTaskSwitchContext+0xb4>
		traceTASK_SWITCHED_IN();
 800b3d2:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <vTaskSwitchContext+0xcc>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f00e fdd6 	bl	8019f88 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800b3dc:	bf00      	nop
 800b3de:	3718      	adds	r7, #24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	200005a4 	.word	0x200005a4
 800b3e8:	20000590 	.word	0x20000590
 800b3ec:	20000584 	.word	0x20000584
 800b3f0:	20000480 	.word	0x20000480
 800b3f4:	2000047c 	.word	0x2000047c
 800b3f8:	200005a0 	.word	0x200005a0

0800b3fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10b      	bne.n	800b424 <vTaskPlaceOnEventList+0x28>
 800b40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b410:	b672      	cpsid	i
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	b662      	cpsie	i
 800b420:	60fb      	str	r3, [r7, #12]
 800b422:	e7fe      	b.n	800b422 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b424:	4b07      	ldr	r3, [pc, #28]	; (800b444 <vTaskPlaceOnEventList+0x48>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3318      	adds	r3, #24
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7fe f9c9 	bl	80097c4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b432:	2101      	movs	r1, #1
 800b434:	6838      	ldr	r0, [r7, #0]
 800b436:	f000 fd15 	bl	800be64 <prvAddCurrentTaskToDelayedList>
}
 800b43a:	bf00      	nop
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	2000047c 	.word	0x2000047c

0800b448 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d10b      	bne.n	800b476 <xTaskRemoveFromEventList+0x2e>
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	b672      	cpsid	i
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	b662      	cpsie	i
 800b472:	60fb      	str	r3, [r7, #12]
 800b474:	e7fe      	b.n	800b474 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	3318      	adds	r3, #24
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe f9db 	bl	8009836 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b480:	4b1f      	ldr	r3, [pc, #124]	; (800b500 <xTaskRemoveFromEventList+0xb8>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d120      	bne.n	800b4ca <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	3304      	adds	r3, #4
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7fe f9d2 	bl	8009836 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	4618      	mov	r0, r3
 800b496:	f00e fdbb 	bl	801a010 <SEGGER_SYSVIEW_OnTaskStartReady>
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49e:	2201      	movs	r2, #1
 800b4a0:	409a      	lsls	r2, r3
 800b4a2:	4b18      	ldr	r3, [pc, #96]	; (800b504 <xTaskRemoveFromEventList+0xbc>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	4a16      	ldr	r2, [pc, #88]	; (800b504 <xTaskRemoveFromEventList+0xbc>)
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4a13      	ldr	r2, [pc, #76]	; (800b508 <xTaskRemoveFromEventList+0xc0>)
 800b4ba:	441a      	add	r2, r3
 800b4bc:	693b      	ldr	r3, [r7, #16]
 800b4be:	3304      	adds	r3, #4
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4610      	mov	r0, r2
 800b4c4:	f7fe f95a 	bl	800977c <vListInsertEnd>
 800b4c8:	e005      	b.n	800b4d6 <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	3318      	adds	r3, #24
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	480e      	ldr	r0, [pc, #56]	; (800b50c <xTaskRemoveFromEventList+0xc4>)
 800b4d2:	f7fe f953 	bl	800977c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4da:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <xTaskRemoveFromEventList+0xc8>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d905      	bls.n	800b4f0 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4e8:	4b0a      	ldr	r3, [pc, #40]	; (800b514 <xTaskRemoveFromEventList+0xcc>)
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]
 800b4ee:	e001      	b.n	800b4f4 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b4f4:	697b      	ldr	r3, [r7, #20]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3718      	adds	r7, #24
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	200005a4 	.word	0x200005a4
 800b504:	20000584 	.word	0x20000584
 800b508:	20000480 	.word	0x20000480
 800b50c:	2000053c 	.word	0x2000053c
 800b510:	2000047c 	.word	0x2000047c
 800b514:	20000590 	.word	0x20000590

0800b518 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b520:	4b06      	ldr	r3, [pc, #24]	; (800b53c <vTaskInternalSetTimeOutState+0x24>)
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b528:	4b05      	ldr	r3, [pc, #20]	; (800b540 <vTaskInternalSetTimeOutState+0x28>)
 800b52a:	681a      	ldr	r2, [r3, #0]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	605a      	str	r2, [r3, #4]
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr
 800b53c:	20000594 	.word	0x20000594
 800b540:	20000580 	.word	0x20000580

0800b544 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b088      	sub	sp, #32
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d10b      	bne.n	800b56c <xTaskCheckForTimeOut+0x28>
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	b672      	cpsid	i
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	b662      	cpsie	i
 800b568:	613b      	str	r3, [r7, #16]
 800b56a:	e7fe      	b.n	800b56a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10b      	bne.n	800b58a <xTaskCheckForTimeOut+0x46>
 800b572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b576:	b672      	cpsid	i
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	b662      	cpsie	i
 800b586:	60fb      	str	r3, [r7, #12]
 800b588:	e7fe      	b.n	800b588 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800b58a:	f000 fded 	bl	800c168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b58e:	4b1d      	ldr	r3, [pc, #116]	; (800b604 <xTaskCheckForTimeOut+0xc0>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	69ba      	ldr	r2, [r7, #24]
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5a6:	d102      	bne.n	800b5ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	61fb      	str	r3, [r7, #28]
 800b5ac:	e023      	b.n	800b5f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	4b15      	ldr	r3, [pc, #84]	; (800b608 <xTaskCheckForTimeOut+0xc4>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d007      	beq.n	800b5ca <xTaskCheckForTimeOut+0x86>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d302      	bcc.n	800b5ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	61fb      	str	r3, [r7, #28]
 800b5c8:	e015      	b.n	800b5f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d20b      	bcs.n	800b5ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	1ad2      	subs	r2, r2, r3
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7ff ff99 	bl	800b518 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	61fb      	str	r3, [r7, #28]
 800b5ea:	e004      	b.n	800b5f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5f6:	f000 fde9 	bl	800c1cc <vPortExitCritical>

	return xReturn;
 800b5fa:	69fb      	ldr	r3, [r7, #28]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3720      	adds	r7, #32
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	20000580 	.word	0x20000580
 800b608:	20000594 	.word	0x20000594

0800b60c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b60c:	b480      	push	{r7}
 800b60e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b610:	4b03      	ldr	r3, [pc, #12]	; (800b620 <vTaskMissedYield+0x14>)
 800b612:	2201      	movs	r2, #1
 800b614:	601a      	str	r2, [r3, #0]
}
 800b616:	bf00      	nop
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	20000590 	.word	0x20000590

0800b624 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b62c:	f000 f852 	bl	800b6d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b630:	4b06      	ldr	r3, [pc, #24]	; (800b64c <prvIdleTask+0x28>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d9f9      	bls.n	800b62c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b638:	4b05      	ldr	r3, [pc, #20]	; (800b650 <prvIdleTask+0x2c>)
 800b63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b63e:	601a      	str	r2, [r3, #0]
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b648:	e7f0      	b.n	800b62c <prvIdleTask+0x8>
 800b64a:	bf00      	nop
 800b64c:	20000480 	.word	0x20000480
 800b650:	e000ed04 	.word	0xe000ed04

0800b654 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b65a:	2300      	movs	r3, #0
 800b65c:	607b      	str	r3, [r7, #4]
 800b65e:	e00c      	b.n	800b67a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	4613      	mov	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4a12      	ldr	r2, [pc, #72]	; (800b6b4 <prvInitialiseTaskLists+0x60>)
 800b66c:	4413      	add	r3, r2
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fe f857 	bl	8009722 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	3301      	adds	r3, #1
 800b678:	607b      	str	r3, [r7, #4]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b06      	cmp	r3, #6
 800b67e:	d9ef      	bls.n	800b660 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b680:	480d      	ldr	r0, [pc, #52]	; (800b6b8 <prvInitialiseTaskLists+0x64>)
 800b682:	f7fe f84e 	bl	8009722 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b686:	480d      	ldr	r0, [pc, #52]	; (800b6bc <prvInitialiseTaskLists+0x68>)
 800b688:	f7fe f84b 	bl	8009722 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b68c:	480c      	ldr	r0, [pc, #48]	; (800b6c0 <prvInitialiseTaskLists+0x6c>)
 800b68e:	f7fe f848 	bl	8009722 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b692:	480c      	ldr	r0, [pc, #48]	; (800b6c4 <prvInitialiseTaskLists+0x70>)
 800b694:	f7fe f845 	bl	8009722 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b698:	480b      	ldr	r0, [pc, #44]	; (800b6c8 <prvInitialiseTaskLists+0x74>)
 800b69a:	f7fe f842 	bl	8009722 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b69e:	4b0b      	ldr	r3, [pc, #44]	; (800b6cc <prvInitialiseTaskLists+0x78>)
 800b6a0:	4a05      	ldr	r2, [pc, #20]	; (800b6b8 <prvInitialiseTaskLists+0x64>)
 800b6a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6a4:	4b0a      	ldr	r3, [pc, #40]	; (800b6d0 <prvInitialiseTaskLists+0x7c>)
 800b6a6:	4a05      	ldr	r2, [pc, #20]	; (800b6bc <prvInitialiseTaskLists+0x68>)
 800b6a8:	601a      	str	r2, [r3, #0]
}
 800b6aa:	bf00      	nop
 800b6ac:	3708      	adds	r7, #8
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20000480 	.word	0x20000480
 800b6b8:	2000050c 	.word	0x2000050c
 800b6bc:	20000520 	.word	0x20000520
 800b6c0:	2000053c 	.word	0x2000053c
 800b6c4:	20000550 	.word	0x20000550
 800b6c8:	20000568 	.word	0x20000568
 800b6cc:	20000534 	.word	0x20000534
 800b6d0:	20000538 	.word	0x20000538

0800b6d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6da:	e019      	b.n	800b710 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6dc:	f000 fd44 	bl	800c168 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b6e0:	4b0f      	ldr	r3, [pc, #60]	; (800b720 <prvCheckTasksWaitingTermination+0x4c>)
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fe f8a2 	bl	8009836 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6f2:	4b0c      	ldr	r3, [pc, #48]	; (800b724 <prvCheckTasksWaitingTermination+0x50>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	4a0a      	ldr	r2, [pc, #40]	; (800b724 <prvCheckTasksWaitingTermination+0x50>)
 800b6fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	; (800b728 <prvCheckTasksWaitingTermination+0x54>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	3b01      	subs	r3, #1
 800b702:	4a09      	ldr	r2, [pc, #36]	; (800b728 <prvCheckTasksWaitingTermination+0x54>)
 800b704:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b706:	f000 fd61 	bl	800c1cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f80e 	bl	800b72c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b710:	4b05      	ldr	r3, [pc, #20]	; (800b728 <prvCheckTasksWaitingTermination+0x54>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1e1      	bne.n	800b6dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	20000550 	.word	0x20000550
 800b724:	2000057c 	.word	0x2000057c
 800b728:	20000564 	.word	0x20000564

0800b72c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d108      	bne.n	800b750 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b742:	4618      	mov	r0, r3
 800b744:	f000 fefa 	bl	800c53c <vPortFree>
				vPortFree( pxTCB );
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 fef7 	bl	800c53c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b74e:	e019      	b.n	800b784 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b756:	2b01      	cmp	r3, #1
 800b758:	d103      	bne.n	800b762 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 feee 	bl	800c53c <vPortFree>
	}
 800b760:	e010      	b.n	800b784 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d00b      	beq.n	800b784 <prvDeleteTCB+0x58>
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	b672      	cpsid	i
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	b662      	cpsie	i
 800b780:	60fb      	str	r3, [r7, #12]
 800b782:	e7fe      	b.n	800b782 <prvDeleteTCB+0x56>
	}
 800b784:	bf00      	nop
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b792:	4b0f      	ldr	r3, [pc, #60]	; (800b7d0 <prvResetNextTaskUnblockTime+0x44>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <prvResetNextTaskUnblockTime+0x14>
 800b79c:	2301      	movs	r3, #1
 800b79e:	e000      	b.n	800b7a2 <prvResetNextTaskUnblockTime+0x16>
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d004      	beq.n	800b7b0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7a6:	4b0b      	ldr	r3, [pc, #44]	; (800b7d4 <prvResetNextTaskUnblockTime+0x48>)
 800b7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7ae:	e008      	b.n	800b7c2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b7b0:	4b07      	ldr	r3, [pc, #28]	; (800b7d0 <prvResetNextTaskUnblockTime+0x44>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	4a05      	ldr	r2, [pc, #20]	; (800b7d4 <prvResetNextTaskUnblockTime+0x48>)
 800b7c0:	6013      	str	r3, [r2, #0]
}
 800b7c2:	bf00      	nop
 800b7c4:	370c      	adds	r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop
 800b7d0:	20000534 	.word	0x20000534
 800b7d4:	2000059c 	.word	0x2000059c

0800b7d8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b7de:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <xTaskGetCurrentTaskHandle+0x1c>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b7e4:	687b      	ldr	r3, [r7, #4]
	}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	2000047c 	.word	0x2000047c

0800b7f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7fe:	4b0b      	ldr	r3, [pc, #44]	; (800b82c <xTaskGetSchedulerState+0x34>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d102      	bne.n	800b80c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b806:	2301      	movs	r3, #1
 800b808:	607b      	str	r3, [r7, #4]
 800b80a:	e008      	b.n	800b81e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b80c:	4b08      	ldr	r3, [pc, #32]	; (800b830 <xTaskGetSchedulerState+0x38>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d102      	bne.n	800b81a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b814:	2302      	movs	r3, #2
 800b816:	607b      	str	r3, [r7, #4]
 800b818:	e001      	b.n	800b81e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b81a:	2300      	movs	r3, #0
 800b81c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b81e:	687b      	ldr	r3, [r7, #4]
	}
 800b820:	4618      	mov	r0, r3
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	20000588 	.word	0x20000588
 800b830:	200005a4 	.word	0x200005a4

0800b834 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d073      	beq.n	800b932 <xTaskPriorityInherit+0xfe>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84e:	4b3b      	ldr	r3, [pc, #236]	; (800b93c <xTaskPriorityInherit+0x108>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b854:	429a      	cmp	r2, r3
 800b856:	d263      	bcs.n	800b920 <xTaskPriorityInherit+0xec>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	db06      	blt.n	800b86e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b860:	4b36      	ldr	r3, [pc, #216]	; (800b93c <xTaskPriorityInherit+0x108>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b866:	f1c3 0207 	rsb	r2, r3, #7
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	6959      	ldr	r1, [r3, #20]
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b876:	4613      	mov	r3, r2
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	4413      	add	r3, r2
 800b87c:	009b      	lsls	r3, r3, #2
 800b87e:	4a30      	ldr	r2, [pc, #192]	; (800b940 <xTaskPriorityInherit+0x10c>)
 800b880:	4413      	add	r3, r2
 800b882:	4299      	cmp	r1, r3
 800b884:	d101      	bne.n	800b88a <xTaskPriorityInherit+0x56>
 800b886:	2301      	movs	r3, #1
 800b888:	e000      	b.n	800b88c <xTaskPriorityInherit+0x58>
 800b88a:	2300      	movs	r3, #0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d03a      	beq.n	800b906 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	3304      	adds	r3, #4
 800b894:	4618      	mov	r0, r3
 800b896:	f7fd ffce 	bl	8009836 <uxListRemove>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d115      	bne.n	800b8cc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a4:	4926      	ldr	r1, [pc, #152]	; (800b940 <xTaskPriorityInherit+0x10c>)
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	440b      	add	r3, r1
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10a      	bne.n	800b8cc <xTaskPriorityInherit+0x98>
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c0:	43da      	mvns	r2, r3
 800b8c2:	4b20      	ldr	r3, [pc, #128]	; (800b944 <xTaskPriorityInherit+0x110>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	4a1e      	ldr	r2, [pc, #120]	; (800b944 <xTaskPriorityInherit+0x110>)
 800b8ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b8cc:	4b1b      	ldr	r3, [pc, #108]	; (800b93c <xTaskPriorityInherit+0x108>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8da:	2201      	movs	r2, #1
 800b8dc:	409a      	lsls	r2, r3
 800b8de:	4b19      	ldr	r3, [pc, #100]	; (800b944 <xTaskPriorityInherit+0x110>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	4a17      	ldr	r2, [pc, #92]	; (800b944 <xTaskPriorityInherit+0x110>)
 800b8e6:	6013      	str	r3, [r2, #0]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4a12      	ldr	r2, [pc, #72]	; (800b940 <xTaskPriorityInherit+0x10c>)
 800b8f6:	441a      	add	r2, r3
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	4610      	mov	r0, r2
 800b900:	f7fd ff3c 	bl	800977c <vListInsertEnd>
 800b904:	e004      	b.n	800b910 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b906:	4b0d      	ldr	r3, [pc, #52]	; (800b93c <xTaskPriorityInherit+0x108>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4619      	mov	r1, r3
 800b914:	2049      	movs	r0, #73	; 0x49
 800b916:	f00d fdc1 	bl	801949c <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b91a:	2301      	movs	r3, #1
 800b91c:	60fb      	str	r3, [r7, #12]
 800b91e:	e008      	b.n	800b932 <xTaskPriorityInherit+0xfe>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b924:	4b05      	ldr	r3, [pc, #20]	; (800b93c <xTaskPriorityInherit+0x108>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d201      	bcs.n	800b932 <xTaskPriorityInherit+0xfe>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b92e:	2301      	movs	r3, #1
 800b930:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b932:	68fb      	ldr	r3, [r7, #12]
	}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}
 800b93c:	2000047c 	.word	0x2000047c
 800b940:	20000480 	.word	0x20000480
 800b944:	20000584 	.word	0x20000584

0800b948 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b086      	sub	sp, #24
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b954:	2300      	movs	r3, #0
 800b956:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d075      	beq.n	800ba4a <xTaskPriorityDisinherit+0x102>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b95e:	4b3d      	ldr	r3, [pc, #244]	; (800ba54 <xTaskPriorityDisinherit+0x10c>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	693a      	ldr	r2, [r7, #16]
 800b964:	429a      	cmp	r2, r3
 800b966:	d00b      	beq.n	800b980 <xTaskPriorityDisinherit+0x38>
 800b968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b96c:	b672      	cpsid	i
 800b96e:	f383 8811 	msr	BASEPRI, r3
 800b972:	f3bf 8f6f 	isb	sy
 800b976:	f3bf 8f4f 	dsb	sy
 800b97a:	b662      	cpsie	i
 800b97c:	60fb      	str	r3, [r7, #12]
 800b97e:	e7fe      	b.n	800b97e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10b      	bne.n	800b9a0 <xTaskPriorityDisinherit+0x58>
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	b672      	cpsid	i
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	b662      	cpsie	i
 800b99c:	60bb      	str	r3, [r7, #8]
 800b99e:	e7fe      	b.n	800b99e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9a4:	1e5a      	subs	r2, r3, #1
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d049      	beq.n	800ba4a <xTaskPriorityDisinherit+0x102>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d145      	bne.n	800ba4a <xTaskPriorityDisinherit+0x102>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fd ff37 	bl	8009836 <uxListRemove>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d115      	bne.n	800b9fa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d2:	4921      	ldr	r1, [pc, #132]	; (800ba58 <xTaskPriorityDisinherit+0x110>)
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	4413      	add	r3, r2
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	440b      	add	r3, r1
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d10a      	bne.n	800b9fa <xTaskPriorityDisinherit+0xb2>
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ee:	43da      	mvns	r2, r3
 800b9f0:	4b1a      	ldr	r3, [pc, #104]	; (800ba5c <xTaskPriorityDisinherit+0x114>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4013      	ands	r3, r2
 800b9f6:	4a19      	ldr	r2, [pc, #100]	; (800ba5c <xTaskPriorityDisinherit+0x114>)
 800b9f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	204a      	movs	r0, #74	; 0x4a
 800ba00:	f00d fd4c 	bl	801949c <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	f1c3 0207 	rsb	r2, r3, #7
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	409a      	lsls	r2, r3
 800ba20:	4b0e      	ldr	r3, [pc, #56]	; (800ba5c <xTaskPriorityDisinherit+0x114>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	4a0d      	ldr	r2, [pc, #52]	; (800ba5c <xTaskPriorityDisinherit+0x114>)
 800ba28:	6013      	str	r3, [r2, #0]
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	4a08      	ldr	r2, [pc, #32]	; (800ba58 <xTaskPriorityDisinherit+0x110>)
 800ba38:	441a      	add	r2, r3
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4610      	mov	r0, r2
 800ba42:	f7fd fe9b 	bl	800977c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba46:	2301      	movs	r3, #1
 800ba48:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba4a:	697b      	ldr	r3, [r7, #20]
	}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	2000047c 	.word	0x2000047c
 800ba58:	20000480 	.word	0x20000480
 800ba5c:	20000584 	.word	0x20000584

0800ba60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b088      	sub	sp, #32
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f000 8093 	beq.w	800bba0 <vTaskPriorityDisinheritAfterTimeout+0x140>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10b      	bne.n	800ba9a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800ba82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba86:	b672      	cpsid	i
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	b662      	cpsie	i
 800ba96:	60fb      	str	r3, [r7, #12]
 800ba98:	e7fe      	b.n	800ba98 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d902      	bls.n	800baaa <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	61fb      	str	r3, [r7, #28]
 800baa8:	e002      	b.n	800bab0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bab0:	69bb      	ldr	r3, [r7, #24]
 800bab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab4:	69fa      	ldr	r2, [r7, #28]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d072      	beq.n	800bba0 <vTaskPriorityDisinheritAfterTimeout+0x140>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800babe:	697a      	ldr	r2, [r7, #20]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d16d      	bne.n	800bba0 <vTaskPriorityDisinheritAfterTimeout+0x140>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bac4:	4b38      	ldr	r3, [pc, #224]	; (800bba8 <vTaskPriorityDisinheritAfterTimeout+0x148>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	69ba      	ldr	r2, [r7, #24]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d10b      	bne.n	800bae6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	b672      	cpsid	i
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	b662      	cpsie	i
 800bae2:	60bb      	str	r3, [r7, #8]
 800bae4:	e7fe      	b.n	800bae4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4619      	mov	r1, r3
 800baea:	204a      	movs	r0, #74	; 0x4a
 800baec:	f00d fcd6 	bl	801949c <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800baf0:	69bb      	ldr	r3, [r7, #24]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	69fa      	ldr	r2, [r7, #28]
 800bafa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	db04      	blt.n	800bb0e <vTaskPriorityDisinheritAfterTimeout+0xae>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	f1c3 0207 	rsb	r2, r3, #7
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	6959      	ldr	r1, [r3, #20]
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	4613      	mov	r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	4413      	add	r3, r2
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	4a23      	ldr	r2, [pc, #140]	; (800bbac <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800bb1e:	4413      	add	r3, r2
 800bb20:	4299      	cmp	r1, r3
 800bb22:	d101      	bne.n	800bb28 <vTaskPriorityDisinheritAfterTimeout+0xc8>
 800bb24:	2301      	movs	r3, #1
 800bb26:	e000      	b.n	800bb2a <vTaskPriorityDisinheritAfterTimeout+0xca>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d038      	beq.n	800bba0 <vTaskPriorityDisinheritAfterTimeout+0x140>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	3304      	adds	r3, #4
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fd fe7f 	bl	8009836 <uxListRemove>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d115      	bne.n	800bb6a <vTaskPriorityDisinheritAfterTimeout+0x10a>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb42:	491a      	ldr	r1, [pc, #104]	; (800bbac <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800bb44:	4613      	mov	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4413      	add	r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	440b      	add	r3, r1
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d10a      	bne.n	800bb6a <vTaskPriorityDisinheritAfterTimeout+0x10a>
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb58:	2201      	movs	r2, #1
 800bb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb5e:	43da      	mvns	r2, r3
 800bb60:	4b13      	ldr	r3, [pc, #76]	; (800bbb0 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4013      	ands	r3, r2
 800bb66:	4a12      	ldr	r2, [pc, #72]	; (800bbb0 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800bb68:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f00e fa4f 	bl	801a010 <SEGGER_SYSVIEW_OnTaskStartReady>
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb76:	2201      	movs	r2, #1
 800bb78:	409a      	lsls	r2, r3
 800bb7a:	4b0d      	ldr	r3, [pc, #52]	; (800bbb0 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	4a0b      	ldr	r2, [pc, #44]	; (800bbb0 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800bb82:	6013      	str	r3, [r2, #0]
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb88:	4613      	mov	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	4413      	add	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	4a06      	ldr	r2, [pc, #24]	; (800bbac <vTaskPriorityDisinheritAfterTimeout+0x14c>)
 800bb92:	441a      	add	r2, r3
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	3304      	adds	r3, #4
 800bb98:	4619      	mov	r1, r3
 800bb9a:	4610      	mov	r0, r2
 800bb9c:	f7fd fdee 	bl	800977c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bba0:	bf00      	nop
 800bba2:	3720      	adds	r7, #32
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	2000047c 	.word	0x2000047c
 800bbac:	20000480 	.word	0x20000480
 800bbb0:	20000584 	.word	0x20000584

0800bbb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800bbb4:	b480      	push	{r7}
 800bbb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bbb8:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d004      	beq.n	800bbca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bbc0:	4b05      	ldr	r3, [pc, #20]	; (800bbd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bbc6:	3201      	adds	r2, #1
 800bbc8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bbca:	4b03      	ldr	r3, [pc, #12]	; (800bbd8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
	}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr
 800bbd8:	2000047c 	.word	0x2000047c

0800bbdc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af02      	add	r7, sp, #8
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800bbea:	f000 fabd 	bl	800c168 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bbee:	4b2b      	ldr	r3, [pc, #172]	; (800bc9c <xTaskNotifyWait+0xc0>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d01a      	beq.n	800bc32 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800bbfc:	4b27      	ldr	r3, [pc, #156]	; (800bc9c <xTaskNotifyWait+0xc0>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	43d2      	mvns	r2, r2
 800bc06:	400a      	ands	r2, r1
 800bc08:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bc0a:	4b24      	ldr	r3, [pc, #144]	; (800bc9c <xTaskNotifyWait+0xc0>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d00b      	beq.n	800bc32 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	6838      	ldr	r0, [r7, #0]
 800bc1e:	f000 f921 	bl	800be64 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bc22:	4b1f      	ldr	r3, [pc, #124]	; (800bca0 <xTaskNotifyWait+0xc4>)
 800bc24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc28:	601a      	str	r2, [r3, #0]
 800bc2a:	f3bf 8f4f 	dsb	sy
 800bc2e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bc32:	f000 facb 	bl	800c1cc <vPortExitCritical>

		taskENTER_CRITICAL();
 800bc36:	f000 fa97 	bl	800c168 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	4613      	mov	r3, r2
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	68f9      	ldr	r1, [r7, #12]
 800bc46:	2040      	movs	r0, #64	; 0x40
 800bc48:	f00d fd34 	bl	80196b4 <SEGGER_SYSVIEW_RecordU32x4>

			if( pulNotificationValue != NULL )
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d004      	beq.n	800bc5c <xTaskNotifyWait+0x80>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bc52:	4b12      	ldr	r3, [pc, #72]	; (800bc9c <xTaskNotifyWait+0xc0>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bc5c:	4b0f      	ldr	r3, [pc, #60]	; (800bc9c <xTaskNotifyWait+0xc0>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d002      	beq.n	800bc70 <xTaskNotifyWait+0x94>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	617b      	str	r3, [r7, #20]
 800bc6e:	e008      	b.n	800bc82 <xTaskNotifyWait+0xa6>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bc70:	4b0a      	ldr	r3, [pc, #40]	; (800bc9c <xTaskNotifyWait+0xc0>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	43d2      	mvns	r2, r2
 800bc7a:	400a      	ands	r2, r1
 800bc7c:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc82:	4b06      	ldr	r3, [pc, #24]	; (800bc9c <xTaskNotifyWait+0xc0>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800bc8c:	f000 fa9e 	bl	800c1cc <vPortExitCritical>

		return xReturn;
 800bc90:	697b      	ldr	r3, [r7, #20]
	}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3718      	adds	r7, #24
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	2000047c 	.word	0x2000047c
 800bca0:	e000ed04 	.word	0xe000ed04

0800bca4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b090      	sub	sp, #64	; 0x40
 800bca8:	af02      	add	r7, sp, #8
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	603b      	str	r3, [r7, #0]
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10b      	bne.n	800bcd6 <xTaskGenericNotifyFromISR+0x32>
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	b672      	cpsid	i
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	b662      	cpsie	i
 800bcd2:	627b      	str	r3, [r7, #36]	; 0x24
 800bcd4:	e7fe      	b.n	800bcd4 <xTaskGenericNotifyFromISR+0x30>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcd6:	f000 fb27 	bl	800c328 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800bcde:	f3ef 8211 	mrs	r2, BASEPRI
 800bce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce6:	b672      	cpsid	i
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	b662      	cpsie	i
 800bcf6:	623a      	str	r2, [r7, #32]
 800bcf8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bcfa:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d003      	beq.n	800bd0c <xTaskGenericNotifyFromISR+0x68>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bd12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	2202      	movs	r2, #2
 800bd1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800bd1e:	79fb      	ldrb	r3, [r7, #7]
 800bd20:	2b04      	cmp	r3, #4
 800bd22:	d829      	bhi.n	800bd78 <xTaskGenericNotifyFromISR+0xd4>
 800bd24:	a201      	add	r2, pc, #4	; (adr r2, 800bd2c <xTaskGenericNotifyFromISR+0x88>)
 800bd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2a:	bf00      	nop
 800bd2c:	0800bd79 	.word	0x0800bd79
 800bd30:	0800bd41 	.word	0x0800bd41
 800bd34:	0800bd4f 	.word	0x0800bd4f
 800bd38:	0800bd5b 	.word	0x0800bd5b
 800bd3c:	0800bd63 	.word	0x0800bd63
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	431a      	orrs	r2, r3
 800bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800bd4c:	e014      	b.n	800bd78 <xTaskGenericNotifyFromISR+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd52:	1c5a      	adds	r2, r3, #1
 800bd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd56:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800bd58:	e00e      	b.n	800bd78 <xTaskGenericNotifyFromISR+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800bd60:	e00a      	b.n	800bd78 <xTaskGenericNotifyFromISR+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bd62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d003      	beq.n	800bd72 <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bd70:	e001      	b.n	800bd76 <xTaskGenericNotifyFromISR+0xd2>
						xReturn = pdFAIL;
 800bd72:	2300      	movs	r3, #0
 800bd74:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800bd76:	bf00      	nop
					/* The task is being notified without its notify value being
					updated. */
					break;
			}

			traceTASK_NOTIFY_FROM_ISR();
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f00e f9ec 	bl	801a158 <SEGGER_SYSVIEW_ShrinkId>
 800bd80:	79f9      	ldrb	r1, [r7, #7]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd86:	9201      	str	r2, [sp, #4]
 800bd88:	9300      	str	r3, [sp, #0]
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	4601      	mov	r1, r0
 800bd90:	203f      	movs	r0, #63	; 0x3f
 800bd92:	f00d fd21 	bl	80197d8 <SEGGER_SYSVIEW_RecordU32x5>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bd96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d14b      	bne.n	800be36 <xTaskGenericNotifyFromISR+0x192>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00b      	beq.n	800bdbe <xTaskGenericNotifyFromISR+0x11a>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	b672      	cpsid	i
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	b662      	cpsie	i
 800bdba:	61bb      	str	r3, [r7, #24]
 800bdbc:	e7fe      	b.n	800bdbc <xTaskGenericNotifyFromISR+0x118>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdbe:	4b23      	ldr	r3, [pc, #140]	; (800be4c <xTaskGenericNotifyFromISR+0x1a8>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d120      	bne.n	800be08 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc8:	3304      	adds	r3, #4
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fd fd33 	bl	8009836 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f00e f91c 	bl	801a010 <SEGGER_SYSVIEW_OnTaskStartReady>
 800bdd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bddc:	2201      	movs	r2, #1
 800bdde:	409a      	lsls	r2, r3
 800bde0:	4b1b      	ldr	r3, [pc, #108]	; (800be50 <xTaskGenericNotifyFromISR+0x1ac>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4313      	orrs	r3, r2
 800bde6:	4a1a      	ldr	r2, [pc, #104]	; (800be50 <xTaskGenericNotifyFromISR+0x1ac>)
 800bde8:	6013      	str	r3, [r2, #0]
 800bdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdee:	4613      	mov	r3, r2
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4413      	add	r3, r2
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	4a17      	ldr	r2, [pc, #92]	; (800be54 <xTaskGenericNotifyFromISR+0x1b0>)
 800bdf8:	441a      	add	r2, r3
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfc:	3304      	adds	r3, #4
 800bdfe:	4619      	mov	r1, r3
 800be00:	4610      	mov	r0, r2
 800be02:	f7fd fcbb 	bl	800977c <vListInsertEnd>
 800be06:	e005      	b.n	800be14 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	3318      	adds	r3, #24
 800be0c:	4619      	mov	r1, r3
 800be0e:	4812      	ldr	r0, [pc, #72]	; (800be58 <xTaskGenericNotifyFromISR+0x1b4>)
 800be10:	f7fd fcb4 	bl	800977c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be18:	4b10      	ldr	r3, [pc, #64]	; (800be5c <xTaskGenericNotifyFromISR+0x1b8>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1e:	429a      	cmp	r2, r3
 800be20:	d909      	bls.n	800be36 <xTaskGenericNotifyFromISR+0x192>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800be22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be24:	2b00      	cmp	r3, #0
 800be26:	d003      	beq.n	800be30 <xTaskGenericNotifyFromISR+0x18c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800be28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2a:	2201      	movs	r2, #1
 800be2c:	601a      	str	r2, [r3, #0]
 800be2e:	e002      	b.n	800be36 <xTaskGenericNotifyFromISR+0x192>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800be30:	4b0b      	ldr	r3, [pc, #44]	; (800be60 <xTaskGenericNotifyFromISR+0x1bc>)
 800be32:	2201      	movs	r2, #1
 800be34:	601a      	str	r2, [r3, #0]
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	617b      	str	r3, [r7, #20]
	__asm volatile
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800be40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800be42:	4618      	mov	r0, r3
 800be44:	3738      	adds	r7, #56	; 0x38
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	200005a4 	.word	0x200005a4
 800be50:	20000584 	.word	0x20000584
 800be54:	20000480 	.word	0x20000480
 800be58:	2000053c 	.word	0x2000053c
 800be5c:	2000047c 	.word	0x2000047c
 800be60:	20000590 	.word	0x20000590

0800be64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be6e:	4b32      	ldr	r3, [pc, #200]	; (800bf38 <prvAddCurrentTaskToDelayedList+0xd4>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be74:	4b31      	ldr	r3, [pc, #196]	; (800bf3c <prvAddCurrentTaskToDelayedList+0xd8>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3304      	adds	r3, #4
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fd fcdb 	bl	8009836 <uxListRemove>
 800be80:	4603      	mov	r3, r0
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10b      	bne.n	800be9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800be86:	4b2d      	ldr	r3, [pc, #180]	; (800bf3c <prvAddCurrentTaskToDelayedList+0xd8>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8c:	2201      	movs	r2, #1
 800be8e:	fa02 f303 	lsl.w	r3, r2, r3
 800be92:	43da      	mvns	r2, r3
 800be94:	4b2a      	ldr	r3, [pc, #168]	; (800bf40 <prvAddCurrentTaskToDelayedList+0xdc>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4013      	ands	r3, r2
 800be9a:	4a29      	ldr	r2, [pc, #164]	; (800bf40 <prvAddCurrentTaskToDelayedList+0xdc>)
 800be9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea4:	d110      	bne.n	800bec8 <prvAddCurrentTaskToDelayedList+0x64>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00d      	beq.n	800bec8 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800beac:	4b23      	ldr	r3, [pc, #140]	; (800bf3c <prvAddCurrentTaskToDelayedList+0xd8>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	211b      	movs	r1, #27
 800beb2:	4618      	mov	r0, r3
 800beb4:	f00e f8f0 	bl	801a098 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beb8:	4b20      	ldr	r3, [pc, #128]	; (800bf3c <prvAddCurrentTaskToDelayedList+0xd8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	3304      	adds	r3, #4
 800bebe:	4619      	mov	r1, r3
 800bec0:	4820      	ldr	r0, [pc, #128]	; (800bf44 <prvAddCurrentTaskToDelayedList+0xe0>)
 800bec2:	f7fd fc5b 	bl	800977c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bec6:	e032      	b.n	800bf2e <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4413      	add	r3, r2
 800bece:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bed0:	4b1a      	ldr	r3, [pc, #104]	; (800bf3c <prvAddCurrentTaskToDelayedList+0xd8>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d20f      	bcs.n	800bf00 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800bee0:	4b16      	ldr	r3, [pc, #88]	; (800bf3c <prvAddCurrentTaskToDelayedList+0xd8>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2104      	movs	r1, #4
 800bee6:	4618      	mov	r0, r3
 800bee8:	f00e f8d6 	bl	801a098 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800beec:	4b16      	ldr	r3, [pc, #88]	; (800bf48 <prvAddCurrentTaskToDelayedList+0xe4>)
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	4b12      	ldr	r3, [pc, #72]	; (800bf3c <prvAddCurrentTaskToDelayedList+0xd8>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3304      	adds	r3, #4
 800bef6:	4619      	mov	r1, r3
 800bef8:	4610      	mov	r0, r2
 800befa:	f7fd fc63 	bl	80097c4 <vListInsert>
}
 800befe:	e016      	b.n	800bf2e <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 800bf00:	4b0e      	ldr	r3, [pc, #56]	; (800bf3c <prvAddCurrentTaskToDelayedList+0xd8>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2104      	movs	r1, #4
 800bf06:	4618      	mov	r0, r3
 800bf08:	f00e f8c6 	bl	801a098 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf0c:	4b0f      	ldr	r3, [pc, #60]	; (800bf4c <prvAddCurrentTaskToDelayedList+0xe8>)
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	4b0a      	ldr	r3, [pc, #40]	; (800bf3c <prvAddCurrentTaskToDelayedList+0xd8>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3304      	adds	r3, #4
 800bf16:	4619      	mov	r1, r3
 800bf18:	4610      	mov	r0, r2
 800bf1a:	f7fd fc53 	bl	80097c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf1e:	4b0c      	ldr	r3, [pc, #48]	; (800bf50 <prvAddCurrentTaskToDelayedList+0xec>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d202      	bcs.n	800bf2e <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 800bf28:	4a09      	ldr	r2, [pc, #36]	; (800bf50 <prvAddCurrentTaskToDelayedList+0xec>)
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	6013      	str	r3, [r2, #0]
}
 800bf2e:	bf00      	nop
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	20000580 	.word	0x20000580
 800bf3c:	2000047c 	.word	0x2000047c
 800bf40:	20000584 	.word	0x20000584
 800bf44:	20000568 	.word	0x20000568
 800bf48:	20000538 	.word	0x20000538
 800bf4c:	20000534 	.word	0x20000534
 800bf50:	2000059c 	.word	0x2000059c

0800bf54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	3b04      	subs	r3, #4
 800bf64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	3b04      	subs	r3, #4
 800bf72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	f023 0201 	bic.w	r2, r3, #1
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	3b04      	subs	r3, #4
 800bf82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf84:	4a0c      	ldr	r2, [pc, #48]	; (800bfb8 <pxPortInitialiseStack+0x64>)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3b14      	subs	r3, #20
 800bf8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	3b04      	subs	r3, #4
 800bf9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f06f 0202 	mvn.w	r2, #2
 800bfa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	3b20      	subs	r3, #32
 800bfa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr
 800bfb8:	0800bfbd 	.word	0x0800bfbd

0800bfbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bfc6:	4b13      	ldr	r3, [pc, #76]	; (800c014 <prvTaskExitError+0x58>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfce:	d00b      	beq.n	800bfe8 <prvTaskExitError+0x2c>
	__asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd4:	b672      	cpsid	i
 800bfd6:	f383 8811 	msr	BASEPRI, r3
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	b662      	cpsie	i
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	e7fe      	b.n	800bfe6 <prvTaskExitError+0x2a>
 800bfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfec:	b672      	cpsid	i
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	b662      	cpsie	i
 800bffc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bffe:	bf00      	nop
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d0fc      	beq.n	800c000 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c006:	bf00      	nop
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	20000018 	.word	0x20000018
	...

0800c020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c020:	4b07      	ldr	r3, [pc, #28]	; (800c040 <pxCurrentTCBConst2>)
 800c022:	6819      	ldr	r1, [r3, #0]
 800c024:	6808      	ldr	r0, [r1, #0]
 800c026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c02a:	f380 8809 	msr	PSP, r0
 800c02e:	f3bf 8f6f 	isb	sy
 800c032:	f04f 0000 	mov.w	r0, #0
 800c036:	f380 8811 	msr	BASEPRI, r0
 800c03a:	4770      	bx	lr
 800c03c:	f3af 8000 	nop.w

0800c040 <pxCurrentTCBConst2>:
 800c040:	2000047c 	.word	0x2000047c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c044:	bf00      	nop
 800c046:	bf00      	nop

0800c048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c048:	4808      	ldr	r0, [pc, #32]	; (800c06c <prvPortStartFirstTask+0x24>)
 800c04a:	6800      	ldr	r0, [r0, #0]
 800c04c:	6800      	ldr	r0, [r0, #0]
 800c04e:	f380 8808 	msr	MSP, r0
 800c052:	f04f 0000 	mov.w	r0, #0
 800c056:	f380 8814 	msr	CONTROL, r0
 800c05a:	b662      	cpsie	i
 800c05c:	b661      	cpsie	f
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	df00      	svc	0
 800c068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c06a:	bf00      	nop
 800c06c:	e000ed08 	.word	0xe000ed08

0800c070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c076:	4b36      	ldr	r3, [pc, #216]	; (800c150 <xPortStartScheduler+0xe0>)
 800c078:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	22ff      	movs	r2, #255	; 0xff
 800c086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c090:	78fb      	ldrb	r3, [r7, #3]
 800c092:	b2db      	uxtb	r3, r3
 800c094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	4b2e      	ldr	r3, [pc, #184]	; (800c154 <xPortStartScheduler+0xe4>)
 800c09c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c09e:	4b2e      	ldr	r3, [pc, #184]	; (800c158 <xPortStartScheduler+0xe8>)
 800c0a0:	2207      	movs	r2, #7
 800c0a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0a4:	e009      	b.n	800c0ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c0a6:	4b2c      	ldr	r3, [pc, #176]	; (800c158 <xPortStartScheduler+0xe8>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	4a2a      	ldr	r2, [pc, #168]	; (800c158 <xPortStartScheduler+0xe8>)
 800c0ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0b0:	78fb      	ldrb	r3, [r7, #3]
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	005b      	lsls	r3, r3, #1
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0ba:	78fb      	ldrb	r3, [r7, #3]
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0c2:	2b80      	cmp	r3, #128	; 0x80
 800c0c4:	d0ef      	beq.n	800c0a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0c6:	4b24      	ldr	r3, [pc, #144]	; (800c158 <xPortStartScheduler+0xe8>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f1c3 0307 	rsb	r3, r3, #7
 800c0ce:	2b04      	cmp	r3, #4
 800c0d0:	d00b      	beq.n	800c0ea <xPortStartScheduler+0x7a>
 800c0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d6:	b672      	cpsid	i
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	b662      	cpsie	i
 800c0e6:	60bb      	str	r3, [r7, #8]
 800c0e8:	e7fe      	b.n	800c0e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0ea:	4b1b      	ldr	r3, [pc, #108]	; (800c158 <xPortStartScheduler+0xe8>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	021b      	lsls	r3, r3, #8
 800c0f0:	4a19      	ldr	r2, [pc, #100]	; (800c158 <xPortStartScheduler+0xe8>)
 800c0f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0f4:	4b18      	ldr	r3, [pc, #96]	; (800c158 <xPortStartScheduler+0xe8>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c0fc:	4a16      	ldr	r2, [pc, #88]	; (800c158 <xPortStartScheduler+0xe8>)
 800c0fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	b2da      	uxtb	r2, r3
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c108:	4b14      	ldr	r3, [pc, #80]	; (800c15c <xPortStartScheduler+0xec>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a13      	ldr	r2, [pc, #76]	; (800c15c <xPortStartScheduler+0xec>)
 800c10e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c112:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c114:	4b11      	ldr	r3, [pc, #68]	; (800c15c <xPortStartScheduler+0xec>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a10      	ldr	r2, [pc, #64]	; (800c15c <xPortStartScheduler+0xec>)
 800c11a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c11e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c120:	f000 f8d4 	bl	800c2cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c124:	4b0e      	ldr	r3, [pc, #56]	; (800c160 <xPortStartScheduler+0xf0>)
 800c126:	2200      	movs	r2, #0
 800c128:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c12a:	f000 f8f3 	bl	800c314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c12e:	4b0d      	ldr	r3, [pc, #52]	; (800c164 <xPortStartScheduler+0xf4>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4a0c      	ldr	r2, [pc, #48]	; (800c164 <xPortStartScheduler+0xf4>)
 800c134:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c138:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c13a:	f7ff ff85 	bl	800c048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c13e:	f7ff f8f3 	bl	800b328 <vTaskSwitchContext>
	prvTaskExitError();
 800c142:	f7ff ff3b 	bl	800bfbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	e000e400 	.word	0xe000e400
 800c154:	200005a8 	.word	0x200005a8
 800c158:	200005ac 	.word	0x200005ac
 800c15c:	e000ed20 	.word	0xe000ed20
 800c160:	20000018 	.word	0x20000018
 800c164:	e000ef34 	.word	0xe000ef34

0800c168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c172:	b672      	cpsid	i
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	b662      	cpsie	i
 800c182:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c184:	4b0f      	ldr	r3, [pc, #60]	; (800c1c4 <vPortEnterCritical+0x5c>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	3301      	adds	r3, #1
 800c18a:	4a0e      	ldr	r2, [pc, #56]	; (800c1c4 <vPortEnterCritical+0x5c>)
 800c18c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c18e:	4b0d      	ldr	r3, [pc, #52]	; (800c1c4 <vPortEnterCritical+0x5c>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d110      	bne.n	800c1b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c196:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <vPortEnterCritical+0x60>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00b      	beq.n	800c1b8 <vPortEnterCritical+0x50>
 800c1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a4:	b672      	cpsid	i
 800c1a6:	f383 8811 	msr	BASEPRI, r3
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	b662      	cpsie	i
 800c1b4:	603b      	str	r3, [r7, #0]
 800c1b6:	e7fe      	b.n	800c1b6 <vPortEnterCritical+0x4e>
	}
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr
 800c1c4:	20000018 	.word	0x20000018
 800c1c8:	e000ed04 	.word	0xe000ed04

0800c1cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1d2:	4b12      	ldr	r3, [pc, #72]	; (800c21c <vPortExitCritical+0x50>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10b      	bne.n	800c1f2 <vPortExitCritical+0x26>
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	b672      	cpsid	i
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	b662      	cpsie	i
 800c1ee:	607b      	str	r3, [r7, #4]
 800c1f0:	e7fe      	b.n	800c1f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800c1f2:	4b0a      	ldr	r3, [pc, #40]	; (800c21c <vPortExitCritical+0x50>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	4a08      	ldr	r2, [pc, #32]	; (800c21c <vPortExitCritical+0x50>)
 800c1fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1fc:	4b07      	ldr	r3, [pc, #28]	; (800c21c <vPortExitCritical+0x50>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d104      	bne.n	800c20e <vPortExitCritical+0x42>
 800c204:	2300      	movs	r3, #0
 800c206:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	20000018 	.word	0x20000018

0800c220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c220:	f3ef 8009 	mrs	r0, PSP
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	4b15      	ldr	r3, [pc, #84]	; (800c280 <pxCurrentTCBConst>)
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	f01e 0f10 	tst.w	lr, #16
 800c230:	bf08      	it	eq
 800c232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23a:	6010      	str	r0, [r2, #0]
 800c23c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c240:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c244:	b672      	cpsid	i
 800c246:	f380 8811 	msr	BASEPRI, r0
 800c24a:	f3bf 8f4f 	dsb	sy
 800c24e:	f3bf 8f6f 	isb	sy
 800c252:	b662      	cpsie	i
 800c254:	f7ff f868 	bl	800b328 <vTaskSwitchContext>
 800c258:	f04f 0000 	mov.w	r0, #0
 800c25c:	f380 8811 	msr	BASEPRI, r0
 800c260:	bc09      	pop	{r0, r3}
 800c262:	6819      	ldr	r1, [r3, #0]
 800c264:	6808      	ldr	r0, [r1, #0]
 800c266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c26a:	f01e 0f10 	tst.w	lr, #16
 800c26e:	bf08      	it	eq
 800c270:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c274:	f380 8809 	msr	PSP, r0
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop

0800c280 <pxCurrentTCBConst>:
 800c280:	2000047c 	.word	0x2000047c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c284:	bf00      	nop
 800c286:	bf00      	nop

0800c288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c292:	b672      	cpsid	i
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	b662      	cpsie	i
 800c2a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c2a4:	f7fe ff7e 	bl	800b1a4 <xTaskIncrementTick>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c2ae:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <SysTick_Handler+0x40>)
 800c2b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2b4:	601a      	str	r2, [r3, #0]
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	e000ed04 	.word	0xe000ed04

0800c2cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2d0:	4b0b      	ldr	r3, [pc, #44]	; (800c300 <vPortSetupTimerInterrupt+0x34>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2d6:	4b0b      	ldr	r3, [pc, #44]	; (800c304 <vPortSetupTimerInterrupt+0x38>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2dc:	4b0a      	ldr	r3, [pc, #40]	; (800c308 <vPortSetupTimerInterrupt+0x3c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a0a      	ldr	r2, [pc, #40]	; (800c30c <vPortSetupTimerInterrupt+0x40>)
 800c2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e6:	099b      	lsrs	r3, r3, #6
 800c2e8:	4a09      	ldr	r2, [pc, #36]	; (800c310 <vPortSetupTimerInterrupt+0x44>)
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ee:	4b04      	ldr	r3, [pc, #16]	; (800c300 <vPortSetupTimerInterrupt+0x34>)
 800c2f0:	2207      	movs	r2, #7
 800c2f2:	601a      	str	r2, [r3, #0]
}
 800c2f4:	bf00      	nop
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	e000e010 	.word	0xe000e010
 800c304:	e000e018 	.word	0xe000e018
 800c308:	20000000 	.word	0x20000000
 800c30c:	10624dd3 	.word	0x10624dd3
 800c310:	e000e014 	.word	0xe000e014

0800c314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c324 <vPortEnableVFP+0x10>
 800c318:	6801      	ldr	r1, [r0, #0]
 800c31a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c31e:	6001      	str	r1, [r0, #0]
 800c320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c322:	bf00      	nop
 800c324:	e000ed88 	.word	0xe000ed88

0800c328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c32e:	f3ef 8305 	mrs	r3, IPSR
 800c332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2b0f      	cmp	r3, #15
 800c338:	d915      	bls.n	800c366 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c33a:	4a18      	ldr	r2, [pc, #96]	; (800c39c <vPortValidateInterruptPriority+0x74>)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	4413      	add	r3, r2
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c344:	4b16      	ldr	r3, [pc, #88]	; (800c3a0 <vPortValidateInterruptPriority+0x78>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	7afa      	ldrb	r2, [r7, #11]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d20b      	bcs.n	800c366 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c352:	b672      	cpsid	i
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	b662      	cpsie	i
 800c362:	607b      	str	r3, [r7, #4]
 800c364:	e7fe      	b.n	800c364 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c366:	4b0f      	ldr	r3, [pc, #60]	; (800c3a4 <vPortValidateInterruptPriority+0x7c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c36e:	4b0e      	ldr	r3, [pc, #56]	; (800c3a8 <vPortValidateInterruptPriority+0x80>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	429a      	cmp	r2, r3
 800c374:	d90b      	bls.n	800c38e <vPortValidateInterruptPriority+0x66>
 800c376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37a:	b672      	cpsid	i
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	b662      	cpsie	i
 800c38a:	603b      	str	r3, [r7, #0]
 800c38c:	e7fe      	b.n	800c38c <vPortValidateInterruptPriority+0x64>
	}
 800c38e:	bf00      	nop
 800c390:	3714      	adds	r7, #20
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	e000e3f0 	.word	0xe000e3f0
 800c3a0:	200005a8 	.word	0x200005a8
 800c3a4:	e000ed0c 	.word	0xe000ed0c
 800c3a8:	200005ac 	.word	0x200005ac

0800c3ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b08a      	sub	sp, #40	; 0x28
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c3b8:	f7fe fe22 	bl	800b000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c3bc:	4b5a      	ldr	r3, [pc, #360]	; (800c528 <pvPortMalloc+0x17c>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d101      	bne.n	800c3c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c3c4:	f000 f916 	bl	800c5f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c3c8:	4b58      	ldr	r3, [pc, #352]	; (800c52c <pvPortMalloc+0x180>)
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f040 8090 	bne.w	800c4f6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d01e      	beq.n	800c41a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c3dc:	2208      	movs	r2, #8
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f003 0307 	and.w	r3, r3, #7
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d015      	beq.n	800c41a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f023 0307 	bic.w	r3, r3, #7
 800c3f4:	3308      	adds	r3, #8
 800c3f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f003 0307 	and.w	r3, r3, #7
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00b      	beq.n	800c41a <pvPortMalloc+0x6e>
 800c402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c406:	b672      	cpsid	i
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	b662      	cpsie	i
 800c416:	617b      	str	r3, [r7, #20]
 800c418:	e7fe      	b.n	800c418 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d06a      	beq.n	800c4f6 <pvPortMalloc+0x14a>
 800c420:	4b43      	ldr	r3, [pc, #268]	; (800c530 <pvPortMalloc+0x184>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	429a      	cmp	r2, r3
 800c428:	d865      	bhi.n	800c4f6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c42a:	4b42      	ldr	r3, [pc, #264]	; (800c534 <pvPortMalloc+0x188>)
 800c42c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c42e:	4b41      	ldr	r3, [pc, #260]	; (800c534 <pvPortMalloc+0x188>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c434:	e004      	b.n	800c440 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c438:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	429a      	cmp	r2, r3
 800c448:	d903      	bls.n	800c452 <pvPortMalloc+0xa6>
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1f1      	bne.n	800c436 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c452:	4b35      	ldr	r3, [pc, #212]	; (800c528 <pvPortMalloc+0x17c>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c458:	429a      	cmp	r2, r3
 800c45a:	d04c      	beq.n	800c4f6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c45c:	6a3b      	ldr	r3, [r7, #32]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2208      	movs	r2, #8
 800c462:	4413      	add	r3, r2
 800c464:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	6a3b      	ldr	r3, [r7, #32]
 800c46c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c470:	685a      	ldr	r2, [r3, #4]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	1ad2      	subs	r2, r2, r3
 800c476:	2308      	movs	r3, #8
 800c478:	005b      	lsls	r3, r3, #1
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d920      	bls.n	800c4c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c47e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	4413      	add	r3, r2
 800c484:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	f003 0307 	and.w	r3, r3, #7
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00b      	beq.n	800c4a8 <pvPortMalloc+0xfc>
 800c490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c494:	b672      	cpsid	i
 800c496:	f383 8811 	msr	BASEPRI, r3
 800c49a:	f3bf 8f6f 	isb	sy
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	b662      	cpsie	i
 800c4a4:	613b      	str	r3, [r7, #16]
 800c4a6:	e7fe      	b.n	800c4a6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4aa:	685a      	ldr	r2, [r3, #4]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	1ad2      	subs	r2, r2, r3
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c4ba:	69b8      	ldr	r0, [r7, #24]
 800c4bc:	f000 f8fc 	bl	800c6b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c4c0:	4b1b      	ldr	r3, [pc, #108]	; (800c530 <pvPortMalloc+0x184>)
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	4a19      	ldr	r2, [pc, #100]	; (800c530 <pvPortMalloc+0x184>)
 800c4cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c4ce:	4b18      	ldr	r3, [pc, #96]	; (800c530 <pvPortMalloc+0x184>)
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	4b19      	ldr	r3, [pc, #100]	; (800c538 <pvPortMalloc+0x18c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d203      	bcs.n	800c4e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c4da:	4b15      	ldr	r3, [pc, #84]	; (800c530 <pvPortMalloc+0x184>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a16      	ldr	r2, [pc, #88]	; (800c538 <pvPortMalloc+0x18c>)
 800c4e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	685a      	ldr	r2, [r3, #4]
 800c4e6:	4b11      	ldr	r3, [pc, #68]	; (800c52c <pvPortMalloc+0x180>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	431a      	orrs	r2, r3
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c4f6:	f7fe fd91 	bl	800b01c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	f003 0307 	and.w	r3, r3, #7
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00b      	beq.n	800c51c <pvPortMalloc+0x170>
 800c504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c508:	b672      	cpsid	i
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	b662      	cpsie	i
 800c518:	60fb      	str	r3, [r7, #12]
 800c51a:	e7fe      	b.n	800c51a <pvPortMalloc+0x16e>
	return pvReturn;
 800c51c:	69fb      	ldr	r3, [r7, #28]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3728      	adds	r7, #40	; 0x28
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	2000c908 	.word	0x2000c908
 800c52c:	2000c914 	.word	0x2000c914
 800c530:	2000c90c 	.word	0x2000c90c
 800c534:	2000c900 	.word	0x2000c900
 800c538:	2000c910 	.word	0x2000c910

0800c53c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d04a      	beq.n	800c5e4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c54e:	2308      	movs	r3, #8
 800c550:	425b      	negs	r3, r3
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	4413      	add	r3, r2
 800c556:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	685a      	ldr	r2, [r3, #4]
 800c560:	4b22      	ldr	r3, [pc, #136]	; (800c5ec <vPortFree+0xb0>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4013      	ands	r3, r2
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10b      	bne.n	800c582 <vPortFree+0x46>
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	b672      	cpsid	i
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	b662      	cpsie	i
 800c57e:	60fb      	str	r3, [r7, #12]
 800c580:	e7fe      	b.n	800c580 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d00b      	beq.n	800c5a2 <vPortFree+0x66>
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	b672      	cpsid	i
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	b662      	cpsie	i
 800c59e:	60bb      	str	r3, [r7, #8]
 800c5a0:	e7fe      	b.n	800c5a0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	4b11      	ldr	r3, [pc, #68]	; (800c5ec <vPortFree+0xb0>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4013      	ands	r3, r2
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d019      	beq.n	800c5e4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d115      	bne.n	800c5e4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	685a      	ldr	r2, [r3, #4]
 800c5bc:	4b0b      	ldr	r3, [pc, #44]	; (800c5ec <vPortFree+0xb0>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	43db      	mvns	r3, r3
 800c5c2:	401a      	ands	r2, r3
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c5c8:	f7fe fd1a 	bl	800b000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	685a      	ldr	r2, [r3, #4]
 800c5d0:	4b07      	ldr	r3, [pc, #28]	; (800c5f0 <vPortFree+0xb4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	4a06      	ldr	r2, [pc, #24]	; (800c5f0 <vPortFree+0xb4>)
 800c5d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c5da:	6938      	ldr	r0, [r7, #16]
 800c5dc:	f000 f86c 	bl	800c6b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c5e0:	f7fe fd1c 	bl	800b01c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c5e4:	bf00      	nop
 800c5e6:	3718      	adds	r7, #24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	2000c914 	.word	0x2000c914
 800c5f0:	2000c90c 	.word	0x2000c90c

0800c5f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b085      	sub	sp, #20
 800c5f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c5fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c5fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c600:	4b27      	ldr	r3, [pc, #156]	; (800c6a0 <prvHeapInit+0xac>)
 800c602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f003 0307 	and.w	r3, r3, #7
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00c      	beq.n	800c628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3307      	adds	r3, #7
 800c612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f023 0307 	bic.w	r3, r3, #7
 800c61a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	1ad3      	subs	r3, r2, r3
 800c622:	4a1f      	ldr	r2, [pc, #124]	; (800c6a0 <prvHeapInit+0xac>)
 800c624:	4413      	add	r3, r2
 800c626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c62c:	4a1d      	ldr	r2, [pc, #116]	; (800c6a4 <prvHeapInit+0xb0>)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c632:	4b1c      	ldr	r3, [pc, #112]	; (800c6a4 <prvHeapInit+0xb0>)
 800c634:	2200      	movs	r2, #0
 800c636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	4413      	add	r3, r2
 800c63e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c640:	2208      	movs	r2, #8
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	1a9b      	subs	r3, r3, r2
 800c646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f023 0307 	bic.w	r3, r3, #7
 800c64e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	4a15      	ldr	r2, [pc, #84]	; (800c6a8 <prvHeapInit+0xb4>)
 800c654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c656:	4b14      	ldr	r3, [pc, #80]	; (800c6a8 <prvHeapInit+0xb4>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2200      	movs	r2, #0
 800c65c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c65e:	4b12      	ldr	r3, [pc, #72]	; (800c6a8 <prvHeapInit+0xb4>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	2200      	movs	r2, #0
 800c664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	1ad2      	subs	r2, r2, r3
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c674:	4b0c      	ldr	r3, [pc, #48]	; (800c6a8 <prvHeapInit+0xb4>)
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	4a0a      	ldr	r2, [pc, #40]	; (800c6ac <prvHeapInit+0xb8>)
 800c682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	4a09      	ldr	r2, [pc, #36]	; (800c6b0 <prvHeapInit+0xbc>)
 800c68a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c68c:	4b09      	ldr	r3, [pc, #36]	; (800c6b4 <prvHeapInit+0xc0>)
 800c68e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c692:	601a      	str	r2, [r3, #0]
}
 800c694:	bf00      	nop
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr
 800c6a0:	200005b0 	.word	0x200005b0
 800c6a4:	2000c900 	.word	0x2000c900
 800c6a8:	2000c908 	.word	0x2000c908
 800c6ac:	2000c910 	.word	0x2000c910
 800c6b0:	2000c90c 	.word	0x2000c90c
 800c6b4:	2000c914 	.word	0x2000c914

0800c6b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c6c0:	4b28      	ldr	r3, [pc, #160]	; (800c764 <prvInsertBlockIntoFreeList+0xac>)
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	e002      	b.n	800c6cc <prvInsertBlockIntoFreeList+0x14>
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	60fb      	str	r3, [r7, #12]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d8f7      	bhi.n	800c6c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d108      	bne.n	800c6fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	685a      	ldr	r2, [r3, #4]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	441a      	add	r2, r3
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	441a      	add	r2, r3
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d118      	bne.n	800c740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	4b15      	ldr	r3, [pc, #84]	; (800c768 <prvInsertBlockIntoFreeList+0xb0>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	429a      	cmp	r2, r3
 800c718:	d00d      	beq.n	800c736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	685a      	ldr	r2, [r3, #4]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	441a      	add	r2, r3
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	601a      	str	r2, [r3, #0]
 800c734:	e008      	b.n	800c748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c736:	4b0c      	ldr	r3, [pc, #48]	; (800c768 <prvInsertBlockIntoFreeList+0xb0>)
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	e003      	b.n	800c748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d002      	beq.n	800c756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c756:	bf00      	nop
 800c758:	3714      	adds	r7, #20
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	2000c900 	.word	0x2000c900
 800c768:	2000c908 	.word	0x2000c908

0800c76c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	330c      	adds	r3, #12
 800c77c:	461a      	mov	r2, r3
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f002 f96f 	bl	800ea64 <tcpip_send_msg_wait_sem>
 800c786:	4603      	mov	r3, r0
 800c788:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c78a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d103      	bne.n	800c79a <netconn_apimsg+0x2e>
    return apimsg->err;
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c798:	e001      	b.n	800c79e <netconn_apimsg+0x32>
  }
  return err;
 800c79a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
	...

0800c7a8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b08a      	sub	sp, #40	; 0x28
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	603a      	str	r2, [r7, #0]
 800c7b2:	71fb      	strb	r3, [r7, #7]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c7b8:	79fb      	ldrb	r3, [r7, #7]
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f000 ff83 	bl	800d6c8 <netconn_alloc>
 800c7c2:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d054      	beq.n	800c874 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c7ca:	79bb      	ldrb	r3, [r7, #6]
 800c7cc:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c7d2:	f107 030c 	add.w	r3, r7, #12
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4829      	ldr	r0, [pc, #164]	; (800c880 <netconn_new_with_proto_and_callback+0xd8>)
 800c7da:	f7ff ffc7 	bl	800c76c <netconn_apimsg>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 800c7e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d043      	beq.n	800c874 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d005      	beq.n	800c800 <netconn_new_with_proto_and_callback+0x58>
 800c7f4:	4b23      	ldr	r3, [pc, #140]	; (800c884 <netconn_new_with_proto_and_callback+0xdc>)
 800c7f6:	2289      	movs	r2, #137	; 0x89
 800c7f8:	4923      	ldr	r1, [pc, #140]	; (800c888 <netconn_new_with_proto_and_callback+0xe0>)
 800c7fa:	4824      	ldr	r0, [pc, #144]	; (800c88c <netconn_new_with_proto_and_callback+0xe4>)
 800c7fc:	f00e fb28 	bl	801ae50 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	3310      	adds	r3, #16
 800c804:	4618      	mov	r0, r3
 800c806:	f00b fe83 	bl	8018510 <sys_mbox_valid>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d105      	bne.n	800c81c <netconn_new_with_proto_and_callback+0x74>
 800c810:	4b1c      	ldr	r3, [pc, #112]	; (800c884 <netconn_new_with_proto_and_callback+0xdc>)
 800c812:	228a      	movs	r2, #138	; 0x8a
 800c814:	491e      	ldr	r1, [pc, #120]	; (800c890 <netconn_new_with_proto_and_callback+0xe8>)
 800c816:	481d      	ldr	r0, [pc, #116]	; (800c88c <netconn_new_with_proto_and_callback+0xe4>)
 800c818:	f00e fb1a 	bl	801ae50 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81e:	3314      	adds	r3, #20
 800c820:	4618      	mov	r0, r3
 800c822:	f00b fe75 	bl	8018510 <sys_mbox_valid>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d005      	beq.n	800c838 <netconn_new_with_proto_and_callback+0x90>
 800c82c:	4b15      	ldr	r3, [pc, #84]	; (800c884 <netconn_new_with_proto_and_callback+0xdc>)
 800c82e:	228c      	movs	r2, #140	; 0x8c
 800c830:	4918      	ldr	r1, [pc, #96]	; (800c894 <netconn_new_with_proto_and_callback+0xec>)
 800c832:	4816      	ldr	r0, [pc, #88]	; (800c88c <netconn_new_with_proto_and_callback+0xe4>)
 800c834:	f00e fb0c 	bl	801ae50 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83a:	330c      	adds	r3, #12
 800c83c:	4618      	mov	r0, r3
 800c83e:	f00b fef8 	bl	8018632 <sys_sem_valid>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d105      	bne.n	800c854 <netconn_new_with_proto_and_callback+0xac>
 800c848:	4b0e      	ldr	r3, [pc, #56]	; (800c884 <netconn_new_with_proto_and_callback+0xdc>)
 800c84a:	228f      	movs	r2, #143	; 0x8f
 800c84c:	4912      	ldr	r1, [pc, #72]	; (800c898 <netconn_new_with_proto_and_callback+0xf0>)
 800c84e:	480f      	ldr	r0, [pc, #60]	; (800c88c <netconn_new_with_proto_and_callback+0xe4>)
 800c850:	f00e fafe 	bl	801ae50 <iprintf>
      sys_sem_free(&conn->op_completed);
 800c854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c856:	330c      	adds	r3, #12
 800c858:	4618      	mov	r0, r3
 800c85a:	f00b fedd 	bl	8018618 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c860:	3310      	adds	r3, #16
 800c862:	4618      	mov	r0, r3
 800c864:	f00b fdb8 	bl	80183d8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c86a:	2007      	movs	r0, #7
 800c86c:	f002 fd9a 	bl	800f3a4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c870:	2300      	movs	r3, #0
 800c872:	e000      	b.n	800c876 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c876:	4618      	mov	r0, r3
 800c878:	3728      	adds	r7, #40	; 0x28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	0800d671 	.word	0x0800d671
 800c884:	0801d848 	.word	0x0801d848
 800c888:	0801d87c 	.word	0x0801d87c
 800c88c:	0801d8a0 	.word	0x0801d8a0
 800c890:	0801d8c8 	.word	0x0801d8c8
 800c894:	0801d8e0 	.word	0x0801d8e0
 800c898:	0801d904 	.word	0x0801d904

0800c89c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b088      	sub	sp, #32
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <netconn_delete+0x12>
    return ERR_OK;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e016      	b.n	800c8dc <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c8b2:	2329      	movs	r3, #41	; 0x29
 800c8b4:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800c8b6:	f107 0308 	add.w	r3, r7, #8
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	4809      	ldr	r0, [pc, #36]	; (800c8e4 <netconn_delete+0x48>)
 800c8be:	f7ff ff55 	bl	800c76c <netconn_apimsg>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800c8c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d002      	beq.n	800c8d4 <netconn_delete+0x38>
    return err;
 800c8ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c8d2:	e003      	b.n	800c8dc <netconn_delete+0x40>
  }

  netconn_free(conn);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f000 ff67 	bl	800d7a8 <netconn_free>

  return ERR_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3720      	adds	r7, #32
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	0800dc2d 	.word	0x0800dc2d

0800c8e8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b08a      	sub	sp, #40	; 0x28
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	4613      	mov	r3, r2
 800c8f4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d108      	bne.n	800c90e <netconn_bind+0x26>
 800c8fc:	4b11      	ldr	r3, [pc, #68]	; (800c944 <netconn_bind+0x5c>)
 800c8fe:	22ff      	movs	r2, #255	; 0xff
 800c900:	4911      	ldr	r1, [pc, #68]	; (800c948 <netconn_bind+0x60>)
 800c902:	4812      	ldr	r0, [pc, #72]	; (800c94c <netconn_bind+0x64>)
 800c904:	f00e faa4 	bl	801ae50 <iprintf>
 800c908:	f06f 030f 	mvn.w	r3, #15
 800c90c:	e015      	b.n	800c93a <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d101      	bne.n	800c918 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 800c914:	4b0e      	ldr	r3, [pc, #56]	; (800c950 <netconn_bind+0x68>)
 800c916:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c920:	88fb      	ldrh	r3, [r7, #6]
 800c922:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c924:	f107 0310 	add.w	r3, r7, #16
 800c928:	4619      	mov	r1, r3
 800c92a:	480a      	ldr	r0, [pc, #40]	; (800c954 <netconn_bind+0x6c>)
 800c92c:	f7ff ff1e 	bl	800c76c <netconn_apimsg>
 800c930:	4603      	mov	r3, r0
 800c932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800c936:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3728      	adds	r7, #40	; 0x28
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}
 800c942:	bf00      	nop
 800c944:	0801d848 	.word	0x0801d848
 800c948:	0801d980 	.word	0x0801d980
 800c94c:	0801d8a0 	.word	0x0801d8a0
 800c950:	080200e8 	.word	0x080200e8
 800c954:	0800de31 	.word	0x0800de31

0800c958 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b088      	sub	sp, #32
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	460b      	mov	r3, r1
 800c962:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d109      	bne.n	800c97e <netconn_listen_with_backlog+0x26>
 800c96a:	4b0d      	ldr	r3, [pc, #52]	; (800c9a0 <netconn_listen_with_backlog+0x48>)
 800c96c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c970:	490c      	ldr	r1, [pc, #48]	; (800c9a4 <netconn_listen_with_backlog+0x4c>)
 800c972:	480d      	ldr	r0, [pc, #52]	; (800c9a8 <netconn_listen_with_backlog+0x50>)
 800c974:	f00e fa6c 	bl	801ae50 <iprintf>
 800c978:	f06f 030f 	mvn.w	r3, #15
 800c97c:	e00b      	b.n	800c996 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800c982:	f107 0308 	add.w	r3, r7, #8
 800c986:	4619      	mov	r1, r3
 800c988:	4808      	ldr	r0, [pc, #32]	; (800c9ac <netconn_listen_with_backlog+0x54>)
 800c98a:	f7ff feef 	bl	800c76c <netconn_apimsg>
 800c98e:	4603      	mov	r3, r0
 800c990:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800c992:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800c996:	4618      	mov	r0, r3
 800c998:	3720      	adds	r7, #32
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	0801d848 	.word	0x0801d848
 800c9a4:	0801d9e0 	.word	0x0801d9e0
 800c9a8:	0801d8a0 	.word	0x0801d8a0
 800c9ac:	0800def1 	.word	0x0800def1

0800c9b0 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b086      	sub	sp, #24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
 800c9b8:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d109      	bne.n	800c9d4 <netconn_accept+0x24>
 800c9c0:	4b34      	ldr	r3, [pc, #208]	; (800ca94 <netconn_accept+0xe4>)
 800c9c2:	f240 128d 	movw	r2, #397	; 0x18d
 800c9c6:	4934      	ldr	r1, [pc, #208]	; (800ca98 <netconn_accept+0xe8>)
 800c9c8:	4834      	ldr	r0, [pc, #208]	; (800ca9c <netconn_accept+0xec>)
 800c9ca:	f00e fa41 	bl	801ae50 <iprintf>
 800c9ce:	f06f 030f 	mvn.w	r3, #15
 800c9d2:	e05b      	b.n	800ca8c <netconn_accept+0xdc>
  *new_conn = NULL;
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d109      	bne.n	800c9f4 <netconn_accept+0x44>
 800c9e0:	4b2c      	ldr	r3, [pc, #176]	; (800ca94 <netconn_accept+0xe4>)
 800c9e2:	f240 128f 	movw	r2, #399	; 0x18f
 800c9e6:	492e      	ldr	r1, [pc, #184]	; (800caa0 <netconn_accept+0xf0>)
 800c9e8:	482c      	ldr	r0, [pc, #176]	; (800ca9c <netconn_accept+0xec>)
 800c9ea:	f00e fa31 	bl	801ae50 <iprintf>
 800c9ee:	f06f 030f 	mvn.w	r3, #15
 800c9f2:	e04b      	b.n	800ca8c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c9fa:	f113 0f0c 	cmn.w	r3, #12
 800c9fe:	da03      	bge.n	800ca08 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ca06:	e041      	b.n	800ca8c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	3314      	adds	r3, #20
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f00b fd7f 	bl	8018510 <sys_mbox_valid>
 800ca12:	4603      	mov	r3, r0
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d102      	bne.n	800ca1e <netconn_accept+0x6e>
    return ERR_CLSD;
 800ca18:	f06f 030e 	mvn.w	r3, #14
 800ca1c:	e036      	b.n	800ca8c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	3314      	adds	r3, #20
 800ca22:	f107 010c 	add.w	r1, r7, #12
 800ca26:	2200      	movs	r2, #0
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f00b fd16 	bl	801845a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d005      	beq.n	800ca46 <netconn_accept+0x96>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca3e:	2200      	movs	r2, #0
 800ca40:	2101      	movs	r1, #1
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	4a16      	ldr	r2, [pc, #88]	; (800caa4 <netconn_accept+0xf4>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d102      	bne.n	800ca54 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800ca4e:	f06f 030c 	mvn.w	r3, #12
 800ca52:	e01b      	b.n	800ca8c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d114      	bne.n	800ca84 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00e      	beq.n	800ca7e <netconn_accept+0xce>
 800ca60:	f00b fe72 	bl	8018748 <sys_arch_protect>
 800ca64:	6138      	str	r0, [r7, #16]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ca6c:	f113 0f0c 	cmn.w	r3, #12
 800ca70:	db02      	blt.n	800ca78 <netconn_accept+0xc8>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	22f1      	movs	r2, #241	; 0xf1
 800ca76:	721a      	strb	r2, [r3, #8]
 800ca78:	6938      	ldr	r0, [r7, #16]
 800ca7a:	f00b fe73 	bl	8018764 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800ca7e:	f06f 030e 	mvn.w	r3, #14
 800ca82:	e003      	b.n	800ca8c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	697a      	ldr	r2, [r7, #20]
 800ca88:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ca8a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	0801d848 	.word	0x0801d848
 800ca98:	0801da00 	.word	0x0801da00
 800ca9c:	0801d8a0 	.word	0x0801d8a0
 800caa0:	0801da20 	.word	0x0801da20
 800caa4:	20012d0c 	.word	0x20012d0c

0800caa8 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08a      	sub	sp, #40	; 0x28
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d109      	bne.n	800cad0 <netconn_recv_data+0x28>
 800cabc:	4b5c      	ldr	r3, [pc, #368]	; (800cc30 <netconn_recv_data+0x188>)
 800cabe:	f240 12e7 	movw	r2, #487	; 0x1e7
 800cac2:	495c      	ldr	r1, [pc, #368]	; (800cc34 <netconn_recv_data+0x18c>)
 800cac4:	485c      	ldr	r0, [pc, #368]	; (800cc38 <netconn_recv_data+0x190>)
 800cac6:	f00e f9c3 	bl	801ae50 <iprintf>
 800caca:	f06f 030f 	mvn.w	r3, #15
 800cace:	e0aa      	b.n	800cc26 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2200      	movs	r2, #0
 800cad4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d109      	bne.n	800caf0 <netconn_recv_data+0x48>
 800cadc:	4b54      	ldr	r3, [pc, #336]	; (800cc30 <netconn_recv_data+0x188>)
 800cade:	f240 12e9 	movw	r2, #489	; 0x1e9
 800cae2:	4956      	ldr	r1, [pc, #344]	; (800cc3c <netconn_recv_data+0x194>)
 800cae4:	4854      	ldr	r0, [pc, #336]	; (800cc38 <netconn_recv_data+0x190>)
 800cae6:	f00e f9b3 	bl	801ae50 <iprintf>
 800caea:	f06f 030f 	mvn.w	r3, #15
 800caee:	e09a      	b.n	800cc26 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800caf8:	2b10      	cmp	r3, #16
 800cafa:	d115      	bne.n	800cb28 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	3310      	adds	r3, #16
 800cb00:	4618      	mov	r0, r3
 800cb02:	f00b fd05 	bl	8018510 <sys_mbox_valid>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d10d      	bne.n	800cb28 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3314      	adds	r3, #20
 800cb10:	4618      	mov	r0, r3
 800cb12:	f00b fcfd 	bl	8018510 <sys_mbox_valid>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d002      	beq.n	800cb22 <netconn_recv_data+0x7a>
 800cb1c:	f06f 030a 	mvn.w	r3, #10
 800cb20:	e081      	b.n	800cc26 <netconn_recv_data+0x17e>
 800cb22:	f06f 030e 	mvn.w	r3, #14
 800cb26:	e07e      	b.n	800cc26 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3310      	adds	r3, #16
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f00b fcef 	bl	8018510 <sys_mbox_valid>
 800cb32:	4603      	mov	r3, r0
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d109      	bne.n	800cb4c <netconn_recv_data+0xa4>
 800cb38:	4b3d      	ldr	r3, [pc, #244]	; (800cc30 <netconn_recv_data+0x188>)
 800cb3a:	f240 12f5 	movw	r2, #501	; 0x1f5
 800cb3e:	4940      	ldr	r1, [pc, #256]	; (800cc40 <netconn_recv_data+0x198>)
 800cb40:	483d      	ldr	r0, [pc, #244]	; (800cc38 <netconn_recv_data+0x190>)
 800cb42:	f00e f985 	bl	801ae50 <iprintf>
 800cb46:	f06f 030a 	mvn.w	r3, #10
 800cb4a:	e06c      	b.n	800cc26 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cb52:	f113 0f0c 	cmn.w	r3, #12
 800cb56:	da03      	bge.n	800cb60 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cb5e:	e062      	b.n	800cc26 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	3310      	adds	r3, #16
 800cb64:	f107 0120 	add.w	r1, r7, #32
 800cb68:	2200      	movs	r2, #0
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f00b fc75 	bl	801845a <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb78:	2b10      	cmp	r3, #16
 800cb7a:	d138      	bne.n	800cbee <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800cb80:	6a3b      	ldr	r3, [r7, #32]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d003      	beq.n	800cb8e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800cb86:	6a3b      	ldr	r3, [r7, #32]
 800cb88:	891b      	ldrh	r3, [r3, #8]
 800cb8a:	617b      	str	r3, [r7, #20]
 800cb8c:	e001      	b.n	800cb92 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800cb92:	f107 030c 	add.w	r3, r7, #12
 800cb96:	4619      	mov	r1, r3
 800cb98:	482a      	ldr	r0, [pc, #168]	; (800cc44 <netconn_recv_data+0x19c>)
 800cb9a:	f7ff fde7 	bl	800c76c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800cb9e:	6a3b      	ldr	r3, [r7, #32]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d120      	bne.n	800cbe6 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d005      	beq.n	800cbb8 <netconn_recv_data+0x110>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	2101      	movs	r1, #1
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d10b      	bne.n	800cbd8 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d003      	beq.n	800cbd2 <netconn_recv_data+0x12a>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cbd0:	e029      	b.n	800cc26 <netconn_recv_data+0x17e>
 800cbd2:	f06f 030d 	mvn.w	r3, #13
 800cbd6:	e026      	b.n	800cc26 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800cbd8:	2101      	movs	r1, #1
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f926 	bl	800ce2c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800cbe0:	f06f 030e 	mvn.w	r3, #14
 800cbe4:	e01f      	b.n	800cc26 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800cbe6:	6a3b      	ldr	r3, [r7, #32]
 800cbe8:	891b      	ldrh	r3, [r3, #8]
 800cbea:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cbec:	e00d      	b.n	800cc0a <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800cbee:	6a3b      	ldr	r3, [r7, #32]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d106      	bne.n	800cc02 <netconn_recv_data+0x15a>
 800cbf4:	4b0e      	ldr	r3, [pc, #56]	; (800cc30 <netconn_recv_data+0x188>)
 800cbf6:	f240 223e 	movw	r2, #574	; 0x23e
 800cbfa:	4913      	ldr	r1, [pc, #76]	; (800cc48 <netconn_recv_data+0x1a0>)
 800cbfc:	480e      	ldr	r0, [pc, #56]	; (800cc38 <netconn_recv_data+0x190>)
 800cbfe:	f00e f927 	bl	801ae50 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	891b      	ldrh	r3, [r3, #8]
 800cc08:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d005      	beq.n	800cc1e <netconn_recv_data+0x176>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cc18:	2101      	movs	r1, #1
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800cc1e:	6a3a      	ldr	r2, [r7, #32]
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3728      	adds	r7, #40	; 0x28
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	0801d848 	.word	0x0801d848
 800cc34:	0801da40 	.word	0x0801da40
 800cc38:	0801d8a0 	.word	0x0801d8a0
 800cc3c:	0801da60 	.word	0x0801da60
 800cc40:	0801da7c 	.word	0x0801da7c
 800cc44:	0800e075 	.word	0x0800e075
 800cc48:	0801da9c 	.word	0x0801da9c

0800cc4c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b086      	sub	sp, #24
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800cc56:	2300      	movs	r3, #0
 800cc58:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d109      	bne.n	800cc74 <netconn_recv+0x28>
 800cc60:	4b31      	ldr	r3, [pc, #196]	; (800cd28 <netconn_recv+0xdc>)
 800cc62:	f44f 721d 	mov.w	r2, #628	; 0x274
 800cc66:	4931      	ldr	r1, [pc, #196]	; (800cd2c <netconn_recv+0xe0>)
 800cc68:	4831      	ldr	r0, [pc, #196]	; (800cd30 <netconn_recv+0xe4>)
 800cc6a:	f00e f8f1 	bl	801ae50 <iprintf>
 800cc6e:	f06f 030f 	mvn.w	r3, #15
 800cc72:	e054      	b.n	800cd1e <netconn_recv+0xd2>
  *new_buf = NULL;
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	2200      	movs	r2, #0
 800cc78:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d109      	bne.n	800cc94 <netconn_recv+0x48>
 800cc80:	4b29      	ldr	r3, [pc, #164]	; (800cd28 <netconn_recv+0xdc>)
 800cc82:	f240 2276 	movw	r2, #630	; 0x276
 800cc86:	492b      	ldr	r1, [pc, #172]	; (800cd34 <netconn_recv+0xe8>)
 800cc88:	4829      	ldr	r0, [pc, #164]	; (800cd30 <netconn_recv+0xe4>)
 800cc8a:	f00e f8e1 	bl	801ae50 <iprintf>
 800cc8e:	f06f 030f 	mvn.w	r3, #15
 800cc92:	e044      	b.n	800cd1e <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc9c:	2b10      	cmp	r3, #16
 800cc9e:	d139      	bne.n	800cd14 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800cca0:	2300      	movs	r3, #0
 800cca2:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cca4:	2006      	movs	r0, #6
 800cca6:	f002 fb2b 	bl	800f300 <memp_malloc>
 800ccaa:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d102      	bne.n	800ccb8 <netconn_recv+0x6c>
      return ERR_MEM;
 800ccb2:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb6:	e032      	b.n	800cd1e <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800ccb8:	f107 030c 	add.w	r3, r7, #12
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff fef2 	bl	800caa8 <netconn_recv_data>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ccc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d006      	beq.n	800ccde <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800ccd0:	6979      	ldr	r1, [r7, #20]
 800ccd2:	2006      	movs	r0, #6
 800ccd4:	f002 fb66 	bl	800f3a4 <memp_free>
      return err;
 800ccd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ccdc:	e01f      	b.n	800cd1e <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d106      	bne.n	800ccf2 <netconn_recv+0xa6>
 800cce4:	4b10      	ldr	r3, [pc, #64]	; (800cd28 <netconn_recv+0xdc>)
 800cce6:	f240 228a 	movw	r2, #650	; 0x28a
 800ccea:	4913      	ldr	r1, [pc, #76]	; (800cd38 <netconn_recv+0xec>)
 800ccec:	4810      	ldr	r0, [pc, #64]	; (800cd30 <netconn_recv+0xe4>)
 800ccee:	f00e f8af 	bl	801ae50 <iprintf>

    buf->p = p;
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ccf8:	68fa      	ldr	r2, [r7, #12]
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2200      	movs	r2, #0
 800cd02:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	2200      	movs	r2, #0
 800cd08:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	697a      	ldr	r2, [r7, #20]
 800cd0e:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	e004      	b.n	800cd1e <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800cd14:	6839      	ldr	r1, [r7, #0]
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7ff fec6 	bl	800caa8 <netconn_recv_data>
 800cd1c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	0801d848 	.word	0x0801d848
 800cd2c:	0801da40 	.word	0x0801da40
 800cd30:	0801d8a0 	.word	0x0801d8a0
 800cd34:	0801da60 	.word	0x0801da60
 800cd38:	0801daa8 	.word	0x0801daa8

0800cd3c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08a      	sub	sp, #40	; 0x28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d109      	bne.n	800cd64 <netconn_write_partly+0x28>
 800cd50:	4b31      	ldr	r3, [pc, #196]	; (800ce18 <netconn_write_partly+0xdc>)
 800cd52:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cd56:	4931      	ldr	r1, [pc, #196]	; (800ce1c <netconn_write_partly+0xe0>)
 800cd58:	4831      	ldr	r0, [pc, #196]	; (800ce20 <netconn_write_partly+0xe4>)
 800cd5a:	f00e f879 	bl	801ae50 <iprintf>
 800cd5e:	f06f 030f 	mvn.w	r3, #15
 800cd62:	e054      	b.n	800ce0e <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd6c:	2b10      	cmp	r3, #16
 800cd6e:	d009      	beq.n	800cd84 <netconn_write_partly+0x48>
 800cd70:	4b29      	ldr	r3, [pc, #164]	; (800ce18 <netconn_write_partly+0xdc>)
 800cd72:	f240 22e7 	movw	r2, #743	; 0x2e7
 800cd76:	492b      	ldr	r1, [pc, #172]	; (800ce24 <netconn_write_partly+0xe8>)
 800cd78:	4829      	ldr	r0, [pc, #164]	; (800ce20 <netconn_write_partly+0xe4>)
 800cd7a:	f00e f869 	bl	801ae50 <iprintf>
 800cd7e:	f06f 0305 	mvn.w	r3, #5
 800cd82:	e044      	b.n	800ce0e <netconn_write_partly+0xd2>
  if (size == 0) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d101      	bne.n	800cd8e <netconn_write_partly+0x52>
    return ERR_OK;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	e03f      	b.n	800ce0e <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	7f1b      	ldrb	r3, [r3, #28]
 800cd92:	f003 0302 	and.w	r3, r3, #2
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d104      	bne.n	800cda4 <netconn_write_partly+0x68>
 800cd9a:	78fb      	ldrb	r3, [r7, #3]
 800cd9c:	f003 0304 	and.w	r3, r3, #4
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d001      	beq.n	800cda8 <netconn_write_partly+0x6c>
 800cda4:	2301      	movs	r3, #1
 800cda6:	e000      	b.n	800cdaa <netconn_write_partly+0x6e>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800cdae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d005      	beq.n	800cdc2 <netconn_write_partly+0x86>
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d102      	bne.n	800cdc2 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800cdbc:	f06f 0305 	mvn.w	r3, #5
 800cdc0:	e025      	b.n	800ce0e <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800cdca:	78fb      	ldrb	r3, [r7, #3]
 800cdcc:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800cdd4:	f107 0310 	add.w	r3, r7, #16
 800cdd8:	4619      	mov	r1, r3
 800cdda:	4813      	ldr	r0, [pc, #76]	; (800ce28 <netconn_write_partly+0xec>)
 800cddc:	f7ff fcc6 	bl	800c76c <netconn_apimsg>
 800cde0:	4603      	mov	r3, r0
 800cde2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800cde6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10d      	bne.n	800ce0a <netconn_write_partly+0xce>
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00a      	beq.n	800ce0a <netconn_write_partly+0xce>
    if (dontblock) {
 800cdf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d003      	beq.n	800ce04 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800cdfc:	69fa      	ldr	r2, [r7, #28]
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	601a      	str	r2, [r3, #0]
 800ce02:	e002      	b.n	800ce0a <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800ce0a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3728      	adds	r7, #40	; 0x28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	0801d848 	.word	0x0801d848
 800ce1c:	0801dad0 	.word	0x0801dad0
 800ce20:	0801d8a0 	.word	0x0801d8a0
 800ce24:	0801daec 	.word	0x0801daec
 800ce28:	0800e455 	.word	0x0800e455

0800ce2c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b088      	sub	sp, #32
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	460b      	mov	r3, r1
 800ce36:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d109      	bne.n	800ce52 <netconn_close_shutdown+0x26>
 800ce3e:	4b0f      	ldr	r3, [pc, #60]	; (800ce7c <netconn_close_shutdown+0x50>)
 800ce40:	f44f 724a 	mov.w	r2, #808	; 0x328
 800ce44:	490e      	ldr	r1, [pc, #56]	; (800ce80 <netconn_close_shutdown+0x54>)
 800ce46:	480f      	ldr	r0, [pc, #60]	; (800ce84 <netconn_close_shutdown+0x58>)
 800ce48:	f00e f802 	bl	801ae50 <iprintf>
 800ce4c:	f06f 030f 	mvn.w	r3, #15
 800ce50:	e00f      	b.n	800ce72 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ce56:	78fb      	ldrb	r3, [r7, #3]
 800ce58:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ce5a:	2329      	movs	r3, #41	; 0x29
 800ce5c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800ce5e:	f107 0308 	add.w	r3, r7, #8
 800ce62:	4619      	mov	r1, r3
 800ce64:	4808      	ldr	r0, [pc, #32]	; (800ce88 <netconn_close_shutdown+0x5c>)
 800ce66:	f7ff fc81 	bl	800c76c <netconn_apimsg>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800ce6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3720      	adds	r7, #32
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	0801d848 	.word	0x0801d848
 800ce80:	0801db10 	.word	0x0801db10
 800ce84:	0801d8a0 	.word	0x0801d8a0
 800ce88:	0800e5b5 	.word	0x0800e5b5

0800ce8c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800ce94:	2103      	movs	r1, #3
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f7ff ffc8 	bl	800ce2c <netconn_close_shutdown>
 800ce9c:	4603      	mov	r3, r0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3708      	adds	r7, #8
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
	...

0800cea8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b088      	sub	sp, #32
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
 800ceb4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d105      	bne.n	800cec8 <recv_udp+0x20>
 800cebc:	4b34      	ldr	r3, [pc, #208]	; (800cf90 <recv_udp+0xe8>)
 800cebe:	22b1      	movs	r2, #177	; 0xb1
 800cec0:	4934      	ldr	r1, [pc, #208]	; (800cf94 <recv_udp+0xec>)
 800cec2:	4835      	ldr	r0, [pc, #212]	; (800cf98 <recv_udp+0xf0>)
 800cec4:	f00d ffc4 	bl	801ae50 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d105      	bne.n	800ceda <recv_udp+0x32>
 800cece:	4b30      	ldr	r3, [pc, #192]	; (800cf90 <recv_udp+0xe8>)
 800ced0:	22b2      	movs	r2, #178	; 0xb2
 800ced2:	4932      	ldr	r1, [pc, #200]	; (800cf9c <recv_udp+0xf4>)
 800ced4:	4830      	ldr	r0, [pc, #192]	; (800cf98 <recv_udp+0xf0>)
 800ced6:	f00d ffbb 	bl	801ae50 <iprintf>
  conn = (struct netconn *)arg;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d103      	bne.n	800ceec <recv_udp+0x44>
    pbuf_free(p);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f002 ffb7 	bl	800fe58 <pbuf_free>
    return;
 800ceea:	e04d      	b.n	800cf88 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d005      	beq.n	800cf02 <recv_udp+0x5a>
 800cef6:	4b26      	ldr	r3, [pc, #152]	; (800cf90 <recv_udp+0xe8>)
 800cef8:	22ba      	movs	r2, #186	; 0xba
 800cefa:	4929      	ldr	r1, [pc, #164]	; (800cfa0 <recv_udp+0xf8>)
 800cefc:	4826      	ldr	r0, [pc, #152]	; (800cf98 <recv_udp+0xf0>)
 800cefe:	f00d ffa7 	bl	801ae50 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800cf02:	69fb      	ldr	r3, [r7, #28]
 800cf04:	3310      	adds	r3, #16
 800cf06:	4618      	mov	r0, r3
 800cf08:	f00b fb02 	bl	8018510 <sys_mbox_valid>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d103      	bne.n	800cf1a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f002 ffa0 	bl	800fe58 <pbuf_free>
    return;
 800cf18:	e036      	b.n	800cf88 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cf1a:	2006      	movs	r0, #6
 800cf1c:	f002 f9f0 	bl	800f300 <memp_malloc>
 800cf20:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d103      	bne.n	800cf30 <recv_udp+0x88>
    pbuf_free(p);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f002 ff95 	bl	800fe58 <pbuf_free>
    return;
 800cf2e:	e02b      	b.n	800cf88 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d002      	beq.n	800cf48 <recv_udp+0xa0>
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	e000      	b.n	800cf4a <recv_udp+0xa2>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	69ba      	ldr	r2, [r7, #24]
 800cf4c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cf52:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	891b      	ldrh	r3, [r3, #8]
 800cf58:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	3310      	adds	r3, #16
 800cf5e:	69b9      	ldr	r1, [r7, #24]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f00b fa60 	bl	8018426 <sys_mbox_trypost>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d003      	beq.n	800cf74 <recv_udp+0xcc>
    netbuf_delete(buf);
 800cf6c:	69b8      	ldr	r0, [r7, #24]
 800cf6e:	f001 fbc9 	bl	800e704 <netbuf_delete>
    return;
 800cf72:	e009      	b.n	800cf88 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d005      	beq.n	800cf88 <recv_udp+0xe0>
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf80:	8afa      	ldrh	r2, [r7, #22]
 800cf82:	2100      	movs	r1, #0
 800cf84:	69f8      	ldr	r0, [r7, #28]
 800cf86:	4798      	blx	r3
  }
}
 800cf88:	3720      	adds	r7, #32
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	0801db2c 	.word	0x0801db2c
 800cf94:	0801db60 	.word	0x0801db60
 800cf98:	0801db84 	.word	0x0801db84
 800cf9c:	0801dbac 	.word	0x0801dbac
 800cfa0:	0801dbcc 	.word	0x0801dbcc

0800cfa4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b088      	sub	sp, #32
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	607a      	str	r2, [r7, #4]
 800cfb0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d105      	bne.n	800cfc4 <recv_tcp+0x20>
 800cfb8:	4b39      	ldr	r3, [pc, #228]	; (800d0a0 <recv_tcp+0xfc>)
 800cfba:	22f9      	movs	r2, #249	; 0xf9
 800cfbc:	4939      	ldr	r1, [pc, #228]	; (800d0a4 <recv_tcp+0x100>)
 800cfbe:	483a      	ldr	r0, [pc, #232]	; (800d0a8 <recv_tcp+0x104>)
 800cfc0:	f00d ff46 	bl	801ae50 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d105      	bne.n	800cfd6 <recv_tcp+0x32>
 800cfca:	4b35      	ldr	r3, [pc, #212]	; (800d0a0 <recv_tcp+0xfc>)
 800cfcc:	22fa      	movs	r2, #250	; 0xfa
 800cfce:	4937      	ldr	r1, [pc, #220]	; (800d0ac <recv_tcp+0x108>)
 800cfd0:	4835      	ldr	r0, [pc, #212]	; (800d0a8 <recv_tcp+0x104>)
 800cfd2:	f00d ff3d 	bl	801ae50 <iprintf>
  conn = (struct netconn *)arg;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d102      	bne.n	800cfe6 <recv_tcp+0x42>
    return ERR_VAL;
 800cfe0:	f06f 0305 	mvn.w	r3, #5
 800cfe4:	e057      	b.n	800d096 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d006      	beq.n	800cffe <recv_tcp+0x5a>
 800cff0:	4b2b      	ldr	r3, [pc, #172]	; (800d0a0 <recv_tcp+0xfc>)
 800cff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cff6:	492e      	ldr	r1, [pc, #184]	; (800d0b0 <recv_tcp+0x10c>)
 800cff8:	482b      	ldr	r0, [pc, #172]	; (800d0a8 <recv_tcp+0x104>)
 800cffa:	f00d ff29 	bl	801ae50 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	3310      	adds	r3, #16
 800d002:	4618      	mov	r0, r3
 800d004:	f00b fa84 	bl	8018510 <sys_mbox_valid>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10d      	bne.n	800d02a <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d008      	beq.n	800d026 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	891b      	ldrh	r3, [r3, #8]
 800d018:	4619      	mov	r1, r3
 800d01a:	68b8      	ldr	r0, [r7, #8]
 800d01c:	f003 fdf6 	bl	8010c0c <tcp_recved>
      pbuf_free(p);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f002 ff19 	bl	800fe58 <pbuf_free>
    }
    return ERR_OK;
 800d026:	2300      	movs	r3, #0
 800d028:	e035      	b.n	800d096 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800d02a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d011      	beq.n	800d056 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00e      	beq.n	800d056 <recv_tcp+0xb2>
 800d038:	f00b fb86 	bl	8018748 <sys_arch_protect>
 800d03c:	6178      	str	r0, [r7, #20]
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d044:	f113 0f0c 	cmn.w	r3, #12
 800d048:	db02      	blt.n	800d050 <recv_tcp+0xac>
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	78fa      	ldrb	r2, [r7, #3]
 800d04e:	721a      	strb	r2, [r3, #8]
 800d050:	6978      	ldr	r0, [r7, #20]
 800d052:	f00b fb87 	bl	8018764 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d003      	beq.n	800d064 <recv_tcp+0xc0>
    len = p->tot_len;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	891b      	ldrh	r3, [r3, #8]
 800d060:	83fb      	strh	r3, [r7, #30]
 800d062:	e001      	b.n	800d068 <recv_tcp+0xc4>
  } else {
    len = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	3310      	adds	r3, #16
 800d06c:	6879      	ldr	r1, [r7, #4]
 800d06e:	4618      	mov	r0, r3
 800d070:	f00b f9d9 	bl	8018426 <sys_mbox_trypost>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d002      	beq.n	800d080 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d07a:	f04f 33ff 	mov.w	r3, #4294967295
 800d07e:	e00a      	b.n	800d096 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d080:	69bb      	ldr	r3, [r7, #24]
 800d082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d084:	2b00      	cmp	r3, #0
 800d086:	d005      	beq.n	800d094 <recv_tcp+0xf0>
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08c:	8bfa      	ldrh	r2, [r7, #30]
 800d08e:	2100      	movs	r1, #0
 800d090:	69b8      	ldr	r0, [r7, #24]
 800d092:	4798      	blx	r3
  }

  return ERR_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3720      	adds	r7, #32
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	0801db2c 	.word	0x0801db2c
 800d0a4:	0801dbec 	.word	0x0801dbec
 800d0a8:	0801db84 	.word	0x0801db84
 800d0ac:	0801dc10 	.word	0x0801dc10
 800d0b0:	0801dc30 	.word	0x0801dc30

0800d0b4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d106      	bne.n	800d0d6 <poll_tcp+0x22>
 800d0c8:	4b29      	ldr	r3, [pc, #164]	; (800d170 <poll_tcp+0xbc>)
 800d0ca:	f44f 729c 	mov.w	r2, #312	; 0x138
 800d0ce:	4929      	ldr	r1, [pc, #164]	; (800d174 <poll_tcp+0xc0>)
 800d0d0:	4829      	ldr	r0, [pc, #164]	; (800d178 <poll_tcp+0xc4>)
 800d0d2:	f00d febd 	bl	801ae50 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	785b      	ldrb	r3, [r3, #1]
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d104      	bne.n	800d0e8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d0de:	2101      	movs	r1, #1
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f001 f813 	bl	800e10c <lwip_netconn_do_writemore>
 800d0e6:	e016      	b.n	800d116 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	785b      	ldrb	r3, [r3, #1]
 800d0ec:	2b04      	cmp	r3, #4
 800d0ee:	d112      	bne.n	800d116 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00a      	beq.n	800d10e <poll_tcp+0x5a>
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fc:	7a5b      	ldrb	r3, [r3, #9]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d005      	beq.n	800d10e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d106:	7a5a      	ldrb	r2, [r3, #9]
 800d108:	3a01      	subs	r2, #1
 800d10a:	b2d2      	uxtb	r2, r2
 800d10c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d10e:	2101      	movs	r1, #1
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f000 fc13 	bl	800d93c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	7f1b      	ldrb	r3, [r3, #28]
 800d11a:	f003 0310 	and.w	r3, r3, #16
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d021      	beq.n	800d166 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d01d      	beq.n	800d166 <poll_tcp+0xb2>
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d132:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d136:	d316      	bcc.n	800d166 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d140:	2b04      	cmp	r3, #4
 800d142:	d810      	bhi.n	800d166 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	7f1b      	ldrb	r3, [r3, #28]
 800d148:	f023 0310 	bic.w	r3, r3, #16
 800d14c:	b2da      	uxtb	r2, r3
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d156:	2b00      	cmp	r3, #0
 800d158:	d005      	beq.n	800d166 <poll_tcp+0xb2>
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d15e:	2200      	movs	r2, #0
 800d160:	2102      	movs	r1, #2
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d166:	2300      	movs	r3, #0
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	0801db2c 	.word	0x0801db2c
 800d174:	0801dc50 	.word	0x0801dc50
 800d178:	0801db84 	.word	0x0801db84

0800d17c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	4613      	mov	r3, r2
 800d188:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d106      	bne.n	800d1a2 <sent_tcp+0x26>
 800d194:	4b20      	ldr	r3, [pc, #128]	; (800d218 <sent_tcp+0x9c>)
 800d196:	f240 1261 	movw	r2, #353	; 0x161
 800d19a:	4920      	ldr	r1, [pc, #128]	; (800d21c <sent_tcp+0xa0>)
 800d19c:	4820      	ldr	r0, [pc, #128]	; (800d220 <sent_tcp+0xa4>)
 800d19e:	f00d fe57 	bl	801ae50 <iprintf>

  if (conn) {
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d032      	beq.n	800d20e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	785b      	ldrb	r3, [r3, #1]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d104      	bne.n	800d1ba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	6978      	ldr	r0, [r7, #20]
 800d1b4:	f000 ffaa 	bl	800e10c <lwip_netconn_do_writemore>
 800d1b8:	e007      	b.n	800d1ca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	785b      	ldrb	r3, [r3, #1]
 800d1be:	2b04      	cmp	r3, #4
 800d1c0:	d103      	bne.n	800d1ca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	6978      	ldr	r0, [r7, #20]
 800d1c6:	f000 fbb9 	bl	800d93c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d01d      	beq.n	800d20e <sent_tcp+0x92>
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d1da:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d1de:	d316      	bcc.n	800d20e <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	d810      	bhi.n	800d20e <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	7f1b      	ldrb	r3, [r3, #28]
 800d1f0:	f023 0310 	bic.w	r3, r3, #16
 800d1f4:	b2da      	uxtb	r2, r3
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d005      	beq.n	800d20e <sent_tcp+0x92>
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d206:	88fa      	ldrh	r2, [r7, #6]
 800d208:	2102      	movs	r1, #2
 800d20a:	6978      	ldr	r0, [r7, #20]
 800d20c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3718      	adds	r7, #24
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	0801db2c 	.word	0x0801db2c
 800d21c:	0801dc50 	.word	0x0801dc50
 800d220:	0801db84 	.word	0x0801db84

0800d224 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b08a      	sub	sp, #40	; 0x28
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	460b      	mov	r3, r1
 800d22e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	2b00      	cmp	r3, #0
 800d238:	d106      	bne.n	800d248 <err_tcp+0x24>
 800d23a:	4b6c      	ldr	r3, [pc, #432]	; (800d3ec <err_tcp+0x1c8>)
 800d23c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d240:	496b      	ldr	r1, [pc, #428]	; (800d3f0 <err_tcp+0x1cc>)
 800d242:	486c      	ldr	r0, [pc, #432]	; (800d3f4 <err_tcp+0x1d0>)
 800d244:	f00d fe04 	bl	801ae50 <iprintf>

  conn->pcb.tcp = NULL;
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	2200      	movs	r2, #0
 800d24c:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d250:	785b      	ldrb	r3, [r3, #1]
 800d252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800d256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d258:	2200      	movs	r2, #0
 800d25a:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800d25c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d260:	2b04      	cmp	r3, #4
 800d262:	d114      	bne.n	800d28e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800d264:	2300      	movs	r3, #0
 800d266:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d018      	beq.n	800d2a0 <err_tcp+0x7c>
 800d26e:	f00b fa6b 	bl	8018748 <sys_arch_protect>
 800d272:	61b8      	str	r0, [r7, #24]
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d27a:	f113 0f0c 	cmn.w	r3, #12
 800d27e:	db02      	blt.n	800d286 <err_tcp+0x62>
 800d280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d282:	2200      	movs	r2, #0
 800d284:	721a      	strb	r2, [r3, #8]
 800d286:	69b8      	ldr	r0, [r7, #24]
 800d288:	f00b fa6c 	bl	8018764 <sys_arch_unprotect>
 800d28c:	e008      	b.n	800d2a0 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800d28e:	f00b fa5b 	bl	8018748 <sys_arch_protect>
 800d292:	61f8      	str	r0, [r7, #28]
 800d294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d296:	78fa      	ldrb	r2, [r7, #3]
 800d298:	721a      	strb	r2, [r3, #8]
 800d29a:	69f8      	ldr	r0, [r7, #28]
 800d29c:	f00b fa62 	bl	8018764 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d005      	beq.n	800d2b4 <err_tcp+0x90>
 800d2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	2104      	movs	r1, #4
 800d2b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2b2:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d005      	beq.n	800d2c8 <err_tcp+0xa4>
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	2100      	movs	r1, #0
 800d2c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2c6:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d005      	beq.n	800d2dc <err_tcp+0xb8>
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	2102      	movs	r1, #2
 800d2d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2da:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2de:	3310      	adds	r3, #16
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f00b f915 	bl	8018510 <sys_mbox_valid>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d005      	beq.n	800d2f8 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	3310      	adds	r3, #16
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f00b f897 	bl	8018426 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fa:	3314      	adds	r3, #20
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f00b f907 	bl	8018510 <sys_mbox_valid>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d005      	beq.n	800d314 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800d308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30a:	3314      	adds	r3, #20
 800d30c:	2100      	movs	r1, #0
 800d30e:	4618      	mov	r0, r3
 800d310:	f00b f889 	bl	8018426 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d007      	beq.n	800d32c <err_tcp+0x108>
 800d31c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d320:	2b04      	cmp	r3, #4
 800d322:	d003      	beq.n	800d32c <err_tcp+0x108>
 800d324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d328:	2b03      	cmp	r3, #3
 800d32a:	d14d      	bne.n	800d3c8 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32e:	7f1b      	ldrb	r3, [r3, #28]
 800d330:	f003 0304 	and.w	r3, r3, #4
 800d334:	2b00      	cmp	r3, #0
 800d336:	bf14      	ite	ne
 800d338:	2301      	movne	r3, #1
 800d33a:	2300      	moveq	r3, #0
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d342:	7f1b      	ldrb	r3, [r3, #28]
 800d344:	f023 0304 	bic.w	r3, r3, #4
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d145      	bne.n	800d3e0 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d106      	bne.n	800d36a <err_tcp+0x146>
 800d35c:	4b23      	ldr	r3, [pc, #140]	; (800d3ec <err_tcp+0x1c8>)
 800d35e:	f240 12b3 	movw	r2, #435	; 0x1b3
 800d362:	4925      	ldr	r1, [pc, #148]	; (800d3f8 <err_tcp+0x1d4>)
 800d364:	4823      	ldr	r0, [pc, #140]	; (800d3f4 <err_tcp+0x1d0>)
 800d366:	f00d fd73 	bl	801ae50 <iprintf>
      conn->current_msg->err = err;
 800d36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d36e:	78fa      	ldrb	r2, [r7, #3]
 800d370:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	330c      	adds	r3, #12
 800d37a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d37c:	6938      	ldr	r0, [r7, #16]
 800d37e:	f00b f958 	bl	8018632 <sys_sem_valid>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d106      	bne.n	800d396 <err_tcp+0x172>
 800d388:	4b18      	ldr	r3, [pc, #96]	; (800d3ec <err_tcp+0x1c8>)
 800d38a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d38e:	491b      	ldr	r1, [pc, #108]	; (800d3fc <err_tcp+0x1d8>)
 800d390:	4818      	ldr	r0, [pc, #96]	; (800d3f4 <err_tcp+0x1d0>)
 800d392:	f00d fd5d 	bl	801ae50 <iprintf>
      conn->current_msg = NULL;
 800d396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d398:	2200      	movs	r2, #0
 800d39a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00e      	beq.n	800d3c0 <err_tcp+0x19c>
 800d3a2:	f00b f9d1 	bl	8018748 <sys_arch_protect>
 800d3a6:	60f8      	str	r0, [r7, #12]
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d3ae:	f113 0f0c 	cmn.w	r3, #12
 800d3b2:	db02      	blt.n	800d3ba <err_tcp+0x196>
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b6:	78fa      	ldrb	r2, [r7, #3]
 800d3b8:	721a      	strb	r2, [r3, #8]
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f00b f9d2 	bl	8018764 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800d3c0:	6938      	ldr	r0, [r7, #16]
 800d3c2:	f00b f91c 	bl	80185fe <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d3c6:	e00b      	b.n	800d3e0 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d008      	beq.n	800d3e2 <err_tcp+0x1be>
 800d3d0:	4b06      	ldr	r3, [pc, #24]	; (800d3ec <err_tcp+0x1c8>)
 800d3d2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d3d6:	490a      	ldr	r1, [pc, #40]	; (800d400 <err_tcp+0x1dc>)
 800d3d8:	4806      	ldr	r0, [pc, #24]	; (800d3f4 <err_tcp+0x1d0>)
 800d3da:	f00d fd39 	bl	801ae50 <iprintf>
  }
}
 800d3de:	e000      	b.n	800d3e2 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800d3e0:	bf00      	nop
}
 800d3e2:	bf00      	nop
 800d3e4:	3728      	adds	r7, #40	; 0x28
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	0801db2c 	.word	0x0801db2c
 800d3f0:	0801dc50 	.word	0x0801dc50
 800d3f4:	0801db84 	.word	0x0801db84
 800d3f8:	0801dc60 	.word	0x0801dc60
 800d3fc:	0801dc7c 	.word	0x0801dc7c
 800d400:	0801dc98 	.word	0x0801dc98

0800d404 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d412:	6879      	ldr	r1, [r7, #4]
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f004 f9db 	bl	80117d0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d41a:	490a      	ldr	r1, [pc, #40]	; (800d444 <setup_tcp+0x40>)
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f004 f9e9 	bl	80117f4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d422:	4909      	ldr	r1, [pc, #36]	; (800d448 <setup_tcp+0x44>)
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f004 fa07 	bl	8011838 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d42a:	2202      	movs	r2, #2
 800d42c:	4907      	ldr	r1, [pc, #28]	; (800d44c <setup_tcp+0x48>)
 800d42e:	68f8      	ldr	r0, [r7, #12]
 800d430:	f004 fa5c 	bl	80118ec <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d434:	4906      	ldr	r1, [pc, #24]	; (800d450 <setup_tcp+0x4c>)
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f004 fa1e 	bl	8011878 <tcp_err>
}
 800d43c:	bf00      	nop
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	0800cfa5 	.word	0x0800cfa5
 800d448:	0800d17d 	.word	0x0800d17d
 800d44c:	0800d0b5 	.word	0x0800d0b5
 800d450:	0800d225 	.word	0x0800d225

0800d454 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b088      	sub	sp, #32
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	4613      	mov	r3, r2
 800d460:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d102      	bne.n	800d472 <accept_function+0x1e>
    return ERR_VAL;
 800d46c:	f06f 0305 	mvn.w	r3, #5
 800d470:	e08d      	b.n	800d58e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	3314      	adds	r3, #20
 800d476:	4618      	mov	r0, r3
 800d478:	f00b f84a 	bl	8018510 <sys_mbox_valid>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d102      	bne.n	800d488 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800d482:	f06f 0305 	mvn.w	r3, #5
 800d486:	e082      	b.n	800d58e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d115      	bne.n	800d4ba <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	3314      	adds	r3, #20
 800d492:	4941      	ldr	r1, [pc, #260]	; (800d598 <accept_function+0x144>)
 800d494:	4618      	mov	r0, r3
 800d496:	f00a ffc6 	bl	8018426 <sys_mbox_trypost>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d109      	bne.n	800d4b4 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d005      	beq.n	800d4b4 <accept_function+0x60>
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	2100      	movs	r1, #0
 800d4b0:	69f8      	ldr	r0, [r7, #28]
 800d4b2:	4798      	blx	r3
    }
    return ERR_VAL;
 800d4b4:	f06f 0305 	mvn.w	r3, #5
 800d4b8:	e069      	b.n	800d58e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800d4ba:	69fb      	ldr	r3, [r7, #28]
 800d4bc:	781a      	ldrb	r2, [r3, #0]
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	4610      	mov	r0, r2
 800d4c6:	f000 f8ff 	bl	800d6c8 <netconn_alloc>
 800d4ca:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d115      	bne.n	800d4fe <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	3314      	adds	r3, #20
 800d4d6:	4930      	ldr	r1, [pc, #192]	; (800d598 <accept_function+0x144>)
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f00a ffa4 	bl	8018426 <sys_mbox_trypost>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d109      	bne.n	800d4f8 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d005      	beq.n	800d4f8 <accept_function+0xa4>
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	69f8      	ldr	r0, [r7, #28]
 800d4f6:	4798      	blx	r3
    }
    return ERR_MEM;
 800d4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4fc:	e047      	b.n	800d58e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	68ba      	ldr	r2, [r7, #8]
 800d502:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800d504:	69b8      	ldr	r0, [r7, #24]
 800d506:	f7ff ff7d 	bl	800d404 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	79fa      	ldrb	r2, [r7, #7]
 800d50e:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	3314      	adds	r3, #20
 800d514:	69b9      	ldr	r1, [r7, #24]
 800d516:	4618      	mov	r0, r3
 800d518:	f00a ff85 	bl	8018426 <sys_mbox_trypost>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d02a      	beq.n	800d578 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800d528:	2100      	movs	r1, #0
 800d52a:	6978      	ldr	r0, [r7, #20]
 800d52c:	f004 f950 	bl	80117d0 <tcp_arg>
    tcp_recv(pcb, NULL);
 800d530:	2100      	movs	r1, #0
 800d532:	6978      	ldr	r0, [r7, #20]
 800d534:	f004 f95e 	bl	80117f4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800d538:	2100      	movs	r1, #0
 800d53a:	6978      	ldr	r0, [r7, #20]
 800d53c:	f004 f97c 	bl	8011838 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800d540:	2200      	movs	r2, #0
 800d542:	2100      	movs	r1, #0
 800d544:	6978      	ldr	r0, [r7, #20]
 800d546:	f004 f9d1 	bl	80118ec <tcp_poll>
    tcp_err(pcb, NULL);
 800d54a:	2100      	movs	r1, #0
 800d54c:	6978      	ldr	r0, [r7, #20]
 800d54e:	f004 f993 	bl	8011878 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	2200      	movs	r2, #0
 800d556:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800d558:	69bb      	ldr	r3, [r7, #24]
 800d55a:	3310      	adds	r3, #16
 800d55c:	4618      	mov	r0, r3
 800d55e:	f00a ff3b 	bl	80183d8 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	3310      	adds	r3, #16
 800d566:	4618      	mov	r0, r3
 800d568:	f00a ffe3 	bl	8018532 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800d56c:	69b8      	ldr	r0, [r7, #24]
 800d56e:	f000 f91b 	bl	800d7a8 <netconn_free>
    return ERR_MEM;
 800d572:	f04f 33ff 	mov.w	r3, #4294967295
 800d576:	e00a      	b.n	800d58e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d578:	69fb      	ldr	r3, [r7, #28]
 800d57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d005      	beq.n	800d58c <accept_function+0x138>
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d584:	2200      	movs	r2, #0
 800d586:	2100      	movs	r1, #0
 800d588:	69f8      	ldr	r0, [r7, #28]
 800d58a:	4798      	blx	r3
  }

  return ERR_OK;
 800d58c:	2300      	movs	r3, #0
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3720      	adds	r7, #32
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	20012d0c 	.word	0x20012d0c

0800d59c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d59c:	b590      	push	{r4, r7, lr}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d006      	beq.n	800d5c0 <pcb_new+0x24>
 800d5b2:	4b2b      	ldr	r3, [pc, #172]	; (800d660 <pcb_new+0xc4>)
 800d5b4:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d5b8:	492a      	ldr	r1, [pc, #168]	; (800d664 <pcb_new+0xc8>)
 800d5ba:	482b      	ldr	r0, [pc, #172]	; (800d668 <pcb_new+0xcc>)
 800d5bc:	f00d fc48 	bl	801ae50 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5ca:	2b10      	cmp	r3, #16
 800d5cc:	d022      	beq.n	800d614 <pcb_new+0x78>
 800d5ce:	2b20      	cmp	r3, #32
 800d5d0:	d133      	bne.n	800d63a <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681c      	ldr	r4, [r3, #0]
 800d5d6:	7bfb      	ldrb	r3, [r7, #15]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f008 fc96 	bl	8015f0a <udp_new_ip_type>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d02a      	beq.n	800d642 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	2b22      	cmp	r3, #34	; 0x22
 800d5f4:	d104      	bne.n	800d600 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	6858      	ldr	r0, [r3, #4]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	461a      	mov	r2, r3
 800d60c:	4917      	ldr	r1, [pc, #92]	; (800d66c <pcb_new+0xd0>)
 800d60e:	f008 fc21 	bl	8015e54 <udp_recv>
    }
    break;
 800d612:	e016      	b.n	800d642 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681c      	ldr	r4, [r3, #0]
 800d618:	7bfb      	ldrb	r3, [r7, #15]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f004 f8ca 	bl	80117b4 <tcp_new_ip_type>
 800d620:	4603      	mov	r3, r0
 800d622:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00b      	beq.n	800d646 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4618      	mov	r0, r3
 800d634:	f7ff fee6 	bl	800d404 <setup_tcp>
    }
    break;
 800d638:	e005      	b.n	800d646 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	22fa      	movs	r2, #250	; 0xfa
 800d63e:	711a      	strb	r2, [r3, #4]
    return;
 800d640:	e00a      	b.n	800d658 <pcb_new+0xbc>
    break;
 800d642:	bf00      	nop
 800d644:	e000      	b.n	800d648 <pcb_new+0xac>
    break;
 800d646:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	685b      	ldr	r3, [r3, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d102      	bne.n	800d658 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	22ff      	movs	r2, #255	; 0xff
 800d656:	711a      	strb	r2, [r3, #4]
  }
}
 800d658:	3714      	adds	r7, #20
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd90      	pop	{r4, r7, pc}
 800d65e:	bf00      	nop
 800d660:	0801db2c 	.word	0x0801db2c
 800d664:	0801dcb4 	.word	0x0801dcb4
 800d668:	0801db84 	.word	0x0801db84
 800d66c:	0800cea9 	.word	0x0800cea9

0800d670 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	2200      	movs	r2, #0
 800d680:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d68c:	68f8      	ldr	r0, [r7, #12]
 800d68e:	f7ff ff85 	bl	800d59c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d012      	beq.n	800d6c0 <lwip_netconn_do_newconn+0x50>
 800d69a:	f00b f855 	bl	8018748 <sys_arch_protect>
 800d69e:	60b8      	str	r0, [r7, #8]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d6a8:	f113 0f0c 	cmn.w	r3, #12
 800d6ac:	db05      	blt.n	800d6ba <lwip_netconn_do_newconn+0x4a>
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800d6b8:	721a      	strb	r2, [r3, #8]
 800d6ba:	68b8      	ldr	r0, [r7, #8]
 800d6bc:	f00b f852 	bl	8018764 <sys_arch_unprotect>
}
 800d6c0:	bf00      	nop
 800d6c2:	3710      	adds	r7, #16
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	6039      	str	r1, [r7, #0]
 800d6d2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d6d4:	2007      	movs	r0, #7
 800d6d6:	f001 fe13 	bl	800f300 <memp_malloc>
 800d6da:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d101      	bne.n	800d6e6 <netconn_alloc+0x1e>
    return NULL;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	e055      	b.n	800d792 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	79fa      	ldrb	r2, [r7, #7]
 800d6f0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800d6f8:	79fb      	ldrb	r3, [r7, #7]
 800d6fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6fe:	2b10      	cmp	r3, #16
 800d700:	d004      	beq.n	800d70c <netconn_alloc+0x44>
 800d702:	2b20      	cmp	r3, #32
 800d704:	d105      	bne.n	800d712 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d706:	2306      	movs	r3, #6
 800d708:	60fb      	str	r3, [r7, #12]
    break;
 800d70a:	e00a      	b.n	800d722 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d70c:	2306      	movs	r3, #6
 800d70e:	60fb      	str	r3, [r7, #12]
    break;
 800d710:	e007      	b.n	800d722 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d712:	4b22      	ldr	r3, [pc, #136]	; (800d79c <netconn_alloc+0xd4>)
 800d714:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800d718:	4921      	ldr	r1, [pc, #132]	; (800d7a0 <netconn_alloc+0xd8>)
 800d71a:	4822      	ldr	r0, [pc, #136]	; (800d7a4 <netconn_alloc+0xdc>)
 800d71c:	f00d fb98 	bl	801ae50 <iprintf>
    goto free_and_return;
 800d720:	e032      	b.n	800d788 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	3310      	adds	r3, #16
 800d726:	68f9      	ldr	r1, [r7, #12]
 800d728:	4618      	mov	r0, r3
 800d72a:	f00a fe33 	bl	8018394 <sys_mbox_new>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d128      	bne.n	800d786 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	330c      	adds	r3, #12
 800d738:	2100      	movs	r1, #0
 800d73a:	4618      	mov	r0, r3
 800d73c:	f00a ff06 	bl	801854c <sys_sem_new>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d005      	beq.n	800d752 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	3310      	adds	r3, #16
 800d74a:	4618      	mov	r0, r3
 800d74c:	f00a fe44 	bl	80183d8 <sys_mbox_free>
    goto free_and_return;
 800d750:	e01a      	b.n	800d788 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	3314      	adds	r3, #20
 800d756:	4618      	mov	r0, r3
 800d758:	f00a feeb 	bl	8018532 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	2200      	movs	r2, #0
 800d760:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	f04f 32ff 	mov.w	r2, #4294967295
 800d768:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	683a      	ldr	r2, [r7, #0]
 800d76e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	2200      	movs	r2, #0
 800d774:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	2200      	movs	r2, #0
 800d77a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	2200      	movs	r2, #0
 800d780:	771a      	strb	r2, [r3, #28]
  return conn;
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	e005      	b.n	800d792 <netconn_alloc+0xca>
    goto free_and_return;
 800d786:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d788:	68b9      	ldr	r1, [r7, #8]
 800d78a:	2007      	movs	r0, #7
 800d78c:	f001 fe0a 	bl	800f3a4 <memp_free>
  return NULL;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3710      	adds	r7, #16
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}
 800d79a:	bf00      	nop
 800d79c:	0801db2c 	.word	0x0801db2c
 800d7a0:	0801dcd4 	.word	0x0801dcd4
 800d7a4:	0801db84 	.word	0x0801db84

0800d7a8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d006      	beq.n	800d7c6 <netconn_free+0x1e>
 800d7b8:	4b1b      	ldr	r3, [pc, #108]	; (800d828 <netconn_free+0x80>)
 800d7ba:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800d7be:	491b      	ldr	r1, [pc, #108]	; (800d82c <netconn_free+0x84>)
 800d7c0:	481b      	ldr	r0, [pc, #108]	; (800d830 <netconn_free+0x88>)
 800d7c2:	f00d fb45 	bl	801ae50 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	3310      	adds	r3, #16
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f00a fea0 	bl	8018510 <sys_mbox_valid>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d006      	beq.n	800d7e4 <netconn_free+0x3c>
 800d7d6:	4b14      	ldr	r3, [pc, #80]	; (800d828 <netconn_free+0x80>)
 800d7d8:	f240 22e2 	movw	r2, #738	; 0x2e2
 800d7dc:	4915      	ldr	r1, [pc, #84]	; (800d834 <netconn_free+0x8c>)
 800d7de:	4814      	ldr	r0, [pc, #80]	; (800d830 <netconn_free+0x88>)
 800d7e0:	f00d fb36 	bl	801ae50 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	3314      	adds	r3, #20
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f00a fe91 	bl	8018510 <sys_mbox_valid>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d006      	beq.n	800d802 <netconn_free+0x5a>
 800d7f4:	4b0c      	ldr	r3, [pc, #48]	; (800d828 <netconn_free+0x80>)
 800d7f6:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d7fa:	490f      	ldr	r1, [pc, #60]	; (800d838 <netconn_free+0x90>)
 800d7fc:	480c      	ldr	r0, [pc, #48]	; (800d830 <netconn_free+0x88>)
 800d7fe:	f00d fb27 	bl	801ae50 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	330c      	adds	r3, #12
 800d806:	4618      	mov	r0, r3
 800d808:	f00a ff06 	bl	8018618 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	330c      	adds	r3, #12
 800d810:	4618      	mov	r0, r3
 800d812:	f00a ff1f 	bl	8018654 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d816:	6879      	ldr	r1, [r7, #4]
 800d818:	2007      	movs	r0, #7
 800d81a:	f001 fdc3 	bl	800f3a4 <memp_free>
}
 800d81e:	bf00      	nop
 800d820:	3708      	adds	r7, #8
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
 800d826:	bf00      	nop
 800d828:	0801db2c 	.word	0x0801db2c
 800d82c:	0801dcfc 	.word	0x0801dcfc
 800d830:	0801db84 	.word	0x0801db84
 800d834:	0801dd2c 	.word	0x0801dd2c
 800d838:	0801dd68 	.word	0x0801dd68

0800d83c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	3310      	adds	r3, #16
 800d848:	4618      	mov	r0, r3
 800d84a:	f00a fe61 	bl	8018510 <sys_mbox_valid>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d035      	beq.n	800d8c0 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d854:	e01e      	b.n	800d894 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d85e:	2b10      	cmp	r3, #16
 800d860:	d114      	bne.n	800d88c <netconn_drain+0x50>
        if (mem != NULL) {
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d015      	beq.n	800d894 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d007      	beq.n	800d884 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685a      	ldr	r2, [r3, #4]
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	891b      	ldrh	r3, [r3, #8]
 800d87c:	4619      	mov	r1, r3
 800d87e:	4610      	mov	r0, r2
 800d880:	f003 f9c4 	bl	8010c0c <tcp_recved>
          }
          pbuf_free(p);
 800d884:	6978      	ldr	r0, [r7, #20]
 800d886:	f002 fae7 	bl	800fe58 <pbuf_free>
 800d88a:	e003      	b.n	800d894 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 ff38 	bl	800e704 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	3310      	adds	r3, #16
 800d898:	f107 020c 	add.w	r2, r7, #12
 800d89c:	4611      	mov	r1, r2
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f00a fe1a 	bl	80184d8 <sys_arch_mbox_tryfetch>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8aa:	d1d4      	bne.n	800d856 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	3310      	adds	r3, #16
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f00a fd91 	bl	80183d8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	3310      	adds	r3, #16
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f00a fe39 	bl	8018532 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	3314      	adds	r3, #20
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f00a fe23 	bl	8018510 <sys_mbox_valid>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d02e      	beq.n	800d92e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d8d0:	e017      	b.n	800d902 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	4a18      	ldr	r2, [pc, #96]	; (800d938 <netconn_drain+0xfc>)
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d013      	beq.n	800d902 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800d8de:	6938      	ldr	r0, [r7, #16]
 800d8e0:	f7ff ffac 	bl	800d83c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	685b      	ldr	r3, [r3, #4]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d007      	beq.n	800d8fc <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f002 fff7 	bl	80108e4 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800d8fc:	6938      	ldr	r0, [r7, #16]
 800d8fe:	f7ff ff53 	bl	800d7a8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	3314      	adds	r3, #20
 800d906:	f107 020c 	add.w	r2, r7, #12
 800d90a:	4611      	mov	r1, r2
 800d90c:	4618      	mov	r0, r3
 800d90e:	f00a fde3 	bl	80184d8 <sys_arch_mbox_tryfetch>
 800d912:	4603      	mov	r3, r0
 800d914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d918:	d1db      	bne.n	800d8d2 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	3314      	adds	r3, #20
 800d91e:	4618      	mov	r0, r3
 800d920:	f00a fd5a 	bl	80183d8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	3314      	adds	r3, #20
 800d928:	4618      	mov	r0, r3
 800d92a:	f00a fe02 	bl	8018532 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d92e:	bf00      	nop
 800d930:	3718      	adds	r7, #24
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	20012d0c 	.word	0x20012d0c

0800d93c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b088      	sub	sp, #32
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	460b      	mov	r3, r1
 800d946:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800d948:	2300      	movs	r3, #0
 800d94a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d106      	bne.n	800d960 <lwip_netconn_do_close_internal+0x24>
 800d952:	4baa      	ldr	r3, [pc, #680]	; (800dbfc <lwip_netconn_do_close_internal+0x2c0>)
 800d954:	f240 3243 	movw	r2, #835	; 0x343
 800d958:	49a9      	ldr	r1, [pc, #676]	; (800dc00 <lwip_netconn_do_close_internal+0x2c4>)
 800d95a:	48aa      	ldr	r0, [pc, #680]	; (800dc04 <lwip_netconn_do_close_internal+0x2c8>)
 800d95c:	f00d fa78 	bl	801ae50 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d968:	2b10      	cmp	r3, #16
 800d96a:	d006      	beq.n	800d97a <lwip_netconn_do_close_internal+0x3e>
 800d96c:	4ba3      	ldr	r3, [pc, #652]	; (800dbfc <lwip_netconn_do_close_internal+0x2c0>)
 800d96e:	f44f 7251 	mov.w	r2, #836	; 0x344
 800d972:	49a5      	ldr	r1, [pc, #660]	; (800dc08 <lwip_netconn_do_close_internal+0x2cc>)
 800d974:	48a3      	ldr	r0, [pc, #652]	; (800dc04 <lwip_netconn_do_close_internal+0x2c8>)
 800d976:	f00d fa6b 	bl	801ae50 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	785b      	ldrb	r3, [r3, #1]
 800d97e:	2b04      	cmp	r3, #4
 800d980:	d006      	beq.n	800d990 <lwip_netconn_do_close_internal+0x54>
 800d982:	4b9e      	ldr	r3, [pc, #632]	; (800dbfc <lwip_netconn_do_close_internal+0x2c0>)
 800d984:	f240 3245 	movw	r2, #837	; 0x345
 800d988:	49a0      	ldr	r1, [pc, #640]	; (800dc0c <lwip_netconn_do_close_internal+0x2d0>)
 800d98a:	489e      	ldr	r0, [pc, #632]	; (800dc04 <lwip_netconn_do_close_internal+0x2c8>)
 800d98c:	f00d fa60 	bl	801ae50 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d106      	bne.n	800d9a6 <lwip_netconn_do_close_internal+0x6a>
 800d998:	4b98      	ldr	r3, [pc, #608]	; (800dbfc <lwip_netconn_do_close_internal+0x2c0>)
 800d99a:	f240 3246 	movw	r2, #838	; 0x346
 800d99e:	499c      	ldr	r1, [pc, #624]	; (800dc10 <lwip_netconn_do_close_internal+0x2d4>)
 800d9a0:	4898      	ldr	r0, [pc, #608]	; (800dc04 <lwip_netconn_do_close_internal+0x2c8>)
 800d9a2:	f00d fa55 	bl	801ae50 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d106      	bne.n	800d9bc <lwip_netconn_do_close_internal+0x80>
 800d9ae:	4b93      	ldr	r3, [pc, #588]	; (800dbfc <lwip_netconn_do_close_internal+0x2c0>)
 800d9b0:	f240 3247 	movw	r2, #839	; 0x347
 800d9b4:	4997      	ldr	r1, [pc, #604]	; (800dc14 <lwip_netconn_do_close_internal+0x2d8>)
 800d9b6:	4893      	ldr	r0, [pc, #588]	; (800dc04 <lwip_netconn_do_close_internal+0x2c8>)
 800d9b8:	f00d fa4a 	bl	801ae50 <iprintf>

  tpcb = conn->pcb.tcp;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9c6:	7a1b      	ldrb	r3, [r3, #8]
 800d9c8:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d9ca:	7dfb      	ldrb	r3, [r7, #23]
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
 800d9d4:	f003 0302 	and.w	r3, r3, #2
 800d9d8:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d9da:	7dfb      	ldrb	r3, [r7, #23]
 800d9dc:	2b03      	cmp	r3, #3
 800d9de:	d102      	bne.n	800d9e6 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	77bb      	strb	r3, [r7, #30]
 800d9e4:	e01f      	b.n	800da26 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d9e6:	7dbb      	ldrb	r3, [r7, #22]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00e      	beq.n	800da0a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d9f0:	2b05      	cmp	r3, #5
 800d9f2:	d007      	beq.n	800da04 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d9f8:	2b06      	cmp	r3, #6
 800d9fa:	d003      	beq.n	800da04 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800da00:	2b08      	cmp	r3, #8
 800da02:	d102      	bne.n	800da0a <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800da04:	2301      	movs	r3, #1
 800da06:	77bb      	strb	r3, [r7, #30]
 800da08:	e00d      	b.n	800da26 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800da0a:	7d7b      	ldrb	r3, [r7, #21]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d008      	beq.n	800da22 <lwip_netconn_do_close_internal+0xe6>
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	7e9b      	ldrb	r3, [r3, #26]
 800da14:	f003 0310 	and.w	r3, r3, #16
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800da1c:	2301      	movs	r3, #1
 800da1e:	77bb      	strb	r3, [r7, #30]
 800da20:	e001      	b.n	800da26 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800da26:	7fbb      	ldrb	r3, [r7, #30]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d003      	beq.n	800da34 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800da2c:	2100      	movs	r1, #0
 800da2e:	69b8      	ldr	r0, [r7, #24]
 800da30:	f003 fece 	bl	80117d0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	7d1b      	ldrb	r3, [r3, #20]
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d104      	bne.n	800da46 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800da3c:	2100      	movs	r1, #0
 800da3e:	69b8      	ldr	r0, [r7, #24]
 800da40:	f003 ff3c 	bl	80118bc <tcp_accept>
 800da44:	e01d      	b.n	800da82 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800da46:	7dbb      	ldrb	r3, [r7, #22]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d007      	beq.n	800da5c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800da4c:	2100      	movs	r1, #0
 800da4e:	69b8      	ldr	r0, [r7, #24]
 800da50:	f003 fed0 	bl	80117f4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800da54:	2100      	movs	r1, #0
 800da56:	69b8      	ldr	r0, [r7, #24]
 800da58:	f003 ff30 	bl	80118bc <tcp_accept>
    }
    if (shut_tx) {
 800da5c:	7d7b      	ldrb	r3, [r7, #21]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d003      	beq.n	800da6a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800da62:	2100      	movs	r1, #0
 800da64:	69b8      	ldr	r0, [r7, #24]
 800da66:	f003 fee7 	bl	8011838 <tcp_sent>
    }
    if (close) {
 800da6a:	7fbb      	ldrb	r3, [r7, #30]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d008      	beq.n	800da82 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800da70:	2200      	movs	r2, #0
 800da72:	2100      	movs	r1, #0
 800da74:	69b8      	ldr	r0, [r7, #24]
 800da76:	f003 ff39 	bl	80118ec <tcp_poll>
      tcp_err(tpcb, NULL);
 800da7a:	2100      	movs	r1, #0
 800da7c:	69b8      	ldr	r0, [r7, #24]
 800da7e:	f003 fefb 	bl	8011878 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800da82:	7fbb      	ldrb	r3, [r7, #30]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d005      	beq.n	800da94 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800da88:	69b8      	ldr	r0, [r7, #24]
 800da8a:	f002 fe19 	bl	80106c0 <tcp_close>
 800da8e:	4603      	mov	r3, r0
 800da90:	77fb      	strb	r3, [r7, #31]
 800da92:	e007      	b.n	800daa4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800da94:	7dbb      	ldrb	r3, [r7, #22]
 800da96:	7d7a      	ldrb	r2, [r7, #21]
 800da98:	4619      	mov	r1, r3
 800da9a:	69b8      	ldr	r0, [r7, #24]
 800da9c:	f002 fe28 	bl	80106f0 <tcp_shutdown>
 800daa0:	4603      	mov	r3, r0
 800daa2:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800daa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d102      	bne.n	800dab2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800daac:	2301      	movs	r3, #1
 800daae:	777b      	strb	r3, [r7, #29]
 800dab0:	e016      	b.n	800dae0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800dab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daba:	d10f      	bne.n	800dadc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac0:	7a5b      	ldrb	r3, [r3, #9]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10c      	bne.n	800dae0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800dac6:	2301      	movs	r3, #1
 800dac8:	777b      	strb	r3, [r7, #29]
        if (close) {
 800daca:	7fbb      	ldrb	r3, [r7, #30]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d007      	beq.n	800dae0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800dad0:	69b8      	ldr	r0, [r7, #24]
 800dad2:	f002 ff07 	bl	80108e4 <tcp_abort>
          err = ERR_OK;
 800dad6:	2300      	movs	r3, #0
 800dad8:	77fb      	strb	r3, [r7, #31]
 800dada:	e001      	b.n	800dae0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800dadc:	2301      	movs	r3, #1
 800dade:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800dae0:	7f7b      	ldrb	r3, [r7, #29]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d056      	beq.n	800db94 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	330c      	adds	r3, #12
 800daee:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf4:	7ffa      	ldrb	r2, [r7, #31]
 800daf6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800db04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d129      	bne.n	800db60 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800db0c:	7fbb      	ldrb	r3, [r7, #30]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00c      	beq.n	800db2c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d005      	beq.n	800db2c <lwip_netconn_do_close_internal+0x1f0>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db24:	2200      	movs	r2, #0
 800db26:	2104      	movs	r1, #4
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	4798      	blx	r3
      }
      if (shut_rx) {
 800db2c:	7dbb      	ldrb	r3, [r7, #22]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d009      	beq.n	800db46 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db36:	2b00      	cmp	r3, #0
 800db38:	d005      	beq.n	800db46 <lwip_netconn_do_close_internal+0x20a>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db3e:	2200      	movs	r2, #0
 800db40:	2100      	movs	r1, #0
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	4798      	blx	r3
      }
      if (shut_tx) {
 800db46:	7d7b      	ldrb	r3, [r7, #21]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d009      	beq.n	800db60 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db50:	2b00      	cmp	r3, #0
 800db52:	d005      	beq.n	800db60 <lwip_netconn_do_close_internal+0x224>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db58:	2200      	movs	r2, #0
 800db5a:	2102      	movs	r1, #2
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d00e      	beq.n	800db84 <lwip_netconn_do_close_internal+0x248>
 800db66:	f00a fdef 	bl	8018748 <sys_arch_protect>
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800db72:	f113 0f0c 	cmn.w	r3, #12
 800db76:	db02      	blt.n	800db7e <lwip_netconn_do_close_internal+0x242>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	7ffa      	ldrb	r2, [r7, #31]
 800db7c:	721a      	strb	r2, [r3, #8]
 800db7e:	68f8      	ldr	r0, [r7, #12]
 800db80:	f00a fdf0 	bl	8018764 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800db84:	78fb      	ldrb	r3, [r7, #3]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d002      	beq.n	800db90 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800db8a:	6938      	ldr	r0, [r7, #16]
 800db8c:	f00a fd37 	bl	80185fe <sys_sem_signal>
    }
    return ERR_OK;
 800db90:	2300      	movs	r3, #0
 800db92:	e02e      	b.n	800dbf2 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 800db94:	7f7b      	ldrb	r3, [r7, #29]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d11e      	bne.n	800dbd8 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	7d1b      	ldrb	r3, [r3, #20]
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d106      	bne.n	800dbb0 <lwip_netconn_do_close_internal+0x274>
 800dba2:	4b16      	ldr	r3, [pc, #88]	; (800dbfc <lwip_netconn_do_close_internal+0x2c0>)
 800dba4:	f240 32e3 	movw	r2, #995	; 0x3e3
 800dba8:	491b      	ldr	r1, [pc, #108]	; (800dc18 <lwip_netconn_do_close_internal+0x2dc>)
 800dbaa:	4816      	ldr	r0, [pc, #88]	; (800dc04 <lwip_netconn_do_close_internal+0x2c8>)
 800dbac:	f00d f950 	bl	801ae50 <iprintf>
    if (shut_tx) {
 800dbb0:	7d7b      	ldrb	r3, [r7, #21]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d003      	beq.n	800dbbe <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 800dbb6:	4919      	ldr	r1, [pc, #100]	; (800dc1c <lwip_netconn_do_close_internal+0x2e0>)
 800dbb8:	69b8      	ldr	r0, [r7, #24]
 800dbba:	f003 fe3d 	bl	8011838 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	4917      	ldr	r1, [pc, #92]	; (800dc20 <lwip_netconn_do_close_internal+0x2e4>)
 800dbc2:	69b8      	ldr	r0, [r7, #24]
 800dbc4:	f003 fe92 	bl	80118ec <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800dbc8:	4916      	ldr	r1, [pc, #88]	; (800dc24 <lwip_netconn_do_close_internal+0x2e8>)
 800dbca:	69b8      	ldr	r0, [r7, #24]
 800dbcc:	f003 fe54 	bl	8011878 <tcp_err>
    tcp_arg(tpcb, conn);
 800dbd0:	6879      	ldr	r1, [r7, #4]
 800dbd2:	69b8      	ldr	r0, [r7, #24]
 800dbd4:	f003 fdfc 	bl	80117d0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800dbd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d106      	bne.n	800dbee <lwip_netconn_do_close_internal+0x2b2>
 800dbe0:	4b06      	ldr	r3, [pc, #24]	; (800dbfc <lwip_netconn_do_close_internal+0x2c0>)
 800dbe2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800dbe6:	4910      	ldr	r1, [pc, #64]	; (800dc28 <lwip_netconn_do_close_internal+0x2ec>)
 800dbe8:	4806      	ldr	r0, [pc, #24]	; (800dc04 <lwip_netconn_do_close_internal+0x2c8>)
 800dbea:	f00d f931 	bl	801ae50 <iprintf>
  return err;
 800dbee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3720      	adds	r7, #32
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	0801db2c 	.word	0x0801db2c
 800dc00:	0801dda4 	.word	0x0801dda4
 800dc04:	0801db84 	.word	0x0801db84
 800dc08:	0801ddb4 	.word	0x0801ddb4
 800dc0c:	0801ddd4 	.word	0x0801ddd4
 800dc10:	0801ddf8 	.word	0x0801ddf8
 800dc14:	0801dc60 	.word	0x0801dc60
 800dc18:	0801de0c 	.word	0x0801de0c
 800dc1c:	0800d17d 	.word	0x0800d17d
 800dc20:	0800d0b5 	.word	0x0800d0b5
 800dc24:	0800d225 	.word	0x0800d225
 800dc28:	0801de30 	.word	0x0801de30

0800dc2c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b086      	sub	sp, #24
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	785b      	ldrb	r3, [r3, #1]
 800dc3e:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800dc40:	7cfb      	ldrb	r3, [r7, #19]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00d      	beq.n	800dc62 <lwip_netconn_do_delconn+0x36>
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc50:	2b10      	cmp	r3, #16
 800dc52:	d006      	beq.n	800dc62 <lwip_netconn_do_delconn+0x36>
 800dc54:	4b6f      	ldr	r3, [pc, #444]	; (800de14 <lwip_netconn_do_delconn+0x1e8>)
 800dc56:	f240 4201 	movw	r2, #1025	; 0x401
 800dc5a:	496f      	ldr	r1, [pc, #444]	; (800de18 <lwip_netconn_do_delconn+0x1ec>)
 800dc5c:	486f      	ldr	r0, [pc, #444]	; (800de1c <lwip_netconn_do_delconn+0x1f0>)
 800dc5e:	f00d f8f7 	bl	801ae50 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800dc62:	7cfb      	ldrb	r3, [r7, #19]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d005      	beq.n	800dc74 <lwip_netconn_do_delconn+0x48>
 800dc68:	7cfb      	ldrb	r3, [r7, #19]
 800dc6a:	2b02      	cmp	r3, #2
 800dc6c:	d002      	beq.n	800dc74 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800dc6e:	7cfb      	ldrb	r3, [r7, #19]
 800dc70:	2b03      	cmp	r3, #3
 800dc72:	d109      	bne.n	800dc88 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800dc74:	7cfb      	ldrb	r3, [r7, #19]
 800dc76:	2b03      	cmp	r3, #3
 800dc78:	d10a      	bne.n	800dc90 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	7f1b      	ldrb	r3, [r3, #28]
 800dc80:	f003 0304 	and.w	r3, r3, #4
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d103      	bne.n	800dc90 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	22fb      	movs	r2, #251	; 0xfb
 800dc8c:	711a      	strb	r2, [r3, #4]
 800dc8e:	e09c      	b.n	800ddca <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800dc90:	7cfb      	ldrb	r3, [r7, #19]
 800dc92:	2b03      	cmp	r3, #3
 800dc94:	d10d      	bne.n	800dcb2 <lwip_netconn_do_delconn+0x86>
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	7f1b      	ldrb	r3, [r3, #28]
 800dc9c:	f003 0304 	and.w	r3, r3, #4
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d106      	bne.n	800dcb2 <lwip_netconn_do_delconn+0x86>
 800dca4:	4b5b      	ldr	r3, [pc, #364]	; (800de14 <lwip_netconn_do_delconn+0x1e8>)
 800dca6:	f240 421f 	movw	r2, #1055	; 0x41f
 800dcaa:	495d      	ldr	r1, [pc, #372]	; (800de20 <lwip_netconn_do_delconn+0x1f4>)
 800dcac:	485b      	ldr	r0, [pc, #364]	; (800de1c <lwip_netconn_do_delconn+0x1f0>)
 800dcae:	f00d f8cf 	bl	801ae50 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7ff fdbd 	bl	800d83c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d064      	beq.n	800dd96 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcd6:	2b10      	cmp	r3, #16
 800dcd8:	d00e      	beq.n	800dcf8 <lwip_netconn_do_delconn+0xcc>
 800dcda:	2b20      	cmp	r3, #32
 800dcdc:	d000      	beq.n	800dce0 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800dcde:	e056      	b.n	800dd8e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	2200      	movs	r2, #0
 800dce8:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f008 f8c1 	bl	8015e78 <udp_remove>
        break;
 800dcf6:	e04a      	b.n	800dd8e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d104      	bne.n	800dd0c <lwip_netconn_do_delconn+0xe0>
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	6a1b      	ldr	r3, [r3, #32]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d006      	beq.n	800dd1a <lwip_netconn_do_delconn+0xee>
 800dd0c:	4b41      	ldr	r3, [pc, #260]	; (800de14 <lwip_netconn_do_delconn+0x1e8>)
 800dd0e:	f240 4235 	movw	r2, #1077	; 0x435
 800dd12:	4944      	ldr	r1, [pc, #272]	; (800de24 <lwip_netconn_do_delconn+0x1f8>)
 800dd14:	4841      	ldr	r0, [pc, #260]	; (800de1c <lwip_netconn_do_delconn+0x1f0>)
 800dd16:	f00d f89b 	bl	801ae50 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2204      	movs	r2, #4
 800dd20:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2203      	movs	r2, #3
 800dd26:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	697a      	ldr	r2, [r7, #20]
 800dd2e:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2100      	movs	r1, #0
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7ff fe00 	bl	800d93c <lwip_netconn_do_close_internal>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d064      	beq.n	800de0c <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	785b      	ldrb	r3, [r3, #1]
 800dd48:	2b04      	cmp	r3, #4
 800dd4a:	d006      	beq.n	800dd5a <lwip_netconn_do_delconn+0x12e>
 800dd4c:	4b31      	ldr	r3, [pc, #196]	; (800de14 <lwip_netconn_do_delconn+0x1e8>)
 800dd4e:	f240 423b 	movw	r2, #1083	; 0x43b
 800dd52:	4935      	ldr	r1, [pc, #212]	; (800de28 <lwip_netconn_do_delconn+0x1fc>)
 800dd54:	4831      	ldr	r0, [pc, #196]	; (800de1c <lwip_netconn_do_delconn+0x1f0>)
 800dd56:	f00d f87b 	bl	801ae50 <iprintf>
          UNLOCK_TCPIP_CORE();
 800dd5a:	4834      	ldr	r0, [pc, #208]	; (800de2c <lwip_netconn_do_delconn+0x200>)
 800dd5c:	f00a fcc1 	bl	80186e2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	330c      	adds	r3, #12
 800dd66:	2100      	movs	r1, #0
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f00a fc17 	bl	801859c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800dd6e:	482f      	ldr	r0, [pc, #188]	; (800de2c <lwip_netconn_do_delconn+0x200>)
 800dd70:	f00a fca8 	bl	80186c4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	785b      	ldrb	r3, [r3, #1]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d046      	beq.n	800de0c <lwip_netconn_do_delconn+0x1e0>
 800dd7e:	4b25      	ldr	r3, [pc, #148]	; (800de14 <lwip_netconn_do_delconn+0x1e8>)
 800dd80:	f240 423f 	movw	r2, #1087	; 0x43f
 800dd84:	4928      	ldr	r1, [pc, #160]	; (800de28 <lwip_netconn_do_delconn+0x1fc>)
 800dd86:	4825      	ldr	r0, [pc, #148]	; (800de1c <lwip_netconn_do_delconn+0x1f0>)
 800dd88:	f00d f862 	bl	801ae50 <iprintf>
        return;
 800dd8c:	e03e      	b.n	800de0c <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	2200      	movs	r2, #0
 800dd94:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d007      	beq.n	800ddb0 <lwip_netconn_do_delconn+0x184>
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dda6:	697a      	ldr	r2, [r7, #20]
 800dda8:	6810      	ldr	r0, [r2, #0]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	2100      	movs	r1, #0
 800ddae:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d007      	beq.n	800ddca <lwip_netconn_do_delconn+0x19e>
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddc0:	697a      	ldr	r2, [r7, #20]
 800ddc2:	6810      	ldr	r0, [r2, #0]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	2102      	movs	r1, #2
 800ddc8:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	330c      	adds	r3, #12
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f00a fc2e 	bl	8018632 <sys_sem_valid>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d018      	beq.n	800de0e <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d014      	beq.n	800de0e <lwip_netconn_do_delconn+0x1e2>
 800dde4:	f00a fcb0 	bl	8018748 <sys_arch_protect>
 800dde8:	60f8      	str	r0, [r7, #12]
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ddf2:	f113 0f0c 	cmn.w	r3, #12
 800ddf6:	db05      	blt.n	800de04 <lwip_netconn_do_delconn+0x1d8>
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	697a      	ldr	r2, [r7, #20]
 800ddfe:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800de02:	721a      	strb	r2, [r3, #8]
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f00a fcad 	bl	8018764 <sys_arch_unprotect>
 800de0a:	e000      	b.n	800de0e <lwip_netconn_do_delconn+0x1e2>
        return;
 800de0c:	bf00      	nop
  }
}
 800de0e:	3718      	adds	r7, #24
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}
 800de14:	0801db2c 	.word	0x0801db2c
 800de18:	0801de40 	.word	0x0801de40
 800de1c:	0801db84 	.word	0x0801db84
 800de20:	0801de54 	.word	0x0801de54
 800de24:	0801de74 	.word	0x0801de74
 800de28:	0801de90 	.word	0x0801de90
 800de2c:	20012d10 	.word	0x20012d10

0800de30 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800de44:	f113 0f0c 	cmn.w	r3, #12
 800de48:	da06      	bge.n	800de58 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	711a      	strb	r2, [r3, #4]
 800de56:	e030      	b.n	800deba <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	22fa      	movs	r2, #250	; 0xfa
 800de5c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d027      	beq.n	800deb8 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de72:	2b10      	cmp	r3, #16
 800de74:	d011      	beq.n	800de9a <lwip_netconn_do_bind+0x6a>
 800de76:	2b20      	cmp	r3, #32
 800de78:	d000      	beq.n	800de7c <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800de7a:	e01e      	b.n	800deba <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	6858      	ldr	r0, [r3, #4]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	6899      	ldr	r1, [r3, #8]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	899b      	ldrh	r3, [r3, #12]
 800de8a:	461a      	mov	r2, r3
 800de8c:	f007 ff72 	bl	8015d74 <udp_bind>
 800de90:	4603      	mov	r3, r0
 800de92:	461a      	mov	r2, r3
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	711a      	strb	r2, [r3, #4]
        break;
 800de98:	e00f      	b.n	800deba <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	6858      	ldr	r0, [r3, #4]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6899      	ldr	r1, [r3, #8]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	899b      	ldrh	r3, [r3, #12]
 800dea8:	461a      	mov	r2, r3
 800deaa:	f002 fd27 	bl	80108fc <tcp_bind>
 800deae:	4603      	mov	r3, r0
 800deb0:	461a      	mov	r2, r3
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	711a      	strb	r2, [r3, #4]
        break;
 800deb6:	e000      	b.n	800deba <lwip_netconn_do_bind+0x8a>
      }
    }
 800deb8:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d012      	beq.n	800dee8 <lwip_netconn_do_bind+0xb8>
 800dec2:	f00a fc41 	bl	8018748 <sys_arch_protect>
 800dec6:	60b8      	str	r0, [r7, #8]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ded0:	f113 0f0c 	cmn.w	r3, #12
 800ded4:	db05      	blt.n	800dee2 <lwip_netconn_do_bind+0xb2>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800dee0:	721a      	strb	r2, [r3, #8]
 800dee2:	68b8      	ldr	r0, [r7, #8]
 800dee4:	f00a fc3e 	bl	8018764 <sys_arch_unprotect>
}
 800dee8:	bf00      	nop
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b088      	sub	sp, #32
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800defc:	69fb      	ldr	r3, [r7, #28]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800df04:	f113 0f0c 	cmn.w	r3, #12
 800df08:	da06      	bge.n	800df18 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	711a      	strb	r2, [r3, #4]
 800df16:	e090      	b.n	800e03a <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	22f5      	movs	r2, #245	; 0xf5
 800df1c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	2b00      	cmp	r3, #0
 800df26:	f000 8088 	beq.w	800e03a <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800df2a:	69fb      	ldr	r3, [r7, #28]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df34:	2b10      	cmp	r3, #16
 800df36:	d17d      	bne.n	800e034 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	785b      	ldrb	r3, [r3, #1]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d16f      	bne.n	800e022 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	7d1b      	ldrb	r3, [r3, #20]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d003      	beq.n	800df56 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	22fa      	movs	r2, #250	; 0xfa
 800df52:	711a      	strb	r2, [r3, #4]
 800df54:	e071      	b.n	800e03a <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800df56:	23ff      	movs	r3, #255	; 0xff
 800df58:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	f107 020f 	add.w	r2, r7, #15
 800df64:	7ef9      	ldrb	r1, [r7, #27]
 800df66:	4618      	mov	r0, r3
 800df68:	f002 fd6a 	bl	8010a40 <tcp_listen_with_backlog_and_err>
 800df6c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d104      	bne.n	800df7e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800df74:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	711a      	strb	r2, [r3, #4]
 800df7c:	e05d      	b.n	800e03a <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	3310      	adds	r3, #16
 800df84:	4618      	mov	r0, r3
 800df86:	f00a fac3 	bl	8018510 <sys_mbox_valid>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00b      	beq.n	800dfa8 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	3310      	adds	r3, #16
 800df96:	4618      	mov	r0, r3
 800df98:	f00a fa1e 	bl	80183d8 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3310      	adds	r3, #16
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f00a fac5 	bl	8018532 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	3314      	adds	r3, #20
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f00a faab 	bl	8018510 <sys_mbox_valid>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10a      	bne.n	800dfd6 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	3314      	adds	r3, #20
 800dfc6:	2106      	movs	r1, #6
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f00a f9e3 	bl	8018394 <sys_mbox_new>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d118      	bne.n	800e012 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2202      	movs	r2, #2
 800dfe6:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	697a      	ldr	r2, [r7, #20]
 800dfee:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	685a      	ldr	r2, [r3, #4]
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4619      	mov	r1, r3
 800dffc:	4610      	mov	r0, r2
 800dffe:	f003 fbe7 	bl	80117d0 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	4919      	ldr	r1, [pc, #100]	; (800e070 <lwip_netconn_do_listen+0x180>)
 800e00a:	4618      	mov	r0, r3
 800e00c:	f003 fc56 	bl	80118bc <tcp_accept>
 800e010:	e013      	b.n	800e03a <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800e012:	6978      	ldr	r0, [r7, #20]
 800e014:	f002 fb54 	bl	80106c0 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2200      	movs	r2, #0
 800e01e:	605a      	str	r2, [r3, #4]
 800e020:	e00b      	b.n	800e03a <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	785b      	ldrb	r3, [r3, #1]
 800e028:	2b02      	cmp	r3, #2
 800e02a:	d106      	bne.n	800e03a <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	2200      	movs	r2, #0
 800e030:	711a      	strb	r2, [r3, #4]
 800e032:	e002      	b.n	800e03a <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	22f0      	movs	r2, #240	; 0xf0
 800e038:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d012      	beq.n	800e068 <lwip_netconn_do_listen+0x178>
 800e042:	f00a fb81 	bl	8018748 <sys_arch_protect>
 800e046:	6138      	str	r0, [r7, #16]
 800e048:	69fb      	ldr	r3, [r7, #28]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e050:	f113 0f0c 	cmn.w	r3, #12
 800e054:	db05      	blt.n	800e062 <lwip_netconn_do_listen+0x172>
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	69fa      	ldr	r2, [r7, #28]
 800e05c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e060:	721a      	strb	r2, [r3, #8]
 800e062:	6938      	ldr	r0, [r7, #16]
 800e064:	f00a fb7e 	bl	8018764 <sys_arch_unprotect>
}
 800e068:	bf00      	nop
 800e06a:	3720      	adds	r7, #32
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	0800d455 	.word	0x0800d455

0800e074 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	2200      	movs	r2, #0
 800e084:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d022      	beq.n	800e0d6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e09a:	2b10      	cmp	r3, #16
 800e09c:	d11b      	bne.n	800e0d6 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0aa:	d202      	bcs.n	800e0b2 <lwip_netconn_do_recv+0x3e>
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	e001      	b.n	800e0b6 <lwip_netconn_do_recv+0x42>
 800e0b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e0b6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	685b      	ldr	r3, [r3, #4]
 800e0be:	89fa      	ldrh	r2, [r7, #14]
 800e0c0:	4611      	mov	r1, r2
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f002 fda2 	bl	8010c0c <tcp_recved>
        remaining -= recved;
 800e0c8:	89fb      	ldrh	r3, [r7, #14]
 800e0ca:	697a      	ldr	r2, [r7, #20]
 800e0cc:	1ad3      	subs	r3, r2, r3
 800e0ce:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1e6      	bne.n	800e0a4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d012      	beq.n	800e104 <lwip_netconn_do_recv+0x90>
 800e0de:	f00a fb33 	bl	8018748 <sys_arch_protect>
 800e0e2:	60b8      	str	r0, [r7, #8]
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e0ec:	f113 0f0c 	cmn.w	r3, #12
 800e0f0:	db05      	blt.n	800e0fe <lwip_netconn_do_recv+0x8a>
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	693a      	ldr	r2, [r7, #16]
 800e0f8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e0fc:	721a      	strb	r2, [r3, #8]
 800e0fe:	68b8      	ldr	r0, [r7, #8]
 800e100:	f00a fb30 	bl	8018764 <sys_arch_unprotect>
}
 800e104:	bf00      	nop
 800e106:	3718      	adds	r7, #24
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b08a      	sub	sp, #40	; 0x28
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
 800e114:	460b      	mov	r3, r1
 800e116:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e118:	2300      	movs	r3, #0
 800e11a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d106      	bne.n	800e132 <lwip_netconn_do_writemore+0x26>
 800e124:	4ba3      	ldr	r3, [pc, #652]	; (800e3b4 <lwip_netconn_do_writemore+0x2a8>)
 800e126:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800e12a:	49a3      	ldr	r1, [pc, #652]	; (800e3b8 <lwip_netconn_do_writemore+0x2ac>)
 800e12c:	48a3      	ldr	r0, [pc, #652]	; (800e3bc <lwip_netconn_do_writemore+0x2b0>)
 800e12e:	f00c fe8f 	bl	801ae50 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	785b      	ldrb	r3, [r3, #1]
 800e136:	2b01      	cmp	r3, #1
 800e138:	d006      	beq.n	800e148 <lwip_netconn_do_writemore+0x3c>
 800e13a:	4b9e      	ldr	r3, [pc, #632]	; (800e3b4 <lwip_netconn_do_writemore+0x2a8>)
 800e13c:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800e140:	499f      	ldr	r1, [pc, #636]	; (800e3c0 <lwip_netconn_do_writemore+0x2b4>)
 800e142:	489e      	ldr	r0, [pc, #632]	; (800e3bc <lwip_netconn_do_writemore+0x2b0>)
 800e144:	f00c fe84 	bl	801ae50 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d106      	bne.n	800e15e <lwip_netconn_do_writemore+0x52>
 800e150:	4b98      	ldr	r3, [pc, #608]	; (800e3b4 <lwip_netconn_do_writemore+0x2a8>)
 800e152:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800e156:	499b      	ldr	r1, [pc, #620]	; (800e3c4 <lwip_netconn_do_writemore+0x2b8>)
 800e158:	4898      	ldr	r0, [pc, #608]	; (800e3bc <lwip_netconn_do_writemore+0x2b0>)
 800e15a:	f00c fe79 	bl	801ae50 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	685b      	ldr	r3, [r3, #4]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d106      	bne.n	800e174 <lwip_netconn_do_writemore+0x68>
 800e166:	4b93      	ldr	r3, [pc, #588]	; (800e3b4 <lwip_netconn_do_writemore+0x2a8>)
 800e168:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800e16c:	4996      	ldr	r1, [pc, #600]	; (800e3c8 <lwip_netconn_do_writemore+0x2bc>)
 800e16e:	4893      	ldr	r0, [pc, #588]	; (800e3bc <lwip_netconn_do_writemore+0x2b0>)
 800e170:	f00c fe6e 	bl	801ae50 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6a1a      	ldr	r2, [r3, #32]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e17c:	68db      	ldr	r3, [r3, #12]
 800e17e:	429a      	cmp	r2, r3
 800e180:	d306      	bcc.n	800e190 <lwip_netconn_do_writemore+0x84>
 800e182:	4b8c      	ldr	r3, [pc, #560]	; (800e3b4 <lwip_netconn_do_writemore+0x2a8>)
 800e184:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800e188:	4990      	ldr	r1, [pc, #576]	; (800e3cc <lwip_netconn_do_writemore+0x2c0>)
 800e18a:	488c      	ldr	r0, [pc, #560]	; (800e3bc <lwip_netconn_do_writemore+0x2b0>)
 800e18c:	f00c fe60 	bl	801ae50 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e194:	7c1b      	ldrb	r3, [r3, #16]
 800e196:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	7f1b      	ldrb	r3, [r3, #28]
 800e19e:	f003 0302 	and.w	r3, r3, #2
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d105      	bne.n	800e1b2 <lwip_netconn_do_writemore+0xa6>
 800e1a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e1aa:	f003 0304 	and.w	r3, r3, #4
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <lwip_netconn_do_writemore+0xaa>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	e000      	b.n	800e1b8 <lwip_netconn_do_writemore+0xac>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c0:	689a      	ldr	r2, [r3, #8]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6a1b      	ldr	r3, [r3, #32]
 800e1c6:	4413      	add	r3, r2
 800e1c8:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1ce:	68da      	ldr	r2, [r3, #12]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6a1b      	ldr	r3, [r3, #32]
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1de:	d309      	bcc.n	800e1f4 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800e1e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1e4:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800e1e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e1ea:	f043 0302 	orr.w	r3, r3, #2
 800e1ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e1f2:	e001      	b.n	800e1f8 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800e1f4:	69bb      	ldr	r3, [r7, #24]
 800e1f6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e200:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800e202:	8afa      	ldrh	r2, [r7, #22]
 800e204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e206:	429a      	cmp	r2, r3
 800e208:	d212      	bcs.n	800e230 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800e20a:	8afb      	ldrh	r3, [r7, #22]
 800e20c:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800e20e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e212:	2b00      	cmp	r3, #0
 800e214:	d006      	beq.n	800e224 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800e216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d109      	bne.n	800e230 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800e21c:	23f9      	movs	r3, #249	; 0xf9
 800e21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800e222:	e02a      	b.n	800e27a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e224:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e228:	f043 0302 	orr.w	r3, r3, #2
 800e22c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6a1a      	ldr	r2, [r3, #32]
 800e234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e236:	441a      	add	r2, r3
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d906      	bls.n	800e250 <lwip_netconn_do_writemore+0x144>
 800e242:	4b5c      	ldr	r3, [pc, #368]	; (800e3b4 <lwip_netconn_do_writemore+0x2a8>)
 800e244:	f240 6213 	movw	r2, #1555	; 0x613
 800e248:	4961      	ldr	r1, [pc, #388]	; (800e3d0 <lwip_netconn_do_writemore+0x2c4>)
 800e24a:	485c      	ldr	r0, [pc, #368]	; (800e3bc <lwip_netconn_do_writemore+0x2b0>)
 800e24c:	f00c fe00 	bl	801ae50 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6858      	ldr	r0, [r3, #4]
 800e254:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e258:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e25a:	69f9      	ldr	r1, [r7, #28]
 800e25c:	f006 f8fa 	bl	8014454 <tcp_write>
 800e260:	4603      	mov	r3, r0
 800e262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e266:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d004      	beq.n	800e278 <lwip_netconn_do_writemore+0x16c>
 800e26e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e276:	d133      	bne.n	800e2e0 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800e278:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800e27a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d017      	beq.n	800e2b2 <lwip_netconn_do_writemore+0x1a6>
 800e282:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d211      	bcs.n	800e2b2 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e292:	2b00      	cmp	r3, #0
 800e294:	d005      	beq.n	800e2a2 <lwip_netconn_do_writemore+0x196>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e29a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e29c:	2103      	movs	r1, #3
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	7f1b      	ldrb	r3, [r3, #28]
 800e2a6:	f043 0310 	orr.w	r3, r3, #16
 800e2aa:	b2da      	uxtb	r2, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	771a      	strb	r2, [r3, #28]
 800e2b0:	e016      	b.n	800e2e0 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	685b      	ldr	r3, [r3, #4]
 800e2b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e2ba:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e2be:	d305      	bcc.n	800e2cc <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e2c8:	2b04      	cmp	r3, #4
 800e2ca:	d909      	bls.n	800e2e0 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d005      	beq.n	800e2e0 <lwip_netconn_do_writemore+0x1d4>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e2da:	2103      	movs	r1, #3
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e2e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d134      	bne.n	800e352 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6a1a      	ldr	r2, [r3, #32]
 800e2ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2ee:	441a      	add	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6a1a      	ldr	r2, [r3, #32]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d003      	beq.n	800e30a <lwip_netconn_do_writemore+0x1fe>
 800e302:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e306:	2b00      	cmp	r3, #0
 800e308:	d007      	beq.n	800e31a <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	6a12      	ldr	r2, [r2, #32]
 800e312:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800e314:	2301      	movs	r3, #1
 800e316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	4618      	mov	r0, r3
 800e320:	f006 fd4a 	bl	8014db8 <tcp_output>
 800e324:	4603      	mov	r3, r0
 800e326:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800e328:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e32c:	f113 0f0c 	cmn.w	r3, #12
 800e330:	db04      	blt.n	800e33c <lwip_netconn_do_writemore+0x230>
 800e332:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800e336:	f113 0f04 	cmn.w	r3, #4
 800e33a:	d152      	bne.n	800e3e2 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e33c:	7d3b      	ldrb	r3, [r7, #20]
 800e33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800e342:	2301      	movs	r3, #1
 800e344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e34c:	2200      	movs	r2, #0
 800e34e:	60da      	str	r2, [r3, #12]
 800e350:	e047      	b.n	800e3e2 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 800e352:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e35a:	d13b      	bne.n	800e3d4 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	4618      	mov	r0, r3
 800e362:	f006 fd29 	bl	8014db8 <tcp_output>
 800e366:	4603      	mov	r3, r0
 800e368:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800e36a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800e36e:	f113 0f0c 	cmn.w	r3, #12
 800e372:	db04      	blt.n	800e37e <lwip_netconn_do_writemore+0x272>
 800e374:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800e378:	f113 0f04 	cmn.w	r3, #4
 800e37c:	d10a      	bne.n	800e394 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e37e:	7d7b      	ldrb	r3, [r7, #21]
 800e380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800e384:	2301      	movs	r3, #1
 800e386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e38e:	2200      	movs	r2, #0
 800e390:	60da      	str	r2, [r3, #12]
 800e392:	e026      	b.n	800e3e2 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 800e394:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d022      	beq.n	800e3e2 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800e39c:	23f9      	movs	r3, #249	; 0xf9
 800e39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	60da      	str	r2, [r3, #12]
 800e3b0:	e017      	b.n	800e3e2 <lwip_netconn_do_writemore+0x2d6>
 800e3b2:	bf00      	nop
 800e3b4:	0801db2c 	.word	0x0801db2c
 800e3b8:	0801dc50 	.word	0x0801dc50
 800e3bc:	0801db84 	.word	0x0801db84
 800e3c0:	0801df30 	.word	0x0801df30
 800e3c4:	0801dc60 	.word	0x0801dc60
 800e3c8:	0801df50 	.word	0x0801df50
 800e3cc:	0801df68 	.word	0x0801df68
 800e3d0:	0801df9c 	.word	0x0801df9c
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3de:	2200      	movs	r2, #0
 800e3e0:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800e3e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d02c      	beq.n	800e444 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	330c      	adds	r3, #12
 800e3f2:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e3fc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2200      	movs	r2, #0
 800e40e:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00f      	beq.n	800e436 <lwip_netconn_do_writemore+0x32a>
 800e416:	f00a f997 	bl	8018748 <sys_arch_protect>
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e422:	f113 0f0c 	cmn.w	r3, #12
 800e426:	db03      	blt.n	800e430 <lwip_netconn_do_writemore+0x324>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e42e:	721a      	strb	r2, [r3, #8]
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f00a f997 	bl	8018764 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e436:	78fb      	ldrb	r3, [r7, #3]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d006      	beq.n	800e44a <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e43c:	6938      	ldr	r0, [r7, #16]
 800e43e:	f00a f8de 	bl	80185fe <sys_sem_signal>
 800e442:	e002      	b.n	800e44a <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e444:	f04f 33ff 	mov.w	r3, #4294967295
 800e448:	e000      	b.n	800e44c <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3728      	adds	r7, #40	; 0x28
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e468:	f113 0f0c 	cmn.w	r3, #12
 800e46c:	da06      	bge.n	800e47c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	711a      	strb	r2, [r3, #4]
 800e47a:	e072      	b.n	800e562 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e486:	2b10      	cmp	r3, #16
 800e488:	d168      	bne.n	800e55c <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	785b      	ldrb	r3, [r3, #1]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d003      	beq.n	800e49c <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	22fb      	movs	r2, #251	; 0xfb
 800e498:	711a      	strb	r2, [r3, #4]
 800e49a:	e062      	b.n	800e562 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d056      	beq.n	800e554 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d104      	bne.n	800e4c2 <lwip_netconn_do_write+0x6e>
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	6a1b      	ldr	r3, [r3, #32]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d006      	beq.n	800e4d0 <lwip_netconn_do_write+0x7c>
 800e4c2:	4b36      	ldr	r3, [pc, #216]	; (800e59c <lwip_netconn_do_write+0x148>)
 800e4c4:	f240 6283 	movw	r2, #1667	; 0x683
 800e4c8:	4935      	ldr	r1, [pc, #212]	; (800e5a0 <lwip_netconn_do_write+0x14c>)
 800e4ca:	4836      	ldr	r0, [pc, #216]	; (800e5a4 <lwip_netconn_do_write+0x150>)
 800e4cc:	f00c fcc0 	bl	801ae50 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d106      	bne.n	800e4e6 <lwip_netconn_do_write+0x92>
 800e4d8:	4b30      	ldr	r3, [pc, #192]	; (800e59c <lwip_netconn_do_write+0x148>)
 800e4da:	f240 6284 	movw	r2, #1668	; 0x684
 800e4de:	4932      	ldr	r1, [pc, #200]	; (800e5a8 <lwip_netconn_do_write+0x154>)
 800e4e0:	4830      	ldr	r0, [pc, #192]	; (800e5a4 <lwip_netconn_do_write+0x150>)
 800e4e2:	f00c fcb5 	bl	801ae50 <iprintf>
        msg->conn->current_msg = msg;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	68fa      	ldr	r2, [r7, #12]
 800e4ec:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7ff fe05 	bl	800e10c <lwip_netconn_do_writemore>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d044      	beq.n	800e592 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	785b      	ldrb	r3, [r3, #1]
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d006      	beq.n	800e520 <lwip_netconn_do_write+0xcc>
 800e512:	4b22      	ldr	r3, [pc, #136]	; (800e59c <lwip_netconn_do_write+0x148>)
 800e514:	f240 6289 	movw	r2, #1673	; 0x689
 800e518:	4924      	ldr	r1, [pc, #144]	; (800e5ac <lwip_netconn_do_write+0x158>)
 800e51a:	4822      	ldr	r0, [pc, #136]	; (800e5a4 <lwip_netconn_do_write+0x150>)
 800e51c:	f00c fc98 	bl	801ae50 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e520:	4823      	ldr	r0, [pc, #140]	; (800e5b0 <lwip_netconn_do_write+0x15c>)
 800e522:	f00a f8de 	bl	80186e2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	330c      	adds	r3, #12
 800e52c:	2100      	movs	r1, #0
 800e52e:	4618      	mov	r0, r3
 800e530:	f00a f834 	bl	801859c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e534:	481e      	ldr	r0, [pc, #120]	; (800e5b0 <lwip_netconn_do_write+0x15c>)
 800e536:	f00a f8c5 	bl	80186c4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	785b      	ldrb	r3, [r3, #1]
 800e540:	2b01      	cmp	r3, #1
 800e542:	d126      	bne.n	800e592 <lwip_netconn_do_write+0x13e>
 800e544:	4b15      	ldr	r3, [pc, #84]	; (800e59c <lwip_netconn_do_write+0x148>)
 800e546:	f240 628d 	movw	r2, #1677	; 0x68d
 800e54a:	4918      	ldr	r1, [pc, #96]	; (800e5ac <lwip_netconn_do_write+0x158>)
 800e54c:	4815      	ldr	r0, [pc, #84]	; (800e5a4 <lwip_netconn_do_write+0x150>)
 800e54e:	f00c fc7f 	bl	801ae50 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800e552:	e01e      	b.n	800e592 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	22f5      	movs	r2, #245	; 0xf5
 800e558:	711a      	strb	r2, [r3, #4]
 800e55a:	e002      	b.n	800e562 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	22fa      	movs	r2, #250	; 0xfa
 800e560:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d014      	beq.n	800e594 <lwip_netconn_do_write+0x140>
 800e56a:	f00a f8ed 	bl	8018748 <sys_arch_protect>
 800e56e:	60b8      	str	r0, [r7, #8]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e578:	f113 0f0c 	cmn.w	r3, #12
 800e57c:	db05      	blt.n	800e58a <lwip_netconn_do_write+0x136>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	68fa      	ldr	r2, [r7, #12]
 800e584:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e588:	721a      	strb	r2, [r3, #8]
 800e58a:	68b8      	ldr	r0, [r7, #8]
 800e58c:	f00a f8ea 	bl	8018764 <sys_arch_unprotect>
 800e590:	e000      	b.n	800e594 <lwip_netconn_do_write+0x140>
        return;
 800e592:	bf00      	nop
}
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	0801db2c 	.word	0x0801db2c
 800e5a0:	0801de74 	.word	0x0801de74
 800e5a4:	0801db84 	.word	0x0801db84
 800e5a8:	0801dfc8 	.word	0x0801dfc8
 800e5ac:	0801de90 	.word	0x0801de90
 800e5b0:	20012d10 	.word	0x20012d10

0800e5b4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b086      	sub	sp, #24
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	785b      	ldrb	r3, [r3, #1]
 800e5c6:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d06e      	beq.n	800e6b0 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e5dc:	2b10      	cmp	r3, #16
 800e5de:	d167      	bne.n	800e6b0 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e5e4:	2b03      	cmp	r3, #3
 800e5e6:	d002      	beq.n	800e5ee <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e5e8:	7cfb      	ldrb	r3, [r7, #19]
 800e5ea:	2b02      	cmp	r3, #2
 800e5ec:	d060      	beq.n	800e6b0 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e5ee:	7cfb      	ldrb	r3, [r7, #19]
 800e5f0:	2b03      	cmp	r3, #3
 800e5f2:	d103      	bne.n	800e5fc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	22f5      	movs	r2, #245	; 0xf5
 800e5f8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e5fa:	e05c      	b.n	800e6b6 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 800e5fc:	7cfb      	ldrb	r3, [r7, #19]
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d103      	bne.n	800e60a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	22fb      	movs	r2, #251	; 0xfb
 800e606:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e608:	e055      	b.n	800e6b6 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	7a1b      	ldrb	r3, [r3, #8]
 800e60e:	f003 0301 	and.w	r3, r3, #1
 800e612:	2b00      	cmp	r3, #0
 800e614:	d004      	beq.n	800e620 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff f90e 	bl	800d83c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e626:	2b00      	cmp	r3, #0
 800e628:	d104      	bne.n	800e634 <lwip_netconn_do_close+0x80>
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	6a1b      	ldr	r3, [r3, #32]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d006      	beq.n	800e642 <lwip_netconn_do_close+0x8e>
 800e634:	4b2e      	ldr	r3, [pc, #184]	; (800e6f0 <lwip_netconn_do_close+0x13c>)
 800e636:	f240 721c 	movw	r2, #1820	; 0x71c
 800e63a:	492e      	ldr	r1, [pc, #184]	; (800e6f4 <lwip_netconn_do_close+0x140>)
 800e63c:	482e      	ldr	r0, [pc, #184]	; (800e6f8 <lwip_netconn_do_close+0x144>)
 800e63e:	f00c fc07 	bl	801ae50 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2204      	movs	r2, #4
 800e648:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	697a      	ldr	r2, [r7, #20]
 800e650:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	2100      	movs	r1, #0
 800e658:	4618      	mov	r0, r3
 800e65a:	f7ff f96f 	bl	800d93c <lwip_netconn_do_close_internal>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	d040      	beq.n	800e6e6 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	785b      	ldrb	r3, [r3, #1]
 800e66a:	2b04      	cmp	r3, #4
 800e66c:	d006      	beq.n	800e67c <lwip_netconn_do_close+0xc8>
 800e66e:	4b20      	ldr	r3, [pc, #128]	; (800e6f0 <lwip_netconn_do_close+0x13c>)
 800e670:	f240 7221 	movw	r2, #1825	; 0x721
 800e674:	4921      	ldr	r1, [pc, #132]	; (800e6fc <lwip_netconn_do_close+0x148>)
 800e676:	4820      	ldr	r0, [pc, #128]	; (800e6f8 <lwip_netconn_do_close+0x144>)
 800e678:	f00c fbea 	bl	801ae50 <iprintf>
        UNLOCK_TCPIP_CORE();
 800e67c:	4820      	ldr	r0, [pc, #128]	; (800e700 <lwip_netconn_do_close+0x14c>)
 800e67e:	f00a f830 	bl	80186e2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	330c      	adds	r3, #12
 800e688:	2100      	movs	r1, #0
 800e68a:	4618      	mov	r0, r3
 800e68c:	f009 ff86 	bl	801859c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e690:	481b      	ldr	r0, [pc, #108]	; (800e700 <lwip_netconn_do_close+0x14c>)
 800e692:	f00a f817 	bl	80186c4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	785b      	ldrb	r3, [r3, #1]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d022      	beq.n	800e6e6 <lwip_netconn_do_close+0x132>
 800e6a0:	4b13      	ldr	r3, [pc, #76]	; (800e6f0 <lwip_netconn_do_close+0x13c>)
 800e6a2:	f240 7225 	movw	r2, #1829	; 0x725
 800e6a6:	4915      	ldr	r1, [pc, #84]	; (800e6fc <lwip_netconn_do_close+0x148>)
 800e6a8:	4813      	ldr	r0, [pc, #76]	; (800e6f8 <lwip_netconn_do_close+0x144>)
 800e6aa:	f00c fbd1 	bl	801ae50 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e6ae:	e01a      	b.n	800e6e6 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	22f5      	movs	r2, #245	; 0xf5
 800e6b4:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d014      	beq.n	800e6e8 <lwip_netconn_do_close+0x134>
 800e6be:	f00a f843 	bl	8018748 <sys_arch_protect>
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e6cc:	f113 0f0c 	cmn.w	r3, #12
 800e6d0:	db05      	blt.n	800e6de <lwip_netconn_do_close+0x12a>
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	697a      	ldr	r2, [r7, #20]
 800e6d8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800e6dc:	721a      	strb	r2, [r3, #8]
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f00a f840 	bl	8018764 <sys_arch_unprotect>
 800e6e4:	e000      	b.n	800e6e8 <lwip_netconn_do_close+0x134>
      return;
 800e6e6:	bf00      	nop
}
 800e6e8:	3718      	adds	r7, #24
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	0801db2c 	.word	0x0801db2c
 800e6f4:	0801de74 	.word	0x0801de74
 800e6f8:	0801db84 	.word	0x0801db84
 800e6fc:	0801de90 	.word	0x0801de90
 800e700:	20012d10 	.word	0x20012d10

0800e704 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d013      	beq.n	800e73a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d00b      	beq.n	800e732 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4618      	mov	r0, r3
 800e720:	f001 fb9a 	bl	800fe58 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2200      	movs	r2, #0
 800e728:	605a      	str	r2, [r3, #4]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	685a      	ldr	r2, [r3, #4]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e732:	6879      	ldr	r1, [r7, #4]
 800e734:	2006      	movs	r0, #6
 800e736:	f000 fe35 	bl	800f3a4 <memp_free>
  }
}
 800e73a:	bf00      	nop
 800e73c:	3708      	adds	r7, #8
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
	...

0800e744 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d108      	bne.n	800e768 <netbuf_data+0x24>
 800e756:	4b1b      	ldr	r3, [pc, #108]	; (800e7c4 <netbuf_data+0x80>)
 800e758:	22c2      	movs	r2, #194	; 0xc2
 800e75a:	491b      	ldr	r1, [pc, #108]	; (800e7c8 <netbuf_data+0x84>)
 800e75c:	481b      	ldr	r0, [pc, #108]	; (800e7cc <netbuf_data+0x88>)
 800e75e:	f00c fb77 	bl	801ae50 <iprintf>
 800e762:	f06f 030f 	mvn.w	r3, #15
 800e766:	e029      	b.n	800e7bc <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d108      	bne.n	800e780 <netbuf_data+0x3c>
 800e76e:	4b15      	ldr	r3, [pc, #84]	; (800e7c4 <netbuf_data+0x80>)
 800e770:	22c3      	movs	r2, #195	; 0xc3
 800e772:	4917      	ldr	r1, [pc, #92]	; (800e7d0 <netbuf_data+0x8c>)
 800e774:	4815      	ldr	r0, [pc, #84]	; (800e7cc <netbuf_data+0x88>)
 800e776:	f00c fb6b 	bl	801ae50 <iprintf>
 800e77a:	f06f 030f 	mvn.w	r3, #15
 800e77e:	e01d      	b.n	800e7bc <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d108      	bne.n	800e798 <netbuf_data+0x54>
 800e786:	4b0f      	ldr	r3, [pc, #60]	; (800e7c4 <netbuf_data+0x80>)
 800e788:	22c4      	movs	r2, #196	; 0xc4
 800e78a:	4912      	ldr	r1, [pc, #72]	; (800e7d4 <netbuf_data+0x90>)
 800e78c:	480f      	ldr	r0, [pc, #60]	; (800e7cc <netbuf_data+0x88>)
 800e78e:	f00c fb5f 	bl	801ae50 <iprintf>
 800e792:	f06f 030f 	mvn.w	r3, #15
 800e796:	e011      	b.n	800e7bc <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	685b      	ldr	r3, [r3, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d102      	bne.n	800e7a6 <netbuf_data+0x62>
    return ERR_BUF;
 800e7a0:	f06f 0301 	mvn.w	r3, #1
 800e7a4:	e00a      	b.n	800e7bc <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	685a      	ldr	r2, [r3, #4]
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	895a      	ldrh	r2, [r3, #10]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800e7ba:	2300      	movs	r3, #0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3710      	adds	r7, #16
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}
 800e7c4:	0801dff4 	.word	0x0801dff4
 800e7c8:	0801e0fc 	.word	0x0801e0fc
 800e7cc:	0801e044 	.word	0x0801e044
 800e7d0:	0801e118 	.word	0x0801e118
 800e7d4:	0801e138 	.word	0x0801e138

0800e7d8 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d108      	bne.n	800e7f8 <netbuf_next+0x20>
 800e7e6:	4b11      	ldr	r3, [pc, #68]	; (800e82c <netbuf_next+0x54>)
 800e7e8:	22dc      	movs	r2, #220	; 0xdc
 800e7ea:	4911      	ldr	r1, [pc, #68]	; (800e830 <netbuf_next+0x58>)
 800e7ec:	4811      	ldr	r0, [pc, #68]	; (800e834 <netbuf_next+0x5c>)
 800e7ee:	f00c fb2f 	bl	801ae50 <iprintf>
 800e7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f6:	e014      	b.n	800e822 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d102      	bne.n	800e808 <netbuf_next+0x30>
    return -1;
 800e802:	f04f 33ff 	mov.w	r3, #4294967295
 800e806:	e00c      	b.n	800e822 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d101      	bne.n	800e820 <netbuf_next+0x48>
    return 1;
 800e81c:	2301      	movs	r3, #1
 800e81e:	e000      	b.n	800e822 <netbuf_next+0x4a>
  }
  return 0;
 800e820:	2300      	movs	r3, #0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	0801dff4 	.word	0x0801dff4
 800e830:	0801e154 	.word	0x0801e154
 800e834:	0801e044 	.word	0x0801e044

0800e838 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800e840:	4b29      	ldr	r3, [pc, #164]	; (800e8e8 <tcpip_thread+0xb0>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d005      	beq.n	800e854 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800e848:	4b27      	ldr	r3, [pc, #156]	; (800e8e8 <tcpip_thread+0xb0>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a27      	ldr	r2, [pc, #156]	; (800e8ec <tcpip_thread+0xb4>)
 800e84e:	6812      	ldr	r2, [r2, #0]
 800e850:	4610      	mov	r0, r2
 800e852:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800e854:	4826      	ldr	r0, [pc, #152]	; (800e8f0 <tcpip_thread+0xb8>)
 800e856:	f009 ff35 	bl	80186c4 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800e85a:	4825      	ldr	r0, [pc, #148]	; (800e8f0 <tcpip_thread+0xb8>)
 800e85c:	f009 ff41 	bl	80186e2 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800e860:	f107 030c 	add.w	r3, r7, #12
 800e864:	4619      	mov	r1, r3
 800e866:	4823      	ldr	r0, [pc, #140]	; (800e8f4 <tcpip_thread+0xbc>)
 800e868:	f007 f8fc 	bl	8015a64 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e86c:	4820      	ldr	r0, [pc, #128]	; (800e8f0 <tcpip_thread+0xb8>)
 800e86e:	f009 ff29 	bl	80186c4 <sys_mutex_lock>
    if (msg == NULL) {
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d106      	bne.n	800e886 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e878:	4b1f      	ldr	r3, [pc, #124]	; (800e8f8 <tcpip_thread+0xc0>)
 800e87a:	2269      	movs	r2, #105	; 0x69
 800e87c:	491f      	ldr	r1, [pc, #124]	; (800e8fc <tcpip_thread+0xc4>)
 800e87e:	4820      	ldr	r0, [pc, #128]	; (800e900 <tcpip_thread+0xc8>)
 800e880:	f00c fae6 	bl	801ae50 <iprintf>
      continue;
 800e884:	e02f      	b.n	800e8e6 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	2b03      	cmp	r3, #3
 800e88c:	d011      	beq.n	800e8b2 <tcpip_thread+0x7a>
 800e88e:	2b04      	cmp	r3, #4
 800e890:	d01b      	beq.n	800e8ca <tcpip_thread+0x92>
 800e892:	2b02      	cmp	r3, #2
 800e894:	d120      	bne.n	800e8d8 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	68fa      	ldr	r2, [r7, #12]
 800e89c:	6850      	ldr	r0, [r2, #4]
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	6892      	ldr	r2, [r2, #8]
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	2009      	movs	r0, #9
 800e8ac:	f000 fd7a 	bl	800f3a4 <memp_free>
      break;
 800e8b0:	e019      	b.n	800e8e6 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	68fa      	ldr	r2, [r7, #12]
 800e8b8:	6892      	ldr	r2, [r2, #8]
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	2008      	movs	r0, #8
 800e8c4:	f000 fd6e 	bl	800f3a4 <memp_free>
      break;
 800e8c8:	e00d      	b.n	800e8e6 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	68fa      	ldr	r2, [r7, #12]
 800e8d0:	6892      	ldr	r2, [r2, #8]
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	4798      	blx	r3
      break;
 800e8d6:	e006      	b.n	800e8e6 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e8d8:	4b07      	ldr	r3, [pc, #28]	; (800e8f8 <tcpip_thread+0xc0>)
 800e8da:	229b      	movs	r2, #155	; 0x9b
 800e8dc:	4907      	ldr	r1, [pc, #28]	; (800e8fc <tcpip_thread+0xc4>)
 800e8de:	4808      	ldr	r0, [pc, #32]	; (800e900 <tcpip_thread+0xc8>)
 800e8e0:	f00c fab6 	bl	801ae50 <iprintf>
      break;
 800e8e4:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800e8e6:	e7b8      	b.n	800e85a <tcpip_thread+0x22>
 800e8e8:	2000c918 	.word	0x2000c918
 800e8ec:	2000c91c 	.word	0x2000c91c
 800e8f0:	20012d10 	.word	0x20012d10
 800e8f4:	2000c920 	.word	0x2000c920
 800e8f8:	0801e18c 	.word	0x0801e18c
 800e8fc:	0801e1bc 	.word	0x0801e1bc
 800e900:	0801e1dc 	.word	0x0801e1dc

0800e904 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b086      	sub	sp, #24
 800e908:	af00      	add	r7, sp, #0
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800e910:	481a      	ldr	r0, [pc, #104]	; (800e97c <tcpip_inpkt+0x78>)
 800e912:	f009 fdfd 	bl	8018510 <sys_mbox_valid>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d105      	bne.n	800e928 <tcpip_inpkt+0x24>
 800e91c:	4b18      	ldr	r3, [pc, #96]	; (800e980 <tcpip_inpkt+0x7c>)
 800e91e:	22b5      	movs	r2, #181	; 0xb5
 800e920:	4918      	ldr	r1, [pc, #96]	; (800e984 <tcpip_inpkt+0x80>)
 800e922:	4819      	ldr	r0, [pc, #100]	; (800e988 <tcpip_inpkt+0x84>)
 800e924:	f00c fa94 	bl	801ae50 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e928:	2009      	movs	r0, #9
 800e92a:	f000 fce9 	bl	800f300 <memp_malloc>
 800e92e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d102      	bne.n	800e93c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e936:	f04f 33ff 	mov.w	r3, #4294967295
 800e93a:	e01a      	b.n	800e972 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	2202      	movs	r2, #2
 800e940:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	68ba      	ldr	r2, [r7, #8]
 800e94c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800e954:	6979      	ldr	r1, [r7, #20]
 800e956:	4809      	ldr	r0, [pc, #36]	; (800e97c <tcpip_inpkt+0x78>)
 800e958:	f009 fd65 	bl	8018426 <sys_mbox_trypost>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d006      	beq.n	800e970 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e962:	6979      	ldr	r1, [r7, #20]
 800e964:	2009      	movs	r0, #9
 800e966:	f000 fd1d 	bl	800f3a4 <memp_free>
    return ERR_MEM;
 800e96a:	f04f 33ff 	mov.w	r3, #4294967295
 800e96e:	e000      	b.n	800e972 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e970:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e972:	4618      	mov	r0, r3
 800e974:	3718      	adds	r7, #24
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	2000c920 	.word	0x2000c920
 800e980:	0801e18c 	.word	0x0801e18c
 800e984:	0801e204 	.word	0x0801e204
 800e988:	0801e1dc 	.word	0x0801e1dc

0800e98c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e99c:	f003 0318 	and.w	r3, r3, #24
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d006      	beq.n	800e9b2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e9a4:	4a08      	ldr	r2, [pc, #32]	; (800e9c8 <tcpip_input+0x3c>)
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f7ff ffab 	bl	800e904 <tcpip_inpkt>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	e005      	b.n	800e9be <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800e9b2:	4a06      	ldr	r2, [pc, #24]	; (800e9cc <tcpip_input+0x40>)
 800e9b4:	6839      	ldr	r1, [r7, #0]
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f7ff ffa4 	bl	800e904 <tcpip_inpkt>
 800e9bc:	4603      	mov	r3, r0
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	080181dd 	.word	0x080181dd
 800e9cc:	080171a1 	.word	0x080171a1

0800e9d0 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	4613      	mov	r3, r2
 800e9dc:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800e9de:	481d      	ldr	r0, [pc, #116]	; (800ea54 <tcpip_callback_with_block+0x84>)
 800e9e0:	f009 fd96 	bl	8018510 <sys_mbox_valid>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d105      	bne.n	800e9f6 <tcpip_callback_with_block+0x26>
 800e9ea:	4b1b      	ldr	r3, [pc, #108]	; (800ea58 <tcpip_callback_with_block+0x88>)
 800e9ec:	22ee      	movs	r2, #238	; 0xee
 800e9ee:	491b      	ldr	r1, [pc, #108]	; (800ea5c <tcpip_callback_with_block+0x8c>)
 800e9f0:	481b      	ldr	r0, [pc, #108]	; (800ea60 <tcpip_callback_with_block+0x90>)
 800e9f2:	f00c fa2d 	bl	801ae50 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e9f6:	2008      	movs	r0, #8
 800e9f8:	f000 fc82 	bl	800f300 <memp_malloc>
 800e9fc:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d102      	bne.n	800ea0a <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800ea04:	f04f 33ff 	mov.w	r3, #4294967295
 800ea08:	e01f      	b.n	800ea4a <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	2203      	movs	r2, #3
 800ea0e:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	68ba      	ldr	r2, [r7, #8]
 800ea1a:	609a      	str	r2, [r3, #8]
  if (block) {
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d004      	beq.n	800ea2c <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800ea22:	6979      	ldr	r1, [r7, #20]
 800ea24:	480b      	ldr	r0, [pc, #44]	; (800ea54 <tcpip_callback_with_block+0x84>)
 800ea26:	f009 fce9 	bl	80183fc <sys_mbox_post>
 800ea2a:	e00d      	b.n	800ea48 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800ea2c:	6979      	ldr	r1, [r7, #20]
 800ea2e:	4809      	ldr	r0, [pc, #36]	; (800ea54 <tcpip_callback_with_block+0x84>)
 800ea30:	f009 fcf9 	bl	8018426 <sys_mbox_trypost>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d006      	beq.n	800ea48 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ea3a:	6979      	ldr	r1, [r7, #20]
 800ea3c:	2008      	movs	r0, #8
 800ea3e:	f000 fcb1 	bl	800f3a4 <memp_free>
      return ERR_MEM;
 800ea42:	f04f 33ff 	mov.w	r3, #4294967295
 800ea46:	e000      	b.n	800ea4a <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800ea48:	2300      	movs	r3, #0
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3718      	adds	r7, #24
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	2000c920 	.word	0x2000c920
 800ea58:	0801e18c 	.word	0x0801e18c
 800ea5c:	0801e204 	.word	0x0801e204
 800ea60:	0801e1dc 	.word	0x0801e1dc

0800ea64 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ea70:	4806      	ldr	r0, [pc, #24]	; (800ea8c <tcpip_send_msg_wait_sem+0x28>)
 800ea72:	f009 fe27 	bl	80186c4 <sys_mutex_lock>
  fn(apimsg);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	68b8      	ldr	r0, [r7, #8]
 800ea7a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ea7c:	4803      	ldr	r0, [pc, #12]	; (800ea8c <tcpip_send_msg_wait_sem+0x28>)
 800ea7e:	f009 fe30 	bl	80186e2 <sys_mutex_unlock>
  return ERR_OK;
 800ea82:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3710      	adds	r7, #16
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	20012d10 	.word	0x20012d10

0800ea90 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af02      	add	r7, sp, #8
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ea9a:	f000 f86a 	bl	800eb72 <lwip_init>

  tcpip_init_done = initfunc;
 800ea9e:	4a17      	ldr	r2, [pc, #92]	; (800eafc <tcpip_init+0x6c>)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800eaa4:	4a16      	ldr	r2, [pc, #88]	; (800eb00 <tcpip_init+0x70>)
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800eaaa:	2106      	movs	r1, #6
 800eaac:	4815      	ldr	r0, [pc, #84]	; (800eb04 <tcpip_init+0x74>)
 800eaae:	f009 fc71 	bl	8018394 <sys_mbox_new>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d006      	beq.n	800eac6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800eab8:	4b13      	ldr	r3, [pc, #76]	; (800eb08 <tcpip_init+0x78>)
 800eaba:	f240 12d5 	movw	r2, #469	; 0x1d5
 800eabe:	4913      	ldr	r1, [pc, #76]	; (800eb0c <tcpip_init+0x7c>)
 800eac0:	4813      	ldr	r0, [pc, #76]	; (800eb10 <tcpip_init+0x80>)
 800eac2:	f00c f9c5 	bl	801ae50 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800eac6:	4813      	ldr	r0, [pc, #76]	; (800eb14 <tcpip_init+0x84>)
 800eac8:	f009 fde0 	bl	801868c <sys_mutex_new>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d006      	beq.n	800eae0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ead2:	4b0d      	ldr	r3, [pc, #52]	; (800eb08 <tcpip_init+0x78>)
 800ead4:	f240 12d9 	movw	r2, #473	; 0x1d9
 800ead8:	490f      	ldr	r1, [pc, #60]	; (800eb18 <tcpip_init+0x88>)
 800eada:	480d      	ldr	r0, [pc, #52]	; (800eb10 <tcpip_init+0x80>)
 800eadc:	f00c f9b8 	bl	801ae50 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800eae0:	2300      	movs	r3, #0
 800eae2:	9300      	str	r3, [sp, #0]
 800eae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eae8:	2200      	movs	r2, #0
 800eaea:	490c      	ldr	r1, [pc, #48]	; (800eb1c <tcpip_init+0x8c>)
 800eaec:	480c      	ldr	r0, [pc, #48]	; (800eb20 <tcpip_init+0x90>)
 800eaee:	f009 fe05 	bl	80186fc <sys_thread_new>
}
 800eaf2:	bf00      	nop
 800eaf4:	3708      	adds	r7, #8
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	2000c918 	.word	0x2000c918
 800eb00:	2000c91c 	.word	0x2000c91c
 800eb04:	2000c920 	.word	0x2000c920
 800eb08:	0801e18c 	.word	0x0801e18c
 800eb0c:	0801e214 	.word	0x0801e214
 800eb10:	0801e1dc 	.word	0x0801e1dc
 800eb14:	20012d10 	.word	0x20012d10
 800eb18:	0801e238 	.word	0x0801e238
 800eb1c:	0800e839 	.word	0x0800e839
 800eb20:	0801e25c 	.word	0x0801e25c

0800eb24 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800eb24:	b480      	push	{r7}
 800eb26:	b083      	sub	sp, #12
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800eb2e:	88fb      	ldrh	r3, [r7, #6]
 800eb30:	ba5b      	rev16	r3, r3
 800eb32:	b29b      	uxth	r3, r3
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b083      	sub	sp, #12
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	061a      	lsls	r2, r3, #24
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	021b      	lsls	r3, r3, #8
 800eb50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb54:	431a      	orrs	r2, r3
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	0a1b      	lsrs	r3, r3, #8
 800eb5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb5e:	431a      	orrs	r2, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	0e1b      	lsrs	r3, r3, #24
 800eb64:	4313      	orrs	r3, r2
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b082      	sub	sp, #8
 800eb76:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800eb7c:	f009 fd78 	bl	8018670 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800eb80:	f000 f8a6 	bl	800ecd0 <mem_init>
  memp_init();
 800eb84:	f000 fb70 	bl	800f268 <memp_init>
  pbuf_init();
  netif_init();
 800eb88:	f000 fc36 	bl	800f3f8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800eb8c:	f006 ff90 	bl	8015ab0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800eb90:	f001 fbd8 	bl	8010344 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800eb94:	f006 fe22 	bl	80157dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800eb98:	bf00      	nop
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b084      	sub	sp, #16
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800eba8:	4b40      	ldr	r3, [pc, #256]	; (800ecac <plug_holes+0x10c>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d206      	bcs.n	800ebc0 <plug_holes+0x20>
 800ebb2:	4b3f      	ldr	r3, [pc, #252]	; (800ecb0 <plug_holes+0x110>)
 800ebb4:	f240 125d 	movw	r2, #349	; 0x15d
 800ebb8:	493e      	ldr	r1, [pc, #248]	; (800ecb4 <plug_holes+0x114>)
 800ebba:	483f      	ldr	r0, [pc, #252]	; (800ecb8 <plug_holes+0x118>)
 800ebbc:	f00c f948 	bl	801ae50 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ebc0:	4b3e      	ldr	r3, [pc, #248]	; (800ecbc <plug_holes+0x11c>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d306      	bcc.n	800ebd8 <plug_holes+0x38>
 800ebca:	4b39      	ldr	r3, [pc, #228]	; (800ecb0 <plug_holes+0x110>)
 800ebcc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ebd0:	493b      	ldr	r1, [pc, #236]	; (800ecc0 <plug_holes+0x120>)
 800ebd2:	4839      	ldr	r0, [pc, #228]	; (800ecb8 <plug_holes+0x118>)
 800ebd4:	f00c f93c 	bl	801ae50 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	791b      	ldrb	r3, [r3, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d006      	beq.n	800ebee <plug_holes+0x4e>
 800ebe0:	4b33      	ldr	r3, [pc, #204]	; (800ecb0 <plug_holes+0x110>)
 800ebe2:	f240 125f 	movw	r2, #351	; 0x15f
 800ebe6:	4937      	ldr	r1, [pc, #220]	; (800ecc4 <plug_holes+0x124>)
 800ebe8:	4833      	ldr	r0, [pc, #204]	; (800ecb8 <plug_holes+0x118>)
 800ebea:	f00c f931 	bl	801ae50 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	881b      	ldrh	r3, [r3, #0]
 800ebf2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ebf6:	d906      	bls.n	800ec06 <plug_holes+0x66>
 800ebf8:	4b2d      	ldr	r3, [pc, #180]	; (800ecb0 <plug_holes+0x110>)
 800ebfa:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800ebfe:	4932      	ldr	r1, [pc, #200]	; (800ecc8 <plug_holes+0x128>)
 800ec00:	482d      	ldr	r0, [pc, #180]	; (800ecb8 <plug_holes+0x118>)
 800ec02:	f00c f925 	bl	801ae50 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800ec06:	4b29      	ldr	r3, [pc, #164]	; (800ecac <plug_holes+0x10c>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	8812      	ldrh	r2, [r2, #0]
 800ec0e:	4413      	add	r3, r2
 800ec10:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d01f      	beq.n	800ec5a <plug_holes+0xba>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	791b      	ldrb	r3, [r3, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d11b      	bne.n	800ec5a <plug_holes+0xba>
 800ec22:	4b26      	ldr	r3, [pc, #152]	; (800ecbc <plug_holes+0x11c>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68fa      	ldr	r2, [r7, #12]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d016      	beq.n	800ec5a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ec2c:	4b27      	ldr	r3, [pc, #156]	; (800eccc <plug_holes+0x12c>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d102      	bne.n	800ec3c <plug_holes+0x9c>
      lfree = mem;
 800ec36:	4a25      	ldr	r2, [pc, #148]	; (800eccc <plug_holes+0x12c>)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	881a      	ldrh	r2, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	4a19      	ldr	r2, [pc, #100]	; (800ecac <plug_holes+0x10c>)
 800ec48:	6812      	ldr	r2, [r2, #0]
 800ec4a:	1a99      	subs	r1, r3, r2
 800ec4c:	4b17      	ldr	r3, [pc, #92]	; (800ecac <plug_holes+0x10c>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	8812      	ldrh	r2, [r2, #0]
 800ec54:	4413      	add	r3, r2
 800ec56:	b28a      	uxth	r2, r1
 800ec58:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800ec5a:	4b14      	ldr	r3, [pc, #80]	; (800ecac <plug_holes+0x10c>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	8852      	ldrh	r2, [r2, #2]
 800ec62:	4413      	add	r3, r2
 800ec64:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ec66:	68ba      	ldr	r2, [r7, #8]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d01a      	beq.n	800eca4 <plug_holes+0x104>
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	791b      	ldrb	r3, [r3, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d116      	bne.n	800eca4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ec76:	4b15      	ldr	r3, [pc, #84]	; (800eccc <plug_holes+0x12c>)
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	687a      	ldr	r2, [r7, #4]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d102      	bne.n	800ec86 <plug_holes+0xe6>
      lfree = pmem;
 800ec80:	4a12      	ldr	r2, [pc, #72]	; (800eccc <plug_holes+0x12c>)
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	881a      	ldrh	r2, [r3, #0]
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	4a06      	ldr	r2, [pc, #24]	; (800ecac <plug_holes+0x10c>)
 800ec92:	6812      	ldr	r2, [r2, #0]
 800ec94:	1a99      	subs	r1, r3, r2
 800ec96:	4b05      	ldr	r3, [pc, #20]	; (800ecac <plug_holes+0x10c>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	8812      	ldrh	r2, [r2, #0]
 800ec9e:	4413      	add	r3, r2
 800eca0:	b28a      	uxth	r2, r1
 800eca2:	805a      	strh	r2, [r3, #2]
  }
}
 800eca4:	bf00      	nop
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	2000c924 	.word	0x2000c924
 800ecb0:	0801e26c 	.word	0x0801e26c
 800ecb4:	0801e29c 	.word	0x0801e29c
 800ecb8:	0801e2b4 	.word	0x0801e2b4
 800ecbc:	2000c928 	.word	0x2000c928
 800ecc0:	0801e2dc 	.word	0x0801e2dc
 800ecc4:	0801e2f8 	.word	0x0801e2f8
 800ecc8:	0801e314 	.word	0x0801e314
 800eccc:	2000c92c 	.word	0x2000c92c

0800ecd0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ecd6:	4b1e      	ldr	r3, [pc, #120]	; (800ed50 <mem_init+0x80>)
 800ecd8:	3303      	adds	r3, #3
 800ecda:	f023 0303 	bic.w	r3, r3, #3
 800ecde:	461a      	mov	r2, r3
 800ece0:	4b1c      	ldr	r3, [pc, #112]	; (800ed54 <mem_init+0x84>)
 800ece2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ece4:	4b1b      	ldr	r3, [pc, #108]	; (800ed54 <mem_init+0x84>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ecf0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ecfe:	4b15      	ldr	r3, [pc, #84]	; (800ed54 <mem_init+0x84>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800ed06:	4a14      	ldr	r2, [pc, #80]	; (800ed58 <mem_init+0x88>)
 800ed08:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ed0a:	4b13      	ldr	r3, [pc, #76]	; (800ed58 <mem_init+0x88>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ed12:	4b11      	ldr	r3, [pc, #68]	; (800ed58 <mem_init+0x88>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ed1a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ed1c:	4b0e      	ldr	r3, [pc, #56]	; (800ed58 <mem_init+0x88>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ed24:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ed26:	4b0b      	ldr	r3, [pc, #44]	; (800ed54 <mem_init+0x84>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a0c      	ldr	r2, [pc, #48]	; (800ed5c <mem_init+0x8c>)
 800ed2c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ed2e:	480c      	ldr	r0, [pc, #48]	; (800ed60 <mem_init+0x90>)
 800ed30:	f009 fcac 	bl	801868c <sys_mutex_new>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d006      	beq.n	800ed48 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ed3a:	4b0a      	ldr	r3, [pc, #40]	; (800ed64 <mem_init+0x94>)
 800ed3c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ed40:	4909      	ldr	r1, [pc, #36]	; (800ed68 <mem_init+0x98>)
 800ed42:	480a      	ldr	r0, [pc, #40]	; (800ed6c <mem_init+0x9c>)
 800ed44:	f00c f884 	bl	801ae50 <iprintf>
  }
}
 800ed48:	bf00      	nop
 800ed4a:	3708      	adds	r7, #8
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}
 800ed50:	20012d2c 	.word	0x20012d2c
 800ed54:	2000c924 	.word	0x2000c924
 800ed58:	2000c928 	.word	0x2000c928
 800ed5c:	2000c92c 	.word	0x2000c92c
 800ed60:	2000c930 	.word	0x2000c930
 800ed64:	0801e26c 	.word	0x0801e26c
 800ed68:	0801e340 	.word	0x0801e340
 800ed6c:	0801e2b4 	.word	0x0801e2b4

0800ed70 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b084      	sub	sp, #16
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d050      	beq.n	800ee20 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f003 0303 	and.w	r3, r3, #3
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d006      	beq.n	800ed96 <mem_free+0x26>
 800ed88:	4b27      	ldr	r3, [pc, #156]	; (800ee28 <mem_free+0xb8>)
 800ed8a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800ed8e:	4927      	ldr	r1, [pc, #156]	; (800ee2c <mem_free+0xbc>)
 800ed90:	4827      	ldr	r0, [pc, #156]	; (800ee30 <mem_free+0xc0>)
 800ed92:	f00c f85d 	bl	801ae50 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ed96:	4b27      	ldr	r3, [pc, #156]	; (800ee34 <mem_free+0xc4>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d304      	bcc.n	800edaa <mem_free+0x3a>
 800eda0:	4b25      	ldr	r3, [pc, #148]	; (800ee38 <mem_free+0xc8>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d306      	bcc.n	800edb8 <mem_free+0x48>
 800edaa:	4b1f      	ldr	r3, [pc, #124]	; (800ee28 <mem_free+0xb8>)
 800edac:	f240 12af 	movw	r2, #431	; 0x1af
 800edb0:	4922      	ldr	r1, [pc, #136]	; (800ee3c <mem_free+0xcc>)
 800edb2:	481f      	ldr	r0, [pc, #124]	; (800ee30 <mem_free+0xc0>)
 800edb4:	f00c f84c 	bl	801ae50 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800edb8:	4b1e      	ldr	r3, [pc, #120]	; (800ee34 <mem_free+0xc4>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d304      	bcc.n	800edcc <mem_free+0x5c>
 800edc2:	4b1d      	ldr	r3, [pc, #116]	; (800ee38 <mem_free+0xc8>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d306      	bcc.n	800edda <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800edcc:	f009 fcbc 	bl	8018748 <sys_arch_protect>
 800edd0:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800edd2:	68b8      	ldr	r0, [r7, #8]
 800edd4:	f009 fcc6 	bl	8018764 <sys_arch_unprotect>
    return;
 800edd8:	e023      	b.n	800ee22 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800edda:	4819      	ldr	r0, [pc, #100]	; (800ee40 <mem_free+0xd0>)
 800eddc:	f009 fc72 	bl	80186c4 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	3b08      	subs	r3, #8
 800ede4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	791b      	ldrb	r3, [r3, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d106      	bne.n	800edfc <mem_free+0x8c>
 800edee:	4b0e      	ldr	r3, [pc, #56]	; (800ee28 <mem_free+0xb8>)
 800edf0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800edf4:	4913      	ldr	r1, [pc, #76]	; (800ee44 <mem_free+0xd4>)
 800edf6:	480e      	ldr	r0, [pc, #56]	; (800ee30 <mem_free+0xc0>)
 800edf8:	f00c f82a 	bl	801ae50 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2200      	movs	r2, #0
 800ee00:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ee02:	4b11      	ldr	r3, [pc, #68]	; (800ee48 <mem_free+0xd8>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	68fa      	ldr	r2, [r7, #12]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d202      	bcs.n	800ee12 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ee0c:	4a0e      	ldr	r2, [pc, #56]	; (800ee48 <mem_free+0xd8>)
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ee12:	68f8      	ldr	r0, [r7, #12]
 800ee14:	f7ff fec4 	bl	800eba0 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ee18:	4809      	ldr	r0, [pc, #36]	; (800ee40 <mem_free+0xd0>)
 800ee1a:	f009 fc62 	bl	80186e2 <sys_mutex_unlock>
 800ee1e:	e000      	b.n	800ee22 <mem_free+0xb2>
    return;
 800ee20:	bf00      	nop
}
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}
 800ee28:	0801e26c 	.word	0x0801e26c
 800ee2c:	0801e35c 	.word	0x0801e35c
 800ee30:	0801e2b4 	.word	0x0801e2b4
 800ee34:	2000c924 	.word	0x2000c924
 800ee38:	2000c928 	.word	0x2000c928
 800ee3c:	0801e380 	.word	0x0801e380
 800ee40:	2000c930 	.word	0x2000c930
 800ee44:	0801e398 	.word	0x0801e398
 800ee48:	2000c92c 	.word	0x2000c92c

0800ee4c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b088      	sub	sp, #32
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	460b      	mov	r3, r1
 800ee56:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ee58:	887b      	ldrh	r3, [r7, #2]
 800ee5a:	3303      	adds	r3, #3
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	f023 0303 	bic.w	r3, r3, #3
 800ee62:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800ee64:	887b      	ldrh	r3, [r7, #2]
 800ee66:	2b0b      	cmp	r3, #11
 800ee68:	d801      	bhi.n	800ee6e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ee6a:	230c      	movs	r3, #12
 800ee6c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800ee6e:	887b      	ldrh	r3, [r7, #2]
 800ee70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ee74:	d901      	bls.n	800ee7a <mem_trim+0x2e>
    return NULL;
 800ee76:	2300      	movs	r3, #0
 800ee78:	e0bd      	b.n	800eff6 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ee7a:	4b61      	ldr	r3, [pc, #388]	; (800f000 <mem_trim+0x1b4>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	687a      	ldr	r2, [r7, #4]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d304      	bcc.n	800ee8e <mem_trim+0x42>
 800ee84:	4b5f      	ldr	r3, [pc, #380]	; (800f004 <mem_trim+0x1b8>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d306      	bcc.n	800ee9c <mem_trim+0x50>
 800ee8e:	4b5e      	ldr	r3, [pc, #376]	; (800f008 <mem_trim+0x1bc>)
 800ee90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ee94:	495d      	ldr	r1, [pc, #372]	; (800f00c <mem_trim+0x1c0>)
 800ee96:	485e      	ldr	r0, [pc, #376]	; (800f010 <mem_trim+0x1c4>)
 800ee98:	f00b ffda 	bl	801ae50 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ee9c:	4b58      	ldr	r3, [pc, #352]	; (800f000 <mem_trim+0x1b4>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d304      	bcc.n	800eeb0 <mem_trim+0x64>
 800eea6:	4b57      	ldr	r3, [pc, #348]	; (800f004 <mem_trim+0x1b8>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d307      	bcc.n	800eec0 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800eeb0:	f009 fc4a 	bl	8018748 <sys_arch_protect>
 800eeb4:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	f009 fc54 	bl	8018764 <sys_arch_unprotect>
    return rmem;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	e09a      	b.n	800eff6 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	3b08      	subs	r3, #8
 800eec4:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	4a4d      	ldr	r2, [pc, #308]	; (800f000 <mem_trim+0x1b4>)
 800eeca:	6812      	ldr	r2, [r2, #0]
 800eecc:	1a9b      	subs	r3, r3, r2
 800eece:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	881a      	ldrh	r2, [r3, #0]
 800eed4:	8b7b      	ldrh	r3, [r7, #26]
 800eed6:	1ad3      	subs	r3, r2, r3
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	3b08      	subs	r3, #8
 800eedc:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800eede:	887a      	ldrh	r2, [r7, #2]
 800eee0:	8b3b      	ldrh	r3, [r7, #24]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d906      	bls.n	800eef4 <mem_trim+0xa8>
 800eee6:	4b48      	ldr	r3, [pc, #288]	; (800f008 <mem_trim+0x1bc>)
 800eee8:	f240 2206 	movw	r2, #518	; 0x206
 800eeec:	4949      	ldr	r1, [pc, #292]	; (800f014 <mem_trim+0x1c8>)
 800eeee:	4848      	ldr	r0, [pc, #288]	; (800f010 <mem_trim+0x1c4>)
 800eef0:	f00b ffae 	bl	801ae50 <iprintf>
  if (newsize > size) {
 800eef4:	887a      	ldrh	r2, [r7, #2]
 800eef6:	8b3b      	ldrh	r3, [r7, #24]
 800eef8:	429a      	cmp	r2, r3
 800eefa:	d901      	bls.n	800ef00 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800eefc:	2300      	movs	r3, #0
 800eefe:	e07a      	b.n	800eff6 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800ef00:	887a      	ldrh	r2, [r7, #2]
 800ef02:	8b3b      	ldrh	r3, [r7, #24]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d101      	bne.n	800ef0c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	e074      	b.n	800eff6 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ef0c:	4842      	ldr	r0, [pc, #264]	; (800f018 <mem_trim+0x1cc>)
 800ef0e:	f009 fbd9 	bl	80186c4 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800ef12:	4b3b      	ldr	r3, [pc, #236]	; (800f000 <mem_trim+0x1b4>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	69fa      	ldr	r2, [r7, #28]
 800ef18:	8812      	ldrh	r2, [r2, #0]
 800ef1a:	4413      	add	r3, r2
 800ef1c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	791b      	ldrb	r3, [r3, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d131      	bne.n	800ef8a <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	881b      	ldrh	r3, [r3, #0]
 800ef2a:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ef2c:	8b7a      	ldrh	r2, [r7, #26]
 800ef2e:	887b      	ldrh	r3, [r7, #2]
 800ef30:	4413      	add	r3, r2
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	3308      	adds	r3, #8
 800ef36:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800ef38:	4b38      	ldr	r3, [pc, #224]	; (800f01c <mem_trim+0x1d0>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	697a      	ldr	r2, [r7, #20]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d105      	bne.n	800ef4e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800ef42:	4b2f      	ldr	r3, [pc, #188]	; (800f000 <mem_trim+0x1b4>)
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	8a7b      	ldrh	r3, [r7, #18]
 800ef48:	4413      	add	r3, r2
 800ef4a:	4a34      	ldr	r2, [pc, #208]	; (800f01c <mem_trim+0x1d0>)
 800ef4c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ef4e:	4b2c      	ldr	r3, [pc, #176]	; (800f000 <mem_trim+0x1b4>)
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	8a7b      	ldrh	r3, [r7, #18]
 800ef54:	4413      	add	r3, r2
 800ef56:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	8a3a      	ldrh	r2, [r7, #16]
 800ef62:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	8b7a      	ldrh	r2, [r7, #26]
 800ef68:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ef6a:	69fb      	ldr	r3, [r7, #28]
 800ef6c:	8a7a      	ldrh	r2, [r7, #18]
 800ef6e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ef70:	697b      	ldr	r3, [r7, #20]
 800ef72:	881b      	ldrh	r3, [r3, #0]
 800ef74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef78:	d039      	beq.n	800efee <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ef7a:	4b21      	ldr	r3, [pc, #132]	; (800f000 <mem_trim+0x1b4>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	697a      	ldr	r2, [r7, #20]
 800ef80:	8812      	ldrh	r2, [r2, #0]
 800ef82:	4413      	add	r3, r2
 800ef84:	8a7a      	ldrh	r2, [r7, #18]
 800ef86:	805a      	strh	r2, [r3, #2]
 800ef88:	e031      	b.n	800efee <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ef8a:	887b      	ldrh	r3, [r7, #2]
 800ef8c:	f103 0214 	add.w	r2, r3, #20
 800ef90:	8b3b      	ldrh	r3, [r7, #24]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d82b      	bhi.n	800efee <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ef96:	8b7a      	ldrh	r2, [r7, #26]
 800ef98:	887b      	ldrh	r3, [r7, #2]
 800ef9a:	4413      	add	r3, r2
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	3308      	adds	r3, #8
 800efa0:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800efa2:	4b17      	ldr	r3, [pc, #92]	; (800f000 <mem_trim+0x1b4>)
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	8a7b      	ldrh	r3, [r7, #18]
 800efa8:	4413      	add	r3, r2
 800efaa:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800efac:	4b1b      	ldr	r3, [pc, #108]	; (800f01c <mem_trim+0x1d0>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	697a      	ldr	r2, [r7, #20]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d202      	bcs.n	800efbc <mem_trim+0x170>
      lfree = mem2;
 800efb6:	4a19      	ldr	r2, [pc, #100]	; (800f01c <mem_trim+0x1d0>)
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	2200      	movs	r2, #0
 800efc0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800efc2:	69fb      	ldr	r3, [r7, #28]
 800efc4:	881a      	ldrh	r2, [r3, #0]
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	8b7a      	ldrh	r2, [r7, #26]
 800efce:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	8a7a      	ldrh	r2, [r7, #18]
 800efd4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	881b      	ldrh	r3, [r3, #0]
 800efda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800efde:	d006      	beq.n	800efee <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800efe0:	4b07      	ldr	r3, [pc, #28]	; (800f000 <mem_trim+0x1b4>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	697a      	ldr	r2, [r7, #20]
 800efe6:	8812      	ldrh	r2, [r2, #0]
 800efe8:	4413      	add	r3, r2
 800efea:	8a7a      	ldrh	r2, [r7, #18]
 800efec:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800efee:	480a      	ldr	r0, [pc, #40]	; (800f018 <mem_trim+0x1cc>)
 800eff0:	f009 fb77 	bl	80186e2 <sys_mutex_unlock>
  return rmem;
 800eff4:	687b      	ldr	r3, [r7, #4]
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3720      	adds	r7, #32
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	2000c924 	.word	0x2000c924
 800f004:	2000c928 	.word	0x2000c928
 800f008:	0801e26c 	.word	0x0801e26c
 800f00c:	0801e3ac 	.word	0x0801e3ac
 800f010:	0801e2b4 	.word	0x0801e2b4
 800f014:	0801e3c4 	.word	0x0801e3c4
 800f018:	2000c930 	.word	0x2000c930
 800f01c:	2000c92c 	.word	0x2000c92c

0800f020 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b088      	sub	sp, #32
 800f024:	af00      	add	r7, sp, #0
 800f026:	4603      	mov	r3, r0
 800f028:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800f02a:	88fb      	ldrh	r3, [r7, #6]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d101      	bne.n	800f034 <mem_malloc+0x14>
    return NULL;
 800f030:	2300      	movs	r3, #0
 800f032:	e0d1      	b.n	800f1d8 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800f034:	88fb      	ldrh	r3, [r7, #6]
 800f036:	3303      	adds	r3, #3
 800f038:	b29b      	uxth	r3, r3
 800f03a:	f023 0303 	bic.w	r3, r3, #3
 800f03e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800f040:	88fb      	ldrh	r3, [r7, #6]
 800f042:	2b0b      	cmp	r3, #11
 800f044:	d801      	bhi.n	800f04a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f046:	230c      	movs	r3, #12
 800f048:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800f04a:	88fb      	ldrh	r3, [r7, #6]
 800f04c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f050:	d901      	bls.n	800f056 <mem_malloc+0x36>
    return NULL;
 800f052:	2300      	movs	r3, #0
 800f054:	e0c0      	b.n	800f1d8 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f056:	4862      	ldr	r0, [pc, #392]	; (800f1e0 <mem_malloc+0x1c0>)
 800f058:	f009 fb34 	bl	80186c4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f05c:	4b61      	ldr	r3, [pc, #388]	; (800f1e4 <mem_malloc+0x1c4>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	461a      	mov	r2, r3
 800f062:	4b61      	ldr	r3, [pc, #388]	; (800f1e8 <mem_malloc+0x1c8>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	1ad3      	subs	r3, r2, r3
 800f068:	83fb      	strh	r3, [r7, #30]
 800f06a:	e0aa      	b.n	800f1c2 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800f06c:	4b5e      	ldr	r3, [pc, #376]	; (800f1e8 <mem_malloc+0x1c8>)
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	8bfb      	ldrh	r3, [r7, #30]
 800f072:	4413      	add	r3, r2
 800f074:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	791b      	ldrb	r3, [r3, #4]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	f040 809b 	bne.w	800f1b6 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	881b      	ldrh	r3, [r3, #0]
 800f084:	461a      	mov	r2, r3
 800f086:	8bfb      	ldrh	r3, [r7, #30]
 800f088:	1ad3      	subs	r3, r2, r3
 800f08a:	f1a3 0208 	sub.w	r2, r3, #8
 800f08e:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800f090:	429a      	cmp	r2, r3
 800f092:	f0c0 8090 	bcc.w	800f1b6 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	881b      	ldrh	r3, [r3, #0]
 800f09a:	461a      	mov	r2, r3
 800f09c:	8bfb      	ldrh	r3, [r7, #30]
 800f09e:	1ad3      	subs	r3, r2, r3
 800f0a0:	f1a3 0208 	sub.w	r2, r3, #8
 800f0a4:	88fb      	ldrh	r3, [r7, #6]
 800f0a6:	3314      	adds	r3, #20
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d327      	bcc.n	800f0fc <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800f0ac:	8bfa      	ldrh	r2, [r7, #30]
 800f0ae:	88fb      	ldrh	r3, [r7, #6]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	3308      	adds	r3, #8
 800f0b6:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800f0b8:	4b4b      	ldr	r3, [pc, #300]	; (800f1e8 <mem_malloc+0x1c8>)
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	8a7b      	ldrh	r3, [r7, #18]
 800f0be:	4413      	add	r3, r2
 800f0c0:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	881a      	ldrh	r2, [r3, #0]
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	8bfa      	ldrh	r2, [r7, #30]
 800f0d4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	8a7a      	ldrh	r2, [r7, #18]
 800f0da:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f0ea:	d00a      	beq.n	800f102 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f0ec:	4b3e      	ldr	r3, [pc, #248]	; (800f1e8 <mem_malloc+0x1c8>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	68fa      	ldr	r2, [r7, #12]
 800f0f2:	8812      	ldrh	r2, [r2, #0]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	8a7a      	ldrh	r2, [r7, #18]
 800f0f8:	805a      	strh	r2, [r3, #2]
 800f0fa:	e002      	b.n	800f102 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	2201      	movs	r2, #1
 800f100:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f102:	4b38      	ldr	r3, [pc, #224]	; (800f1e4 <mem_malloc+0x1c4>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	697a      	ldr	r2, [r7, #20]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d127      	bne.n	800f15c <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800f10c:	4b35      	ldr	r3, [pc, #212]	; (800f1e4 <mem_malloc+0x1c4>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f112:	e005      	b.n	800f120 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800f114:	4b34      	ldr	r3, [pc, #208]	; (800f1e8 <mem_malloc+0x1c8>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	69ba      	ldr	r2, [r7, #24]
 800f11a:	8812      	ldrh	r2, [r2, #0]
 800f11c:	4413      	add	r3, r2
 800f11e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f120:	69bb      	ldr	r3, [r7, #24]
 800f122:	791b      	ldrb	r3, [r3, #4]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d004      	beq.n	800f132 <mem_malloc+0x112>
 800f128:	4b30      	ldr	r3, [pc, #192]	; (800f1ec <mem_malloc+0x1cc>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	69ba      	ldr	r2, [r7, #24]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d1f0      	bne.n	800f114 <mem_malloc+0xf4>
          }
          lfree = cur;
 800f132:	4a2c      	ldr	r2, [pc, #176]	; (800f1e4 <mem_malloc+0x1c4>)
 800f134:	69bb      	ldr	r3, [r7, #24]
 800f136:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f138:	4b2a      	ldr	r3, [pc, #168]	; (800f1e4 <mem_malloc+0x1c4>)
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	4b2b      	ldr	r3, [pc, #172]	; (800f1ec <mem_malloc+0x1cc>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	429a      	cmp	r2, r3
 800f142:	d00b      	beq.n	800f15c <mem_malloc+0x13c>
 800f144:	4b27      	ldr	r3, [pc, #156]	; (800f1e4 <mem_malloc+0x1c4>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	791b      	ldrb	r3, [r3, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d006      	beq.n	800f15c <mem_malloc+0x13c>
 800f14e:	4b28      	ldr	r3, [pc, #160]	; (800f1f0 <mem_malloc+0x1d0>)
 800f150:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f154:	4927      	ldr	r1, [pc, #156]	; (800f1f4 <mem_malloc+0x1d4>)
 800f156:	4828      	ldr	r0, [pc, #160]	; (800f1f8 <mem_malloc+0x1d8>)
 800f158:	f00b fe7a 	bl	801ae50 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f15c:	4820      	ldr	r0, [pc, #128]	; (800f1e0 <mem_malloc+0x1c0>)
 800f15e:	f009 fac0 	bl	80186e2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f162:	88fa      	ldrh	r2, [r7, #6]
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	4413      	add	r3, r2
 800f168:	3308      	adds	r3, #8
 800f16a:	4a20      	ldr	r2, [pc, #128]	; (800f1ec <mem_malloc+0x1cc>)
 800f16c:	6812      	ldr	r2, [r2, #0]
 800f16e:	4293      	cmp	r3, r2
 800f170:	d906      	bls.n	800f180 <mem_malloc+0x160>
 800f172:	4b1f      	ldr	r3, [pc, #124]	; (800f1f0 <mem_malloc+0x1d0>)
 800f174:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f178:	4920      	ldr	r1, [pc, #128]	; (800f1fc <mem_malloc+0x1dc>)
 800f17a:	481f      	ldr	r0, [pc, #124]	; (800f1f8 <mem_malloc+0x1d8>)
 800f17c:	f00b fe68 	bl	801ae50 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	f003 0303 	and.w	r3, r3, #3
 800f186:	2b00      	cmp	r3, #0
 800f188:	d006      	beq.n	800f198 <mem_malloc+0x178>
 800f18a:	4b19      	ldr	r3, [pc, #100]	; (800f1f0 <mem_malloc+0x1d0>)
 800f18c:	f240 22d6 	movw	r2, #726	; 0x2d6
 800f190:	491b      	ldr	r1, [pc, #108]	; (800f200 <mem_malloc+0x1e0>)
 800f192:	4819      	ldr	r0, [pc, #100]	; (800f1f8 <mem_malloc+0x1d8>)
 800f194:	f00b fe5c 	bl	801ae50 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	f003 0303 	and.w	r3, r3, #3
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d006      	beq.n	800f1b0 <mem_malloc+0x190>
 800f1a2:	4b13      	ldr	r3, [pc, #76]	; (800f1f0 <mem_malloc+0x1d0>)
 800f1a4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800f1a8:	4916      	ldr	r1, [pc, #88]	; (800f204 <mem_malloc+0x1e4>)
 800f1aa:	4813      	ldr	r0, [pc, #76]	; (800f1f8 <mem_malloc+0x1d8>)
 800f1ac:	f00b fe50 	bl	801ae50 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	3308      	adds	r3, #8
 800f1b4:	e010      	b.n	800f1d8 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800f1b6:	4b0c      	ldr	r3, [pc, #48]	; (800f1e8 <mem_malloc+0x1c8>)
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	8bfb      	ldrh	r3, [r7, #30]
 800f1bc:	4413      	add	r3, r2
 800f1be:	881b      	ldrh	r3, [r3, #0]
 800f1c0:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f1c2:	8bfa      	ldrh	r2, [r7, #30]
 800f1c4:	88fb      	ldrh	r3, [r7, #6]
 800f1c6:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	f4ff af4e 	bcc.w	800f06c <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f1d0:	4803      	ldr	r0, [pc, #12]	; (800f1e0 <mem_malloc+0x1c0>)
 800f1d2:	f009 fa86 	bl	80186e2 <sys_mutex_unlock>
  return NULL;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3720      	adds	r7, #32
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	2000c930 	.word	0x2000c930
 800f1e4:	2000c92c 	.word	0x2000c92c
 800f1e8:	2000c924 	.word	0x2000c924
 800f1ec:	2000c928 	.word	0x2000c928
 800f1f0:	0801e26c 	.word	0x0801e26c
 800f1f4:	0801e3e4 	.word	0x0801e3e4
 800f1f8:	0801e2b4 	.word	0x0801e2b4
 800f1fc:	0801e400 	.word	0x0801e400
 800f200:	0801e430 	.word	0x0801e430
 800f204:	0801e460 	.word	0x0801e460

0800f208 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f208:	b480      	push	{r7}
 800f20a:	b085      	sub	sp, #20
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	2200      	movs	r2, #0
 800f216:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	3303      	adds	r3, #3
 800f21e:	f023 0303 	bic.w	r3, r3, #3
 800f222:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f224:	2300      	movs	r3, #0
 800f226:	60fb      	str	r3, [r7, #12]
 800f228:	e011      	b.n	800f24e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	689b      	ldr	r3, [r3, #8]
 800f238:	68ba      	ldr	r2, [r7, #8]
 800f23a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	881b      	ldrh	r3, [r3, #0]
 800f240:	461a      	mov	r2, r3
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	4413      	add	r3, r2
 800f246:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	3301      	adds	r3, #1
 800f24c:	60fb      	str	r3, [r7, #12]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	885b      	ldrh	r3, [r3, #2]
 800f252:	461a      	mov	r2, r3
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	4293      	cmp	r3, r2
 800f258:	dbe7      	blt.n	800f22a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f25a:	bf00      	nop
 800f25c:	3714      	adds	r7, #20
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr
	...

0800f268 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f26e:	2300      	movs	r3, #0
 800f270:	80fb      	strh	r3, [r7, #6]
 800f272:	e009      	b.n	800f288 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f274:	88fb      	ldrh	r3, [r7, #6]
 800f276:	4a08      	ldr	r2, [pc, #32]	; (800f298 <memp_init+0x30>)
 800f278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7ff ffc3 	bl	800f208 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f282:	88fb      	ldrh	r3, [r7, #6]
 800f284:	3301      	adds	r3, #1
 800f286:	80fb      	strh	r3, [r7, #6]
 800f288:	88fb      	ldrh	r3, [r7, #6]
 800f28a:	2b0c      	cmp	r3, #12
 800f28c:	d9f2      	bls.n	800f274 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f28e:	bf00      	nop
 800f290:	3708      	adds	r7, #8
 800f292:	46bd      	mov	sp, r7
 800f294:	bd80      	pop	{r7, pc}
 800f296:	bf00      	nop
 800f298:	08020074 	.word	0x08020074

0800f29c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f2a4:	f009 fa50 	bl	8018748 <sys_arch_protect>
 800f2a8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	689b      	ldr	r3, [r3, #8]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d015      	beq.n	800f2e4 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	68ba      	ldr	r2, [r7, #8]
 800f2be:	6812      	ldr	r2, [r2, #0]
 800f2c0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	f003 0303 	and.w	r3, r3, #3
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d006      	beq.n	800f2da <do_memp_malloc_pool+0x3e>
 800f2cc:	4b09      	ldr	r3, [pc, #36]	; (800f2f4 <do_memp_malloc_pool+0x58>)
 800f2ce:	f240 1249 	movw	r2, #329	; 0x149
 800f2d2:	4909      	ldr	r1, [pc, #36]	; (800f2f8 <do_memp_malloc_pool+0x5c>)
 800f2d4:	4809      	ldr	r0, [pc, #36]	; (800f2fc <do_memp_malloc_pool+0x60>)
 800f2d6:	f00b fdbb 	bl	801ae50 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f2da:	68f8      	ldr	r0, [r7, #12]
 800f2dc:	f009 fa42 	bl	8018764 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	e003      	b.n	800f2ec <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f009 fa3d 	bl	8018764 <sys_arch_unprotect>
  return NULL;
 800f2ea:	2300      	movs	r3, #0
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3710      	adds	r7, #16
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}
 800f2f4:	0801e484 	.word	0x0801e484
 800f2f8:	0801e4b4 	.word	0x0801e4b4
 800f2fc:	0801e4d8 	.word	0x0801e4d8

0800f300 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	4603      	mov	r3, r0
 800f308:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f30a:	79fb      	ldrb	r3, [r7, #7]
 800f30c:	2b0c      	cmp	r3, #12
 800f30e:	d908      	bls.n	800f322 <memp_malloc+0x22>
 800f310:	4b0a      	ldr	r3, [pc, #40]	; (800f33c <memp_malloc+0x3c>)
 800f312:	f240 1287 	movw	r2, #391	; 0x187
 800f316:	490a      	ldr	r1, [pc, #40]	; (800f340 <memp_malloc+0x40>)
 800f318:	480a      	ldr	r0, [pc, #40]	; (800f344 <memp_malloc+0x44>)
 800f31a:	f00b fd99 	bl	801ae50 <iprintf>
 800f31e:	2300      	movs	r3, #0
 800f320:	e008      	b.n	800f334 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f322:	79fb      	ldrb	r3, [r7, #7]
 800f324:	4a08      	ldr	r2, [pc, #32]	; (800f348 <memp_malloc+0x48>)
 800f326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7ff ffb6 	bl	800f29c <do_memp_malloc_pool>
 800f330:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f332:	68fb      	ldr	r3, [r7, #12]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3710      	adds	r7, #16
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	0801e484 	.word	0x0801e484
 800f340:	0801e514 	.word	0x0801e514
 800f344:	0801e4d8 	.word	0x0801e4d8
 800f348:	08020074 	.word	0x08020074

0800f34c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	f003 0303 	and.w	r3, r3, #3
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d006      	beq.n	800f36e <do_memp_free_pool+0x22>
 800f360:	4b0d      	ldr	r3, [pc, #52]	; (800f398 <do_memp_free_pool+0x4c>)
 800f362:	f240 129d 	movw	r2, #413	; 0x19d
 800f366:	490d      	ldr	r1, [pc, #52]	; (800f39c <do_memp_free_pool+0x50>)
 800f368:	480d      	ldr	r0, [pc, #52]	; (800f3a0 <do_memp_free_pool+0x54>)
 800f36a:	f00b fd71 	bl	801ae50 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f372:	f009 f9e9 	bl	8018748 <sys_arch_protect>
 800f376:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	689b      	ldr	r3, [r3, #8]
 800f386:	68fa      	ldr	r2, [r7, #12]
 800f388:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f38a:	68b8      	ldr	r0, [r7, #8]
 800f38c:	f009 f9ea 	bl	8018764 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f390:	bf00      	nop
 800f392:	3710      	adds	r7, #16
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	0801e484 	.word	0x0801e484
 800f39c:	0801e534 	.word	0x0801e534
 800f3a0:	0801e4d8 	.word	0x0801e4d8

0800f3a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b082      	sub	sp, #8
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	6039      	str	r1, [r7, #0]
 800f3ae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f3b0:	79fb      	ldrb	r3, [r7, #7]
 800f3b2:	2b0c      	cmp	r3, #12
 800f3b4:	d907      	bls.n	800f3c6 <memp_free+0x22>
 800f3b6:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <memp_free+0x44>)
 800f3b8:	f240 12db 	movw	r2, #475	; 0x1db
 800f3bc:	490b      	ldr	r1, [pc, #44]	; (800f3ec <memp_free+0x48>)
 800f3be:	480c      	ldr	r0, [pc, #48]	; (800f3f0 <memp_free+0x4c>)
 800f3c0:	f00b fd46 	bl	801ae50 <iprintf>
 800f3c4:	e00c      	b.n	800f3e0 <memp_free+0x3c>

  if (mem == NULL) {
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d008      	beq.n	800f3de <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f3cc:	79fb      	ldrb	r3, [r7, #7]
 800f3ce:	4a09      	ldr	r2, [pc, #36]	; (800f3f4 <memp_free+0x50>)
 800f3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3d4:	6839      	ldr	r1, [r7, #0]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7ff ffb8 	bl	800f34c <do_memp_free_pool>
 800f3dc:	e000      	b.n	800f3e0 <memp_free+0x3c>
    return;
 800f3de:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	0801e484 	.word	0x0801e484
 800f3ec:	0801e554 	.word	0x0801e554
 800f3f0:	0801e4d8 	.word	0x0801e4d8
 800f3f4:	08020074 	.word	0x08020074

0800f3f8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f3f8:	b480      	push	{r7}
 800f3fa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f3fc:	bf00      	nop
 800f3fe:	46bd      	mov	sp, r7
 800f400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f404:	4770      	bx	lr
	...

0800f408 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
 800f414:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800f416:	69fb      	ldr	r3, [r7, #28]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d105      	bne.n	800f428 <netif_add+0x20>
 800f41c:	4b1f      	ldr	r3, [pc, #124]	; (800f49c <netif_add+0x94>)
 800f41e:	22fb      	movs	r2, #251	; 0xfb
 800f420:	491f      	ldr	r1, [pc, #124]	; (800f4a0 <netif_add+0x98>)
 800f422:	4820      	ldr	r0, [pc, #128]	; (800f4a4 <netif_add+0x9c>)
 800f424:	f00b fd14 	bl	801ae50 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2200      	movs	r2, #0
 800f42c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2200      	movs	r2, #0
 800f432:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2200      	movs	r2, #0
 800f438:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2200      	movs	r2, #0
 800f43e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2203      	movs	r2, #3
 800f446:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	69ba      	ldr	r2, [r7, #24]
 800f44e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800f450:	4b15      	ldr	r3, [pc, #84]	; (800f4a8 <netif_add+0xa0>)
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	1c5a      	adds	r2, r3, #1
 800f456:	b2d1      	uxtb	r1, r2
 800f458:	4a13      	ldr	r2, [pc, #76]	; (800f4a8 <netif_add+0xa0>)
 800f45a:	7011      	strb	r1, [r2, #0]
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	6a3a      	ldr	r2, [r7, #32]
 800f466:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	68b9      	ldr	r1, [r7, #8]
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f000 f81e 	bl	800f4b0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f474:	69fb      	ldr	r3, [r7, #28]
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	4798      	blx	r3
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d001      	beq.n	800f484 <netif_add+0x7c>
    return NULL;
 800f480:	2300      	movs	r3, #0
 800f482:	e007      	b.n	800f494 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f484:	4b09      	ldr	r3, [pc, #36]	; (800f4ac <netif_add+0xa4>)
 800f486:	681a      	ldr	r2, [r3, #0]
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f48c:	4a07      	ldr	r2, [pc, #28]	; (800f4ac <netif_add+0xa4>)
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800f492:	68fb      	ldr	r3, [r7, #12]
}
 800f494:	4618      	mov	r0, r3
 800f496:	3710      	adds	r7, #16
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}
 800f49c:	0801e570 	.word	0x0801e570
 800f4a0:	0801e5a4 	.word	0x0801e5a4
 800f4a4:	0801e5bc 	.word	0x0801e5bc
 800f4a8:	2000c968 	.word	0x2000c968
 800f4ac:	20016414 	.word	0x20016414

0800f4b0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	607a      	str	r2, [r7, #4]
 800f4bc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d003      	beq.n	800f4cc <netif_set_addr+0x1c>
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d10c      	bne.n	800f4e6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800f4cc:	68b9      	ldr	r1, [r7, #8]
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f000 f81a 	bl	800f508 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800f4d4:	6879      	ldr	r1, [r7, #4]
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f000 f862 	bl	800f5a0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800f4dc:	6839      	ldr	r1, [r7, #0]
 800f4de:	68f8      	ldr	r0, [r7, #12]
 800f4e0:	f000 f84a 	bl	800f578 <netif_set_gw>
 800f4e4:	e00b      	b.n	800f4fe <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800f4e6:	6879      	ldr	r1, [r7, #4]
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f000 f859 	bl	800f5a0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800f4ee:	6839      	ldr	r1, [r7, #0]
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f000 f841 	bl	800f578 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800f4f6:	68b9      	ldr	r1, [r7, #8]
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f000 f805 	bl	800f508 <netif_set_ipaddr>
  }
}
 800f4fe:	bf00      	nop
 800f500:	3710      	adds	r7, #16
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
	...

0800f508 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d003      	beq.n	800f520 <netif_set_ipaddr+0x18>
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	60fb      	str	r3, [r7, #12]
 800f51e:	e002      	b.n	800f526 <netif_set_ipaddr+0x1e>
 800f520:	4b14      	ldr	r3, [pc, #80]	; (800f574 <netif_set_ipaddr+0x6c>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	3304      	adds	r3, #4
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	429a      	cmp	r2, r3
 800f530:	d01c      	beq.n	800f56c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	3304      	adds	r3, #4
 800f536:	f107 020c 	add.w	r2, r7, #12
 800f53a:	4611      	mov	r1, r2
 800f53c:	4618      	mov	r0, r3
 800f53e:	f002 fb15 	bl	8011b6c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	3304      	adds	r3, #4
 800f546:	f107 020c 	add.w	r2, r7, #12
 800f54a:	4611      	mov	r1, r2
 800f54c:	4618      	mov	r0, r3
 800f54e:	f006 fce9 	bl	8015f24 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d002      	beq.n	800f55e <netif_set_ipaddr+0x56>
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	e000      	b.n	800f560 <netif_set_ipaddr+0x58>
 800f55e:	2300      	movs	r3, #0
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f564:	2101      	movs	r1, #1
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f000 f861 	bl	800f62e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800f56c:	bf00      	nop
 800f56e:	3710      	adds	r7, #16
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	080200e8 	.word	0x080200e8

0800f578 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d002      	beq.n	800f58e <netif_set_gw+0x16>
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	e000      	b.n	800f590 <netif_set_gw+0x18>
 800f58e:	2300      	movs	r3, #0
 800f590:	687a      	ldr	r2, [r7, #4]
 800f592:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800f594:	bf00      	nop
 800f596:	370c      	adds	r7, #12
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d002      	beq.n	800f5b6 <netif_set_netmask+0x16>
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	e000      	b.n	800f5b8 <netif_set_netmask+0x18>
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800f5bc:	bf00      	nop
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b083      	sub	sp, #12
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f5d0:	4a04      	ldr	r2, [pc, #16]	; (800f5e4 <netif_set_default+0x1c>)
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f5d6:	bf00      	nop
 800f5d8:	370c      	adds	r7, #12
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e0:	4770      	bx	lr
 800f5e2:	bf00      	nop
 800f5e4:	20016418 	.word	0x20016418

0800f5e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b082      	sub	sp, #8
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f5f6:	f003 0301 	and.w	r3, r3, #1
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d113      	bne.n	800f626 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f604:	f043 0301 	orr.w	r3, r3, #1
 800f608:	b2da      	uxtb	r2, r3
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f616:	f003 0304 	and.w	r3, r3, #4
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d003      	beq.n	800f626 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800f61e:	2103      	movs	r1, #3
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 f804 	bl	800f62e <netif_issue_reports>
    }
  }
}
 800f626:	bf00      	nop
 800f628:	3708      	adds	r7, #8
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}

0800f62e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800f62e:	b580      	push	{r7, lr}
 800f630:	b082      	sub	sp, #8
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]
 800f636:	460b      	mov	r3, r1
 800f638:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f63a:	78fb      	ldrb	r3, [r7, #3]
 800f63c:	f003 0301 	and.w	r3, r3, #1
 800f640:	2b00      	cmp	r3, #0
 800f642:	d011      	beq.n	800f668 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	3304      	adds	r3, #4
 800f648:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00c      	beq.n	800f668 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f654:	f003 0308 	and.w	r3, r3, #8
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d005      	beq.n	800f668 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	3304      	adds	r3, #4
 800f660:	4619      	mov	r1, r3
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f007 fb92 	bl	8016d8c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800f668:	bf00      	nop
 800f66a:	3708      	adds	r7, #8
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b082      	sub	sp, #8
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f67e:	f003 0301 	and.w	r3, r3, #1
 800f682:	2b00      	cmp	r3, #0
 800f684:	d012      	beq.n	800f6ac <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f68c:	f023 0301 	bic.w	r3, r3, #1
 800f690:	b2da      	uxtb	r2, r3
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f69e:	f003 0308 	and.w	r3, r3, #8
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d002      	beq.n	800f6ac <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f006 ff36 	bl	8016518 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f6ac:	bf00      	nop
 800f6ae:	3708      	adds	r7, #8
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f6ba:	f009 f845 	bl	8018748 <sys_arch_protect>
 800f6be:	6038      	str	r0, [r7, #0]
 800f6c0:	4b0f      	ldr	r3, [pc, #60]	; (800f700 <pbuf_free_ooseq+0x4c>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	701a      	strb	r2, [r3, #0]
 800f6c6:	6838      	ldr	r0, [r7, #0]
 800f6c8:	f009 f84c 	bl	8018764 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f6cc:	4b0d      	ldr	r3, [pc, #52]	; (800f704 <pbuf_free_ooseq+0x50>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	607b      	str	r3, [r7, #4]
 800f6d2:	e00f      	b.n	800f6f4 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d008      	beq.n	800f6ee <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f001 febe 	bl	8011462 <tcp_segs_free>
      pcb->ooseq = NULL;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800f6ec:	e005      	b.n	800f6fa <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	607b      	str	r3, [r7, #4]
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1ec      	bne.n	800f6d4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	2001641c 	.word	0x2001641c
 800f704:	20016424 	.word	0x20016424

0800f708 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f710:	f7ff ffd0 	bl	800f6b4 <pbuf_free_ooseq>
}
 800f714:	bf00      	nop
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f722:	f009 f811 	bl	8018748 <sys_arch_protect>
 800f726:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f728:	4b10      	ldr	r3, [pc, #64]	; (800f76c <pbuf_pool_is_empty+0x50>)
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f72e:	4b0f      	ldr	r3, [pc, #60]	; (800f76c <pbuf_pool_is_empty+0x50>)
 800f730:	2201      	movs	r2, #1
 800f732:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f009 f815 	bl	8018764 <sys_arch_unprotect>

  if (!queued) {
 800f73a:	78fb      	ldrb	r3, [r7, #3]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d110      	bne.n	800f762 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f740:	2200      	movs	r2, #0
 800f742:	2100      	movs	r1, #0
 800f744:	480a      	ldr	r0, [pc, #40]	; (800f770 <pbuf_pool_is_empty+0x54>)
 800f746:	f7ff f943 	bl	800e9d0 <tcpip_callback_with_block>
 800f74a:	4603      	mov	r3, r0
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d008      	beq.n	800f762 <pbuf_pool_is_empty+0x46>
 800f750:	f008 fffa 	bl	8018748 <sys_arch_protect>
 800f754:	6078      	str	r0, [r7, #4]
 800f756:	4b05      	ldr	r3, [pc, #20]	; (800f76c <pbuf_pool_is_empty+0x50>)
 800f758:	2200      	movs	r2, #0
 800f75a:	701a      	strb	r2, [r3, #0]
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f009 f801 	bl	8018764 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f762:	bf00      	nop
 800f764:	3708      	adds	r7, #8
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	2001641c 	.word	0x2001641c
 800f770:	0800f709 	.word	0x0800f709

0800f774 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b088      	sub	sp, #32
 800f778:	af00      	add	r7, sp, #0
 800f77a:	4603      	mov	r3, r0
 800f77c:	71fb      	strb	r3, [r7, #7]
 800f77e:	460b      	mov	r3, r1
 800f780:	80bb      	strh	r3, [r7, #4]
 800f782:	4613      	mov	r3, r2
 800f784:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800f786:	79fb      	ldrb	r3, [r7, #7]
 800f788:	2b04      	cmp	r3, #4
 800f78a:	d81c      	bhi.n	800f7c6 <pbuf_alloc+0x52>
 800f78c:	a201      	add	r2, pc, #4	; (adr r2, 800f794 <pbuf_alloc+0x20>)
 800f78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f792:	bf00      	nop
 800f794:	0800f7a9 	.word	0x0800f7a9
 800f798:	0800f7af 	.word	0x0800f7af
 800f79c:	0800f7b5 	.word	0x0800f7b5
 800f7a0:	0800f7bb 	.word	0x0800f7bb
 800f7a4:	0800f7c1 	.word	0x0800f7c1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800f7a8:	2336      	movs	r3, #54	; 0x36
 800f7aa:	82fb      	strh	r3, [r7, #22]
    break;
 800f7ac:	e014      	b.n	800f7d8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800f7ae:	2322      	movs	r3, #34	; 0x22
 800f7b0:	82fb      	strh	r3, [r7, #22]
    break;
 800f7b2:	e011      	b.n	800f7d8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800f7b4:	230e      	movs	r3, #14
 800f7b6:	82fb      	strh	r3, [r7, #22]
    break;
 800f7b8:	e00e      	b.n	800f7d8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	82fb      	strh	r3, [r7, #22]
    break;
 800f7be:	e00b      	b.n	800f7d8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	82fb      	strh	r3, [r7, #22]
    break;
 800f7c4:	e008      	b.n	800f7d8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800f7c6:	4ba5      	ldr	r3, [pc, #660]	; (800fa5c <pbuf_alloc+0x2e8>)
 800f7c8:	f44f 728b 	mov.w	r2, #278	; 0x116
 800f7cc:	49a4      	ldr	r1, [pc, #656]	; (800fa60 <pbuf_alloc+0x2ec>)
 800f7ce:	48a5      	ldr	r0, [pc, #660]	; (800fa64 <pbuf_alloc+0x2f0>)
 800f7d0:	f00b fb3e 	bl	801ae50 <iprintf>
    return NULL;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	e15d      	b.n	800fa94 <pbuf_alloc+0x320>
  }

  switch (type) {
 800f7d8:	79bb      	ldrb	r3, [r7, #6]
 800f7da:	2b03      	cmp	r3, #3
 800f7dc:	f200 8134 	bhi.w	800fa48 <pbuf_alloc+0x2d4>
 800f7e0:	a201      	add	r2, pc, #4	; (adr r2, 800f7e8 <pbuf_alloc+0x74>)
 800f7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7e6:	bf00      	nop
 800f7e8:	0800f989 	.word	0x0800f989
 800f7ec:	0800fa15 	.word	0x0800fa15
 800f7f0:	0800fa15 	.word	0x0800fa15
 800f7f4:	0800f7f9 	.word	0x0800f7f9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f7f8:	200c      	movs	r0, #12
 800f7fa:	f7ff fd81 	bl	800f300 <memp_malloc>
 800f7fe:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d103      	bne.n	800f80e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800f806:	f7ff ff89 	bl	800f71c <pbuf_pool_is_empty>
      return NULL;
 800f80a:	2300      	movs	r3, #0
 800f80c:	e142      	b.n	800fa94 <pbuf_alloc+0x320>
    }
    p->type = type;
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	79ba      	ldrb	r2, [r7, #6]
 800f812:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800f814:	69fb      	ldr	r3, [r7, #28]
 800f816:	2200      	movs	r2, #0
 800f818:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800f81a:	8afb      	ldrh	r3, [r7, #22]
 800f81c:	3310      	adds	r3, #16
 800f81e:	69fa      	ldr	r2, [r7, #28]
 800f820:	4413      	add	r3, r2
 800f822:	3303      	adds	r3, #3
 800f824:	f023 0303 	bic.w	r3, r3, #3
 800f828:	461a      	mov	r2, r3
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	f003 0303 	and.w	r3, r3, #3
 800f836:	2b00      	cmp	r3, #0
 800f838:	d006      	beq.n	800f848 <pbuf_alloc+0xd4>
 800f83a:	4b88      	ldr	r3, [pc, #544]	; (800fa5c <pbuf_alloc+0x2e8>)
 800f83c:	f240 1229 	movw	r2, #297	; 0x129
 800f840:	4989      	ldr	r1, [pc, #548]	; (800fa68 <pbuf_alloc+0x2f4>)
 800f842:	4888      	ldr	r0, [pc, #544]	; (800fa64 <pbuf_alloc+0x2f0>)
 800f844:	f00b fb04 	bl	801ae50 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	88ba      	ldrh	r2, [r7, #4]
 800f84c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f84e:	8afb      	ldrh	r3, [r7, #22]
 800f850:	3303      	adds	r3, #3
 800f852:	f023 0303 	bic.w	r3, r3, #3
 800f856:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800f85a:	88bb      	ldrh	r3, [r7, #4]
 800f85c:	4293      	cmp	r3, r2
 800f85e:	bf28      	it	cs
 800f860:	4613      	movcs	r3, r2
 800f862:	b29a      	uxth	r2, r3
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f868:	69fb      	ldr	r3, [r7, #28]
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	69fa      	ldr	r2, [r7, #28]
 800f86e:	8952      	ldrh	r2, [r2, #10]
 800f870:	441a      	add	r2, r3
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f878:	429a      	cmp	r2, r3
 800f87a:	d906      	bls.n	800f88a <pbuf_alloc+0x116>
 800f87c:	4b77      	ldr	r3, [pc, #476]	; (800fa5c <pbuf_alloc+0x2e8>)
 800f87e:	f44f 7298 	mov.w	r2, #304	; 0x130
 800f882:	497a      	ldr	r1, [pc, #488]	; (800fa6c <pbuf_alloc+0x2f8>)
 800f884:	4877      	ldr	r0, [pc, #476]	; (800fa64 <pbuf_alloc+0x2f0>)
 800f886:	f00b fae3 	bl	801ae50 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f88a:	8afb      	ldrh	r3, [r7, #22]
 800f88c:	3303      	adds	r3, #3
 800f88e:	f023 0303 	bic.w	r3, r3, #3
 800f892:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f896:	d106      	bne.n	800f8a6 <pbuf_alloc+0x132>
 800f898:	4b70      	ldr	r3, [pc, #448]	; (800fa5c <pbuf_alloc+0x2e8>)
 800f89a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f89e:	4974      	ldr	r1, [pc, #464]	; (800fa70 <pbuf_alloc+0x2fc>)
 800f8a0:	4870      	ldr	r0, [pc, #448]	; (800fa64 <pbuf_alloc+0x2f0>)
 800f8a2:	f00b fad5 	bl	801ae50 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800f8b0:	88bb      	ldrh	r3, [r7, #4]
 800f8b2:	69fa      	ldr	r2, [r7, #28]
 800f8b4:	8952      	ldrh	r2, [r2, #10]
 800f8b6:	1a9b      	subs	r3, r3, r2
 800f8b8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800f8ba:	e061      	b.n	800f980 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f8bc:	200c      	movs	r0, #12
 800f8be:	f7ff fd1f 	bl	800f300 <memp_malloc>
 800f8c2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d106      	bne.n	800f8d8 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800f8ca:	f7ff ff27 	bl	800f71c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800f8ce:	69f8      	ldr	r0, [r7, #28]
 800f8d0:	f000 fac2 	bl	800fe58 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	e0dd      	b.n	800fa94 <pbuf_alloc+0x320>
      }
      q->type = type;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	79ba      	ldrb	r2, [r7, #6]
 800f8dc:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800f8ea:	69bb      	ldr	r3, [r7, #24]
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	dd06      	ble.n	800f908 <pbuf_alloc+0x194>
 800f8fa:	4b58      	ldr	r3, [pc, #352]	; (800fa5c <pbuf_alloc+0x2e8>)
 800f8fc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800f900:	495c      	ldr	r1, [pc, #368]	; (800fa74 <pbuf_alloc+0x300>)
 800f902:	4858      	ldr	r0, [pc, #352]	; (800fa64 <pbuf_alloc+0x2f0>)
 800f904:	f00b faa4 	bl	801ae50 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	b29a      	uxth	r2, r3
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	b29b      	uxth	r3, r3
 800f914:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f918:	bf28      	it	cs
 800f91a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800f91e:	b29a      	uxth	r2, r3
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f103 0210 	add.w	r2, r3, #16
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	f003 0303 	and.w	r3, r3, #3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d006      	beq.n	800f948 <pbuf_alloc+0x1d4>
 800f93a:	4b48      	ldr	r3, [pc, #288]	; (800fa5c <pbuf_alloc+0x2e8>)
 800f93c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800f940:	494d      	ldr	r1, [pc, #308]	; (800fa78 <pbuf_alloc+0x304>)
 800f942:	4848      	ldr	r0, [pc, #288]	; (800fa64 <pbuf_alloc+0x2f0>)
 800f944:	f00b fa84 	bl	801ae50 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	69fa      	ldr	r2, [r7, #28]
 800f94e:	8952      	ldrh	r2, [r2, #10]
 800f950:	441a      	add	r2, r3
 800f952:	69fb      	ldr	r3, [r7, #28]
 800f954:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f958:	429a      	cmp	r2, r3
 800f95a:	d906      	bls.n	800f96a <pbuf_alloc+0x1f6>
 800f95c:	4b3f      	ldr	r3, [pc, #252]	; (800fa5c <pbuf_alloc+0x2e8>)
 800f95e:	f240 1255 	movw	r2, #341	; 0x155
 800f962:	4942      	ldr	r1, [pc, #264]	; (800fa6c <pbuf_alloc+0x2f8>)
 800f964:	483f      	ldr	r0, [pc, #252]	; (800fa64 <pbuf_alloc+0x2f0>)
 800f966:	f00b fa73 	bl	801ae50 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	2201      	movs	r2, #1
 800f96e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	895b      	ldrh	r3, [r3, #10]
 800f974:	461a      	mov	r2, r3
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	1a9b      	subs	r3, r3, r2
 800f97a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	2b00      	cmp	r3, #0
 800f984:	dc9a      	bgt.n	800f8bc <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800f986:	e07e      	b.n	800fa86 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800f988:	8afb      	ldrh	r3, [r7, #22]
 800f98a:	3313      	adds	r3, #19
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	f023 0303 	bic.w	r3, r3, #3
 800f992:	b29a      	uxth	r2, r3
 800f994:	88bb      	ldrh	r3, [r7, #4]
 800f996:	3303      	adds	r3, #3
 800f998:	b29b      	uxth	r3, r3
 800f99a:	f023 0303 	bic.w	r3, r3, #3
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	4413      	add	r3, r2
 800f9a2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800f9a4:	897a      	ldrh	r2, [r7, #10]
 800f9a6:	88bb      	ldrh	r3, [r7, #4]
 800f9a8:	3303      	adds	r3, #3
 800f9aa:	f023 0303 	bic.w	r3, r3, #3
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d201      	bcs.n	800f9b6 <pbuf_alloc+0x242>
        return NULL;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	e06e      	b.n	800fa94 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800f9b6:	897b      	ldrh	r3, [r7, #10]
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7ff fb31 	bl	800f020 <mem_malloc>
 800f9be:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d101      	bne.n	800f9ca <pbuf_alloc+0x256>
      return NULL;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	e064      	b.n	800fa94 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800f9ca:	8afb      	ldrh	r3, [r7, #22]
 800f9cc:	3310      	adds	r3, #16
 800f9ce:	69fa      	ldr	r2, [r7, #28]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	3303      	adds	r3, #3
 800f9d4:	f023 0303 	bic.w	r3, r3, #3
 800f9d8:	461a      	mov	r2, r3
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800f9de:	69fb      	ldr	r3, [r7, #28]
 800f9e0:	88ba      	ldrh	r2, [r7, #4]
 800f9e2:	811a      	strh	r2, [r3, #8]
 800f9e4:	69fb      	ldr	r3, [r7, #28]
 800f9e6:	891a      	ldrh	r2, [r3, #8]
 800f9e8:	69fb      	ldr	r3, [r7, #28]
 800f9ea:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	601a      	str	r2, [r3, #0]
    p->type = type;
 800f9f2:	69fb      	ldr	r3, [r7, #28]
 800f9f4:	79ba      	ldrb	r2, [r7, #6]
 800f9f6:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	f003 0303 	and.w	r3, r3, #3
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d03f      	beq.n	800fa84 <pbuf_alloc+0x310>
 800fa04:	4b15      	ldr	r3, [pc, #84]	; (800fa5c <pbuf_alloc+0x2e8>)
 800fa06:	f240 1277 	movw	r2, #375	; 0x177
 800fa0a:	491c      	ldr	r1, [pc, #112]	; (800fa7c <pbuf_alloc+0x308>)
 800fa0c:	4815      	ldr	r0, [pc, #84]	; (800fa64 <pbuf_alloc+0x2f0>)
 800fa0e:	f00b fa1f 	bl	801ae50 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800fa12:	e037      	b.n	800fa84 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fa14:	200b      	movs	r0, #11
 800fa16:	f7ff fc73 	bl	800f300 <memp_malloc>
 800fa1a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d101      	bne.n	800fa26 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800fa22:	2300      	movs	r3, #0
 800fa24:	e036      	b.n	800fa94 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	88ba      	ldrh	r2, [r7, #4]
 800fa30:	811a      	strh	r2, [r3, #8]
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	891a      	ldrh	r2, [r3, #8]
 800fa36:	69fb      	ldr	r3, [r7, #28]
 800fa38:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800fa3a:	69fb      	ldr	r3, [r7, #28]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	601a      	str	r2, [r3, #0]
    p->type = type;
 800fa40:	69fb      	ldr	r3, [r7, #28]
 800fa42:	79ba      	ldrb	r2, [r7, #6]
 800fa44:	731a      	strb	r2, [r3, #12]
    break;
 800fa46:	e01e      	b.n	800fa86 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fa48:	4b04      	ldr	r3, [pc, #16]	; (800fa5c <pbuf_alloc+0x2e8>)
 800fa4a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800fa4e:	490c      	ldr	r1, [pc, #48]	; (800fa80 <pbuf_alloc+0x30c>)
 800fa50:	4804      	ldr	r0, [pc, #16]	; (800fa64 <pbuf_alloc+0x2f0>)
 800fa52:	f00b f9fd 	bl	801ae50 <iprintf>
    return NULL;
 800fa56:	2300      	movs	r3, #0
 800fa58:	e01c      	b.n	800fa94 <pbuf_alloc+0x320>
 800fa5a:	bf00      	nop
 800fa5c:	0801e5e4 	.word	0x0801e5e4
 800fa60:	0801e614 	.word	0x0801e614
 800fa64:	0801e630 	.word	0x0801e630
 800fa68:	0801e658 	.word	0x0801e658
 800fa6c:	0801e688 	.word	0x0801e688
 800fa70:	0801e6bc 	.word	0x0801e6bc
 800fa74:	0801e6f0 	.word	0x0801e6f0
 800fa78:	0801e704 	.word	0x0801e704
 800fa7c:	0801e734 	.word	0x0801e734
 800fa80:	0801e760 	.word	0x0801e760
    break;
 800fa84:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800fa86:	69fb      	ldr	r3, [r7, #28]
 800fa88:	2201      	movs	r2, #1
 800fa8a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fa92:	69fb      	ldr	r3, [r7, #28]
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3720      	adds	r7, #32
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	bd80      	pop	{r7, pc}

0800fa9c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	603b      	str	r3, [r7, #0]
 800faa4:	4603      	mov	r3, r0
 800faa6:	71fb      	strb	r3, [r7, #7]
 800faa8:	460b      	mov	r3, r1
 800faaa:	80bb      	strh	r3, [r7, #4]
 800faac:	4613      	mov	r3, r2
 800faae:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800fab0:	79fb      	ldrb	r3, [r7, #7]
 800fab2:	2b04      	cmp	r3, #4
 800fab4:	d81b      	bhi.n	800faee <pbuf_alloced_custom+0x52>
 800fab6:	a201      	add	r2, pc, #4	; (adr r2, 800fabc <pbuf_alloced_custom+0x20>)
 800fab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fabc:	0800fad1 	.word	0x0800fad1
 800fac0:	0800fad7 	.word	0x0800fad7
 800fac4:	0800fadd 	.word	0x0800fadd
 800fac8:	0800fae3 	.word	0x0800fae3
 800facc:	0800fae9 	.word	0x0800fae9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800fad0:	2336      	movs	r3, #54	; 0x36
 800fad2:	81fb      	strh	r3, [r7, #14]
    break;
 800fad4:	e014      	b.n	800fb00 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800fad6:	2322      	movs	r3, #34	; 0x22
 800fad8:	81fb      	strh	r3, [r7, #14]
    break;
 800fada:	e011      	b.n	800fb00 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800fadc:	230e      	movs	r3, #14
 800fade:	81fb      	strh	r3, [r7, #14]
    break;
 800fae0:	e00e      	b.n	800fb00 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800fae2:	2300      	movs	r3, #0
 800fae4:	81fb      	strh	r3, [r7, #14]
    break;
 800fae6:	e00b      	b.n	800fb00 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800fae8:	2300      	movs	r3, #0
 800faea:	81fb      	strh	r3, [r7, #14]
    break;
 800faec:	e008      	b.n	800fb00 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800faee:	4b1d      	ldr	r3, [pc, #116]	; (800fb64 <pbuf_alloced_custom+0xc8>)
 800faf0:	f240 12c5 	movw	r2, #453	; 0x1c5
 800faf4:	491c      	ldr	r1, [pc, #112]	; (800fb68 <pbuf_alloced_custom+0xcc>)
 800faf6:	481d      	ldr	r0, [pc, #116]	; (800fb6c <pbuf_alloced_custom+0xd0>)
 800faf8:	f00b f9aa 	bl	801ae50 <iprintf>
    return NULL;
 800fafc:	2300      	movs	r3, #0
 800fafe:	e02d      	b.n	800fb5c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800fb00:	89fb      	ldrh	r3, [r7, #14]
 800fb02:	3303      	adds	r3, #3
 800fb04:	f023 0203 	bic.w	r2, r3, #3
 800fb08:	88bb      	ldrh	r3, [r7, #4]
 800fb0a:	441a      	add	r2, r3
 800fb0c:	8bbb      	ldrh	r3, [r7, #28]
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d901      	bls.n	800fb16 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800fb12:	2300      	movs	r3, #0
 800fb14:	e022      	b.n	800fb5c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800fb1c:	69bb      	ldr	r3, [r7, #24]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d008      	beq.n	800fb34 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800fb22:	89fb      	ldrh	r3, [r7, #14]
 800fb24:	3303      	adds	r3, #3
 800fb26:	f023 0303 	bic.w	r3, r3, #3
 800fb2a:	69ba      	ldr	r2, [r7, #24]
 800fb2c:	441a      	add	r2, r3
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	605a      	str	r2, [r3, #4]
 800fb32:	e002      	b.n	800fb3a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	2200      	movs	r2, #0
 800fb38:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	2202      	movs	r2, #2
 800fb3e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	88ba      	ldrh	r2, [r7, #4]
 800fb44:	811a      	strh	r2, [r3, #8]
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	891a      	ldrh	r2, [r3, #8]
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	79ba      	ldrb	r2, [r7, #6]
 800fb52:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	2201      	movs	r2, #1
 800fb58:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800fb5a:	683b      	ldr	r3, [r7, #0]
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	3710      	adds	r7, #16
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	0801e5e4 	.word	0x0801e5e4
 800fb68:	0801e77c 	.word	0x0801e77c
 800fb6c:	0801e630 	.word	0x0801e630

0800fb70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b086      	sub	sp, #24
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d106      	bne.n	800fb90 <pbuf_realloc+0x20>
 800fb82:	4b4b      	ldr	r3, [pc, #300]	; (800fcb0 <pbuf_realloc+0x140>)
 800fb84:	f240 12f3 	movw	r2, #499	; 0x1f3
 800fb88:	494a      	ldr	r1, [pc, #296]	; (800fcb4 <pbuf_realloc+0x144>)
 800fb8a:	484b      	ldr	r0, [pc, #300]	; (800fcb8 <pbuf_realloc+0x148>)
 800fb8c:	f00b f960 	bl	801ae50 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	7b1b      	ldrb	r3, [r3, #12]
 800fb94:	2b03      	cmp	r3, #3
 800fb96:	d012      	beq.n	800fbbe <pbuf_realloc+0x4e>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	7b1b      	ldrb	r3, [r3, #12]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d00e      	beq.n	800fbbe <pbuf_realloc+0x4e>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	7b1b      	ldrb	r3, [r3, #12]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00a      	beq.n	800fbbe <pbuf_realloc+0x4e>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	7b1b      	ldrb	r3, [r3, #12]
 800fbac:	2b02      	cmp	r3, #2
 800fbae:	d006      	beq.n	800fbbe <pbuf_realloc+0x4e>
 800fbb0:	4b3f      	ldr	r3, [pc, #252]	; (800fcb0 <pbuf_realloc+0x140>)
 800fbb2:	f240 12f7 	movw	r2, #503	; 0x1f7
 800fbb6:	4941      	ldr	r1, [pc, #260]	; (800fcbc <pbuf_realloc+0x14c>)
 800fbb8:	483f      	ldr	r0, [pc, #252]	; (800fcb8 <pbuf_realloc+0x148>)
 800fbba:	f00b f949 	bl	801ae50 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	891b      	ldrh	r3, [r3, #8]
 800fbc2:	887a      	ldrh	r2, [r7, #2]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d26f      	bcs.n	800fca8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800fbc8:	887b      	ldrh	r3, [r7, #2]
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	8912      	ldrh	r2, [r2, #8]
 800fbce:	1a9b      	subs	r3, r3, r2
 800fbd0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800fbd2:	887b      	ldrh	r3, [r7, #2]
 800fbd4:	827b      	strh	r3, [r7, #18]
  q = p;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800fbda:	e025      	b.n	800fc28 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	895b      	ldrh	r3, [r3, #10]
 800fbe0:	8a7a      	ldrh	r2, [r7, #18]
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fbec:	4293      	cmp	r3, r2
 800fbee:	dd06      	ble.n	800fbfe <pbuf_realloc+0x8e>
 800fbf0:	4b2f      	ldr	r3, [pc, #188]	; (800fcb0 <pbuf_realloc+0x140>)
 800fbf2:	f240 220b 	movw	r2, #523	; 0x20b
 800fbf6:	4932      	ldr	r1, [pc, #200]	; (800fcc0 <pbuf_realloc+0x150>)
 800fbf8:	482f      	ldr	r0, [pc, #188]	; (800fcb8 <pbuf_realloc+0x148>)
 800fbfa:	f00b f929 	bl	801ae50 <iprintf>
    q->tot_len += (u16_t)grow;
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	891a      	ldrh	r2, [r3, #8]
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	4413      	add	r3, r2
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d106      	bne.n	800fc28 <pbuf_realloc+0xb8>
 800fc1a:	4b25      	ldr	r3, [pc, #148]	; (800fcb0 <pbuf_realloc+0x140>)
 800fc1c:	f240 220f 	movw	r2, #527	; 0x20f
 800fc20:	4928      	ldr	r1, [pc, #160]	; (800fcc4 <pbuf_realloc+0x154>)
 800fc22:	4825      	ldr	r0, [pc, #148]	; (800fcb8 <pbuf_realloc+0x148>)
 800fc24:	f00b f914 	bl	801ae50 <iprintf>
  while (rem_len > q->len) {
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	895b      	ldrh	r3, [r3, #10]
 800fc2c:	8a7a      	ldrh	r2, [r7, #18]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d8d4      	bhi.n	800fbdc <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	7b1b      	ldrb	r3, [r3, #12]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d122      	bne.n	800fc80 <pbuf_realloc+0x110>
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	895b      	ldrh	r3, [r3, #10]
 800fc3e:	8a7a      	ldrh	r2, [r7, #18]
 800fc40:	429a      	cmp	r2, r3
 800fc42:	d01d      	beq.n	800fc80 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	7b5b      	ldrb	r3, [r3, #13]
 800fc48:	f003 0302 	and.w	r3, r3, #2
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d117      	bne.n	800fc80 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	461a      	mov	r2, r3
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	1ad3      	subs	r3, r2, r3
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	8a7b      	ldrh	r3, [r7, #18]
 800fc5e:	4413      	add	r3, r2
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	4619      	mov	r1, r3
 800fc64:	6978      	ldr	r0, [r7, #20]
 800fc66:	f7ff f8f1 	bl	800ee4c <mem_trim>
 800fc6a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d106      	bne.n	800fc80 <pbuf_realloc+0x110>
 800fc72:	4b0f      	ldr	r3, [pc, #60]	; (800fcb0 <pbuf_realloc+0x140>)
 800fc74:	f240 221d 	movw	r2, #541	; 0x21d
 800fc78:	4913      	ldr	r1, [pc, #76]	; (800fcc8 <pbuf_realloc+0x158>)
 800fc7a:	480f      	ldr	r0, [pc, #60]	; (800fcb8 <pbuf_realloc+0x148>)
 800fc7c:	f00b f8e8 	bl	801ae50 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	8a7a      	ldrh	r2, [r7, #18]
 800fc84:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	895a      	ldrh	r2, [r3, #10]
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d004      	beq.n	800fca0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f000 f8dc 	bl	800fe58 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	2200      	movs	r2, #0
 800fca4:	601a      	str	r2, [r3, #0]
 800fca6:	e000      	b.n	800fcaa <pbuf_realloc+0x13a>
    return;
 800fca8:	bf00      	nop

}
 800fcaa:	3718      	adds	r7, #24
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	0801e5e4 	.word	0x0801e5e4
 800fcb4:	0801e7a0 	.word	0x0801e7a0
 800fcb8:	0801e630 	.word	0x0801e630
 800fcbc:	0801e7b8 	.word	0x0801e7b8
 800fcc0:	0801e7d4 	.word	0x0801e7d4
 800fcc4:	0801e7e8 	.word	0x0801e7e8
 800fcc8:	0801e800 	.word	0x0801e800

0800fccc <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	807b      	strh	r3, [r7, #2]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d106      	bne.n	800fcf0 <pbuf_header_impl+0x24>
 800fce2:	4b46      	ldr	r3, [pc, #280]	; (800fdfc <pbuf_header_impl+0x130>)
 800fce4:	f240 223f 	movw	r2, #575	; 0x23f
 800fce8:	4945      	ldr	r1, [pc, #276]	; (800fe00 <pbuf_header_impl+0x134>)
 800fcea:	4846      	ldr	r0, [pc, #280]	; (800fe04 <pbuf_header_impl+0x138>)
 800fcec:	f00b f8b0 	bl	801ae50 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800fcf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d002      	beq.n	800fcfe <pbuf_header_impl+0x32>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d101      	bne.n	800fd02 <pbuf_header_impl+0x36>
    return 0;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	e078      	b.n	800fdf4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800fd02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	da10      	bge.n	800fd2c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800fd0a:	887b      	ldrh	r3, [r7, #2]
 800fd0c:	425b      	negs	r3, r3
 800fd0e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	895b      	ldrh	r3, [r3, #10]
 800fd14:	89fa      	ldrh	r2, [r7, #14]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d90a      	bls.n	800fd30 <pbuf_header_impl+0x64>
 800fd1a:	4b38      	ldr	r3, [pc, #224]	; (800fdfc <pbuf_header_impl+0x130>)
 800fd1c:	f240 2247 	movw	r2, #583	; 0x247
 800fd20:	4939      	ldr	r1, [pc, #228]	; (800fe08 <pbuf_header_impl+0x13c>)
 800fd22:	4838      	ldr	r0, [pc, #224]	; (800fe04 <pbuf_header_impl+0x138>)
 800fd24:	f00b f894 	bl	801ae50 <iprintf>
 800fd28:	2301      	movs	r3, #1
 800fd2a:	e063      	b.n	800fdf4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800fd2c:	887b      	ldrh	r3, [r7, #2]
 800fd2e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	7b1b      	ldrb	r3, [r3, #12]
 800fd34:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	685b      	ldr	r3, [r3, #4]
 800fd3a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800fd3c:	89bb      	ldrh	r3, [r7, #12]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d002      	beq.n	800fd48 <pbuf_header_impl+0x7c>
 800fd42:	89bb      	ldrh	r3, [r7, #12]
 800fd44:	2b03      	cmp	r3, #3
 800fd46:	d112      	bne.n	800fd6e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fd50:	425b      	negs	r3, r3
 800fd52:	441a      	add	r2, r3
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	685a      	ldr	r2, [r3, #4]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	3310      	adds	r3, #16
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d238      	bcs.n	800fdd6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	68ba      	ldr	r2, [r7, #8]
 800fd68:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	e042      	b.n	800fdf4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800fd6e:	89bb      	ldrh	r3, [r7, #12]
 800fd70:	2b02      	cmp	r3, #2
 800fd72:	d002      	beq.n	800fd7a <pbuf_header_impl+0xae>
 800fd74:	89bb      	ldrh	r3, [r7, #12]
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d124      	bne.n	800fdc4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800fd7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	da0d      	bge.n	800fd9e <pbuf_header_impl+0xd2>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	895b      	ldrh	r3, [r3, #10]
 800fd86:	89fa      	ldrh	r2, [r7, #14]
 800fd88:	429a      	cmp	r2, r3
 800fd8a:	d808      	bhi.n	800fd9e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	685a      	ldr	r2, [r3, #4]
 800fd90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fd94:	425b      	negs	r3, r3
 800fd96:	441a      	add	r2, r3
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	605a      	str	r2, [r3, #4]
 800fd9c:	e011      	b.n	800fdc2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800fd9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	dd0b      	ble.n	800fdbe <pbuf_header_impl+0xf2>
 800fda6:	787b      	ldrb	r3, [r7, #1]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d008      	beq.n	800fdbe <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	685a      	ldr	r2, [r3, #4]
 800fdb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fdb4:	425b      	negs	r3, r3
 800fdb6:	441a      	add	r2, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	605a      	str	r2, [r3, #4]
 800fdbc:	e001      	b.n	800fdc2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	e018      	b.n	800fdf4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800fdc2:	e008      	b.n	800fdd6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800fdc4:	4b0d      	ldr	r3, [pc, #52]	; (800fdfc <pbuf_header_impl+0x130>)
 800fdc6:	f240 2277 	movw	r2, #631	; 0x277
 800fdca:	4910      	ldr	r1, [pc, #64]	; (800fe0c <pbuf_header_impl+0x140>)
 800fdcc:	480d      	ldr	r0, [pc, #52]	; (800fe04 <pbuf_header_impl+0x138>)
 800fdce:	f00b f83f 	bl	801ae50 <iprintf>
    return 1;
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	e00e      	b.n	800fdf4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	895a      	ldrh	r2, [r3, #10]
 800fdda:	887b      	ldrh	r3, [r7, #2]
 800fddc:	4413      	add	r3, r2
 800fdde:	b29a      	uxth	r2, r3
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	891a      	ldrh	r2, [r3, #8]
 800fde8:	887b      	ldrh	r3, [r7, #2]
 800fdea:	4413      	add	r3, r2
 800fdec:	b29a      	uxth	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800fdf2:	2300      	movs	r3, #0
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3710      	adds	r7, #16
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	0801e5e4 	.word	0x0801e5e4
 800fe00:	0801e81c 	.word	0x0801e81c
 800fe04:	0801e630 	.word	0x0801e630
 800fe08:	0801e828 	.word	0x0801e828
 800fe0c:	0801e848 	.word	0x0801e848

0800fe10 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	460b      	mov	r3, r1
 800fe1a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800fe1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe20:	2200      	movs	r2, #0
 800fe22:	4619      	mov	r1, r3
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f7ff ff51 	bl	800fccc <pbuf_header_impl>
 800fe2a:	4603      	mov	r3, r0
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	3708      	adds	r7, #8
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800fe40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe44:	2201      	movs	r2, #1
 800fe46:	4619      	mov	r1, r3
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7ff ff3f 	bl	800fccc <pbuf_header_impl>
 800fe4e:	4603      	mov	r3, r0
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b088      	sub	sp, #32
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d10b      	bne.n	800fe7e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d106      	bne.n	800fe7a <pbuf_free+0x22>
 800fe6c:	4b41      	ldr	r3, [pc, #260]	; (800ff74 <pbuf_free+0x11c>)
 800fe6e:	f240 22d2 	movw	r2, #722	; 0x2d2
 800fe72:	4941      	ldr	r1, [pc, #260]	; (800ff78 <pbuf_free+0x120>)
 800fe74:	4841      	ldr	r0, [pc, #260]	; (800ff7c <pbuf_free+0x124>)
 800fe76:	f00a ffeb 	bl	801ae50 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	e076      	b.n	800ff6c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	7b1b      	ldrb	r3, [r3, #12]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d012      	beq.n	800feac <pbuf_free+0x54>
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	7b1b      	ldrb	r3, [r3, #12]
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d00e      	beq.n	800feac <pbuf_free+0x54>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	7b1b      	ldrb	r3, [r3, #12]
 800fe92:	2b02      	cmp	r3, #2
 800fe94:	d00a      	beq.n	800feac <pbuf_free+0x54>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	7b1b      	ldrb	r3, [r3, #12]
 800fe9a:	2b03      	cmp	r3, #3
 800fe9c:	d006      	beq.n	800feac <pbuf_free+0x54>
 800fe9e:	4b35      	ldr	r3, [pc, #212]	; (800ff74 <pbuf_free+0x11c>)
 800fea0:	f240 22de 	movw	r2, #734	; 0x2de
 800fea4:	4936      	ldr	r1, [pc, #216]	; (800ff80 <pbuf_free+0x128>)
 800fea6:	4835      	ldr	r0, [pc, #212]	; (800ff7c <pbuf_free+0x124>)
 800fea8:	f00a ffd2 	bl	801ae50 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800feac:	2300      	movs	r3, #0
 800feae:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800feb0:	e058      	b.n	800ff64 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800feb2:	f008 fc49 	bl	8018748 <sys_arch_protect>
 800feb6:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	89db      	ldrh	r3, [r3, #14]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d106      	bne.n	800fece <pbuf_free+0x76>
 800fec0:	4b2c      	ldr	r3, [pc, #176]	; (800ff74 <pbuf_free+0x11c>)
 800fec2:	f240 22eb 	movw	r2, #747	; 0x2eb
 800fec6:	492f      	ldr	r1, [pc, #188]	; (800ff84 <pbuf_free+0x12c>)
 800fec8:	482c      	ldr	r0, [pc, #176]	; (800ff7c <pbuf_free+0x124>)
 800feca:	f00a ffc1 	bl	801ae50 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	89db      	ldrh	r3, [r3, #14]
 800fed2:	3b01      	subs	r3, #1
 800fed4:	b29a      	uxth	r2, r3
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	81da      	strh	r2, [r3, #14]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	89db      	ldrh	r3, [r3, #14]
 800fede:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800fee0:	69b8      	ldr	r0, [r7, #24]
 800fee2:	f008 fc3f 	bl	8018764 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800fee6:	8afb      	ldrh	r3, [r7, #22]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d139      	bne.n	800ff60 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	7b1b      	ldrb	r3, [r3, #12]
 800fef6:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	7b5b      	ldrb	r3, [r3, #13]
 800fefc:	f003 0302 	and.w	r3, r3, #2
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d011      	beq.n	800ff28 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	691b      	ldr	r3, [r3, #16]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d106      	bne.n	800ff1e <pbuf_free+0xc6>
 800ff10:	4b18      	ldr	r3, [pc, #96]	; (800ff74 <pbuf_free+0x11c>)
 800ff12:	f240 22f9 	movw	r2, #761	; 0x2f9
 800ff16:	491c      	ldr	r1, [pc, #112]	; (800ff88 <pbuf_free+0x130>)
 800ff18:	4818      	ldr	r0, [pc, #96]	; (800ff7c <pbuf_free+0x124>)
 800ff1a:	f00a ff99 	bl	801ae50 <iprintf>
        pc->custom_free_function(p);
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	691b      	ldr	r3, [r3, #16]
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	4798      	blx	r3
 800ff26:	e015      	b.n	800ff54 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800ff28:	89fb      	ldrh	r3, [r7, #14]
 800ff2a:	2b03      	cmp	r3, #3
 800ff2c:	d104      	bne.n	800ff38 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800ff2e:	6879      	ldr	r1, [r7, #4]
 800ff30:	200c      	movs	r0, #12
 800ff32:	f7ff fa37 	bl	800f3a4 <memp_free>
 800ff36:	e00d      	b.n	800ff54 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800ff38:	89fb      	ldrh	r3, [r7, #14]
 800ff3a:	2b01      	cmp	r3, #1
 800ff3c:	d002      	beq.n	800ff44 <pbuf_free+0xec>
 800ff3e:	89fb      	ldrh	r3, [r7, #14]
 800ff40:	2b02      	cmp	r3, #2
 800ff42:	d104      	bne.n	800ff4e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800ff44:	6879      	ldr	r1, [r7, #4]
 800ff46:	200b      	movs	r0, #11
 800ff48:	f7ff fa2c 	bl	800f3a4 <memp_free>
 800ff4c:	e002      	b.n	800ff54 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7fe ff0e 	bl	800ed70 <mem_free>
        }
      }
      count++;
 800ff54:	7ffb      	ldrb	r3, [r7, #31]
 800ff56:	3301      	adds	r3, #1
 800ff58:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	607b      	str	r3, [r7, #4]
 800ff5e:	e001      	b.n	800ff64 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800ff60:	2300      	movs	r3, #0
 800ff62:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d1a3      	bne.n	800feb2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ff6a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3720      	adds	r7, #32
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	0801e5e4 	.word	0x0801e5e4
 800ff78:	0801e81c 	.word	0x0801e81c
 800ff7c:	0801e630 	.word	0x0801e630
 800ff80:	0801e858 	.word	0x0801e858
 800ff84:	0801e870 	.word	0x0801e870
 800ff88:	0801e888 	.word	0x0801e888

0800ff8c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b085      	sub	sp, #20
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ff94:	2300      	movs	r3, #0
 800ff96:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ff98:	e005      	b.n	800ffa6 <pbuf_clen+0x1a>
    ++len;
 800ff9a:	89fb      	ldrh	r3, [r7, #14]
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d1f6      	bne.n	800ff9a <pbuf_clen+0xe>
  }
  return len;
 800ffac:	89fb      	ldrh	r3, [r7, #14]
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3714      	adds	r7, #20
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr
	...

0800ffbc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d016      	beq.n	800fff8 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800ffca:	f008 fbbd 	bl	8018748 <sys_arch_protect>
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	89db      	ldrh	r3, [r3, #14]
 800ffd4:	3301      	adds	r3, #1
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	81da      	strh	r2, [r3, #14]
 800ffdc:	68f8      	ldr	r0, [r7, #12]
 800ffde:	f008 fbc1 	bl	8018764 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	89db      	ldrh	r3, [r3, #14]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d106      	bne.n	800fff8 <pbuf_ref+0x3c>
 800ffea:	4b05      	ldr	r3, [pc, #20]	; (8010000 <pbuf_ref+0x44>)
 800ffec:	f240 3239 	movw	r2, #825	; 0x339
 800fff0:	4904      	ldr	r1, [pc, #16]	; (8010004 <pbuf_ref+0x48>)
 800fff2:	4805      	ldr	r0, [pc, #20]	; (8010008 <pbuf_ref+0x4c>)
 800fff4:	f00a ff2c 	bl	801ae50 <iprintf>
  }
}
 800fff8:	bf00      	nop
 800fffa:	3710      	adds	r7, #16
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}
 8010000:	0801e5e4 	.word	0x0801e5e4
 8010004:	0801e8ac 	.word	0x0801e8ac
 8010008:	0801e630 	.word	0x0801e630

0801000c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d002      	beq.n	8010022 <pbuf_cat+0x16>
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d107      	bne.n	8010032 <pbuf_cat+0x26>
 8010022:	4b20      	ldr	r3, [pc, #128]	; (80100a4 <pbuf_cat+0x98>)
 8010024:	f240 324d 	movw	r2, #845	; 0x34d
 8010028:	491f      	ldr	r1, [pc, #124]	; (80100a8 <pbuf_cat+0x9c>)
 801002a:	4820      	ldr	r0, [pc, #128]	; (80100ac <pbuf_cat+0xa0>)
 801002c:	f00a ff10 	bl	801ae50 <iprintf>
 8010030:	e034      	b.n	801009c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	60fb      	str	r3, [r7, #12]
 8010036:	e00a      	b.n	801004e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	891a      	ldrh	r2, [r3, #8]
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	891b      	ldrh	r3, [r3, #8]
 8010040:	4413      	add	r3, r2
 8010042:	b29a      	uxth	r2, r3
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	60fb      	str	r3, [r7, #12]
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d1f0      	bne.n	8010038 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	891a      	ldrh	r2, [r3, #8]
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	895b      	ldrh	r3, [r3, #10]
 801005e:	429a      	cmp	r2, r3
 8010060:	d006      	beq.n	8010070 <pbuf_cat+0x64>
 8010062:	4b10      	ldr	r3, [pc, #64]	; (80100a4 <pbuf_cat+0x98>)
 8010064:	f240 3255 	movw	r2, #853	; 0x355
 8010068:	4911      	ldr	r1, [pc, #68]	; (80100b0 <pbuf_cat+0xa4>)
 801006a:	4810      	ldr	r0, [pc, #64]	; (80100ac <pbuf_cat+0xa0>)
 801006c:	f00a fef0 	bl	801ae50 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d006      	beq.n	8010086 <pbuf_cat+0x7a>
 8010078:	4b0a      	ldr	r3, [pc, #40]	; (80100a4 <pbuf_cat+0x98>)
 801007a:	f240 3256 	movw	r2, #854	; 0x356
 801007e:	490d      	ldr	r1, [pc, #52]	; (80100b4 <pbuf_cat+0xa8>)
 8010080:	480a      	ldr	r0, [pc, #40]	; (80100ac <pbuf_cat+0xa0>)
 8010082:	f00a fee5 	bl	801ae50 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	891a      	ldrh	r2, [r3, #8]
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	891b      	ldrh	r3, [r3, #8]
 801008e:	4413      	add	r3, r2
 8010090:	b29a      	uxth	r2, r3
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	683a      	ldr	r2, [r7, #0]
 801009a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801009c:	3710      	adds	r7, #16
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	0801e5e4 	.word	0x0801e5e4
 80100a8:	0801e8c0 	.word	0x0801e8c0
 80100ac:	0801e630 	.word	0x0801e630
 80100b0:	0801e8f8 	.word	0x0801e8f8
 80100b4:	0801e928 	.word	0x0801e928

080100b8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80100c2:	2300      	movs	r3, #0
 80100c4:	81fb      	strh	r3, [r7, #14]
 80100c6:	2300      	movs	r3, #0
 80100c8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d008      	beq.n	80100e2 <pbuf_copy+0x2a>
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d005      	beq.n	80100e2 <pbuf_copy+0x2a>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	891a      	ldrh	r2, [r3, #8]
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	891b      	ldrh	r3, [r3, #8]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d209      	bcs.n	80100f6 <pbuf_copy+0x3e>
 80100e2:	4b54      	ldr	r3, [pc, #336]	; (8010234 <pbuf_copy+0x17c>)
 80100e4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80100e8:	4953      	ldr	r1, [pc, #332]	; (8010238 <pbuf_copy+0x180>)
 80100ea:	4854      	ldr	r0, [pc, #336]	; (801023c <pbuf_copy+0x184>)
 80100ec:	f00a feb0 	bl	801ae50 <iprintf>
 80100f0:	f06f 030f 	mvn.w	r3, #15
 80100f4:	e099      	b.n	801022a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	895b      	ldrh	r3, [r3, #10]
 80100fa:	461a      	mov	r2, r3
 80100fc:	89fb      	ldrh	r3, [r7, #14]
 80100fe:	1ad2      	subs	r2, r2, r3
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	895b      	ldrh	r3, [r3, #10]
 8010104:	4619      	mov	r1, r3
 8010106:	89bb      	ldrh	r3, [r7, #12]
 8010108:	1acb      	subs	r3, r1, r3
 801010a:	429a      	cmp	r2, r3
 801010c:	db05      	blt.n	801011a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	895a      	ldrh	r2, [r3, #10]
 8010112:	89bb      	ldrh	r3, [r7, #12]
 8010114:	1ad3      	subs	r3, r2, r3
 8010116:	817b      	strh	r3, [r7, #10]
 8010118:	e004      	b.n	8010124 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	895a      	ldrh	r2, [r3, #10]
 801011e:	89fb      	ldrh	r3, [r7, #14]
 8010120:	1ad3      	subs	r3, r2, r3
 8010122:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	685a      	ldr	r2, [r3, #4]
 8010128:	89fb      	ldrh	r3, [r7, #14]
 801012a:	18d0      	adds	r0, r2, r3
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	685a      	ldr	r2, [r3, #4]
 8010130:	89bb      	ldrh	r3, [r7, #12]
 8010132:	4413      	add	r3, r2
 8010134:	897a      	ldrh	r2, [r7, #10]
 8010136:	4619      	mov	r1, r3
 8010138:	f00a f993 	bl	801a462 <memcpy>
    offset_to += len;
 801013c:	89fa      	ldrh	r2, [r7, #14]
 801013e:	897b      	ldrh	r3, [r7, #10]
 8010140:	4413      	add	r3, r2
 8010142:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8010144:	89ba      	ldrh	r2, [r7, #12]
 8010146:	897b      	ldrh	r3, [r7, #10]
 8010148:	4413      	add	r3, r2
 801014a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	895b      	ldrh	r3, [r3, #10]
 8010150:	89fa      	ldrh	r2, [r7, #14]
 8010152:	429a      	cmp	r2, r3
 8010154:	d906      	bls.n	8010164 <pbuf_copy+0xac>
 8010156:	4b37      	ldr	r3, [pc, #220]	; (8010234 <pbuf_copy+0x17c>)
 8010158:	f240 32cd 	movw	r2, #973	; 0x3cd
 801015c:	4938      	ldr	r1, [pc, #224]	; (8010240 <pbuf_copy+0x188>)
 801015e:	4837      	ldr	r0, [pc, #220]	; (801023c <pbuf_copy+0x184>)
 8010160:	f00a fe76 	bl	801ae50 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	895b      	ldrh	r3, [r3, #10]
 8010168:	89ba      	ldrh	r2, [r7, #12]
 801016a:	429a      	cmp	r2, r3
 801016c:	d906      	bls.n	801017c <pbuf_copy+0xc4>
 801016e:	4b31      	ldr	r3, [pc, #196]	; (8010234 <pbuf_copy+0x17c>)
 8010170:	f240 32ce 	movw	r2, #974	; 0x3ce
 8010174:	4933      	ldr	r1, [pc, #204]	; (8010244 <pbuf_copy+0x18c>)
 8010176:	4831      	ldr	r0, [pc, #196]	; (801023c <pbuf_copy+0x184>)
 8010178:	f00a fe6a 	bl	801ae50 <iprintf>
    if (offset_from >= p_from->len) {
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	895b      	ldrh	r3, [r3, #10]
 8010180:	89ba      	ldrh	r2, [r7, #12]
 8010182:	429a      	cmp	r2, r3
 8010184:	d304      	bcc.n	8010190 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010186:	2300      	movs	r3, #0
 8010188:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	895b      	ldrh	r3, [r3, #10]
 8010194:	89fa      	ldrh	r2, [r7, #14]
 8010196:	429a      	cmp	r2, r3
 8010198:	d114      	bne.n	80101c4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 801019a:	2300      	movs	r3, #0
 801019c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d10c      	bne.n	80101c4 <pbuf_copy+0x10c>
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d009      	beq.n	80101c4 <pbuf_copy+0x10c>
 80101b0:	4b20      	ldr	r3, [pc, #128]	; (8010234 <pbuf_copy+0x17c>)
 80101b2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80101b6:	4924      	ldr	r1, [pc, #144]	; (8010248 <pbuf_copy+0x190>)
 80101b8:	4820      	ldr	r0, [pc, #128]	; (801023c <pbuf_copy+0x184>)
 80101ba:	f00a fe49 	bl	801ae50 <iprintf>
 80101be:	f06f 030f 	mvn.w	r3, #15
 80101c2:	e032      	b.n	801022a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d013      	beq.n	80101f2 <pbuf_copy+0x13a>
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	895a      	ldrh	r2, [r3, #10]
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	891b      	ldrh	r3, [r3, #8]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d10d      	bne.n	80101f2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d009      	beq.n	80101f2 <pbuf_copy+0x13a>
 80101de:	4b15      	ldr	r3, [pc, #84]	; (8010234 <pbuf_copy+0x17c>)
 80101e0:	f240 32de 	movw	r2, #990	; 0x3de
 80101e4:	4919      	ldr	r1, [pc, #100]	; (801024c <pbuf_copy+0x194>)
 80101e6:	4815      	ldr	r0, [pc, #84]	; (801023c <pbuf_copy+0x184>)
 80101e8:	f00a fe32 	bl	801ae50 <iprintf>
 80101ec:	f06f 0305 	mvn.w	r3, #5
 80101f0:	e01b      	b.n	801022a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d013      	beq.n	8010220 <pbuf_copy+0x168>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	895a      	ldrh	r2, [r3, #10]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	891b      	ldrh	r3, [r3, #8]
 8010200:	429a      	cmp	r2, r3
 8010202:	d10d      	bne.n	8010220 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d009      	beq.n	8010220 <pbuf_copy+0x168>
 801020c:	4b09      	ldr	r3, [pc, #36]	; (8010234 <pbuf_copy+0x17c>)
 801020e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8010212:	490e      	ldr	r1, [pc, #56]	; (801024c <pbuf_copy+0x194>)
 8010214:	4809      	ldr	r0, [pc, #36]	; (801023c <pbuf_copy+0x184>)
 8010216:	f00a fe1b 	bl	801ae50 <iprintf>
 801021a:	f06f 0305 	mvn.w	r3, #5
 801021e:	e004      	b.n	801022a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	2b00      	cmp	r3, #0
 8010224:	f47f af67 	bne.w	80100f6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010228:	2300      	movs	r3, #0
}
 801022a:	4618      	mov	r0, r3
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	0801e5e4 	.word	0x0801e5e4
 8010238:	0801e974 	.word	0x0801e974
 801023c:	0801e630 	.word	0x0801e630
 8010240:	0801e9a4 	.word	0x0801e9a4
 8010244:	0801e9bc 	.word	0x0801e9bc
 8010248:	0801e9d8 	.word	0x0801e9d8
 801024c:	0801e9e8 	.word	0x0801e9e8

08010250 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b088      	sub	sp, #32
 8010254:	af00      	add	r7, sp, #0
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	4611      	mov	r1, r2
 801025c:	461a      	mov	r2, r3
 801025e:	460b      	mov	r3, r1
 8010260:	80fb      	strh	r3, [r7, #6]
 8010262:	4613      	mov	r3, r2
 8010264:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010266:	2300      	movs	r3, #0
 8010268:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d108      	bne.n	8010282 <pbuf_copy_partial+0x32>
 8010270:	4b30      	ldr	r3, [pc, #192]	; (8010334 <pbuf_copy_partial+0xe4>)
 8010272:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8010276:	4930      	ldr	r1, [pc, #192]	; (8010338 <pbuf_copy_partial+0xe8>)
 8010278:	4830      	ldr	r0, [pc, #192]	; (801033c <pbuf_copy_partial+0xec>)
 801027a:	f00a fde9 	bl	801ae50 <iprintf>
 801027e:	2300      	movs	r3, #0
 8010280:	e054      	b.n	801032c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d108      	bne.n	801029a <pbuf_copy_partial+0x4a>
 8010288:	4b2a      	ldr	r3, [pc, #168]	; (8010334 <pbuf_copy_partial+0xe4>)
 801028a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801028e:	492c      	ldr	r1, [pc, #176]	; (8010340 <pbuf_copy_partial+0xf0>)
 8010290:	482a      	ldr	r0, [pc, #168]	; (801033c <pbuf_copy_partial+0xec>)
 8010292:	f00a fddd 	bl	801ae50 <iprintf>
 8010296:	2300      	movs	r3, #0
 8010298:	e048      	b.n	801032c <pbuf_copy_partial+0xdc>

  left = 0;
 801029a:	2300      	movs	r3, #0
 801029c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d002      	beq.n	80102aa <pbuf_copy_partial+0x5a>
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d101      	bne.n	80102ae <pbuf_copy_partial+0x5e>
    return 0;
 80102aa:	2300      	movs	r3, #0
 80102ac:	e03e      	b.n	801032c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	61fb      	str	r3, [r7, #28]
 80102b2:	e034      	b.n	801031e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 80102b4:	88bb      	ldrh	r3, [r7, #4]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d00a      	beq.n	80102d0 <pbuf_copy_partial+0x80>
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	895b      	ldrh	r3, [r3, #10]
 80102be:	88ba      	ldrh	r2, [r7, #4]
 80102c0:	429a      	cmp	r2, r3
 80102c2:	d305      	bcc.n	80102d0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	895b      	ldrh	r3, [r3, #10]
 80102c8:	88ba      	ldrh	r2, [r7, #4]
 80102ca:	1ad3      	subs	r3, r2, r3
 80102cc:	80bb      	strh	r3, [r7, #4]
 80102ce:	e023      	b.n	8010318 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	895a      	ldrh	r2, [r3, #10]
 80102d4:	88bb      	ldrh	r3, [r7, #4]
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80102da:	8b3a      	ldrh	r2, [r7, #24]
 80102dc:	88fb      	ldrh	r3, [r7, #6]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d901      	bls.n	80102e6 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80102e2:	88fb      	ldrh	r3, [r7, #6]
 80102e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80102e6:	8b7b      	ldrh	r3, [r7, #26]
 80102e8:	68ba      	ldr	r2, [r7, #8]
 80102ea:	18d0      	adds	r0, r2, r3
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	685a      	ldr	r2, [r3, #4]
 80102f0:	88bb      	ldrh	r3, [r7, #4]
 80102f2:	4413      	add	r3, r2
 80102f4:	8b3a      	ldrh	r2, [r7, #24]
 80102f6:	4619      	mov	r1, r3
 80102f8:	f00a f8b3 	bl	801a462 <memcpy>
      copied_total += buf_copy_len;
 80102fc:	8afa      	ldrh	r2, [r7, #22]
 80102fe:	8b3b      	ldrh	r3, [r7, #24]
 8010300:	4413      	add	r3, r2
 8010302:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8010304:	8b7a      	ldrh	r2, [r7, #26]
 8010306:	8b3b      	ldrh	r3, [r7, #24]
 8010308:	4413      	add	r3, r2
 801030a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 801030c:	88fa      	ldrh	r2, [r7, #6]
 801030e:	8b3b      	ldrh	r3, [r7, #24]
 8010310:	1ad3      	subs	r3, r2, r3
 8010312:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010314:	2300      	movs	r3, #0
 8010316:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	61fb      	str	r3, [r7, #28]
 801031e:	88fb      	ldrh	r3, [r7, #6]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d002      	beq.n	801032a <pbuf_copy_partial+0xda>
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d1c4      	bne.n	80102b4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 801032a:	8afb      	ldrh	r3, [r7, #22]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3720      	adds	r7, #32
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	0801e5e4 	.word	0x0801e5e4
 8010338:	0801ea14 	.word	0x0801ea14
 801033c:	0801e630 	.word	0x0801e630
 8010340:	0801ea34 	.word	0x0801ea34

08010344 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010344:	b480      	push	{r7}
 8010346:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8010348:	bf00      	nop
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr
	...

08010354 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010354:	b580      	push	{r7, lr}
 8010356:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010358:	f000 ffb6 	bl	80112c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801035c:	4b07      	ldr	r3, [pc, #28]	; (801037c <tcp_tmr+0x28>)
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	3301      	adds	r3, #1
 8010362:	b2da      	uxtb	r2, r3
 8010364:	4b05      	ldr	r3, [pc, #20]	; (801037c <tcp_tmr+0x28>)
 8010366:	701a      	strb	r2, [r3, #0]
 8010368:	4b04      	ldr	r3, [pc, #16]	; (801037c <tcp_tmr+0x28>)
 801036a:	781b      	ldrb	r3, [r3, #0]
 801036c:	f003 0301 	and.w	r3, r3, #1
 8010370:	2b00      	cmp	r3, #0
 8010372:	d001      	beq.n	8010378 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010374:	f000 fce8 	bl	8010d48 <tcp_slowtmr>
  }
}
 8010378:	bf00      	nop
 801037a:	bd80      	pop	{r7, pc}
 801037c:	2000c969 	.word	0x2000c969

08010380 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010380:	b480      	push	{r7}
 8010382:	b085      	sub	sp, #20
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	60fb      	str	r3, [r7, #12]
 801038e:	e00a      	b.n	80103a6 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010394:	683a      	ldr	r2, [r7, #0]
 8010396:	429a      	cmp	r2, r3
 8010398:	d102      	bne.n	80103a0 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2200      	movs	r2, #0
 801039e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	68db      	ldr	r3, [r3, #12]
 80103a4:	60fb      	str	r3, [r7, #12]
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d1f1      	bne.n	8010390 <tcp_remove_listener+0x10>
      }
   }
}
 80103ac:	bf00      	nop
 80103ae:	3714      	adds	r7, #20
 80103b0:	46bd      	mov	sp, r7
 80103b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b6:	4770      	bx	lr

080103b8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d105      	bne.n	80103d2 <tcp_listen_closed+0x1a>
 80103c6:	4b13      	ldr	r3, [pc, #76]	; (8010414 <tcp_listen_closed+0x5c>)
 80103c8:	22c0      	movs	r2, #192	; 0xc0
 80103ca:	4913      	ldr	r1, [pc, #76]	; (8010418 <tcp_listen_closed+0x60>)
 80103cc:	4813      	ldr	r0, [pc, #76]	; (801041c <tcp_listen_closed+0x64>)
 80103ce:	f00a fd3f 	bl	801ae50 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	7d1b      	ldrb	r3, [r3, #20]
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	d005      	beq.n	80103e6 <tcp_listen_closed+0x2e>
 80103da:	4b0e      	ldr	r3, [pc, #56]	; (8010414 <tcp_listen_closed+0x5c>)
 80103dc:	22c1      	movs	r2, #193	; 0xc1
 80103de:	4910      	ldr	r1, [pc, #64]	; (8010420 <tcp_listen_closed+0x68>)
 80103e0:	480e      	ldr	r0, [pc, #56]	; (801041c <tcp_listen_closed+0x64>)
 80103e2:	f00a fd35 	bl	801ae50 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80103e6:	2301      	movs	r3, #1
 80103e8:	60fb      	str	r3, [r7, #12]
 80103ea:	e00b      	b.n	8010404 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80103ec:	4a0d      	ldr	r2, [pc, #52]	; (8010424 <tcp_listen_closed+0x6c>)
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	6879      	ldr	r1, [r7, #4]
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7ff ffc1 	bl	8010380 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	3301      	adds	r3, #1
 8010402:	60fb      	str	r3, [r7, #12]
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2b03      	cmp	r3, #3
 8010408:	d9f0      	bls.n	80103ec <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801040a:	bf00      	nop
 801040c:	3710      	adds	r7, #16
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	0801eb68 	.word	0x0801eb68
 8010418:	0801eb98 	.word	0x0801eb98
 801041c:	0801eba4 	.word	0x0801eba4
 8010420:	0801ebcc 	.word	0x0801ebcc
 8010424:	080200c0 	.word	0x080200c0

08010428 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010428:	b5b0      	push	{r4, r5, r7, lr}
 801042a:	b086      	sub	sp, #24
 801042c:	af02      	add	r7, sp, #8
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	460b      	mov	r3, r1
 8010432:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010434:	78fb      	ldrb	r3, [r7, #3]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d075      	beq.n	8010526 <tcp_close_shutdown+0xfe>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	7d1b      	ldrb	r3, [r3, #20]
 801043e:	2b04      	cmp	r3, #4
 8010440:	d003      	beq.n	801044a <tcp_close_shutdown+0x22>
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	7d1b      	ldrb	r3, [r3, #20]
 8010446:	2b07      	cmp	r3, #7
 8010448:	d16d      	bne.n	8010526 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801044e:	2b00      	cmp	r3, #0
 8010450:	d104      	bne.n	801045c <tcp_close_shutdown+0x34>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010456:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801045a:	d064      	beq.n	8010526 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	7e9b      	ldrb	r3, [r3, #26]
 8010460:	f003 0310 	and.w	r3, r3, #16
 8010464:	2b00      	cmp	r3, #0
 8010466:	d106      	bne.n	8010476 <tcp_close_shutdown+0x4e>
 8010468:	4b59      	ldr	r3, [pc, #356]	; (80105d0 <tcp_close_shutdown+0x1a8>)
 801046a:	f240 120f 	movw	r2, #271	; 0x10f
 801046e:	4959      	ldr	r1, [pc, #356]	; (80105d4 <tcp_close_shutdown+0x1ac>)
 8010470:	4859      	ldr	r0, [pc, #356]	; (80105d8 <tcp_close_shutdown+0x1b0>)
 8010472:	f00a fced 	bl	801ae50 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801047e:	687c      	ldr	r4, [r7, #4]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	1d1d      	adds	r5, r3, #4
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	8adb      	ldrh	r3, [r3, #22]
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	8b12      	ldrh	r2, [r2, #24]
 801048c:	9201      	str	r2, [sp, #4]
 801048e:	9300      	str	r3, [sp, #0]
 8010490:	462b      	mov	r3, r5
 8010492:	4622      	mov	r2, r4
 8010494:	f004 ff1a 	bl	80152cc <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f001 fa4b 	bl	8011934 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801049e:	4b4f      	ldr	r3, [pc, #316]	; (80105dc <tcp_close_shutdown+0x1b4>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d105      	bne.n	80104b4 <tcp_close_shutdown+0x8c>
 80104a8:	4b4c      	ldr	r3, [pc, #304]	; (80105dc <tcp_close_shutdown+0x1b4>)
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	4a4b      	ldr	r2, [pc, #300]	; (80105dc <tcp_close_shutdown+0x1b4>)
 80104b0:	6013      	str	r3, [r2, #0]
 80104b2:	e013      	b.n	80104dc <tcp_close_shutdown+0xb4>
 80104b4:	4b49      	ldr	r3, [pc, #292]	; (80105dc <tcp_close_shutdown+0x1b4>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	60fb      	str	r3, [r7, #12]
 80104ba:	e00c      	b.n	80104d6 <tcp_close_shutdown+0xae>
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d104      	bne.n	80104d0 <tcp_close_shutdown+0xa8>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	68da      	ldr	r2, [r3, #12]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	60da      	str	r2, [r3, #12]
 80104ce:	e005      	b.n	80104dc <tcp_close_shutdown+0xb4>
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	60fb      	str	r3, [r7, #12]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d1ef      	bne.n	80104bc <tcp_close_shutdown+0x94>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2200      	movs	r2, #0
 80104e0:	60da      	str	r2, [r3, #12]
 80104e2:	4b3f      	ldr	r3, [pc, #252]	; (80105e0 <tcp_close_shutdown+0x1b8>)
 80104e4:	2201      	movs	r2, #1
 80104e6:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	7d1b      	ldrb	r3, [r3, #20]
 80104ec:	2b04      	cmp	r3, #4
 80104ee:	d10c      	bne.n	801050a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	220a      	movs	r2, #10
 80104f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80104f6:	4b3b      	ldr	r3, [pc, #236]	; (80105e4 <tcp_close_shutdown+0x1bc>)
 80104f8:	681a      	ldr	r2, [r3, #0]
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	60da      	str	r2, [r3, #12]
 80104fe:	4a39      	ldr	r2, [pc, #228]	; (80105e4 <tcp_close_shutdown+0x1bc>)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6013      	str	r3, [r2, #0]
 8010504:	f005 f934 	bl	8015770 <tcp_timer_needed>
 8010508:	e00b      	b.n	8010522 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 801050a:	4b37      	ldr	r3, [pc, #220]	; (80105e8 <tcp_close_shutdown+0x1c0>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	429a      	cmp	r2, r3
 8010512:	d102      	bne.n	801051a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8010514:	f003 fd72 	bl	8013ffc <tcp_trigger_input_pcb_close>
 8010518:	e003      	b.n	8010522 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 801051a:	6879      	ldr	r1, [r7, #4]
 801051c:	2001      	movs	r0, #1
 801051e:	f7fe ff41 	bl	800f3a4 <memp_free>
        }
      }
      return ERR_OK;
 8010522:	2300      	movs	r3, #0
 8010524:	e050      	b.n	80105c8 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	7d1b      	ldrb	r3, [r3, #20]
 801052a:	2b01      	cmp	r3, #1
 801052c:	d02e      	beq.n	801058c <tcp_close_shutdown+0x164>
 801052e:	2b02      	cmp	r3, #2
 8010530:	d038      	beq.n	80105a4 <tcp_close_shutdown+0x17c>
 8010532:	2b00      	cmp	r3, #0
 8010534:	d142      	bne.n	80105bc <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	8adb      	ldrh	r3, [r3, #22]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d021      	beq.n	8010582 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801053e:	4b2b      	ldr	r3, [pc, #172]	; (80105ec <tcp_close_shutdown+0x1c4>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	429a      	cmp	r2, r3
 8010546:	d105      	bne.n	8010554 <tcp_close_shutdown+0x12c>
 8010548:	4b28      	ldr	r3, [pc, #160]	; (80105ec <tcp_close_shutdown+0x1c4>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	4a27      	ldr	r2, [pc, #156]	; (80105ec <tcp_close_shutdown+0x1c4>)
 8010550:	6013      	str	r3, [r2, #0]
 8010552:	e013      	b.n	801057c <tcp_close_shutdown+0x154>
 8010554:	4b25      	ldr	r3, [pc, #148]	; (80105ec <tcp_close_shutdown+0x1c4>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	60bb      	str	r3, [r7, #8]
 801055a:	e00c      	b.n	8010576 <tcp_close_shutdown+0x14e>
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	429a      	cmp	r2, r3
 8010564:	d104      	bne.n	8010570 <tcp_close_shutdown+0x148>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	68da      	ldr	r2, [r3, #12]
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	60da      	str	r2, [r3, #12]
 801056e:	e005      	b.n	801057c <tcp_close_shutdown+0x154>
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	68db      	ldr	r3, [r3, #12]
 8010574:	60bb      	str	r3, [r7, #8]
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1ef      	bne.n	801055c <tcp_close_shutdown+0x134>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2200      	movs	r2, #0
 8010580:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8010582:	6879      	ldr	r1, [r7, #4]
 8010584:	2001      	movs	r0, #1
 8010586:	f7fe ff0d 	bl	800f3a4 <memp_free>
    break;
 801058a:	e01c      	b.n	80105c6 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f7ff ff13 	bl	80103b8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010592:	6879      	ldr	r1, [r7, #4]
 8010594:	4816      	ldr	r0, [pc, #88]	; (80105f0 <tcp_close_shutdown+0x1c8>)
 8010596:	f001 fa0f 	bl	80119b8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801059a:	6879      	ldr	r1, [r7, #4]
 801059c:	2002      	movs	r0, #2
 801059e:	f7fe ff01 	bl	800f3a4 <memp_free>
    break;
 80105a2:	e010      	b.n	80105c6 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80105a4:	6879      	ldr	r1, [r7, #4]
 80105a6:	480d      	ldr	r0, [pc, #52]	; (80105dc <tcp_close_shutdown+0x1b4>)
 80105a8:	f001 fa06 	bl	80119b8 <tcp_pcb_remove>
 80105ac:	4b0c      	ldr	r3, [pc, #48]	; (80105e0 <tcp_close_shutdown+0x1b8>)
 80105ae:	2201      	movs	r2, #1
 80105b0:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80105b2:	6879      	ldr	r1, [r7, #4]
 80105b4:	2001      	movs	r0, #1
 80105b6:	f7fe fef5 	bl	800f3a4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80105ba:	e004      	b.n	80105c6 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f000 f819 	bl	80105f4 <tcp_close_shutdown_fin>
 80105c2:	4603      	mov	r3, r0
 80105c4:	e000      	b.n	80105c8 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3710      	adds	r7, #16
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bdb0      	pop	{r4, r5, r7, pc}
 80105d0:	0801eb68 	.word	0x0801eb68
 80105d4:	0801ebe4 	.word	0x0801ebe4
 80105d8:	0801eba4 	.word	0x0801eba4
 80105dc:	20016424 	.word	0x20016424
 80105e0:	20016420 	.word	0x20016420
 80105e4:	20016434 	.word	0x20016434
 80105e8:	20016438 	.word	0x20016438
 80105ec:	20016430 	.word	0x20016430
 80105f0:	2001642c 	.word	0x2001642c

080105f4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d106      	bne.n	8010610 <tcp_close_shutdown_fin+0x1c>
 8010602:	4b2c      	ldr	r3, [pc, #176]	; (80106b4 <tcp_close_shutdown_fin+0xc0>)
 8010604:	f240 124d 	movw	r2, #333	; 0x14d
 8010608:	492b      	ldr	r1, [pc, #172]	; (80106b8 <tcp_close_shutdown_fin+0xc4>)
 801060a:	482c      	ldr	r0, [pc, #176]	; (80106bc <tcp_close_shutdown_fin+0xc8>)
 801060c:	f00a fc20 	bl	801ae50 <iprintf>

  switch (pcb->state) {
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	7d1b      	ldrb	r3, [r3, #20]
 8010614:	2b04      	cmp	r3, #4
 8010616:	d010      	beq.n	801063a <tcp_close_shutdown_fin+0x46>
 8010618:	2b07      	cmp	r3, #7
 801061a:	d01b      	beq.n	8010654 <tcp_close_shutdown_fin+0x60>
 801061c:	2b03      	cmp	r3, #3
 801061e:	d126      	bne.n	801066e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f003 fd77 	bl	8014114 <tcp_send_fin>
 8010626:	4603      	mov	r3, r0
 8010628:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801062a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d11f      	bne.n	8010672 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2205      	movs	r2, #5
 8010636:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010638:	e01b      	b.n	8010672 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f003 fd6a 	bl	8014114 <tcp_send_fin>
 8010640:	4603      	mov	r3, r0
 8010642:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d114      	bne.n	8010676 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	2205      	movs	r2, #5
 8010650:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010652:	e010      	b.n	8010676 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f003 fd5d 	bl	8014114 <tcp_send_fin>
 801065a:	4603      	mov	r3, r0
 801065c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801065e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d109      	bne.n	801067a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2209      	movs	r2, #9
 801066a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801066c:	e005      	b.n	801067a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 801066e:	2300      	movs	r3, #0
 8010670:	e01c      	b.n	80106ac <tcp_close_shutdown_fin+0xb8>
    break;
 8010672:	bf00      	nop
 8010674:	e002      	b.n	801067c <tcp_close_shutdown_fin+0x88>
    break;
 8010676:	bf00      	nop
 8010678:	e000      	b.n	801067c <tcp_close_shutdown_fin+0x88>
    break;
 801067a:	bf00      	nop
  }

  if (err == ERR_OK) {
 801067c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d103      	bne.n	801068c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f004 fb97 	bl	8014db8 <tcp_output>
 801068a:	e00d      	b.n	80106a8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801068c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010694:	d108      	bne.n	80106a8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	7e9b      	ldrb	r3, [r3, #26]
 801069a:	f043 0308 	orr.w	r3, r3, #8
 801069e:	b2da      	uxtb	r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80106a4:	2300      	movs	r3, #0
 80106a6:	e001      	b.n	80106ac <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80106a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80106ac:	4618      	mov	r0, r3
 80106ae:	3710      	adds	r7, #16
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	0801eb68 	.word	0x0801eb68
 80106b8:	0801eb98 	.word	0x0801eb98
 80106bc:	0801eba4 	.word	0x0801eba4

080106c0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b082      	sub	sp, #8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	7d1b      	ldrb	r3, [r3, #20]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	d006      	beq.n	80106de <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	7e9b      	ldrb	r3, [r3, #26]
 80106d4:	f043 0310 	orr.w	r3, r3, #16
 80106d8:	b2da      	uxtb	r2, r3
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80106de:	2101      	movs	r1, #1
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f7ff fea1 	bl	8010428 <tcp_close_shutdown>
 80106e6:	4603      	mov	r3, r0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3708      	adds	r7, #8
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}

080106f0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	7d1b      	ldrb	r3, [r3, #20]
 8010700:	2b01      	cmp	r3, #1
 8010702:	d102      	bne.n	801070a <tcp_shutdown+0x1a>
    return ERR_CONN;
 8010704:	f06f 030a 	mvn.w	r3, #10
 8010708:	e035      	b.n	8010776 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d01b      	beq.n	8010748 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	7e9b      	ldrb	r3, [r3, #26]
 8010714:	f043 0310 	orr.w	r3, r3, #16
 8010718:	b2da      	uxtb	r2, r3
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d005      	beq.n	8010730 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8010724:	2101      	movs	r1, #1
 8010726:	68f8      	ldr	r0, [r7, #12]
 8010728:	f7ff fe7e 	bl	8010428 <tcp_close_shutdown>
 801072c:	4603      	mov	r3, r0
 801072e:	e022      	b.n	8010776 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010734:	2b00      	cmp	r3, #0
 8010736:	d007      	beq.n	8010748 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801073c:	4618      	mov	r0, r3
 801073e:	f7ff fb8b 	bl	800fe58 <pbuf_free>
      pcb->refused_data = NULL;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	2200      	movs	r2, #0
 8010746:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d012      	beq.n	8010774 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	7d1b      	ldrb	r3, [r3, #20]
 8010752:	2b03      	cmp	r3, #3
 8010754:	db0b      	blt.n	801076e <tcp_shutdown+0x7e>
 8010756:	2b04      	cmp	r3, #4
 8010758:	dd01      	ble.n	801075e <tcp_shutdown+0x6e>
 801075a:	2b07      	cmp	r3, #7
 801075c:	d107      	bne.n	801076e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	b2db      	uxtb	r3, r3
 8010762:	4619      	mov	r1, r3
 8010764:	68f8      	ldr	r0, [r7, #12]
 8010766:	f7ff fe5f 	bl	8010428 <tcp_close_shutdown>
 801076a:	4603      	mov	r3, r0
 801076c:	e003      	b.n	8010776 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 801076e:	f06f 030a 	mvn.w	r3, #10
 8010772:	e000      	b.n	8010776 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 8010774:	2300      	movs	r3, #0
}
 8010776:	4618      	mov	r0, r3
 8010778:	3710      	adds	r7, #16
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}
	...

08010780 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b08c      	sub	sp, #48	; 0x30
 8010784:	af02      	add	r7, sp, #8
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	7d1b      	ldrb	r3, [r3, #20]
 801078e:	2b01      	cmp	r3, #1
 8010790:	d106      	bne.n	80107a0 <tcp_abandon+0x20>
 8010792:	4b4d      	ldr	r3, [pc, #308]	; (80108c8 <tcp_abandon+0x148>)
 8010794:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010798:	494c      	ldr	r1, [pc, #304]	; (80108cc <tcp_abandon+0x14c>)
 801079a:	484d      	ldr	r0, [pc, #308]	; (80108d0 <tcp_abandon+0x150>)
 801079c:	f00a fb58 	bl	801ae50 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	7d1b      	ldrb	r3, [r3, #20]
 80107a4:	2b0a      	cmp	r3, #10
 80107a6:	d108      	bne.n	80107ba <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80107a8:	6879      	ldr	r1, [r7, #4]
 80107aa:	484a      	ldr	r0, [pc, #296]	; (80108d4 <tcp_abandon+0x154>)
 80107ac:	f001 f904 	bl	80119b8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80107b0:	6879      	ldr	r1, [r7, #4]
 80107b2:	2001      	movs	r0, #1
 80107b4:	f7fe fdf6 	bl	800f3a4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80107b8:	e081      	b.n	80108be <tcp_abandon+0x13e>
    int send_rst = 0;
 80107ba:	2300      	movs	r3, #0
 80107bc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80107be:	2300      	movs	r3, #0
 80107c0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107c6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107cc:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80107d4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	691b      	ldr	r3, [r3, #16]
 80107da:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	7d1b      	ldrb	r3, [r3, #20]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d126      	bne.n	8010832 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	8adb      	ldrh	r3, [r3, #22]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d02e      	beq.n	801084a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80107ec:	4b3a      	ldr	r3, [pc, #232]	; (80108d8 <tcp_abandon+0x158>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	687a      	ldr	r2, [r7, #4]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d105      	bne.n	8010802 <tcp_abandon+0x82>
 80107f6:	4b38      	ldr	r3, [pc, #224]	; (80108d8 <tcp_abandon+0x158>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	68db      	ldr	r3, [r3, #12]
 80107fc:	4a36      	ldr	r2, [pc, #216]	; (80108d8 <tcp_abandon+0x158>)
 80107fe:	6013      	str	r3, [r2, #0]
 8010800:	e013      	b.n	801082a <tcp_abandon+0xaa>
 8010802:	4b35      	ldr	r3, [pc, #212]	; (80108d8 <tcp_abandon+0x158>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	61fb      	str	r3, [r7, #28]
 8010808:	e00c      	b.n	8010824 <tcp_abandon+0xa4>
 801080a:	69fb      	ldr	r3, [r7, #28]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	687a      	ldr	r2, [r7, #4]
 8010810:	429a      	cmp	r2, r3
 8010812:	d104      	bne.n	801081e <tcp_abandon+0x9e>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	68da      	ldr	r2, [r3, #12]
 8010818:	69fb      	ldr	r3, [r7, #28]
 801081a:	60da      	str	r2, [r3, #12]
 801081c:	e005      	b.n	801082a <tcp_abandon+0xaa>
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	61fb      	str	r3, [r7, #28]
 8010824:	69fb      	ldr	r3, [r7, #28]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d1ef      	bne.n	801080a <tcp_abandon+0x8a>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2200      	movs	r2, #0
 801082e:	60da      	str	r2, [r3, #12]
 8010830:	e00b      	b.n	801084a <tcp_abandon+0xca>
      send_rst = reset;
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	8adb      	ldrh	r3, [r3, #22]
 801083a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801083c:	6879      	ldr	r1, [r7, #4]
 801083e:	4827      	ldr	r0, [pc, #156]	; (80108dc <tcp_abandon+0x15c>)
 8010840:	f001 f8ba 	bl	80119b8 <tcp_pcb_remove>
 8010844:	4b26      	ldr	r3, [pc, #152]	; (80108e0 <tcp_abandon+0x160>)
 8010846:	2201      	movs	r2, #1
 8010848:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801084e:	2b00      	cmp	r3, #0
 8010850:	d004      	beq.n	801085c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010856:	4618      	mov	r0, r3
 8010858:	f000 fe03 	bl	8011462 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010860:	2b00      	cmp	r3, #0
 8010862:	d004      	beq.n	801086e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010868:	4618      	mov	r0, r3
 801086a:	f000 fdfa 	bl	8011462 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010872:	2b00      	cmp	r3, #0
 8010874:	d004      	beq.n	8010880 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801087a:	4618      	mov	r0, r3
 801087c:	f000 fdf1 	bl	8011462 <tcp_segs_free>
    if (send_rst) {
 8010880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010882:	2b00      	cmp	r3, #0
 8010884:	d00c      	beq.n	80108a0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	1d19      	adds	r1, r3, #4
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	8b1b      	ldrh	r3, [r3, #24]
 8010890:	9301      	str	r3, [sp, #4]
 8010892:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010894:	9300      	str	r3, [sp, #0]
 8010896:	460b      	mov	r3, r1
 8010898:	6979      	ldr	r1, [r7, #20]
 801089a:	69b8      	ldr	r0, [r7, #24]
 801089c:	f004 fd16 	bl	80152cc <tcp_rst>
    last_state = pcb->state;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	7d1b      	ldrb	r3, [r3, #20]
 80108a4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80108a6:	6879      	ldr	r1, [r7, #4]
 80108a8:	2001      	movs	r0, #1
 80108aa:	f7fe fd7b 	bl	800f3a4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80108ae:	693b      	ldr	r3, [r7, #16]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d004      	beq.n	80108be <tcp_abandon+0x13e>
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	f06f 010c 	mvn.w	r1, #12
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	4798      	blx	r3
}
 80108be:	bf00      	nop
 80108c0:	3728      	adds	r7, #40	; 0x28
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	0801eb68 	.word	0x0801eb68
 80108cc:	0801ec00 	.word	0x0801ec00
 80108d0:	0801eba4 	.word	0x0801eba4
 80108d4:	20016434 	.word	0x20016434
 80108d8:	20016430 	.word	0x20016430
 80108dc:	20016424 	.word	0x20016424
 80108e0:	20016420 	.word	0x20016420

080108e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80108ec:	2101      	movs	r1, #1
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f7ff ff46 	bl	8010780 <tcp_abandon>
}
 80108f4:	bf00      	nop
 80108f6:	3708      	adds	r7, #8
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}

080108fc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b088      	sub	sp, #32
 8010900:	af00      	add	r7, sp, #0
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	4613      	mov	r3, r2
 8010908:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801090a:	2304      	movs	r3, #4
 801090c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d101      	bne.n	8010918 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010914:	4b3c      	ldr	r3, [pc, #240]	; (8010a08 <tcp_bind+0x10c>)
 8010916:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d002      	beq.n	8010924 <tcp_bind+0x28>
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d102      	bne.n	801092a <tcp_bind+0x2e>
    return ERR_VAL;
 8010924:	f06f 0305 	mvn.w	r3, #5
 8010928:	e06a      	b.n	8010a00 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	7d1b      	ldrb	r3, [r3, #20]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d009      	beq.n	8010946 <tcp_bind+0x4a>
 8010932:	4b36      	ldr	r3, [pc, #216]	; (8010a0c <tcp_bind+0x110>)
 8010934:	f44f 7211 	mov.w	r2, #580	; 0x244
 8010938:	4935      	ldr	r1, [pc, #212]	; (8010a10 <tcp_bind+0x114>)
 801093a:	4836      	ldr	r0, [pc, #216]	; (8010a14 <tcp_bind+0x118>)
 801093c:	f00a fa88 	bl	801ae50 <iprintf>
 8010940:	f06f 0305 	mvn.w	r3, #5
 8010944:	e05c      	b.n	8010a00 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8010946:	88fb      	ldrh	r3, [r7, #6]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d109      	bne.n	8010960 <tcp_bind+0x64>
    port = tcp_new_port();
 801094c:	f000 f9b8 	bl	8010cc0 <tcp_new_port>
 8010950:	4603      	mov	r3, r0
 8010952:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010954:	88fb      	ldrh	r3, [r7, #6]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d135      	bne.n	80109c6 <tcp_bind+0xca>
      return ERR_BUF;
 801095a:	f06f 0301 	mvn.w	r3, #1
 801095e:	e04f      	b.n	8010a00 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010960:	2300      	movs	r3, #0
 8010962:	61fb      	str	r3, [r7, #28]
 8010964:	e02b      	b.n	80109be <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010966:	4a2c      	ldr	r2, [pc, #176]	; (8010a18 <tcp_bind+0x11c>)
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	61bb      	str	r3, [r7, #24]
 8010972:	e01e      	b.n	80109b2 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8010974:	69bb      	ldr	r3, [r7, #24]
 8010976:	8adb      	ldrh	r3, [r3, #22]
 8010978:	88fa      	ldrh	r2, [r7, #6]
 801097a:	429a      	cmp	r2, r3
 801097c:	d116      	bne.n	80109ac <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801097e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010980:	2b00      	cmp	r3, #0
 8010982:	d010      	beq.n	80109a6 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d00c      	beq.n	80109a6 <tcp_bind+0xaa>
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d009      	beq.n	80109a6 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d005      	beq.n	80109a6 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801099a:	69bb      	ldr	r3, [r7, #24]
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d102      	bne.n	80109ac <tcp_bind+0xb0>
              return ERR_USE;
 80109a6:	f06f 0307 	mvn.w	r3, #7
 80109aa:	e029      	b.n	8010a00 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80109ac:	69bb      	ldr	r3, [r7, #24]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	61bb      	str	r3, [r7, #24]
 80109b2:	69bb      	ldr	r3, [r7, #24]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d1dd      	bne.n	8010974 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	3301      	adds	r3, #1
 80109bc:	61fb      	str	r3, [r7, #28]
 80109be:	69fa      	ldr	r2, [r7, #28]
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	dbcf      	blt.n	8010966 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00c      	beq.n	80109e6 <tcp_bind+0xea>
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d008      	beq.n	80109e6 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d002      	beq.n	80109e0 <tcp_bind+0xe4>
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	e000      	b.n	80109e2 <tcp_bind+0xe6>
 80109e0:	2300      	movs	r3, #0
 80109e2:	68fa      	ldr	r2, [r7, #12]
 80109e4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	88fa      	ldrh	r2, [r7, #6]
 80109ea:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80109ec:	4b0b      	ldr	r3, [pc, #44]	; (8010a1c <tcp_bind+0x120>)
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	60da      	str	r2, [r3, #12]
 80109f4:	4a09      	ldr	r2, [pc, #36]	; (8010a1c <tcp_bind+0x120>)
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6013      	str	r3, [r2, #0]
 80109fa:	f004 feb9 	bl	8015770 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80109fe:	2300      	movs	r3, #0
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	3720      	adds	r7, #32
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	080200e8 	.word	0x080200e8
 8010a0c:	0801eb68 	.word	0x0801eb68
 8010a10:	0801ec34 	.word	0x0801ec34
 8010a14:	0801eba4 	.word	0x0801eba4
 8010a18:	080200c0 	.word	0x080200c0
 8010a1c:	20016430 	.word	0x20016430

08010a20 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	60f8      	str	r0, [r7, #12]
 8010a28:	60b9      	str	r1, [r7, #8]
 8010a2a:	4613      	mov	r3, r2
 8010a2c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8010a2e:	68b8      	ldr	r0, [r7, #8]
 8010a30:	f7ff ff58 	bl	80108e4 <tcp_abort>

  return ERR_ABRT;
 8010a34:	f06f 030c 	mvn.w	r3, #12
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3710      	adds	r7, #16
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}

08010a40 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b088      	sub	sp, #32
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	460b      	mov	r3, r1
 8010a4a:	607a      	str	r2, [r7, #4]
 8010a4c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	7d1b      	ldrb	r3, [r3, #20]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d009      	beq.n	8010a6e <tcp_listen_with_backlog_and_err+0x2e>
 8010a5a:	4b3f      	ldr	r3, [pc, #252]	; (8010b58 <tcp_listen_with_backlog_and_err+0x118>)
 8010a5c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8010a60:	493e      	ldr	r1, [pc, #248]	; (8010b5c <tcp_listen_with_backlog_and_err+0x11c>)
 8010a62:	483f      	ldr	r0, [pc, #252]	; (8010b60 <tcp_listen_with_backlog_and_err+0x120>)
 8010a64:	f00a f9f4 	bl	801ae50 <iprintf>
 8010a68:	23f1      	movs	r3, #241	; 0xf1
 8010a6a:	76fb      	strb	r3, [r7, #27]
 8010a6c:	e069      	b.n	8010b42 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	7d1b      	ldrb	r3, [r3, #20]
 8010a72:	2b01      	cmp	r3, #1
 8010a74:	d104      	bne.n	8010a80 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8010a7a:	23f7      	movs	r3, #247	; 0xf7
 8010a7c:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010a7e:	e060      	b.n	8010b42 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8010a80:	2002      	movs	r0, #2
 8010a82:	f7fe fc3d 	bl	800f300 <memp_malloc>
 8010a86:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d102      	bne.n	8010a94 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8010a8e:	23ff      	movs	r3, #255	; 0xff
 8010a90:	76fb      	strb	r3, [r7, #27]
    goto done;
 8010a92:	e056      	b.n	8010b42 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	691a      	ldr	r2, [r3, #16]
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	8ada      	ldrh	r2, [r3, #22]
 8010aa0:	69fb      	ldr	r3, [r7, #28]
 8010aa2:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	7d5a      	ldrb	r2, [r3, #21]
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	7a1a      	ldrb	r2, [r3, #8]
 8010ab6:	69fb      	ldr	r3, [r7, #28]
 8010ab8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	7a9a      	ldrb	r2, [r3, #10]
 8010abe:	69fb      	ldr	r3, [r7, #28]
 8010ac0:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	7a5a      	ldrb	r2, [r3, #9]
 8010ac6:	69fb      	ldr	r3, [r7, #28]
 8010ac8:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	69fb      	ldr	r3, [r7, #28]
 8010ad0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	8adb      	ldrh	r3, [r3, #22]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d021      	beq.n	8010b1e <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8010ada:	4b22      	ldr	r3, [pc, #136]	; (8010b64 <tcp_listen_with_backlog_and_err+0x124>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	68fa      	ldr	r2, [r7, #12]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d105      	bne.n	8010af0 <tcp_listen_with_backlog_and_err+0xb0>
 8010ae4:	4b1f      	ldr	r3, [pc, #124]	; (8010b64 <tcp_listen_with_backlog_and_err+0x124>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	68db      	ldr	r3, [r3, #12]
 8010aea:	4a1e      	ldr	r2, [pc, #120]	; (8010b64 <tcp_listen_with_backlog_and_err+0x124>)
 8010aec:	6013      	str	r3, [r2, #0]
 8010aee:	e013      	b.n	8010b18 <tcp_listen_with_backlog_and_err+0xd8>
 8010af0:	4b1c      	ldr	r3, [pc, #112]	; (8010b64 <tcp_listen_with_backlog_and_err+0x124>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	617b      	str	r3, [r7, #20]
 8010af6:	e00c      	b.n	8010b12 <tcp_listen_with_backlog_and_err+0xd2>
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	68db      	ldr	r3, [r3, #12]
 8010afc:	68fa      	ldr	r2, [r7, #12]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d104      	bne.n	8010b0c <tcp_listen_with_backlog_and_err+0xcc>
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	68da      	ldr	r2, [r3, #12]
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	60da      	str	r2, [r3, #12]
 8010b0a:	e005      	b.n	8010b18 <tcp_listen_with_backlog_and_err+0xd8>
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	68db      	ldr	r3, [r3, #12]
 8010b10:	617b      	str	r3, [r7, #20]
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d1ef      	bne.n	8010af8 <tcp_listen_with_backlog_and_err+0xb8>
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8010b1e:	68f9      	ldr	r1, [r7, #12]
 8010b20:	2001      	movs	r0, #1
 8010b22:	f7fe fc3f 	bl	800f3a4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8010b26:	69fb      	ldr	r3, [r7, #28]
 8010b28:	4a0f      	ldr	r2, [pc, #60]	; (8010b68 <tcp_listen_with_backlog_and_err+0x128>)
 8010b2a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8010b2c:	4b0f      	ldr	r3, [pc, #60]	; (8010b6c <tcp_listen_with_backlog_and_err+0x12c>)
 8010b2e:	681a      	ldr	r2, [r3, #0]
 8010b30:	69fb      	ldr	r3, [r7, #28]
 8010b32:	60da      	str	r2, [r3, #12]
 8010b34:	4a0d      	ldr	r2, [pc, #52]	; (8010b6c <tcp_listen_with_backlog_and_err+0x12c>)
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	6013      	str	r3, [r2, #0]
 8010b3a:	f004 fe19 	bl	8015770 <tcp_timer_needed>
  res = ERR_OK;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d002      	beq.n	8010b4e <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	7efa      	ldrb	r2, [r7, #27]
 8010b4c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8010b4e:	69fb      	ldr	r3, [r7, #28]
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3720      	adds	r7, #32
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	0801eb68 	.word	0x0801eb68
 8010b5c:	0801ec5c 	.word	0x0801ec5c
 8010b60:	0801eba4 	.word	0x0801eba4
 8010b64:	20016430 	.word	0x20016430
 8010b68:	08010a21 	.word	0x08010a21
 8010b6c:	2001642c 	.word	0x2001642c

08010b70 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010b80:	4413      	add	r3, r2
 8010b82:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010b8c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010b90:	bf28      	it	cs
 8010b92:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010b96:	b292      	uxth	r2, r2
 8010b98:	4413      	add	r3, r2
 8010b9a:	68fa      	ldr	r2, [r7, #12]
 8010b9c:	1ad3      	subs	r3, r2, r3
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	db08      	blt.n	8010bb4 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bae:	68fa      	ldr	r2, [r7, #12]
 8010bb0:	1ad3      	subs	r3, r2, r3
 8010bb2:	e020      	b.n	8010bf6 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bbc:	1ad3      	subs	r3, r2, r3
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	dd03      	ble.n	8010bca <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010bc8:	e014      	b.n	8010bf4 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bd2:	1ad3      	subs	r3, r2, r3
 8010bd4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010bdc:	d306      	bcc.n	8010bec <tcp_update_rcv_ann_wnd+0x7c>
 8010bde:	4b08      	ldr	r3, [pc, #32]	; (8010c00 <tcp_update_rcv_ann_wnd+0x90>)
 8010be0:	f44f 7242 	mov.w	r2, #776	; 0x308
 8010be4:	4907      	ldr	r1, [pc, #28]	; (8010c04 <tcp_update_rcv_ann_wnd+0x94>)
 8010be6:	4808      	ldr	r0, [pc, #32]	; (8010c08 <tcp_update_rcv_ann_wnd+0x98>)
 8010be8:	f00a f932 	bl	801ae50 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	b29a      	uxth	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010bf4:	2300      	movs	r3, #0
  }
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3710      	adds	r7, #16
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	0801eb68 	.word	0x0801eb68
 8010c04:	0801ec80 	.word	0x0801ec80
 8010c08:	0801eba4 	.word	0x0801eba4

08010c0c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	460b      	mov	r3, r1
 8010c16:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	7d1b      	ldrb	r3, [r3, #20]
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d106      	bne.n	8010c2e <tcp_recved+0x22>
 8010c20:	4b23      	ldr	r3, [pc, #140]	; (8010cb0 <tcp_recved+0xa4>)
 8010c22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010c26:	4923      	ldr	r1, [pc, #140]	; (8010cb4 <tcp_recved+0xa8>)
 8010c28:	4823      	ldr	r0, [pc, #140]	; (8010cb8 <tcp_recved+0xac>)
 8010c2a:	f00a f911 	bl	801ae50 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010c32:	887b      	ldrh	r3, [r7, #2]
 8010c34:	4413      	add	r3, r2
 8010c36:	b29a      	uxth	r2, r3
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c40:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010c44:	d904      	bls.n	8010c50 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010c4c:	851a      	strh	r2, [r3, #40]	; 0x28
 8010c4e:	e017      	b.n	8010c80 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d113      	bne.n	8010c80 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	7d1b      	ldrb	r3, [r3, #20]
 8010c5c:	2b07      	cmp	r3, #7
 8010c5e:	d003      	beq.n	8010c68 <tcp_recved+0x5c>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	7d1b      	ldrb	r3, [r3, #20]
 8010c64:	2b09      	cmp	r3, #9
 8010c66:	d104      	bne.n	8010c72 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010c6e:	851a      	strh	r2, [r3, #40]	; 0x28
 8010c70:	e006      	b.n	8010c80 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8010c72:	4b0f      	ldr	r3, [pc, #60]	; (8010cb0 <tcp_recved+0xa4>)
 8010c74:	f240 322d 	movw	r2, #813	; 0x32d
 8010c78:	4910      	ldr	r1, [pc, #64]	; (8010cbc <tcp_recved+0xb0>)
 8010c7a:	480f      	ldr	r0, [pc, #60]	; (8010cb8 <tcp_recved+0xac>)
 8010c7c:	f00a f8e8 	bl	801ae50 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff ff75 	bl	8010b70 <tcp_update_rcv_ann_wnd>
 8010c86:	4603      	mov	r3, r0
 8010c88:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010c90:	db09      	blt.n	8010ca6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	7e9b      	ldrb	r3, [r3, #26]
 8010c96:	f043 0302 	orr.w	r3, r3, #2
 8010c9a:	b2da      	uxtb	r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f004 f889 	bl	8014db8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010ca6:	bf00      	nop
 8010ca8:	3710      	adds	r7, #16
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	0801eb68 	.word	0x0801eb68
 8010cb4:	0801ec9c 	.word	0x0801ec9c
 8010cb8:	0801eba4 	.word	0x0801eba4
 8010cbc:	0801ecc4 	.word	0x0801ecc4

08010cc0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b083      	sub	sp, #12
 8010cc4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8010cca:	4b1d      	ldr	r3, [pc, #116]	; (8010d40 <tcp_new_port+0x80>)
 8010ccc:	881b      	ldrh	r3, [r3, #0]
 8010cce:	1c5a      	adds	r2, r3, #1
 8010cd0:	b291      	uxth	r1, r2
 8010cd2:	4a1b      	ldr	r2, [pc, #108]	; (8010d40 <tcp_new_port+0x80>)
 8010cd4:	8011      	strh	r1, [r2, #0]
 8010cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d103      	bne.n	8010ce6 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010cde:	4b18      	ldr	r3, [pc, #96]	; (8010d40 <tcp_new_port+0x80>)
 8010ce0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010ce4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	71fb      	strb	r3, [r7, #7]
 8010cea:	e01e      	b.n	8010d2a <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010cec:	79fb      	ldrb	r3, [r7, #7]
 8010cee:	4a15      	ldr	r2, [pc, #84]	; (8010d44 <tcp_new_port+0x84>)
 8010cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	603b      	str	r3, [r7, #0]
 8010cf8:	e011      	b.n	8010d1e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	8ada      	ldrh	r2, [r3, #22]
 8010cfe:	4b10      	ldr	r3, [pc, #64]	; (8010d40 <tcp_new_port+0x80>)
 8010d00:	881b      	ldrh	r3, [r3, #0]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d108      	bne.n	8010d18 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010d06:	88bb      	ldrh	r3, [r7, #4]
 8010d08:	3301      	adds	r3, #1
 8010d0a:	80bb      	strh	r3, [r7, #4]
 8010d0c:	88bb      	ldrh	r3, [r7, #4]
 8010d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010d12:	d3da      	bcc.n	8010cca <tcp_new_port+0xa>
          return 0;
 8010d14:	2300      	movs	r3, #0
 8010d16:	e00d      	b.n	8010d34 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	603b      	str	r3, [r7, #0]
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d1ea      	bne.n	8010cfa <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010d24:	79fb      	ldrb	r3, [r7, #7]
 8010d26:	3301      	adds	r3, #1
 8010d28:	71fb      	strb	r3, [r7, #7]
 8010d2a:	79fb      	ldrb	r3, [r7, #7]
 8010d2c:	2b03      	cmp	r3, #3
 8010d2e:	d9dd      	bls.n	8010cec <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010d30:	4b03      	ldr	r3, [pc, #12]	; (8010d40 <tcp_new_port+0x80>)
 8010d32:	881b      	ldrh	r3, [r3, #0]
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr
 8010d40:	2000001c 	.word	0x2000001c
 8010d44:	080200c0 	.word	0x080200c0

08010d48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010d48:	b5b0      	push	{r4, r5, r7, lr}
 8010d4a:	b08c      	sub	sp, #48	; 0x30
 8010d4c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8010d52:	4b96      	ldr	r3, [pc, #600]	; (8010fac <tcp_slowtmr+0x264>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	3301      	adds	r3, #1
 8010d58:	4a94      	ldr	r2, [pc, #592]	; (8010fac <tcp_slowtmr+0x264>)
 8010d5a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010d5c:	4b94      	ldr	r3, [pc, #592]	; (8010fb0 <tcp_slowtmr+0x268>)
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	3301      	adds	r3, #1
 8010d62:	b2da      	uxtb	r2, r3
 8010d64:	4b92      	ldr	r3, [pc, #584]	; (8010fb0 <tcp_slowtmr+0x268>)
 8010d66:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8010d6c:	4b91      	ldr	r3, [pc, #580]	; (8010fb4 <tcp_slowtmr+0x26c>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010d72:	e227      	b.n	80111c4 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d76:	7d1b      	ldrb	r3, [r3, #20]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d106      	bne.n	8010d8a <tcp_slowtmr+0x42>
 8010d7c:	4b8e      	ldr	r3, [pc, #568]	; (8010fb8 <tcp_slowtmr+0x270>)
 8010d7e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8010d82:	498e      	ldr	r1, [pc, #568]	; (8010fbc <tcp_slowtmr+0x274>)
 8010d84:	488e      	ldr	r0, [pc, #568]	; (8010fc0 <tcp_slowtmr+0x278>)
 8010d86:	f00a f863 	bl	801ae50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	7d1b      	ldrb	r3, [r3, #20]
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d106      	bne.n	8010da0 <tcp_slowtmr+0x58>
 8010d92:	4b89      	ldr	r3, [pc, #548]	; (8010fb8 <tcp_slowtmr+0x270>)
 8010d94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010d98:	498a      	ldr	r1, [pc, #552]	; (8010fc4 <tcp_slowtmr+0x27c>)
 8010d9a:	4889      	ldr	r0, [pc, #548]	; (8010fc0 <tcp_slowtmr+0x278>)
 8010d9c:	f00a f858 	bl	801ae50 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da2:	7d1b      	ldrb	r3, [r3, #20]
 8010da4:	2b0a      	cmp	r3, #10
 8010da6:	d106      	bne.n	8010db6 <tcp_slowtmr+0x6e>
 8010da8:	4b83      	ldr	r3, [pc, #524]	; (8010fb8 <tcp_slowtmr+0x270>)
 8010daa:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8010dae:	4986      	ldr	r1, [pc, #536]	; (8010fc8 <tcp_slowtmr+0x280>)
 8010db0:	4883      	ldr	r0, [pc, #524]	; (8010fc0 <tcp_slowtmr+0x278>)
 8010db2:	f00a f84d 	bl	801ae50 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db8:	7f5a      	ldrb	r2, [r3, #29]
 8010dba:	4b7d      	ldr	r3, [pc, #500]	; (8010fb0 <tcp_slowtmr+0x268>)
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d103      	bne.n	8010dca <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc4:	68db      	ldr	r3, [r3, #12]
 8010dc6:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8010dc8:	e1fc      	b.n	80111c4 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010dca:	4b79      	ldr	r3, [pc, #484]	; (8010fb0 <tcp_slowtmr+0x268>)
 8010dcc:	781a      	ldrb	r2, [r3, #0]
 8010dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd0:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ddc:	7d1b      	ldrb	r3, [r3, #20]
 8010dde:	2b02      	cmp	r3, #2
 8010de0:	d108      	bne.n	8010df4 <tcp_slowtmr+0xac>
 8010de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010de8:	2b05      	cmp	r3, #5
 8010dea:	d903      	bls.n	8010df4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 8010dec:	7ffb      	ldrb	r3, [r7, #31]
 8010dee:	3301      	adds	r3, #1
 8010df0:	77fb      	strb	r3, [r7, #31]
 8010df2:	e0a2      	b.n	8010f3a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8010df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010dfa:	2b0b      	cmp	r3, #11
 8010dfc:	d903      	bls.n	8010e06 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8010dfe:	7ffb      	ldrb	r3, [r7, #31]
 8010e00:	3301      	adds	r3, #1
 8010e02:	77fb      	strb	r3, [r7, #31]
 8010e04:	e099      	b.n	8010f3a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e08:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d032      	beq.n	8010e76 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8010e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e12:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010e16:	3b01      	subs	r3, #1
 8010e18:	4a6c      	ldr	r2, [pc, #432]	; (8010fcc <tcp_slowtmr+0x284>)
 8010e1a:	5cd3      	ldrb	r3, [r2, r3]
 8010e1c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8010e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e20:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010e24:	7cfa      	ldrb	r2, [r7, #19]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d907      	bls.n	8010e3a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8010e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010e30:	3301      	adds	r3, #1
 8010e32:	b2da      	uxtb	r2, r3
 8010e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e36:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8010e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010e40:	7cfa      	ldrb	r2, [r7, #19]
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d879      	bhi.n	8010f3a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8010e46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e48:	f004 fbd2 	bl	80155f0 <tcp_zero_window_probe>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d173      	bne.n	8010f3a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8010e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e54:	2200      	movs	r2, #0
 8010e56:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010e60:	2b06      	cmp	r3, #6
 8010e62:	d86a      	bhi.n	8010f3a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8010e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e66:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	b2da      	uxtb	r2, r3
 8010e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e70:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8010e74:	e061      	b.n	8010f3a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8010e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	db08      	blt.n	8010e92 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8010e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e82:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	3301      	adds	r3, #1
 8010e8a:	b29b      	uxth	r3, r3
 8010e8c:	b21a      	sxth	r2, r3
 8010e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e90:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8010e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d04f      	beq.n	8010f3a <tcp_slowtmr+0x1f2>
 8010e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	db47      	blt.n	8010f3a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eac:	7d1b      	ldrb	r3, [r3, #20]
 8010eae:	2b02      	cmp	r3, #2
 8010eb0:	d018      	beq.n	8010ee4 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8010eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010eb8:	2b0c      	cmp	r3, #12
 8010eba:	bf28      	it	cs
 8010ebc:	230c      	movcs	r3, #12
 8010ebe:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010ec6:	10db      	asrs	r3, r3, #3
 8010ec8:	b21b      	sxth	r3, r3
 8010eca:	461a      	mov	r2, r3
 8010ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ece:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010ed2:	4413      	add	r3, r2
 8010ed4:	7dfa      	ldrb	r2, [r7, #23]
 8010ed6:	493e      	ldr	r1, [pc, #248]	; (8010fd0 <tcp_slowtmr+0x288>)
 8010ed8:	5c8a      	ldrb	r2, [r1, r2]
 8010eda:	4093      	lsls	r3, r2
 8010edc:	b21a      	sxth	r2, r3
 8010ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8010ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	bf28      	it	cs
 8010efa:	4613      	movcs	r3, r2
 8010efc:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8010efe:	8abb      	ldrh	r3, [r7, #20]
 8010f00:	085b      	lsrs	r3, r3, #1
 8010f02:	b29a      	uxth	r2, r3
 8010f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f06:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f14:	005b      	lsls	r3, r3, #1
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d206      	bcs.n	8010f2a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8010f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f20:	005b      	lsls	r3, r3, #1
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8010f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8010f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f36:	f004 fa3f 	bl	80153b8 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3c:	7d1b      	ldrb	r3, [r3, #20]
 8010f3e:	2b06      	cmp	r3, #6
 8010f40:	d10f      	bne.n	8010f62 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f44:	7e9b      	ldrb	r3, [r3, #26]
 8010f46:	f003 0310 	and.w	r3, r3, #16
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d009      	beq.n	8010f62 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010f4e:	4b17      	ldr	r3, [pc, #92]	; (8010fac <tcp_slowtmr+0x264>)
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f54:	6a1b      	ldr	r3, [r3, #32]
 8010f56:	1ad3      	subs	r3, r2, r3
 8010f58:	2b28      	cmp	r3, #40	; 0x28
 8010f5a:	d902      	bls.n	8010f62 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010f5c:	7ffb      	ldrb	r3, [r7, #31]
 8010f5e:	3301      	adds	r3, #1
 8010f60:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	7a1b      	ldrb	r3, [r3, #8]
 8010f66:	f003 0308 	and.w	r3, r3, #8
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d05d      	beq.n	801102a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8010f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f70:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010f72:	2b04      	cmp	r3, #4
 8010f74:	d003      	beq.n	8010f7e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8010f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f78:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8010f7a:	2b07      	cmp	r3, #7
 8010f7c:	d155      	bne.n	801102a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010f7e:	4b0b      	ldr	r3, [pc, #44]	; (8010fac <tcp_slowtmr+0x264>)
 8010f80:	681a      	ldr	r2, [r3, #0]
 8010f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f84:	6a1b      	ldr	r3, [r3, #32]
 8010f86:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8010f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8010f8e:	4b11      	ldr	r3, [pc, #68]	; (8010fd4 <tcp_slowtmr+0x28c>)
 8010f90:	440b      	add	r3, r1
 8010f92:	4911      	ldr	r1, [pc, #68]	; (8010fd8 <tcp_slowtmr+0x290>)
 8010f94:	fba1 1303 	umull	r1, r3, r1, r3
 8010f98:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d91e      	bls.n	8010fdc <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010f9e:	7ffb      	ldrb	r3, [r7, #31]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8010fa4:	7fbb      	ldrb	r3, [r7, #30]
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	77bb      	strb	r3, [r7, #30]
 8010faa:	e03e      	b.n	801102a <tcp_slowtmr+0x2e2>
 8010fac:	20016428 	.word	0x20016428
 8010fb0:	2000c96a 	.word	0x2000c96a
 8010fb4:	20016424 	.word	0x20016424
 8010fb8:	0801eb68 	.word	0x0801eb68
 8010fbc:	0801ed18 	.word	0x0801ed18
 8010fc0:	0801eba4 	.word	0x0801eba4
 8010fc4:	0801ed44 	.word	0x0801ed44
 8010fc8:	0801ed70 	.word	0x0801ed70
 8010fcc:	080200b8 	.word	0x080200b8
 8010fd0:	080200a8 	.word	0x080200a8
 8010fd4:	000a4cb8 	.word	0x000a4cb8
 8010fd8:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010fdc:	4b97      	ldr	r3, [pc, #604]	; (801123c <tcp_slowtmr+0x4f4>)
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe2:	6a1b      	ldr	r3, [r3, #32]
 8010fe4:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8010fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fee:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	4b92      	ldr	r3, [pc, #584]	; (8011240 <tcp_slowtmr+0x4f8>)
 8010ff6:	fb03 f300 	mul.w	r3, r3, r0
 8010ffa:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8010ffc:	4991      	ldr	r1, [pc, #580]	; (8011244 <tcp_slowtmr+0x4fc>)
 8010ffe:	fba1 1303 	umull	r1, r3, r1, r3
 8011002:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011004:	429a      	cmp	r2, r3
 8011006:	d910      	bls.n	801102a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8011008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801100a:	f004 fab4 	bl	8015576 <tcp_keepalive>
 801100e:	4603      	mov	r3, r0
 8011010:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8011012:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d107      	bne.n	801102a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 801101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8011020:	3301      	adds	r3, #1
 8011022:	b2da      	uxtb	r2, r3
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801102e:	2b00      	cmp	r3, #0
 8011030:	d016      	beq.n	8011060 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8011032:	4b82      	ldr	r3, [pc, #520]	; (801123c <tcp_slowtmr+0x4f4>)
 8011034:	681a      	ldr	r2, [r3, #0]
 8011036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011038:	6a1b      	ldr	r3, [r3, #32]
 801103a:	1ad2      	subs	r2, r2, r3
 801103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011042:	4619      	mov	r1, r3
 8011044:	460b      	mov	r3, r1
 8011046:	005b      	lsls	r3, r3, #1
 8011048:	440b      	add	r3, r1
 801104a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801104c:	429a      	cmp	r2, r3
 801104e:	d307      	bcc.n	8011060 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8011050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011054:	4618      	mov	r0, r3
 8011056:	f000 fa04 	bl	8011462 <tcp_segs_free>
      pcb->ooseq = NULL;
 801105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105c:	2200      	movs	r2, #0
 801105e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011062:	7d1b      	ldrb	r3, [r3, #20]
 8011064:	2b03      	cmp	r3, #3
 8011066:	d109      	bne.n	801107c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011068:	4b74      	ldr	r3, [pc, #464]	; (801123c <tcp_slowtmr+0x4f4>)
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106e:	6a1b      	ldr	r3, [r3, #32]
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	2b28      	cmp	r3, #40	; 0x28
 8011074:	d902      	bls.n	801107c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011076:	7ffb      	ldrb	r3, [r7, #31]
 8011078:	3301      	adds	r3, #1
 801107a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107e:	7d1b      	ldrb	r3, [r3, #20]
 8011080:	2b09      	cmp	r3, #9
 8011082:	d109      	bne.n	8011098 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011084:	4b6d      	ldr	r3, [pc, #436]	; (801123c <tcp_slowtmr+0x4f4>)
 8011086:	681a      	ldr	r2, [r3, #0]
 8011088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108a:	6a1b      	ldr	r3, [r3, #32]
 801108c:	1ad3      	subs	r3, r2, r3
 801108e:	2bf0      	cmp	r3, #240	; 0xf0
 8011090:	d902      	bls.n	8011098 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8011092:	7ffb      	ldrb	r3, [r7, #31]
 8011094:	3301      	adds	r3, #1
 8011096:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011098:	7ffb      	ldrb	r3, [r7, #31]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d05d      	beq.n	801115a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80110a4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80110a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110a8:	f000 fc44 	bl	8011934 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80110ac:	6a3b      	ldr	r3, [r7, #32]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d010      	beq.n	80110d4 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80110b2:	4b65      	ldr	r3, [pc, #404]	; (8011248 <tcp_slowtmr+0x500>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d106      	bne.n	80110ca <tcp_slowtmr+0x382>
 80110bc:	4b63      	ldr	r3, [pc, #396]	; (801124c <tcp_slowtmr+0x504>)
 80110be:	f240 4289 	movw	r2, #1161	; 0x489
 80110c2:	4963      	ldr	r1, [pc, #396]	; (8011250 <tcp_slowtmr+0x508>)
 80110c4:	4863      	ldr	r0, [pc, #396]	; (8011254 <tcp_slowtmr+0x50c>)
 80110c6:	f009 fec3 	bl	801ae50 <iprintf>
        prev->next = pcb->next;
 80110ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110cc:	68da      	ldr	r2, [r3, #12]
 80110ce:	6a3b      	ldr	r3, [r7, #32]
 80110d0:	60da      	str	r2, [r3, #12]
 80110d2:	e00f      	b.n	80110f4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80110d4:	4b5c      	ldr	r3, [pc, #368]	; (8011248 <tcp_slowtmr+0x500>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110da:	429a      	cmp	r2, r3
 80110dc:	d006      	beq.n	80110ec <tcp_slowtmr+0x3a4>
 80110de:	4b5b      	ldr	r3, [pc, #364]	; (801124c <tcp_slowtmr+0x504>)
 80110e0:	f240 428d 	movw	r2, #1165	; 0x48d
 80110e4:	495c      	ldr	r1, [pc, #368]	; (8011258 <tcp_slowtmr+0x510>)
 80110e6:	485b      	ldr	r0, [pc, #364]	; (8011254 <tcp_slowtmr+0x50c>)
 80110e8:	f009 feb2 	bl	801ae50 <iprintf>
        tcp_active_pcbs = pcb->next;
 80110ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	4a55      	ldr	r2, [pc, #340]	; (8011248 <tcp_slowtmr+0x500>)
 80110f2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80110f4:	7fbb      	ldrb	r3, [r7, #30]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d010      	beq.n	801111c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80110fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80110fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011100:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011102:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8011104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011106:	1d1d      	adds	r5, r3, #4
 8011108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110a:	8adb      	ldrh	r3, [r3, #22]
 801110c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801110e:	8b12      	ldrh	r2, [r2, #24]
 8011110:	9201      	str	r2, [sp, #4]
 8011112:	9300      	str	r3, [sp, #0]
 8011114:	462b      	mov	r3, r5
 8011116:	4622      	mov	r2, r4
 8011118:	f004 f8d8 	bl	80152cc <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111e:	691b      	ldr	r3, [r3, #16]
 8011120:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011124:	7d1b      	ldrb	r3, [r3, #20]
 8011126:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801112a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011132:	6839      	ldr	r1, [r7, #0]
 8011134:	2001      	movs	r0, #1
 8011136:	f7fe f935 	bl	800f3a4 <memp_free>

      tcp_active_pcbs_changed = 0;
 801113a:	4b48      	ldr	r3, [pc, #288]	; (801125c <tcp_slowtmr+0x514>)
 801113c:	2200      	movs	r2, #0
 801113e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d004      	beq.n	8011150 <tcp_slowtmr+0x408>
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	f06f 010c 	mvn.w	r1, #12
 801114c:	68b8      	ldr	r0, [r7, #8]
 801114e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011150:	4b42      	ldr	r3, [pc, #264]	; (801125c <tcp_slowtmr+0x514>)
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d035      	beq.n	80111c4 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8011158:	e606      	b.n	8010d68 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801115c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 801115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011164:	6a3b      	ldr	r3, [r7, #32]
 8011166:	7edb      	ldrb	r3, [r3, #27]
 8011168:	3301      	adds	r3, #1
 801116a:	b2da      	uxtb	r2, r3
 801116c:	6a3b      	ldr	r3, [r7, #32]
 801116e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	7eda      	ldrb	r2, [r3, #27]
 8011174:	6a3b      	ldr	r3, [r7, #32]
 8011176:	7f1b      	ldrb	r3, [r3, #28]
 8011178:	429a      	cmp	r2, r3
 801117a:	d323      	bcc.n	80111c4 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 801117c:	6a3b      	ldr	r3, [r7, #32]
 801117e:	2200      	movs	r2, #0
 8011180:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011182:	4b36      	ldr	r3, [pc, #216]	; (801125c <tcp_slowtmr+0x514>)
 8011184:	2200      	movs	r2, #0
 8011186:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011188:	6a3b      	ldr	r3, [r7, #32]
 801118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801118e:	2b00      	cmp	r3, #0
 8011190:	d00a      	beq.n	80111a8 <tcp_slowtmr+0x460>
 8011192:	6a3b      	ldr	r3, [r7, #32]
 8011194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011198:	6a3a      	ldr	r2, [r7, #32]
 801119a:	6912      	ldr	r2, [r2, #16]
 801119c:	6a39      	ldr	r1, [r7, #32]
 801119e:	4610      	mov	r0, r2
 80111a0:	4798      	blx	r3
 80111a2:	4603      	mov	r3, r0
 80111a4:	777b      	strb	r3, [r7, #29]
 80111a6:	e001      	b.n	80111ac <tcp_slowtmr+0x464>
 80111a8:	2300      	movs	r3, #0
 80111aa:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 80111ac:	4b2b      	ldr	r3, [pc, #172]	; (801125c <tcp_slowtmr+0x514>)
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d000      	beq.n	80111b6 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 80111b4:	e5d8      	b.n	8010d68 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80111b6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d102      	bne.n	80111c4 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 80111be:	6a38      	ldr	r0, [r7, #32]
 80111c0:	f003 fdfa 	bl	8014db8 <tcp_output>
  while (pcb != NULL) {
 80111c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	f47f add4 	bne.w	8010d74 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80111cc:	2300      	movs	r3, #0
 80111ce:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 80111d0:	4b23      	ldr	r3, [pc, #140]	; (8011260 <tcp_slowtmr+0x518>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80111d6:	e068      	b.n	80112aa <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	7d1b      	ldrb	r3, [r3, #20]
 80111dc:	2b0a      	cmp	r3, #10
 80111de:	d006      	beq.n	80111ee <tcp_slowtmr+0x4a6>
 80111e0:	4b1a      	ldr	r3, [pc, #104]	; (801124c <tcp_slowtmr+0x504>)
 80111e2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80111e6:	491f      	ldr	r1, [pc, #124]	; (8011264 <tcp_slowtmr+0x51c>)
 80111e8:	481a      	ldr	r0, [pc, #104]	; (8011254 <tcp_slowtmr+0x50c>)
 80111ea:	f009 fe31 	bl	801ae50 <iprintf>
    pcb_remove = 0;
 80111ee:	2300      	movs	r3, #0
 80111f0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80111f2:	4b12      	ldr	r3, [pc, #72]	; (801123c <tcp_slowtmr+0x4f4>)
 80111f4:	681a      	ldr	r2, [r3, #0]
 80111f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f8:	6a1b      	ldr	r3, [r3, #32]
 80111fa:	1ad3      	subs	r3, r2, r3
 80111fc:	2bf0      	cmp	r3, #240	; 0xf0
 80111fe:	d902      	bls.n	8011206 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8011200:	7ffb      	ldrb	r3, [r7, #31]
 8011202:	3301      	adds	r3, #1
 8011204:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011206:	7ffb      	ldrb	r3, [r7, #31]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d049      	beq.n	80112a0 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801120c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801120e:	f000 fb91 	bl	8011934 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011212:	6a3b      	ldr	r3, [r7, #32]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d029      	beq.n	801126c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011218:	4b11      	ldr	r3, [pc, #68]	; (8011260 <tcp_slowtmr+0x518>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801121e:	429a      	cmp	r2, r3
 8011220:	d106      	bne.n	8011230 <tcp_slowtmr+0x4e8>
 8011222:	4b0a      	ldr	r3, [pc, #40]	; (801124c <tcp_slowtmr+0x504>)
 8011224:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8011228:	490f      	ldr	r1, [pc, #60]	; (8011268 <tcp_slowtmr+0x520>)
 801122a:	480a      	ldr	r0, [pc, #40]	; (8011254 <tcp_slowtmr+0x50c>)
 801122c:	f009 fe10 	bl	801ae50 <iprintf>
        prev->next = pcb->next;
 8011230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011232:	68da      	ldr	r2, [r3, #12]
 8011234:	6a3b      	ldr	r3, [r7, #32]
 8011236:	60da      	str	r2, [r3, #12]
 8011238:	e028      	b.n	801128c <tcp_slowtmr+0x544>
 801123a:	bf00      	nop
 801123c:	20016428 	.word	0x20016428
 8011240:	000124f8 	.word	0x000124f8
 8011244:	10624dd3 	.word	0x10624dd3
 8011248:	20016424 	.word	0x20016424
 801124c:	0801eb68 	.word	0x0801eb68
 8011250:	0801eda0 	.word	0x0801eda0
 8011254:	0801eba4 	.word	0x0801eba4
 8011258:	0801edcc 	.word	0x0801edcc
 801125c:	20016420 	.word	0x20016420
 8011260:	20016434 	.word	0x20016434
 8011264:	0801edf8 	.word	0x0801edf8
 8011268:	0801ee28 	.word	0x0801ee28
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801126c:	4b12      	ldr	r3, [pc, #72]	; (80112b8 <tcp_slowtmr+0x570>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011272:	429a      	cmp	r2, r3
 8011274:	d006      	beq.n	8011284 <tcp_slowtmr+0x53c>
 8011276:	4b11      	ldr	r3, [pc, #68]	; (80112bc <tcp_slowtmr+0x574>)
 8011278:	f240 42cf 	movw	r2, #1231	; 0x4cf
 801127c:	4910      	ldr	r1, [pc, #64]	; (80112c0 <tcp_slowtmr+0x578>)
 801127e:	4811      	ldr	r0, [pc, #68]	; (80112c4 <tcp_slowtmr+0x57c>)
 8011280:	f009 fde6 	bl	801ae50 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	4a0b      	ldr	r2, [pc, #44]	; (80112b8 <tcp_slowtmr+0x570>)
 801128a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8011296:	69b9      	ldr	r1, [r7, #24]
 8011298:	2001      	movs	r0, #1
 801129a:	f7fe f883 	bl	800f3a4 <memp_free>
 801129e:	e004      	b.n	80112aa <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 80112a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a2:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80112a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a6:	68db      	ldr	r3, [r3, #12]
 80112a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80112aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d193      	bne.n	80111d8 <tcp_slowtmr+0x490>
    }
  }
}
 80112b0:	bf00      	nop
 80112b2:	3728      	adds	r7, #40	; 0x28
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bdb0      	pop	{r4, r5, r7, pc}
 80112b8:	20016434 	.word	0x20016434
 80112bc:	0801eb68 	.word	0x0801eb68
 80112c0:	0801ee50 	.word	0x0801ee50
 80112c4:	0801eba4 	.word	0x0801eba4

080112c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80112ce:	4b2d      	ldr	r3, [pc, #180]	; (8011384 <tcp_fasttmr+0xbc>)
 80112d0:	781b      	ldrb	r3, [r3, #0]
 80112d2:	3301      	adds	r3, #1
 80112d4:	b2da      	uxtb	r2, r3
 80112d6:	4b2b      	ldr	r3, [pc, #172]	; (8011384 <tcp_fasttmr+0xbc>)
 80112d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80112da:	4b2b      	ldr	r3, [pc, #172]	; (8011388 <tcp_fasttmr+0xc0>)
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80112e0:	e048      	b.n	8011374 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	7f5a      	ldrb	r2, [r3, #29]
 80112e6:	4b27      	ldr	r3, [pc, #156]	; (8011384 <tcp_fasttmr+0xbc>)
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d03f      	beq.n	801136e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80112ee:	4b25      	ldr	r3, [pc, #148]	; (8011384 <tcp_fasttmr+0xbc>)
 80112f0:	781a      	ldrb	r2, [r3, #0]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	7e9b      	ldrb	r3, [r3, #26]
 80112fa:	f003 0301 	and.w	r3, r3, #1
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d010      	beq.n	8011324 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	7e9b      	ldrb	r3, [r3, #26]
 8011306:	f043 0302 	orr.w	r3, r3, #2
 801130a:	b2da      	uxtb	r2, r3
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f003 fd51 	bl	8014db8 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	7e9b      	ldrb	r3, [r3, #26]
 801131a:	f023 0303 	bic.w	r3, r3, #3
 801131e:	b2da      	uxtb	r2, r3
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	7e9b      	ldrb	r3, [r3, #26]
 8011328:	f003 0308 	and.w	r3, r3, #8
 801132c:	2b00      	cmp	r3, #0
 801132e:	d009      	beq.n	8011344 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	7e9b      	ldrb	r3, [r3, #26]
 8011334:	f023 0308 	bic.w	r3, r3, #8
 8011338:	b2da      	uxtb	r2, r3
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f7ff f958 	bl	80105f4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801134e:	2b00      	cmp	r3, #0
 8011350:	d00a      	beq.n	8011368 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011352:	4b0e      	ldr	r3, [pc, #56]	; (801138c <tcp_fasttmr+0xc4>)
 8011354:	2200      	movs	r2, #0
 8011356:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011358:	6878      	ldr	r0, [r7, #4]
 801135a:	f000 f819 	bl	8011390 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801135e:	4b0b      	ldr	r3, [pc, #44]	; (801138c <tcp_fasttmr+0xc4>)
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d000      	beq.n	8011368 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011366:	e7b8      	b.n	80112da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	607b      	str	r3, [r7, #4]
 801136c:	e002      	b.n	8011374 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	68db      	ldr	r3, [r3, #12]
 8011372:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d1b3      	bne.n	80112e2 <tcp_fasttmr+0x1a>
    }
  }
}
 801137a:	bf00      	nop
 801137c:	3708      	adds	r7, #8
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}
 8011382:	bf00      	nop
 8011384:	2000c96a 	.word	0x2000c96a
 8011388:	20016424 	.word	0x20016424
 801138c:	20016420 	.word	0x20016420

08011390 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011390:	b590      	push	{r4, r7, lr}
 8011392:	b085      	sub	sp, #20
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801139c:	7b5b      	ldrb	r3, [r3, #13]
 801139e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113a4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2200      	movs	r2, #0
 80113aa:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d00b      	beq.n	80113ce <tcp_process_refused_data+0x3e>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6918      	ldr	r0, [r3, #16]
 80113c0:	2300      	movs	r3, #0
 80113c2:	68ba      	ldr	r2, [r7, #8]
 80113c4:	6879      	ldr	r1, [r7, #4]
 80113c6:	47a0      	blx	r4
 80113c8:	4603      	mov	r3, r0
 80113ca:	73fb      	strb	r3, [r7, #15]
 80113cc:	e007      	b.n	80113de <tcp_process_refused_data+0x4e>
 80113ce:	2300      	movs	r3, #0
 80113d0:	68ba      	ldr	r2, [r7, #8]
 80113d2:	6879      	ldr	r1, [r7, #4]
 80113d4:	2000      	movs	r0, #0
 80113d6:	f000 f88c 	bl	80114f2 <tcp_recv_null>
 80113da:	4603      	mov	r3, r0
 80113dc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80113de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d12a      	bne.n	801143c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80113e6:	7bbb      	ldrb	r3, [r7, #14]
 80113e8:	f003 0320 	and.w	r3, r3, #32
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d033      	beq.n	8011458 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80113f8:	d005      	beq.n	8011406 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113fe:	3301      	adds	r3, #1
 8011400:	b29a      	uxth	r2, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00b      	beq.n	8011428 <tcp_process_refused_data+0x98>
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6918      	ldr	r0, [r3, #16]
 801141a:	2300      	movs	r3, #0
 801141c:	2200      	movs	r2, #0
 801141e:	6879      	ldr	r1, [r7, #4]
 8011420:	47a0      	blx	r4
 8011422:	4603      	mov	r3, r0
 8011424:	73fb      	strb	r3, [r7, #15]
 8011426:	e001      	b.n	801142c <tcp_process_refused_data+0x9c>
 8011428:	2300      	movs	r3, #0
 801142a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801142c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011430:	f113 0f0d 	cmn.w	r3, #13
 8011434:	d110      	bne.n	8011458 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8011436:	f06f 030c 	mvn.w	r3, #12
 801143a:	e00e      	b.n	801145a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 801143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011440:	f113 0f0d 	cmn.w	r3, #13
 8011444:	d102      	bne.n	801144c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011446:	f06f 030c 	mvn.w	r3, #12
 801144a:	e006      	b.n	801145a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	68ba      	ldr	r2, [r7, #8]
 8011450:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8011452:	f06f 0304 	mvn.w	r3, #4
 8011456:	e000      	b.n	801145a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8011458:	2300      	movs	r3, #0
}
 801145a:	4618      	mov	r0, r3
 801145c:	3714      	adds	r7, #20
 801145e:	46bd      	mov	sp, r7
 8011460:	bd90      	pop	{r4, r7, pc}

08011462 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011462:	b580      	push	{r7, lr}
 8011464:	b084      	sub	sp, #16
 8011466:	af00      	add	r7, sp, #0
 8011468:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801146a:	e007      	b.n	801147c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f000 f809 	bl	801148a <tcp_seg_free>
    seg = next;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d1f4      	bne.n	801146c <tcp_segs_free+0xa>
  }
}
 8011482:	bf00      	nop
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b082      	sub	sp, #8
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d00c      	beq.n	80114b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d004      	beq.n	80114aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7fe fcd7 	bl	800fe58 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80114aa:	6879      	ldr	r1, [r7, #4]
 80114ac:	2003      	movs	r0, #3
 80114ae:	f7fd ff79 	bl	800f3a4 <memp_free>
  }
}
 80114b2:	bf00      	nop
 80114b4:	3708      	adds	r7, #8
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}

080114ba <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b084      	sub	sp, #16
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80114c2:	2003      	movs	r0, #3
 80114c4:	f7fd ff1c 	bl	800f300 <memp_malloc>
 80114c8:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d101      	bne.n	80114d4 <tcp_seg_copy+0x1a>
    return NULL;
 80114d0:	2300      	movs	r3, #0
 80114d2:	e00a      	b.n	80114ea <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80114d4:	2210      	movs	r2, #16
 80114d6:	6879      	ldr	r1, [r7, #4]
 80114d8:	68f8      	ldr	r0, [r7, #12]
 80114da:	f008 ffc2 	bl	801a462 <memcpy>
  pbuf_ref(cseg->p);
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	685b      	ldr	r3, [r3, #4]
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7fe fd6a 	bl	800ffbc <pbuf_ref>
  return cseg;
 80114e8:	68fb      	ldr	r3, [r7, #12]
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3710      	adds	r7, #16
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}

080114f2 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80114f2:	b580      	push	{r7, lr}
 80114f4:	b084      	sub	sp, #16
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	60f8      	str	r0, [r7, #12]
 80114fa:	60b9      	str	r1, [r7, #8]
 80114fc:	607a      	str	r2, [r7, #4]
 80114fe:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d009      	beq.n	801151a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	891b      	ldrh	r3, [r3, #8]
 801150a:	4619      	mov	r1, r3
 801150c:	68b8      	ldr	r0, [r7, #8]
 801150e:	f7ff fb7d 	bl	8010c0c <tcp_recved>
    pbuf_free(p);
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f7fe fca0 	bl	800fe58 <pbuf_free>
 8011518:	e008      	b.n	801152c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 801151a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d104      	bne.n	801152c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8011522:	68b8      	ldr	r0, [r7, #8]
 8011524:	f7ff f8cc 	bl	80106c0 <tcp_close>
 8011528:	4603      	mov	r3, r0
 801152a:	e000      	b.n	801152e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 801152c:	2300      	movs	r3, #0
}
 801152e:	4618      	mov	r0, r3
 8011530:	3710      	adds	r7, #16
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
	...

08011538 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	4603      	mov	r3, r0
 8011540:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011546:	2b00      	cmp	r3, #0
 8011548:	db01      	blt.n	801154e <tcp_kill_prio+0x16>
 801154a:	79fb      	ldrb	r3, [r7, #7]
 801154c:	e000      	b.n	8011550 <tcp_kill_prio+0x18>
 801154e:	237f      	movs	r3, #127	; 0x7f
 8011550:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8011552:	2300      	movs	r3, #0
 8011554:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011556:	2300      	movs	r3, #0
 8011558:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801155a:	4b16      	ldr	r3, [pc, #88]	; (80115b4 <tcp_kill_prio+0x7c>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	617b      	str	r3, [r7, #20]
 8011560:	e01a      	b.n	8011598 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	7d5b      	ldrb	r3, [r3, #21]
 8011566:	7afa      	ldrb	r2, [r7, #11]
 8011568:	429a      	cmp	r2, r3
 801156a:	d312      	bcc.n	8011592 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801156c:	4b12      	ldr	r3, [pc, #72]	; (80115b8 <tcp_kill_prio+0x80>)
 801156e:	681a      	ldr	r2, [r3, #0]
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	6a1b      	ldr	r3, [r3, #32]
 8011574:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8011576:	68fa      	ldr	r2, [r7, #12]
 8011578:	429a      	cmp	r2, r3
 801157a:	d80a      	bhi.n	8011592 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 801157c:	4b0e      	ldr	r3, [pc, #56]	; (80115b8 <tcp_kill_prio+0x80>)
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	6a1b      	ldr	r3, [r3, #32]
 8011584:	1ad3      	subs	r3, r2, r3
 8011586:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	7d5b      	ldrb	r3, [r3, #21]
 8011590:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	68db      	ldr	r3, [r3, #12]
 8011596:	617b      	str	r3, [r7, #20]
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d1e1      	bne.n	8011562 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d002      	beq.n	80115aa <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80115a4:	6938      	ldr	r0, [r7, #16]
 80115a6:	f7ff f99d 	bl	80108e4 <tcp_abort>
  }
}
 80115aa:	bf00      	nop
 80115ac:	3718      	adds	r7, #24
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	20016424 	.word	0x20016424
 80115b8:	20016428 	.word	0x20016428

080115bc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b086      	sub	sp, #24
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	4603      	mov	r3, r0
 80115c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80115c6:	79fb      	ldrb	r3, [r7, #7]
 80115c8:	2b08      	cmp	r3, #8
 80115ca:	d009      	beq.n	80115e0 <tcp_kill_state+0x24>
 80115cc:	79fb      	ldrb	r3, [r7, #7]
 80115ce:	2b09      	cmp	r3, #9
 80115d0:	d006      	beq.n	80115e0 <tcp_kill_state+0x24>
 80115d2:	4b1a      	ldr	r3, [pc, #104]	; (801163c <tcp_kill_state+0x80>)
 80115d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80115d8:	4919      	ldr	r1, [pc, #100]	; (8011640 <tcp_kill_state+0x84>)
 80115da:	481a      	ldr	r0, [pc, #104]	; (8011644 <tcp_kill_state+0x88>)
 80115dc:	f009 fc38 	bl	801ae50 <iprintf>

  inactivity = 0;
 80115e0:	2300      	movs	r3, #0
 80115e2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80115e4:	2300      	movs	r3, #0
 80115e6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80115e8:	4b17      	ldr	r3, [pc, #92]	; (8011648 <tcp_kill_state+0x8c>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	617b      	str	r3, [r7, #20]
 80115ee:	e017      	b.n	8011620 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	7d1b      	ldrb	r3, [r3, #20]
 80115f4:	79fa      	ldrb	r2, [r7, #7]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d10f      	bne.n	801161a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80115fa:	4b14      	ldr	r3, [pc, #80]	; (801164c <tcp_kill_state+0x90>)
 80115fc:	681a      	ldr	r2, [r3, #0]
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	6a1b      	ldr	r3, [r3, #32]
 8011602:	1ad3      	subs	r3, r2, r3
 8011604:	68fa      	ldr	r2, [r7, #12]
 8011606:	429a      	cmp	r2, r3
 8011608:	d807      	bhi.n	801161a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801160a:	4b10      	ldr	r3, [pc, #64]	; (801164c <tcp_kill_state+0x90>)
 801160c:	681a      	ldr	r2, [r3, #0]
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	6a1b      	ldr	r3, [r3, #32]
 8011612:	1ad3      	subs	r3, r2, r3
 8011614:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	617b      	str	r3, [r7, #20]
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1e4      	bne.n	80115f0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d003      	beq.n	8011634 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801162c:	2100      	movs	r1, #0
 801162e:	6938      	ldr	r0, [r7, #16]
 8011630:	f7ff f8a6 	bl	8010780 <tcp_abandon>
  }
}
 8011634:	bf00      	nop
 8011636:	3718      	adds	r7, #24
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}
 801163c:	0801eb68 	.word	0x0801eb68
 8011640:	0801ee78 	.word	0x0801ee78
 8011644:	0801eba4 	.word	0x0801eba4
 8011648:	20016424 	.word	0x20016424
 801164c:	20016428 	.word	0x20016428

08011650 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b084      	sub	sp, #16
 8011654:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011656:	2300      	movs	r3, #0
 8011658:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801165a:	2300      	movs	r3, #0
 801165c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801165e:	4b12      	ldr	r3, [pc, #72]	; (80116a8 <tcp_kill_timewait+0x58>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	60fb      	str	r3, [r7, #12]
 8011664:	e012      	b.n	801168c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011666:	4b11      	ldr	r3, [pc, #68]	; (80116ac <tcp_kill_timewait+0x5c>)
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	6a1b      	ldr	r3, [r3, #32]
 801166e:	1ad3      	subs	r3, r2, r3
 8011670:	687a      	ldr	r2, [r7, #4]
 8011672:	429a      	cmp	r2, r3
 8011674:	d807      	bhi.n	8011686 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011676:	4b0d      	ldr	r3, [pc, #52]	; (80116ac <tcp_kill_timewait+0x5c>)
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	6a1b      	ldr	r3, [r3, #32]
 801167e:	1ad3      	subs	r3, r2, r3
 8011680:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	60fb      	str	r3, [r7, #12]
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d1e9      	bne.n	8011666 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d002      	beq.n	801169e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011698:	68b8      	ldr	r0, [r7, #8]
 801169a:	f7ff f923 	bl	80108e4 <tcp_abort>
  }
}
 801169e:	bf00      	nop
 80116a0:	3710      	adds	r7, #16
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop
 80116a8:	20016434 	.word	0x20016434
 80116ac:	20016428 	.word	0x20016428

080116b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b084      	sub	sp, #16
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	4603      	mov	r3, r0
 80116b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80116ba:	2001      	movs	r0, #1
 80116bc:	f7fd fe20 	bl	800f300 <memp_malloc>
 80116c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d124      	bne.n	8011712 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80116c8:	f7ff ffc2 	bl	8011650 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80116cc:	2001      	movs	r0, #1
 80116ce:	f7fd fe17 	bl	800f300 <memp_malloc>
 80116d2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d11b      	bne.n	8011712 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80116da:	2009      	movs	r0, #9
 80116dc:	f7ff ff6e 	bl	80115bc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80116e0:	2001      	movs	r0, #1
 80116e2:	f7fd fe0d 	bl	800f300 <memp_malloc>
 80116e6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d111      	bne.n	8011712 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80116ee:	2008      	movs	r0, #8
 80116f0:	f7ff ff64 	bl	80115bc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80116f4:	2001      	movs	r0, #1
 80116f6:	f7fd fe03 	bl	800f300 <memp_malloc>
 80116fa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d107      	bne.n	8011712 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011702:	79fb      	ldrb	r3, [r7, #7]
 8011704:	4618      	mov	r0, r3
 8011706:	f7ff ff17 	bl	8011538 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801170a:	2001      	movs	r0, #1
 801170c:	f7fd fdf8 	bl	800f300 <memp_malloc>
 8011710:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d03f      	beq.n	8011798 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011718:	2298      	movs	r2, #152	; 0x98
 801171a:	2100      	movs	r1, #0
 801171c:	68f8      	ldr	r0, [r7, #12]
 801171e:	f008 feab 	bl	801a478 <memset>
    pcb->prio = prio;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	79fa      	ldrb	r2, [r7, #7]
 8011726:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801172e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011738:	855a      	strh	r2, [r3, #42]	; 0x2a
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	22ff      	movs	r2, #255	; 0xff
 8011746:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801174e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	2206      	movs	r2, #6
 8011754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	2206      	movs	r2, #6
 801175c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011764:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2201      	movs	r2, #1
 801176a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801176e:	4b0d      	ldr	r3, [pc, #52]	; (80117a4 <tcp_alloc+0xf4>)
 8011770:	681a      	ldr	r2, [r3, #0]
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011776:	4b0c      	ldr	r3, [pc, #48]	; (80117a8 <tcp_alloc+0xf8>)
 8011778:	781a      	ldrb	r2, [r3, #0]
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011784:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	4a08      	ldr	r2, [pc, #32]	; (80117ac <tcp_alloc+0xfc>)
 801178c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	4a07      	ldr	r2, [pc, #28]	; (80117b0 <tcp_alloc+0x100>)
 8011794:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011798:	68fb      	ldr	r3, [r7, #12]
}
 801179a:	4618      	mov	r0, r3
 801179c:	3710      	adds	r7, #16
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	20016428 	.word	0x20016428
 80117a8:	2000c96a 	.word	0x2000c96a
 80117ac:	080114f3 	.word	0x080114f3
 80117b0:	006ddd00 	.word	0x006ddd00

080117b4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	4603      	mov	r3, r0
 80117bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80117be:	2040      	movs	r0, #64	; 0x40
 80117c0:	f7ff ff76 	bl	80116b0 <tcp_alloc>
 80117c4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80117c6:	68fb      	ldr	r3, [r7, #12]
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3710      	adds	r7, #16
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}

080117d0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b083      	sub	sp, #12
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d002      	beq.n	80117e6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	683a      	ldr	r2, [r7, #0]
 80117e4:	611a      	str	r2, [r3, #16]
  }
}
 80117e6:	bf00      	nop
 80117e8:	370c      	adds	r7, #12
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr
	...

080117f4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d00e      	beq.n	8011822 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	7d1b      	ldrb	r3, [r3, #20]
 8011808:	2b01      	cmp	r3, #1
 801180a:	d106      	bne.n	801181a <tcp_recv+0x26>
 801180c:	4b07      	ldr	r3, [pc, #28]	; (801182c <tcp_recv+0x38>)
 801180e:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8011812:	4907      	ldr	r1, [pc, #28]	; (8011830 <tcp_recv+0x3c>)
 8011814:	4807      	ldr	r0, [pc, #28]	; (8011834 <tcp_recv+0x40>)
 8011816:	f009 fb1b 	bl	801ae50 <iprintf>
    pcb->recv = recv;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	683a      	ldr	r2, [r7, #0]
 801181e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8011822:	bf00      	nop
 8011824:	3708      	adds	r7, #8
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
 801182a:	bf00      	nop
 801182c:	0801eb68 	.word	0x0801eb68
 8011830:	0801ee88 	.word	0x0801ee88
 8011834:	0801eba4 	.word	0x0801eba4

08011838 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b082      	sub	sp, #8
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
 8011840:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d00d      	beq.n	8011864 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	7d1b      	ldrb	r3, [r3, #20]
 801184c:	2b01      	cmp	r3, #1
 801184e:	d106      	bne.n	801185e <tcp_sent+0x26>
 8011850:	4b06      	ldr	r3, [pc, #24]	; (801186c <tcp_sent+0x34>)
 8011852:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8011856:	4906      	ldr	r1, [pc, #24]	; (8011870 <tcp_sent+0x38>)
 8011858:	4806      	ldr	r0, [pc, #24]	; (8011874 <tcp_sent+0x3c>)
 801185a:	f009 faf9 	bl	801ae50 <iprintf>
    pcb->sent = sent;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	683a      	ldr	r2, [r7, #0]
 8011862:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8011864:	bf00      	nop
 8011866:	3708      	adds	r7, #8
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}
 801186c:	0801eb68 	.word	0x0801eb68
 8011870:	0801eeb0 	.word	0x0801eeb0
 8011874:	0801eba4 	.word	0x0801eba4

08011878 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
 8011880:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d00e      	beq.n	80118a6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	7d1b      	ldrb	r3, [r3, #20]
 801188c:	2b01      	cmp	r3, #1
 801188e:	d106      	bne.n	801189e <tcp_err+0x26>
 8011890:	4b07      	ldr	r3, [pc, #28]	; (80118b0 <tcp_err+0x38>)
 8011892:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8011896:	4907      	ldr	r1, [pc, #28]	; (80118b4 <tcp_err+0x3c>)
 8011898:	4807      	ldr	r0, [pc, #28]	; (80118b8 <tcp_err+0x40>)
 801189a:	f009 fad9 	bl	801ae50 <iprintf>
    pcb->errf = err;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	683a      	ldr	r2, [r7, #0]
 80118a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 80118a6:	bf00      	nop
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	0801eb68 	.word	0x0801eb68
 80118b4:	0801eed8 	.word	0x0801eed8
 80118b8:	0801eba4 	.word	0x0801eba4

080118bc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80118bc:	b480      	push	{r7}
 80118be:	b085      	sub	sp, #20
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d008      	beq.n	80118de <tcp_accept+0x22>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	7d1b      	ldrb	r3, [r3, #20]
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d104      	bne.n	80118de <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	683a      	ldr	r2, [r7, #0]
 80118dc:	619a      	str	r2, [r3, #24]
  }
}
 80118de:	bf00      	nop
 80118e0:	3714      	adds	r7, #20
 80118e2:	46bd      	mov	sp, r7
 80118e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e8:	4770      	bx	lr
	...

080118ec <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	60b9      	str	r1, [r7, #8]
 80118f6:	4613      	mov	r3, r2
 80118f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	7d1b      	ldrb	r3, [r3, #20]
 80118fe:	2b01      	cmp	r3, #1
 8011900:	d106      	bne.n	8011910 <tcp_poll+0x24>
 8011902:	4b09      	ldr	r3, [pc, #36]	; (8011928 <tcp_poll+0x3c>)
 8011904:	f240 7203 	movw	r2, #1795	; 0x703
 8011908:	4908      	ldr	r1, [pc, #32]	; (801192c <tcp_poll+0x40>)
 801190a:	4809      	ldr	r0, [pc, #36]	; (8011930 <tcp_poll+0x44>)
 801190c:	f009 faa0 	bl	801ae50 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	68ba      	ldr	r2, [r7, #8]
 8011914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	79fa      	ldrb	r2, [r7, #7]
 801191c:	771a      	strb	r2, [r3, #28]
}
 801191e:	bf00      	nop
 8011920:	3710      	adds	r7, #16
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	0801eb68 	.word	0x0801eb68
 801192c:	0801ef00 	.word	0x0801ef00
 8011930:	0801eba4 	.word	0x0801eba4

08011934 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	7d1b      	ldrb	r3, [r3, #20]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d034      	beq.n	80119ae <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011948:	2b0a      	cmp	r3, #10
 801194a:	d030      	beq.n	80119ae <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8011950:	2b01      	cmp	r3, #1
 8011952:	d02c      	beq.n	80119ae <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011958:	2b00      	cmp	r3, #0
 801195a:	d007      	beq.n	801196c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011960:	4618      	mov	r0, r3
 8011962:	f7fe fa79 	bl	800fe58 <pbuf_free>
      pcb->refused_data = NULL;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	2200      	movs	r2, #0
 801196a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011970:	4618      	mov	r0, r3
 8011972:	f7ff fd76 	bl	8011462 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	2200      	movs	r2, #0
 801197a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011982:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011988:	4618      	mov	r0, r3
 801198a:	f7ff fd6a 	bl	8011462 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011992:	4618      	mov	r0, r3
 8011994:	f7ff fd65 	bl	8011462 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2200      	movs	r2, #0
 801199c:	669a      	str	r2, [r3, #104]	; 0x68
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80119ae:	bf00      	nop
 80119b0:	3708      	adds	r7, #8
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}
	...

080119b8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b084      	sub	sp, #16
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	683a      	ldr	r2, [r7, #0]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d105      	bne.n	80119d8 <tcp_pcb_remove+0x20>
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	68da      	ldr	r2, [r3, #12]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	601a      	str	r2, [r3, #0]
 80119d6:	e013      	b.n	8011a00 <tcp_pcb_remove+0x48>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	60fb      	str	r3, [r7, #12]
 80119de:	e00c      	b.n	80119fa <tcp_pcb_remove+0x42>
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	683a      	ldr	r2, [r7, #0]
 80119e6:	429a      	cmp	r2, r3
 80119e8:	d104      	bne.n	80119f4 <tcp_pcb_remove+0x3c>
 80119ea:	683b      	ldr	r3, [r7, #0]
 80119ec:	68da      	ldr	r2, [r3, #12]
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	60da      	str	r2, [r3, #12]
 80119f2:	e005      	b.n	8011a00 <tcp_pcb_remove+0x48>
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	60fb      	str	r3, [r7, #12]
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d1ef      	bne.n	80119e0 <tcp_pcb_remove+0x28>
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	2200      	movs	r2, #0
 8011a04:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011a06:	6838      	ldr	r0, [r7, #0]
 8011a08:	f7ff ff94 	bl	8011934 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	7d1b      	ldrb	r3, [r3, #20]
 8011a10:	2b0a      	cmp	r3, #10
 8011a12:	d013      	beq.n	8011a3c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8011a18:	2b01      	cmp	r3, #1
 8011a1a:	d00f      	beq.n	8011a3c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	7e9b      	ldrb	r3, [r3, #26]
 8011a20:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d009      	beq.n	8011a3c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	7e9b      	ldrb	r3, [r3, #26]
 8011a2c:	f043 0302 	orr.w	r3, r3, #2
 8011a30:	b2da      	uxtb	r2, r3
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011a36:	6838      	ldr	r0, [r7, #0]
 8011a38:	f003 f9be 	bl	8014db8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	7d1b      	ldrb	r3, [r3, #20]
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d020      	beq.n	8011a86 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d006      	beq.n	8011a5a <tcp_pcb_remove+0xa2>
 8011a4c:	4b13      	ldr	r3, [pc, #76]	; (8011a9c <tcp_pcb_remove+0xe4>)
 8011a4e:	f240 7253 	movw	r2, #1875	; 0x753
 8011a52:	4913      	ldr	r1, [pc, #76]	; (8011aa0 <tcp_pcb_remove+0xe8>)
 8011a54:	4813      	ldr	r0, [pc, #76]	; (8011aa4 <tcp_pcb_remove+0xec>)
 8011a56:	f009 f9fb 	bl	801ae50 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d006      	beq.n	8011a70 <tcp_pcb_remove+0xb8>
 8011a62:	4b0e      	ldr	r3, [pc, #56]	; (8011a9c <tcp_pcb_remove+0xe4>)
 8011a64:	f240 7254 	movw	r2, #1876	; 0x754
 8011a68:	490f      	ldr	r1, [pc, #60]	; (8011aa8 <tcp_pcb_remove+0xf0>)
 8011a6a:	480e      	ldr	r0, [pc, #56]	; (8011aa4 <tcp_pcb_remove+0xec>)
 8011a6c:	f009 f9f0 	bl	801ae50 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d006      	beq.n	8011a86 <tcp_pcb_remove+0xce>
 8011a78:	4b08      	ldr	r3, [pc, #32]	; (8011a9c <tcp_pcb_remove+0xe4>)
 8011a7a:	f240 7256 	movw	r2, #1878	; 0x756
 8011a7e:	490b      	ldr	r1, [pc, #44]	; (8011aac <tcp_pcb_remove+0xf4>)
 8011a80:	4808      	ldr	r0, [pc, #32]	; (8011aa4 <tcp_pcb_remove+0xec>)
 8011a82:	f009 f9e5 	bl	801ae50 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011a92:	bf00      	nop
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	0801eb68 	.word	0x0801eb68
 8011aa0:	0801ef20 	.word	0x0801ef20
 8011aa4:	0801eba4 	.word	0x0801eba4
 8011aa8:	0801ef38 	.word	0x0801ef38
 8011aac:	0801ef54 	.word	0x0801ef54

08011ab0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011ab0:	b480      	push	{r7}
 8011ab2:	b083      	sub	sp, #12
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011ab8:	4b07      	ldr	r3, [pc, #28]	; (8011ad8 <tcp_next_iss+0x28>)
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	4b07      	ldr	r3, [pc, #28]	; (8011adc <tcp_next_iss+0x2c>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	4413      	add	r3, r2
 8011ac2:	4a05      	ldr	r2, [pc, #20]	; (8011ad8 <tcp_next_iss+0x28>)
 8011ac4:	6013      	str	r3, [r2, #0]
  return iss;
 8011ac6:	4b04      	ldr	r3, [pc, #16]	; (8011ad8 <tcp_next_iss+0x28>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	370c      	adds	r7, #12
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad4:	4770      	bx	lr
 8011ad6:	bf00      	nop
 8011ad8:	20000020 	.word	0x20000020
 8011adc:	20016428 	.word	0x20016428

08011ae0 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b084      	sub	sp, #16
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	6039      	str	r1, [r7, #0]
 8011aea:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8011aec:	6838      	ldr	r0, [r7, #0]
 8011aee:	f005 faed 	bl	80170cc <ip4_route>
 8011af2:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d101      	bne.n	8011afe <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8011afa:	88fb      	ldrh	r3, [r7, #6]
 8011afc:	e010      	b.n	8011b20 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8011b02:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011b04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d008      	beq.n	8011b1e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8011b0c:	897b      	ldrh	r3, [r7, #10]
 8011b0e:	3b28      	subs	r3, #40	; 0x28
 8011b10:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011b12:	893a      	ldrh	r2, [r7, #8]
 8011b14:	88fb      	ldrh	r3, [r7, #6]
 8011b16:	4293      	cmp	r3, r2
 8011b18:	bf28      	it	cs
 8011b1a:	4613      	movcs	r3, r2
 8011b1c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8011b1e:	88fb      	ldrh	r3, [r7, #6]
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3710      	adds	r7, #16
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b084      	sub	sp, #16
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011b36:	e011      	b.n	8011b5c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	681a      	ldr	r2, [r3, #0]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d108      	bne.n	8011b56 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011b4a:	68f8      	ldr	r0, [r7, #12]
 8011b4c:	f7fe feca 	bl	80108e4 <tcp_abort>
      pcb = next;
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	60fb      	str	r3, [r7, #12]
 8011b54:	e002      	b.n	8011b5c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	68db      	ldr	r3, [r3, #12]
 8011b5a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d1ea      	bne.n	8011b38 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8011b62:	bf00      	nop
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
	...

08011b6c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d02c      	beq.n	8011bd6 <tcp_netif_ip_addr_changed+0x6a>
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d028      	beq.n	8011bd6 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011b84:	4b16      	ldr	r3, [pc, #88]	; (8011be0 <tcp_netif_ip_addr_changed+0x74>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	4619      	mov	r1, r3
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f7ff ffcc 	bl	8011b28 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011b90:	4b14      	ldr	r3, [pc, #80]	; (8011be4 <tcp_netif_ip_addr_changed+0x78>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4619      	mov	r1, r3
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f7ff ffc6 	bl	8011b28 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d019      	beq.n	8011bd6 <tcp_netif_ip_addr_changed+0x6a>
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d015      	beq.n	8011bd6 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8011baa:	4b0f      	ldr	r3, [pc, #60]	; (8011be8 <tcp_netif_ip_addr_changed+0x7c>)
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	60fb      	str	r3, [r7, #12]
 8011bb0:	e00e      	b.n	8011bd0 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	68db      	ldr	r3, [r3, #12]
 8011bb6:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	681a      	ldr	r2, [r3, #0]
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d103      	bne.n	8011bcc <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	681a      	ldr	r2, [r3, #0]
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	60fb      	str	r3, [r7, #12]
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d1ed      	bne.n	8011bb2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011bd6:	bf00      	nop
 8011bd8:	3710      	adds	r7, #16
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop
 8011be0:	20016424 	.word	0x20016424
 8011be4:	20016430 	.word	0x20016430
 8011be8:	2001642c 	.word	0x2001642c

08011bec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011bec:	b590      	push	{r4, r7, lr}
 8011bee:	b08b      	sub	sp, #44	; 0x2c
 8011bf0:	af02      	add	r7, sp, #8
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	685b      	ldr	r3, [r3, #4]
 8011bfa:	4a82      	ldr	r2, [pc, #520]	; (8011e04 <tcp_input+0x218>)
 8011bfc:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	895b      	ldrh	r3, [r3, #10]
 8011c02:	2b13      	cmp	r3, #19
 8011c04:	f240 838a 	bls.w	801231c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011c08:	4b7f      	ldr	r3, [pc, #508]	; (8011e08 <tcp_input+0x21c>)
 8011c0a:	695a      	ldr	r2, [r3, #20]
 8011c0c:	4b7e      	ldr	r3, [pc, #504]	; (8011e08 <tcp_input+0x21c>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	4619      	mov	r1, r3
 8011c12:	4610      	mov	r0, r2
 8011c14:	f005 fcd4 	bl	80175c0 <ip4_addr_isbroadcast_u32>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	f040 8380 	bne.w	8012320 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011c20:	4b79      	ldr	r3, [pc, #484]	; (8011e08 <tcp_input+0x21c>)
 8011c22:	695b      	ldr	r3, [r3, #20]
 8011c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011c28:	2be0      	cmp	r3, #224	; 0xe0
 8011c2a:	f000 8379 	beq.w	8012320 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8011c2e:	4b75      	ldr	r3, [pc, #468]	; (8011e04 <tcp_input+0x218>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	899b      	ldrh	r3, [r3, #12]
 8011c34:	b29b      	uxth	r3, r3
 8011c36:	4618      	mov	r0, r3
 8011c38:	f7fc ff74 	bl	800eb24 <lwip_htons>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	0b1b      	lsrs	r3, r3, #12
 8011c40:	b29b      	uxth	r3, r3
 8011c42:	b2db      	uxtb	r3, r3
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011c48:	7cbb      	ldrb	r3, [r7, #18]
 8011c4a:	2b13      	cmp	r3, #19
 8011c4c:	f240 8368 	bls.w	8012320 <tcp_input+0x734>
 8011c50:	7cbb      	ldrb	r3, [r7, #18]
 8011c52:	b29a      	uxth	r2, r3
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	891b      	ldrh	r3, [r3, #8]
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	f200 8361 	bhi.w	8012320 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8011c5e:	7cbb      	ldrb	r3, [r7, #18]
 8011c60:	b29b      	uxth	r3, r3
 8011c62:	3b14      	subs	r3, #20
 8011c64:	b29a      	uxth	r2, r3
 8011c66:	4b69      	ldr	r3, [pc, #420]	; (8011e0c <tcp_input+0x220>)
 8011c68:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011c6a:	4b69      	ldr	r3, [pc, #420]	; (8011e10 <tcp_input+0x224>)
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	895a      	ldrh	r2, [r3, #10]
 8011c74:	7cbb      	ldrb	r3, [r7, #18]
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	d30d      	bcc.n	8011c98 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011c7c:	4b63      	ldr	r3, [pc, #396]	; (8011e0c <tcp_input+0x220>)
 8011c7e:	881a      	ldrh	r2, [r3, #0]
 8011c80:	4b64      	ldr	r3, [pc, #400]	; (8011e14 <tcp_input+0x228>)
 8011c82:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8011c84:	7cbb      	ldrb	r3, [r7, #18]
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	425b      	negs	r3, r3
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	b21b      	sxth	r3, r3
 8011c8e:	4619      	mov	r1, r3
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f7fe f8bd 	bl	800fe10 <pbuf_header>
 8011c96:	e055      	b.n	8011d44 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d105      	bne.n	8011cac <tcp_input+0xc0>
 8011ca0:	4b5d      	ldr	r3, [pc, #372]	; (8011e18 <tcp_input+0x22c>)
 8011ca2:	22b2      	movs	r2, #178	; 0xb2
 8011ca4:	495d      	ldr	r1, [pc, #372]	; (8011e1c <tcp_input+0x230>)
 8011ca6:	485e      	ldr	r0, [pc, #376]	; (8011e20 <tcp_input+0x234>)
 8011ca8:	f009 f8d2 	bl	801ae50 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8011cac:	f06f 0113 	mvn.w	r1, #19
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f7fe f8ad 	bl	800fe10 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	895a      	ldrh	r2, [r3, #10]
 8011cba:	4b56      	ldr	r3, [pc, #344]	; (8011e14 <tcp_input+0x228>)
 8011cbc:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8011cbe:	4b53      	ldr	r3, [pc, #332]	; (8011e0c <tcp_input+0x220>)
 8011cc0:	881a      	ldrh	r2, [r3, #0]
 8011cc2:	4b54      	ldr	r3, [pc, #336]	; (8011e14 <tcp_input+0x228>)
 8011cc4:	881b      	ldrh	r3, [r3, #0]
 8011cc6:	1ad3      	subs	r3, r2, r3
 8011cc8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8011cca:	4b52      	ldr	r3, [pc, #328]	; (8011e14 <tcp_input+0x228>)
 8011ccc:	881b      	ldrh	r3, [r3, #0]
 8011cce:	425b      	negs	r3, r3
 8011cd0:	b29b      	uxth	r3, r3
 8011cd2:	b21b      	sxth	r3, r3
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	6878      	ldr	r0, [r7, #4]
 8011cd8:	f7fe f89a 	bl	800fe10 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	895b      	ldrh	r3, [r3, #10]
 8011ce2:	8a3a      	ldrh	r2, [r7, #16]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	f200 831d 	bhi.w	8012324 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	685b      	ldr	r3, [r3, #4]
 8011cf0:	4a47      	ldr	r2, [pc, #284]	; (8011e10 <tcp_input+0x224>)
 8011cf2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681a      	ldr	r2, [r3, #0]
 8011cf8:	8a3b      	ldrh	r3, [r7, #16]
 8011cfa:	425b      	negs	r3, r3
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	b21b      	sxth	r3, r3
 8011d00:	4619      	mov	r1, r3
 8011d02:	4610      	mov	r0, r2
 8011d04:	f7fe f884 	bl	800fe10 <pbuf_header>
    p->tot_len -= opt2len;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	891a      	ldrh	r2, [r3, #8]
 8011d0c:	8a3b      	ldrh	r3, [r7, #16]
 8011d0e:	1ad3      	subs	r3, r2, r3
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	895b      	ldrh	r3, [r3, #10]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d005      	beq.n	8011d2a <tcp_input+0x13e>
 8011d1e:	4b3e      	ldr	r3, [pc, #248]	; (8011e18 <tcp_input+0x22c>)
 8011d20:	22cf      	movs	r2, #207	; 0xcf
 8011d22:	4940      	ldr	r1, [pc, #256]	; (8011e24 <tcp_input+0x238>)
 8011d24:	483e      	ldr	r0, [pc, #248]	; (8011e20 <tcp_input+0x234>)
 8011d26:	f009 f893 	bl	801ae50 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	891a      	ldrh	r2, [r3, #8]
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	891b      	ldrh	r3, [r3, #8]
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d005      	beq.n	8011d44 <tcp_input+0x158>
 8011d38:	4b37      	ldr	r3, [pc, #220]	; (8011e18 <tcp_input+0x22c>)
 8011d3a:	22d0      	movs	r2, #208	; 0xd0
 8011d3c:	493a      	ldr	r1, [pc, #232]	; (8011e28 <tcp_input+0x23c>)
 8011d3e:	4838      	ldr	r0, [pc, #224]	; (8011e20 <tcp_input+0x234>)
 8011d40:	f009 f886 	bl	801ae50 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011d44:	4b2f      	ldr	r3, [pc, #188]	; (8011e04 <tcp_input+0x218>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	881b      	ldrh	r3, [r3, #0]
 8011d4a:	b29a      	uxth	r2, r3
 8011d4c:	4b2d      	ldr	r3, [pc, #180]	; (8011e04 <tcp_input+0x218>)
 8011d4e:	681c      	ldr	r4, [r3, #0]
 8011d50:	4610      	mov	r0, r2
 8011d52:	f7fc fee7 	bl	800eb24 <lwip_htons>
 8011d56:	4603      	mov	r3, r0
 8011d58:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011d5a:	4b2a      	ldr	r3, [pc, #168]	; (8011e04 <tcp_input+0x218>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	885b      	ldrh	r3, [r3, #2]
 8011d60:	b29a      	uxth	r2, r3
 8011d62:	4b28      	ldr	r3, [pc, #160]	; (8011e04 <tcp_input+0x218>)
 8011d64:	681c      	ldr	r4, [r3, #0]
 8011d66:	4610      	mov	r0, r2
 8011d68:	f7fc fedc 	bl	800eb24 <lwip_htons>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011d70:	4b24      	ldr	r3, [pc, #144]	; (8011e04 <tcp_input+0x218>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	4b23      	ldr	r3, [pc, #140]	; (8011e04 <tcp_input+0x218>)
 8011d78:	681c      	ldr	r4, [r3, #0]
 8011d7a:	4610      	mov	r0, r2
 8011d7c:	f7fc fee0 	bl	800eb40 <lwip_htonl>
 8011d80:	4603      	mov	r3, r0
 8011d82:	6063      	str	r3, [r4, #4]
 8011d84:	6863      	ldr	r3, [r4, #4]
 8011d86:	4a29      	ldr	r2, [pc, #164]	; (8011e2c <tcp_input+0x240>)
 8011d88:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011d8a:	4b1e      	ldr	r3, [pc, #120]	; (8011e04 <tcp_input+0x218>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	689a      	ldr	r2, [r3, #8]
 8011d90:	4b1c      	ldr	r3, [pc, #112]	; (8011e04 <tcp_input+0x218>)
 8011d92:	681c      	ldr	r4, [r3, #0]
 8011d94:	4610      	mov	r0, r2
 8011d96:	f7fc fed3 	bl	800eb40 <lwip_htonl>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	60a3      	str	r3, [r4, #8]
 8011d9e:	68a3      	ldr	r3, [r4, #8]
 8011da0:	4a23      	ldr	r2, [pc, #140]	; (8011e30 <tcp_input+0x244>)
 8011da2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011da4:	4b17      	ldr	r3, [pc, #92]	; (8011e04 <tcp_input+0x218>)
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	89db      	ldrh	r3, [r3, #14]
 8011daa:	b29a      	uxth	r2, r3
 8011dac:	4b15      	ldr	r3, [pc, #84]	; (8011e04 <tcp_input+0x218>)
 8011dae:	681c      	ldr	r4, [r3, #0]
 8011db0:	4610      	mov	r0, r2
 8011db2:	f7fc feb7 	bl	800eb24 <lwip_htons>
 8011db6:	4603      	mov	r3, r0
 8011db8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011dba:	4b12      	ldr	r3, [pc, #72]	; (8011e04 <tcp_input+0x218>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	899b      	ldrh	r3, [r3, #12]
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7fc feae 	bl	800eb24 <lwip_htons>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011dd0:	b2da      	uxtb	r2, r3
 8011dd2:	4b18      	ldr	r3, [pc, #96]	; (8011e34 <tcp_input+0x248>)
 8011dd4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	891a      	ldrh	r2, [r3, #8]
 8011dda:	4b16      	ldr	r3, [pc, #88]	; (8011e34 <tcp_input+0x248>)
 8011ddc:	781b      	ldrb	r3, [r3, #0]
 8011dde:	f003 0303 	and.w	r3, r3, #3
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	bf14      	ite	ne
 8011de6:	2301      	movne	r3, #1
 8011de8:	2300      	moveq	r3, #0
 8011dea:	b2db      	uxtb	r3, r3
 8011dec:	b29b      	uxth	r3, r3
 8011dee:	4413      	add	r3, r2
 8011df0:	b29a      	uxth	r2, r3
 8011df2:	4b11      	ldr	r3, [pc, #68]	; (8011e38 <tcp_input+0x24c>)
 8011df4:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011df6:	2300      	movs	r3, #0
 8011df8:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011dfa:	4b10      	ldr	r3, [pc, #64]	; (8011e3c <tcp_input+0x250>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	61fb      	str	r3, [r7, #28]
 8011e00:	e082      	b.n	8011f08 <tcp_input+0x31c>
 8011e02:	bf00      	nop
 8011e04:	2000c97c 	.word	0x2000c97c
 8011e08:	20012d14 	.word	0x20012d14
 8011e0c:	2000c980 	.word	0x2000c980
 8011e10:	2000c984 	.word	0x2000c984
 8011e14:	2000c982 	.word	0x2000c982
 8011e18:	0801ef6c 	.word	0x0801ef6c
 8011e1c:	0801efa0 	.word	0x0801efa0
 8011e20:	0801efb0 	.word	0x0801efb0
 8011e24:	0801efd8 	.word	0x0801efd8
 8011e28:	0801efe4 	.word	0x0801efe4
 8011e2c:	2000c98c 	.word	0x2000c98c
 8011e30:	2000c990 	.word	0x2000c990
 8011e34:	2000c998 	.word	0x2000c998
 8011e38:	2000c996 	.word	0x2000c996
 8011e3c:	20016424 	.word	0x20016424
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	7d1b      	ldrb	r3, [r3, #20]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d105      	bne.n	8011e54 <tcp_input+0x268>
 8011e48:	4b8f      	ldr	r3, [pc, #572]	; (8012088 <tcp_input+0x49c>)
 8011e4a:	22e2      	movs	r2, #226	; 0xe2
 8011e4c:	498f      	ldr	r1, [pc, #572]	; (801208c <tcp_input+0x4a0>)
 8011e4e:	4890      	ldr	r0, [pc, #576]	; (8012090 <tcp_input+0x4a4>)
 8011e50:	f008 fffe 	bl	801ae50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011e54:	69fb      	ldr	r3, [r7, #28]
 8011e56:	7d1b      	ldrb	r3, [r3, #20]
 8011e58:	2b0a      	cmp	r3, #10
 8011e5a:	d105      	bne.n	8011e68 <tcp_input+0x27c>
 8011e5c:	4b8a      	ldr	r3, [pc, #552]	; (8012088 <tcp_input+0x49c>)
 8011e5e:	22e3      	movs	r2, #227	; 0xe3
 8011e60:	498c      	ldr	r1, [pc, #560]	; (8012094 <tcp_input+0x4a8>)
 8011e62:	488b      	ldr	r0, [pc, #556]	; (8012090 <tcp_input+0x4a4>)
 8011e64:	f008 fff4 	bl	801ae50 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011e68:	69fb      	ldr	r3, [r7, #28]
 8011e6a:	7d1b      	ldrb	r3, [r3, #20]
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d105      	bne.n	8011e7c <tcp_input+0x290>
 8011e70:	4b85      	ldr	r3, [pc, #532]	; (8012088 <tcp_input+0x49c>)
 8011e72:	22e4      	movs	r2, #228	; 0xe4
 8011e74:	4988      	ldr	r1, [pc, #544]	; (8012098 <tcp_input+0x4ac>)
 8011e76:	4886      	ldr	r0, [pc, #536]	; (8012090 <tcp_input+0x4a4>)
 8011e78:	f008 ffea 	bl	801ae50 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	8b1a      	ldrh	r2, [r3, #24]
 8011e80:	4b86      	ldr	r3, [pc, #536]	; (801209c <tcp_input+0x4b0>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	881b      	ldrh	r3, [r3, #0]
 8011e86:	b29b      	uxth	r3, r3
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d138      	bne.n	8011efe <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8011e8c:	69fb      	ldr	r3, [r7, #28]
 8011e8e:	8ada      	ldrh	r2, [r3, #22]
 8011e90:	4b82      	ldr	r3, [pc, #520]	; (801209c <tcp_input+0x4b0>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	885b      	ldrh	r3, [r3, #2]
 8011e96:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d130      	bne.n	8011efe <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011e9c:	69fb      	ldr	r3, [r7, #28]
 8011e9e:	685a      	ldr	r2, [r3, #4]
 8011ea0:	4b7f      	ldr	r3, [pc, #508]	; (80120a0 <tcp_input+0x4b4>)
 8011ea2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d12a      	bne.n	8011efe <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	4b7c      	ldr	r3, [pc, #496]	; (80120a0 <tcp_input+0x4b4>)
 8011eae:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	d124      	bne.n	8011efe <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011eb4:	69fb      	ldr	r3, [r7, #28]
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	69fa      	ldr	r2, [r7, #28]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d105      	bne.n	8011eca <tcp_input+0x2de>
 8011ebe:	4b72      	ldr	r3, [pc, #456]	; (8012088 <tcp_input+0x49c>)
 8011ec0:	22ec      	movs	r2, #236	; 0xec
 8011ec2:	4978      	ldr	r1, [pc, #480]	; (80120a4 <tcp_input+0x4b8>)
 8011ec4:	4872      	ldr	r0, [pc, #456]	; (8012090 <tcp_input+0x4a4>)
 8011ec6:	f008 ffc3 	bl	801ae50 <iprintf>
      if (prev != NULL) {
 8011eca:	69bb      	ldr	r3, [r7, #24]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d00a      	beq.n	8011ee6 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8011ed0:	69fb      	ldr	r3, [r7, #28]
 8011ed2:	68da      	ldr	r2, [r3, #12]
 8011ed4:	69bb      	ldr	r3, [r7, #24]
 8011ed6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011ed8:	4b73      	ldr	r3, [pc, #460]	; (80120a8 <tcp_input+0x4bc>)
 8011eda:	681a      	ldr	r2, [r3, #0]
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011ee0:	4a71      	ldr	r2, [pc, #452]	; (80120a8 <tcp_input+0x4bc>)
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011ee6:	69fb      	ldr	r3, [r7, #28]
 8011ee8:	68db      	ldr	r3, [r3, #12]
 8011eea:	69fa      	ldr	r2, [r7, #28]
 8011eec:	429a      	cmp	r2, r3
 8011eee:	d10f      	bne.n	8011f10 <tcp_input+0x324>
 8011ef0:	4b65      	ldr	r3, [pc, #404]	; (8012088 <tcp_input+0x49c>)
 8011ef2:	22f4      	movs	r2, #244	; 0xf4
 8011ef4:	496d      	ldr	r1, [pc, #436]	; (80120ac <tcp_input+0x4c0>)
 8011ef6:	4866      	ldr	r0, [pc, #408]	; (8012090 <tcp_input+0x4a4>)
 8011ef8:	f008 ffaa 	bl	801ae50 <iprintf>
      break;
 8011efc:	e008      	b.n	8011f10 <tcp_input+0x324>
    }
    prev = pcb;
 8011efe:	69fb      	ldr	r3, [r7, #28]
 8011f00:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f02:	69fb      	ldr	r3, [r7, #28]
 8011f04:	68db      	ldr	r3, [r3, #12]
 8011f06:	61fb      	str	r3, [r7, #28]
 8011f08:	69fb      	ldr	r3, [r7, #28]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d198      	bne.n	8011e40 <tcp_input+0x254>
 8011f0e:	e000      	b.n	8011f12 <tcp_input+0x326>
      break;
 8011f10:	bf00      	nop
  }

  if (pcb == NULL) {
 8011f12:	69fb      	ldr	r3, [r7, #28]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d173      	bne.n	8012000 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f18:	4b65      	ldr	r3, [pc, #404]	; (80120b0 <tcp_input+0x4c4>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	61fb      	str	r3, [r7, #28]
 8011f1e:	e02f      	b.n	8011f80 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	7d1b      	ldrb	r3, [r3, #20]
 8011f24:	2b0a      	cmp	r3, #10
 8011f26:	d005      	beq.n	8011f34 <tcp_input+0x348>
 8011f28:	4b57      	ldr	r3, [pc, #348]	; (8012088 <tcp_input+0x49c>)
 8011f2a:	22fe      	movs	r2, #254	; 0xfe
 8011f2c:	4961      	ldr	r1, [pc, #388]	; (80120b4 <tcp_input+0x4c8>)
 8011f2e:	4858      	ldr	r0, [pc, #352]	; (8012090 <tcp_input+0x4a4>)
 8011f30:	f008 ff8e 	bl	801ae50 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8011f34:	69fb      	ldr	r3, [r7, #28]
 8011f36:	8b1a      	ldrh	r2, [r3, #24]
 8011f38:	4b58      	ldr	r3, [pc, #352]	; (801209c <tcp_input+0x4b0>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	881b      	ldrh	r3, [r3, #0]
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	429a      	cmp	r2, r3
 8011f42:	d11a      	bne.n	8011f7a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8011f44:	69fb      	ldr	r3, [r7, #28]
 8011f46:	8ada      	ldrh	r2, [r3, #22]
 8011f48:	4b54      	ldr	r3, [pc, #336]	; (801209c <tcp_input+0x4b0>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	885b      	ldrh	r3, [r3, #2]
 8011f4e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d112      	bne.n	8011f7a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	685a      	ldr	r2, [r3, #4]
 8011f58:	4b51      	ldr	r3, [pc, #324]	; (80120a0 <tcp_input+0x4b4>)
 8011f5a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d10c      	bne.n	8011f7a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	681a      	ldr	r2, [r3, #0]
 8011f64:	4b4e      	ldr	r3, [pc, #312]	; (80120a0 <tcp_input+0x4b4>)
 8011f66:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d106      	bne.n	8011f7a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8011f6c:	69f8      	ldr	r0, [r7, #28]
 8011f6e:	f000 fb15 	bl	801259c <tcp_timewait_input>
        pbuf_free(p);
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f7fd ff70 	bl	800fe58 <pbuf_free>
        return;
 8011f78:	e1da      	b.n	8012330 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f7a:	69fb      	ldr	r3, [r7, #28]
 8011f7c:	68db      	ldr	r3, [r3, #12]
 8011f7e:	61fb      	str	r3, [r7, #28]
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d1cc      	bne.n	8011f20 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011f86:	2300      	movs	r3, #0
 8011f88:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011f8a:	4b4b      	ldr	r3, [pc, #300]	; (80120b8 <tcp_input+0x4cc>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	617b      	str	r3, [r7, #20]
 8011f90:	e019      	b.n	8011fc6 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8011f92:	697b      	ldr	r3, [r7, #20]
 8011f94:	8ada      	ldrh	r2, [r3, #22]
 8011f96:	4b41      	ldr	r3, [pc, #260]	; (801209c <tcp_input+0x4b0>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	885b      	ldrh	r3, [r3, #2]
 8011f9c:	b29b      	uxth	r3, r3
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d10c      	bne.n	8011fbc <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	4b3e      	ldr	r3, [pc, #248]	; (80120a0 <tcp_input+0x4b4>)
 8011fa8:	695b      	ldr	r3, [r3, #20]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d00f      	beq.n	8011fce <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011fae:	697b      	ldr	r3, [r7, #20]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d00d      	beq.n	8011fd0 <tcp_input+0x3e4>
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d009      	beq.n	8011fd0 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	617b      	str	r3, [r7, #20]
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d1e2      	bne.n	8011f92 <tcp_input+0x3a6>
 8011fcc:	e000      	b.n	8011fd0 <tcp_input+0x3e4>
            break;
 8011fce:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d014      	beq.n	8012000 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011fd6:	69bb      	ldr	r3, [r7, #24]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00a      	beq.n	8011ff2 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	68da      	ldr	r2, [r3, #12]
 8011fe0:	69bb      	ldr	r3, [r7, #24]
 8011fe2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011fe4:	4b34      	ldr	r3, [pc, #208]	; (80120b8 <tcp_input+0x4cc>)
 8011fe6:	681a      	ldr	r2, [r3, #0]
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011fec:	4a32      	ldr	r2, [pc, #200]	; (80120b8 <tcp_input+0x4cc>)
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8011ff2:	6978      	ldr	r0, [r7, #20]
 8011ff4:	f000 f9f0 	bl	80123d8 <tcp_listen_input>
      pbuf_free(p);
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f7fd ff2d 	bl	800fe58 <pbuf_free>
      return;
 8011ffe:	e197      	b.n	8012330 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8012000:	69fb      	ldr	r3, [r7, #28]
 8012002:	2b00      	cmp	r3, #0
 8012004:	f000 8164 	beq.w	80122d0 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012008:	4b2c      	ldr	r3, [pc, #176]	; (80120bc <tcp_input+0x4d0>)
 801200a:	2200      	movs	r2, #0
 801200c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	891a      	ldrh	r2, [r3, #8]
 8012012:	4b2a      	ldr	r3, [pc, #168]	; (80120bc <tcp_input+0x4d0>)
 8012014:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012016:	4a29      	ldr	r2, [pc, #164]	; (80120bc <tcp_input+0x4d0>)
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801201c:	4b1f      	ldr	r3, [pc, #124]	; (801209c <tcp_input+0x4b0>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	4a26      	ldr	r2, [pc, #152]	; (80120bc <tcp_input+0x4d0>)
 8012022:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012024:	4b26      	ldr	r3, [pc, #152]	; (80120c0 <tcp_input+0x4d4>)
 8012026:	2200      	movs	r2, #0
 8012028:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801202a:	4b26      	ldr	r3, [pc, #152]	; (80120c4 <tcp_input+0x4d8>)
 801202c:	2200      	movs	r2, #0
 801202e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012030:	4b25      	ldr	r3, [pc, #148]	; (80120c8 <tcp_input+0x4dc>)
 8012032:	2200      	movs	r2, #0
 8012034:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012036:	4b25      	ldr	r3, [pc, #148]	; (80120cc <tcp_input+0x4e0>)
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	f003 0308 	and.w	r3, r3, #8
 801203e:	2b00      	cmp	r3, #0
 8012040:	d006      	beq.n	8012050 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	7b5b      	ldrb	r3, [r3, #13]
 8012046:	f043 0301 	orr.w	r3, r3, #1
 801204a:	b2da      	uxtb	r2, r3
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012050:	69fb      	ldr	r3, [r7, #28]
 8012052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012054:	2b00      	cmp	r3, #0
 8012056:	d03d      	beq.n	80120d4 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012058:	69f8      	ldr	r0, [r7, #28]
 801205a:	f7ff f999 	bl	8011390 <tcp_process_refused_data>
 801205e:	4603      	mov	r3, r0
 8012060:	f113 0f0d 	cmn.w	r3, #13
 8012064:	d007      	beq.n	8012076 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012066:	69fb      	ldr	r3, [r7, #28]
 8012068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801206a:	2b00      	cmp	r3, #0
 801206c:	d032      	beq.n	80120d4 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801206e:	4b18      	ldr	r3, [pc, #96]	; (80120d0 <tcp_input+0x4e4>)
 8012070:	881b      	ldrh	r3, [r3, #0]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d02e      	beq.n	80120d4 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012076:	69fb      	ldr	r3, [r7, #28]
 8012078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801207a:	2b00      	cmp	r3, #0
 801207c:	f040 8108 	bne.w	8012290 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012080:	69f8      	ldr	r0, [r7, #28]
 8012082:	f002 fe3d 	bl	8014d00 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012086:	e103      	b.n	8012290 <tcp_input+0x6a4>
 8012088:	0801ef6c 	.word	0x0801ef6c
 801208c:	0801f004 	.word	0x0801f004
 8012090:	0801efb0 	.word	0x0801efb0
 8012094:	0801f02c 	.word	0x0801f02c
 8012098:	0801f058 	.word	0x0801f058
 801209c:	2000c97c 	.word	0x2000c97c
 80120a0:	20012d14 	.word	0x20012d14
 80120a4:	0801f080 	.word	0x0801f080
 80120a8:	20016424 	.word	0x20016424
 80120ac:	0801f0ac 	.word	0x0801f0ac
 80120b0:	20016434 	.word	0x20016434
 80120b4:	0801f0d8 	.word	0x0801f0d8
 80120b8:	2001642c 	.word	0x2001642c
 80120bc:	2000c96c 	.word	0x2000c96c
 80120c0:	2000c99c 	.word	0x2000c99c
 80120c4:	2000c999 	.word	0x2000c999
 80120c8:	2000c994 	.word	0x2000c994
 80120cc:	2000c998 	.word	0x2000c998
 80120d0:	2000c996 	.word	0x2000c996
      }
    }
    tcp_input_pcb = pcb;
 80120d4:	4a98      	ldr	r2, [pc, #608]	; (8012338 <tcp_input+0x74c>)
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80120da:	69f8      	ldr	r0, [r7, #28]
 80120dc:	f000 fac6 	bl	801266c <tcp_process>
 80120e0:	4603      	mov	r3, r0
 80120e2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80120e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80120e8:	f113 0f0d 	cmn.w	r3, #13
 80120ec:	f000 80d2 	beq.w	8012294 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 80120f0:	4b92      	ldr	r3, [pc, #584]	; (801233c <tcp_input+0x750>)
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	f003 0308 	and.w	r3, r3, #8
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d016      	beq.n	801212a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80120fc:	69fb      	ldr	r3, [r7, #28]
 80120fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012102:	2b00      	cmp	r3, #0
 8012104:	d008      	beq.n	8012118 <tcp_input+0x52c>
 8012106:	69fb      	ldr	r3, [r7, #28]
 8012108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801210c:	69fa      	ldr	r2, [r7, #28]
 801210e:	6912      	ldr	r2, [r2, #16]
 8012110:	f06f 010d 	mvn.w	r1, #13
 8012114:	4610      	mov	r0, r2
 8012116:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012118:	69f9      	ldr	r1, [r7, #28]
 801211a:	4889      	ldr	r0, [pc, #548]	; (8012340 <tcp_input+0x754>)
 801211c:	f7ff fc4c 	bl	80119b8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8012120:	69f9      	ldr	r1, [r7, #28]
 8012122:	2001      	movs	r0, #1
 8012124:	f7fd f93e 	bl	800f3a4 <memp_free>
 8012128:	e0bf      	b.n	80122aa <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 801212a:	2300      	movs	r3, #0
 801212c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801212e:	4b85      	ldr	r3, [pc, #532]	; (8012344 <tcp_input+0x758>)
 8012130:	881b      	ldrh	r3, [r3, #0]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d01b      	beq.n	801216e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012136:	4b83      	ldr	r3, [pc, #524]	; (8012344 <tcp_input+0x758>)
 8012138:	881b      	ldrh	r3, [r3, #0]
 801213a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012140:	2b00      	cmp	r3, #0
 8012142:	d009      	beq.n	8012158 <tcp_input+0x56c>
 8012144:	69fb      	ldr	r3, [r7, #28]
 8012146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012148:	69fa      	ldr	r2, [r7, #28]
 801214a:	6910      	ldr	r0, [r2, #16]
 801214c:	89fa      	ldrh	r2, [r7, #14]
 801214e:	69f9      	ldr	r1, [r7, #28]
 8012150:	4798      	blx	r3
 8012152:	4603      	mov	r3, r0
 8012154:	74fb      	strb	r3, [r7, #19]
 8012156:	e001      	b.n	801215c <tcp_input+0x570>
 8012158:	2300      	movs	r3, #0
 801215a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801215c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012160:	f113 0f0d 	cmn.w	r3, #13
 8012164:	f000 8098 	beq.w	8012298 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012168:	4b76      	ldr	r3, [pc, #472]	; (8012344 <tcp_input+0x758>)
 801216a:	2200      	movs	r2, #0
 801216c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801216e:	69f8      	ldr	r0, [r7, #28]
 8012170:	f000 f900 	bl	8012374 <tcp_input_delayed_close>
 8012174:	4603      	mov	r3, r0
 8012176:	2b00      	cmp	r3, #0
 8012178:	f040 8090 	bne.w	801229c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801217c:	4b72      	ldr	r3, [pc, #456]	; (8012348 <tcp_input+0x75c>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d041      	beq.n	8012208 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012184:	69fb      	ldr	r3, [r7, #28]
 8012186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012188:	2b00      	cmp	r3, #0
 801218a:	d006      	beq.n	801219a <tcp_input+0x5ae>
 801218c:	4b6f      	ldr	r3, [pc, #444]	; (801234c <tcp_input+0x760>)
 801218e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8012192:	496f      	ldr	r1, [pc, #444]	; (8012350 <tcp_input+0x764>)
 8012194:	486f      	ldr	r0, [pc, #444]	; (8012354 <tcp_input+0x768>)
 8012196:	f008 fe5b 	bl	801ae50 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801219a:	69fb      	ldr	r3, [r7, #28]
 801219c:	7e9b      	ldrb	r3, [r3, #26]
 801219e:	f003 0310 	and.w	r3, r3, #16
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d008      	beq.n	80121b8 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80121a6:	4b68      	ldr	r3, [pc, #416]	; (8012348 <tcp_input+0x75c>)
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7fd fe54 	bl	800fe58 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80121b0:	69f8      	ldr	r0, [r7, #28]
 80121b2:	f7fe fb97 	bl	80108e4 <tcp_abort>
            goto aborted;
 80121b6:	e078      	b.n	80122aa <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d00c      	beq.n	80121dc <tcp_input+0x5f0>
 80121c2:	69fb      	ldr	r3, [r7, #28]
 80121c4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80121c8:	69fb      	ldr	r3, [r7, #28]
 80121ca:	6918      	ldr	r0, [r3, #16]
 80121cc:	4b5e      	ldr	r3, [pc, #376]	; (8012348 <tcp_input+0x75c>)
 80121ce:	681a      	ldr	r2, [r3, #0]
 80121d0:	2300      	movs	r3, #0
 80121d2:	69f9      	ldr	r1, [r7, #28]
 80121d4:	47a0      	blx	r4
 80121d6:	4603      	mov	r3, r0
 80121d8:	74fb      	strb	r3, [r7, #19]
 80121da:	e008      	b.n	80121ee <tcp_input+0x602>
 80121dc:	4b5a      	ldr	r3, [pc, #360]	; (8012348 <tcp_input+0x75c>)
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	2300      	movs	r3, #0
 80121e2:	69f9      	ldr	r1, [r7, #28]
 80121e4:	2000      	movs	r0, #0
 80121e6:	f7ff f984 	bl	80114f2 <tcp_recv_null>
 80121ea:	4603      	mov	r3, r0
 80121ec:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80121ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80121f2:	f113 0f0d 	cmn.w	r3, #13
 80121f6:	d053      	beq.n	80122a0 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80121f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d003      	beq.n	8012208 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012200:	4b51      	ldr	r3, [pc, #324]	; (8012348 <tcp_input+0x75c>)
 8012202:	681a      	ldr	r2, [r3, #0]
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012208:	4b4c      	ldr	r3, [pc, #304]	; (801233c <tcp_input+0x750>)
 801220a:	781b      	ldrb	r3, [r3, #0]
 801220c:	f003 0320 	and.w	r3, r3, #32
 8012210:	2b00      	cmp	r3, #0
 8012212:	d030      	beq.n	8012276 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8012214:	69fb      	ldr	r3, [r7, #28]
 8012216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012218:	2b00      	cmp	r3, #0
 801221a:	d009      	beq.n	8012230 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012220:	7b5a      	ldrb	r2, [r3, #13]
 8012222:	69fb      	ldr	r3, [r7, #28]
 8012224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012226:	f042 0220 	orr.w	r2, r2, #32
 801222a:	b2d2      	uxtb	r2, r2
 801222c:	735a      	strb	r2, [r3, #13]
 801222e:	e022      	b.n	8012276 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012234:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012238:	d005      	beq.n	8012246 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801223e:	3301      	adds	r3, #1
 8012240:	b29a      	uxth	r2, r3
 8012242:	69fb      	ldr	r3, [r7, #28]
 8012244:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012246:	69fb      	ldr	r3, [r7, #28]
 8012248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801224c:	2b00      	cmp	r3, #0
 801224e:	d00b      	beq.n	8012268 <tcp_input+0x67c>
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	6918      	ldr	r0, [r3, #16]
 801225a:	2300      	movs	r3, #0
 801225c:	2200      	movs	r2, #0
 801225e:	69f9      	ldr	r1, [r7, #28]
 8012260:	47a0      	blx	r4
 8012262:	4603      	mov	r3, r0
 8012264:	74fb      	strb	r3, [r7, #19]
 8012266:	e001      	b.n	801226c <tcp_input+0x680>
 8012268:	2300      	movs	r3, #0
 801226a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801226c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012270:	f113 0f0d 	cmn.w	r3, #13
 8012274:	d016      	beq.n	80122a4 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012276:	4b30      	ldr	r3, [pc, #192]	; (8012338 <tcp_input+0x74c>)
 8012278:	2200      	movs	r2, #0
 801227a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801227c:	69f8      	ldr	r0, [r7, #28]
 801227e:	f000 f879 	bl	8012374 <tcp_input_delayed_close>
 8012282:	4603      	mov	r3, r0
 8012284:	2b00      	cmp	r3, #0
 8012286:	d10f      	bne.n	80122a8 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012288:	69f8      	ldr	r0, [r7, #28]
 801228a:	f002 fd95 	bl	8014db8 <tcp_output>
 801228e:	e00c      	b.n	80122aa <tcp_input+0x6be>
        goto aborted;
 8012290:	bf00      	nop
 8012292:	e00a      	b.n	80122aa <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012294:	bf00      	nop
 8012296:	e008      	b.n	80122aa <tcp_input+0x6be>
              goto aborted;
 8012298:	bf00      	nop
 801229a:	e006      	b.n	80122aa <tcp_input+0x6be>
          goto aborted;
 801229c:	bf00      	nop
 801229e:	e004      	b.n	80122aa <tcp_input+0x6be>
            goto aborted;
 80122a0:	bf00      	nop
 80122a2:	e002      	b.n	80122aa <tcp_input+0x6be>
              goto aborted;
 80122a4:	bf00      	nop
 80122a6:	e000      	b.n	80122aa <tcp_input+0x6be>
          goto aborted;
 80122a8:	bf00      	nop
    tcp_input_pcb = NULL;
 80122aa:	4b23      	ldr	r3, [pc, #140]	; (8012338 <tcp_input+0x74c>)
 80122ac:	2200      	movs	r2, #0
 80122ae:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80122b0:	4b25      	ldr	r3, [pc, #148]	; (8012348 <tcp_input+0x75c>)
 80122b2:	2200      	movs	r2, #0
 80122b4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 80122b6:	4b28      	ldr	r3, [pc, #160]	; (8012358 <tcp_input+0x76c>)
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d037      	beq.n	801232e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 80122be:	4b26      	ldr	r3, [pc, #152]	; (8012358 <tcp_input+0x76c>)
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fd fdc8 	bl	800fe58 <pbuf_free>
      inseg.p = NULL;
 80122c8:	4b23      	ldr	r3, [pc, #140]	; (8012358 <tcp_input+0x76c>)
 80122ca:	2200      	movs	r2, #0
 80122cc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80122ce:	e02e      	b.n	801232e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80122d0:	4b22      	ldr	r3, [pc, #136]	; (801235c <tcp_input+0x770>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	899b      	ldrh	r3, [r3, #12]
 80122d6:	b29b      	uxth	r3, r3
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fc fc23 	bl	800eb24 <lwip_htons>
 80122de:	4603      	mov	r3, r0
 80122e0:	f003 0304 	and.w	r3, r3, #4
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d115      	bne.n	8012314 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80122e8:	4b1d      	ldr	r3, [pc, #116]	; (8012360 <tcp_input+0x774>)
 80122ea:	6818      	ldr	r0, [r3, #0]
 80122ec:	4b1d      	ldr	r3, [pc, #116]	; (8012364 <tcp_input+0x778>)
 80122ee:	881b      	ldrh	r3, [r3, #0]
 80122f0:	461a      	mov	r2, r3
 80122f2:	4b1d      	ldr	r3, [pc, #116]	; (8012368 <tcp_input+0x77c>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80122f8:	4b18      	ldr	r3, [pc, #96]	; (801235c <tcp_input+0x770>)
 80122fa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80122fc:	885b      	ldrh	r3, [r3, #2]
 80122fe:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012300:	4a16      	ldr	r2, [pc, #88]	; (801235c <tcp_input+0x770>)
 8012302:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012304:	8812      	ldrh	r2, [r2, #0]
 8012306:	b292      	uxth	r2, r2
 8012308:	9201      	str	r2, [sp, #4]
 801230a:	9300      	str	r3, [sp, #0]
 801230c:	4b17      	ldr	r3, [pc, #92]	; (801236c <tcp_input+0x780>)
 801230e:	4a18      	ldr	r2, [pc, #96]	; (8012370 <tcp_input+0x784>)
 8012310:	f002 ffdc 	bl	80152cc <tcp_rst>
    pbuf_free(p);
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f7fd fd9f 	bl	800fe58 <pbuf_free>
  return;
 801231a:	e008      	b.n	801232e <tcp_input+0x742>
    goto dropped;
 801231c:	bf00      	nop
 801231e:	e002      	b.n	8012326 <tcp_input+0x73a>
dropped:
 8012320:	bf00      	nop
 8012322:	e000      	b.n	8012326 <tcp_input+0x73a>
      goto dropped;
 8012324:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7fd fd96 	bl	800fe58 <pbuf_free>
 801232c:	e000      	b.n	8012330 <tcp_input+0x744>
  return;
 801232e:	bf00      	nop
}
 8012330:	3724      	adds	r7, #36	; 0x24
 8012332:	46bd      	mov	sp, r7
 8012334:	bd90      	pop	{r4, r7, pc}
 8012336:	bf00      	nop
 8012338:	20016438 	.word	0x20016438
 801233c:	2000c999 	.word	0x2000c999
 8012340:	20016424 	.word	0x20016424
 8012344:	2000c994 	.word	0x2000c994
 8012348:	2000c99c 	.word	0x2000c99c
 801234c:	0801ef6c 	.word	0x0801ef6c
 8012350:	0801f108 	.word	0x0801f108
 8012354:	0801efb0 	.word	0x0801efb0
 8012358:	2000c96c 	.word	0x2000c96c
 801235c:	2000c97c 	.word	0x2000c97c
 8012360:	2000c990 	.word	0x2000c990
 8012364:	2000c996 	.word	0x2000c996
 8012368:	2000c98c 	.word	0x2000c98c
 801236c:	20012d24 	.word	0x20012d24
 8012370:	20012d28 	.word	0x20012d28

08012374 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 801237c:	4b14      	ldr	r3, [pc, #80]	; (80123d0 <tcp_input_delayed_close+0x5c>)
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	f003 0310 	and.w	r3, r3, #16
 8012384:	2b00      	cmp	r3, #0
 8012386:	d01d      	beq.n	80123c4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	7e9b      	ldrb	r3, [r3, #26]
 801238c:	f003 0310 	and.w	r3, r3, #16
 8012390:	2b00      	cmp	r3, #0
 8012392:	d10d      	bne.n	80123b0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801239a:	2b00      	cmp	r3, #0
 801239c:	d008      	beq.n	80123b0 <tcp_input_delayed_close+0x3c>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80123a4:	687a      	ldr	r2, [r7, #4]
 80123a6:	6912      	ldr	r2, [r2, #16]
 80123a8:	f06f 010e 	mvn.w	r1, #14
 80123ac:	4610      	mov	r0, r2
 80123ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80123b0:	6879      	ldr	r1, [r7, #4]
 80123b2:	4808      	ldr	r0, [pc, #32]	; (80123d4 <tcp_input_delayed_close+0x60>)
 80123b4:	f7ff fb00 	bl	80119b8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80123b8:	6879      	ldr	r1, [r7, #4]
 80123ba:	2001      	movs	r0, #1
 80123bc:	f7fc fff2 	bl	800f3a4 <memp_free>
    return 1;
 80123c0:	2301      	movs	r3, #1
 80123c2:	e000      	b.n	80123c6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 80123c4:	2300      	movs	r3, #0
}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3708      	adds	r7, #8
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	2000c999 	.word	0x2000c999
 80123d4:	20016424 	.word	0x20016424

080123d8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b088      	sub	sp, #32
 80123dc:	af02      	add	r7, sp, #8
 80123de:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80123e0:	4b64      	ldr	r3, [pc, #400]	; (8012574 <tcp_listen_input+0x19c>)
 80123e2:	781b      	ldrb	r3, [r3, #0]
 80123e4:	f003 0304 	and.w	r3, r3, #4
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	f040 80bc 	bne.w	8012566 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80123ee:	4b61      	ldr	r3, [pc, #388]	; (8012574 <tcp_listen_input+0x19c>)
 80123f0:	781b      	ldrb	r3, [r3, #0]
 80123f2:	f003 0310 	and.w	r3, r3, #16
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d016      	beq.n	8012428 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80123fa:	4b5f      	ldr	r3, [pc, #380]	; (8012578 <tcp_listen_input+0x1a0>)
 80123fc:	6818      	ldr	r0, [r3, #0]
 80123fe:	4b5f      	ldr	r3, [pc, #380]	; (801257c <tcp_listen_input+0x1a4>)
 8012400:	881b      	ldrh	r3, [r3, #0]
 8012402:	461a      	mov	r2, r3
 8012404:	4b5e      	ldr	r3, [pc, #376]	; (8012580 <tcp_listen_input+0x1a8>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801240a:	4b5e      	ldr	r3, [pc, #376]	; (8012584 <tcp_listen_input+0x1ac>)
 801240c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801240e:	885b      	ldrh	r3, [r3, #2]
 8012410:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012412:	4a5c      	ldr	r2, [pc, #368]	; (8012584 <tcp_listen_input+0x1ac>)
 8012414:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012416:	8812      	ldrh	r2, [r2, #0]
 8012418:	b292      	uxth	r2, r2
 801241a:	9201      	str	r2, [sp, #4]
 801241c:	9300      	str	r3, [sp, #0]
 801241e:	4b5a      	ldr	r3, [pc, #360]	; (8012588 <tcp_listen_input+0x1b0>)
 8012420:	4a5a      	ldr	r2, [pc, #360]	; (801258c <tcp_listen_input+0x1b4>)
 8012422:	f002 ff53 	bl	80152cc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012426:	e0a0      	b.n	801256a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8012428:	4b52      	ldr	r3, [pc, #328]	; (8012574 <tcp_listen_input+0x19c>)
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	f003 0302 	and.w	r3, r3, #2
 8012430:	2b00      	cmp	r3, #0
 8012432:	f000 809a 	beq.w	801256a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	7d5b      	ldrb	r3, [r3, #21]
 801243a:	4618      	mov	r0, r3
 801243c:	f7ff f938 	bl	80116b0 <tcp_alloc>
 8012440:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d111      	bne.n	801246c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	699b      	ldr	r3, [r3, #24]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d00a      	beq.n	8012466 <tcp_listen_input+0x8e>
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	699b      	ldr	r3, [r3, #24]
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	6910      	ldr	r0, [r2, #16]
 8012458:	f04f 32ff 	mov.w	r2, #4294967295
 801245c:	2100      	movs	r1, #0
 801245e:	4798      	blx	r3
 8012460:	4603      	mov	r3, r0
 8012462:	73bb      	strb	r3, [r7, #14]
      return;
 8012464:	e082      	b.n	801256c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012466:	23f0      	movs	r3, #240	; 0xf0
 8012468:	73bb      	strb	r3, [r7, #14]
      return;
 801246a:	e07f      	b.n	801256c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801246c:	4b48      	ldr	r3, [pc, #288]	; (8012590 <tcp_listen_input+0x1b8>)
 801246e:	695a      	ldr	r2, [r3, #20]
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012474:	4b46      	ldr	r3, [pc, #280]	; (8012590 <tcp_listen_input+0x1b8>)
 8012476:	691a      	ldr	r2, [r3, #16]
 8012478:	697b      	ldr	r3, [r7, #20]
 801247a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	8ada      	ldrh	r2, [r3, #22]
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012484:	4b3f      	ldr	r3, [pc, #252]	; (8012584 <tcp_listen_input+0x1ac>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	881b      	ldrh	r3, [r3, #0]
 801248a:	b29a      	uxth	r2, r3
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	2203      	movs	r2, #3
 8012494:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012496:	4b3a      	ldr	r3, [pc, #232]	; (8012580 <tcp_listen_input+0x1a8>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	1c5a      	adds	r2, r3, #1
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80124a0:	697b      	ldr	r3, [r7, #20]
 80124a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80124a8:	6978      	ldr	r0, [r7, #20]
 80124aa:	f7ff fb01 	bl	8011ab0 <tcp_next_iss>
 80124ae:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80124b0:	697b      	ldr	r3, [r7, #20]
 80124b2:	693a      	ldr	r2, [r7, #16]
 80124b4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	693a      	ldr	r2, [r7, #16]
 80124ba:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	693a      	ldr	r2, [r7, #16]
 80124c0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	693a      	ldr	r2, [r7, #16]
 80124c6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80124c8:	4b2d      	ldr	r3, [pc, #180]	; (8012580 <tcp_listen_input+0x1a8>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	1e5a      	subs	r2, r3, #1
 80124ce:	697b      	ldr	r3, [r7, #20]
 80124d0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	691a      	ldr	r2, [r3, #16]
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	687a      	ldr	r2, [r7, #4]
 80124de:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	7a1b      	ldrb	r3, [r3, #8]
 80124e4:	f003 030c 	and.w	r3, r3, #12
 80124e8:	b2da      	uxtb	r2, r3
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80124ee:	4b29      	ldr	r3, [pc, #164]	; (8012594 <tcp_listen_input+0x1bc>)
 80124f0:	681a      	ldr	r2, [r3, #0]
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	60da      	str	r2, [r3, #12]
 80124f6:	4a27      	ldr	r2, [pc, #156]	; (8012594 <tcp_listen_input+0x1bc>)
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	6013      	str	r3, [r2, #0]
 80124fc:	f003 f938 	bl	8015770 <tcp_timer_needed>
 8012500:	4b25      	ldr	r3, [pc, #148]	; (8012598 <tcp_listen_input+0x1c0>)
 8012502:	2201      	movs	r2, #1
 8012504:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012506:	6978      	ldr	r0, [r7, #20]
 8012508:	f001 fd14 	bl	8013f34 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801250c:	4b1d      	ldr	r3, [pc, #116]	; (8012584 <tcp_listen_input+0x1ac>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	89db      	ldrh	r3, [r3, #14]
 8012512:	b29a      	uxth	r2, r3
 8012514:	697b      	ldr	r3, [r7, #20]
 8012516:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012520:	697b      	ldr	r3, [r7, #20]
 8012522:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801252a:	697b      	ldr	r3, [r7, #20]
 801252c:	3304      	adds	r3, #4
 801252e:	4619      	mov	r1, r3
 8012530:	4610      	mov	r0, r2
 8012532:	f7ff fad5 	bl	8011ae0 <tcp_eff_send_mss_impl>
 8012536:	4603      	mov	r3, r0
 8012538:	461a      	mov	r2, r3
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801253e:	2112      	movs	r1, #18
 8012540:	6978      	ldr	r0, [r7, #20]
 8012542:	f002 fae1 	bl	8014b08 <tcp_enqueue_flags>
 8012546:	4603      	mov	r3, r0
 8012548:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801254a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d004      	beq.n	801255c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8012552:	2100      	movs	r1, #0
 8012554:	6978      	ldr	r0, [r7, #20]
 8012556:	f7fe f913 	bl	8010780 <tcp_abandon>
      return;
 801255a:	e007      	b.n	801256c <tcp_listen_input+0x194>
    tcp_output(npcb);
 801255c:	6978      	ldr	r0, [r7, #20]
 801255e:	f002 fc2b 	bl	8014db8 <tcp_output>
  return;
 8012562:	bf00      	nop
 8012564:	e001      	b.n	801256a <tcp_listen_input+0x192>
    return;
 8012566:	bf00      	nop
 8012568:	e000      	b.n	801256c <tcp_listen_input+0x194>
  return;
 801256a:	bf00      	nop
}
 801256c:	3718      	adds	r7, #24
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	2000c998 	.word	0x2000c998
 8012578:	2000c990 	.word	0x2000c990
 801257c:	2000c996 	.word	0x2000c996
 8012580:	2000c98c 	.word	0x2000c98c
 8012584:	2000c97c 	.word	0x2000c97c
 8012588:	20012d24 	.word	0x20012d24
 801258c:	20012d28 	.word	0x20012d28
 8012590:	20012d14 	.word	0x20012d14
 8012594:	20016424 	.word	0x20016424
 8012598:	20016420 	.word	0x20016420

0801259c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af02      	add	r7, sp, #8
 80125a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80125a4:	4b29      	ldr	r3, [pc, #164]	; (801264c <tcp_timewait_input+0xb0>)
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	f003 0304 	and.w	r3, r3, #4
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d147      	bne.n	8012640 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80125b0:	4b26      	ldr	r3, [pc, #152]	; (801264c <tcp_timewait_input+0xb0>)
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	f003 0302 	and.w	r3, r3, #2
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d027      	beq.n	801260c <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80125bc:	4b24      	ldr	r3, [pc, #144]	; (8012650 <tcp_timewait_input+0xb4>)
 80125be:	681a      	ldr	r2, [r3, #0]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125c4:	1ad3      	subs	r3, r2, r3
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	db2a      	blt.n	8012620 <tcp_timewait_input+0x84>
 80125ca:	4b21      	ldr	r3, [pc, #132]	; (8012650 <tcp_timewait_input+0xb4>)
 80125cc:	681a      	ldr	r2, [r3, #0]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125d2:	6879      	ldr	r1, [r7, #4]
 80125d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80125d6:	440b      	add	r3, r1
 80125d8:	1ad3      	subs	r3, r2, r3
 80125da:	2b00      	cmp	r3, #0
 80125dc:	dc20      	bgt.n	8012620 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80125de:	4b1d      	ldr	r3, [pc, #116]	; (8012654 <tcp_timewait_input+0xb8>)
 80125e0:	6818      	ldr	r0, [r3, #0]
 80125e2:	4b1d      	ldr	r3, [pc, #116]	; (8012658 <tcp_timewait_input+0xbc>)
 80125e4:	881b      	ldrh	r3, [r3, #0]
 80125e6:	461a      	mov	r2, r3
 80125e8:	4b19      	ldr	r3, [pc, #100]	; (8012650 <tcp_timewait_input+0xb4>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125ee:	4b1b      	ldr	r3, [pc, #108]	; (801265c <tcp_timewait_input+0xc0>)
 80125f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80125f2:	885b      	ldrh	r3, [r3, #2]
 80125f4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80125f6:	4a19      	ldr	r2, [pc, #100]	; (801265c <tcp_timewait_input+0xc0>)
 80125f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80125fa:	8812      	ldrh	r2, [r2, #0]
 80125fc:	b292      	uxth	r2, r2
 80125fe:	9201      	str	r2, [sp, #4]
 8012600:	9300      	str	r3, [sp, #0]
 8012602:	4b17      	ldr	r3, [pc, #92]	; (8012660 <tcp_timewait_input+0xc4>)
 8012604:	4a17      	ldr	r2, [pc, #92]	; (8012664 <tcp_timewait_input+0xc8>)
 8012606:	f002 fe61 	bl	80152cc <tcp_rst>
      return;
 801260a:	e01c      	b.n	8012646 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 801260c:	4b0f      	ldr	r3, [pc, #60]	; (801264c <tcp_timewait_input+0xb0>)
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	f003 0301 	and.w	r3, r3, #1
 8012614:	2b00      	cmp	r3, #0
 8012616:	d003      	beq.n	8012620 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012618:	4b13      	ldr	r3, [pc, #76]	; (8012668 <tcp_timewait_input+0xcc>)
 801261a:	681a      	ldr	r2, [r3, #0]
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012620:	4b0d      	ldr	r3, [pc, #52]	; (8012658 <tcp_timewait_input+0xbc>)
 8012622:	881b      	ldrh	r3, [r3, #0]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d00d      	beq.n	8012644 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	7e9b      	ldrb	r3, [r3, #26]
 801262c:	f043 0302 	orr.w	r3, r3, #2
 8012630:	b2da      	uxtb	r2, r3
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f002 fbbe 	bl	8014db8 <tcp_output>
  }
  return;
 801263c:	bf00      	nop
 801263e:	e001      	b.n	8012644 <tcp_timewait_input+0xa8>
    return;
 8012640:	bf00      	nop
 8012642:	e000      	b.n	8012646 <tcp_timewait_input+0xaa>
  return;
 8012644:	bf00      	nop
}
 8012646:	3708      	adds	r7, #8
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	2000c998 	.word	0x2000c998
 8012650:	2000c98c 	.word	0x2000c98c
 8012654:	2000c990 	.word	0x2000c990
 8012658:	2000c996 	.word	0x2000c996
 801265c:	2000c97c 	.word	0x2000c97c
 8012660:	20012d24 	.word	0x20012d24
 8012664:	20012d28 	.word	0x20012d28
 8012668:	20016428 	.word	0x20016428

0801266c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b08a      	sub	sp, #40	; 0x28
 8012670:	af02      	add	r7, sp, #8
 8012672:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012674:	2300      	movs	r3, #0
 8012676:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012678:	2300      	movs	r3, #0
 801267a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801267c:	4ba4      	ldr	r3, [pc, #656]	; (8012910 <tcp_process+0x2a4>)
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	f003 0304 	and.w	r3, r3, #4
 8012684:	2b00      	cmp	r3, #0
 8012686:	d04e      	beq.n	8012726 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	7d1b      	ldrb	r3, [r3, #20]
 801268c:	2b02      	cmp	r3, #2
 801268e:	d108      	bne.n	80126a2 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012694:	4b9f      	ldr	r3, [pc, #636]	; (8012914 <tcp_process+0x2a8>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	429a      	cmp	r2, r3
 801269a:	d123      	bne.n	80126e4 <tcp_process+0x78>
        acceptable = 1;
 801269c:	2301      	movs	r3, #1
 801269e:	76fb      	strb	r3, [r7, #27]
 80126a0:	e020      	b.n	80126e4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126a6:	4b9c      	ldr	r3, [pc, #624]	; (8012918 <tcp_process+0x2ac>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d102      	bne.n	80126b4 <tcp_process+0x48>
        acceptable = 1;
 80126ae:	2301      	movs	r3, #1
 80126b0:	76fb      	strb	r3, [r7, #27]
 80126b2:	e017      	b.n	80126e4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80126b4:	4b98      	ldr	r3, [pc, #608]	; (8012918 <tcp_process+0x2ac>)
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126bc:	1ad3      	subs	r3, r2, r3
 80126be:	2b00      	cmp	r3, #0
 80126c0:	db10      	blt.n	80126e4 <tcp_process+0x78>
 80126c2:	4b95      	ldr	r3, [pc, #596]	; (8012918 <tcp_process+0x2ac>)
 80126c4:	681a      	ldr	r2, [r3, #0]
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126ca:	6879      	ldr	r1, [r7, #4]
 80126cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80126ce:	440b      	add	r3, r1
 80126d0:	1ad3      	subs	r3, r2, r3
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	dc06      	bgt.n	80126e4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	7e9b      	ldrb	r3, [r3, #26]
 80126da:	f043 0302 	orr.w	r3, r3, #2
 80126de:	b2da      	uxtb	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80126e4:	7efb      	ldrb	r3, [r7, #27]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d01b      	beq.n	8012722 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	7d1b      	ldrb	r3, [r3, #20]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d106      	bne.n	8012700 <tcp_process+0x94>
 80126f2:	4b8a      	ldr	r3, [pc, #552]	; (801291c <tcp_process+0x2b0>)
 80126f4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80126f8:	4989      	ldr	r1, [pc, #548]	; (8012920 <tcp_process+0x2b4>)
 80126fa:	488a      	ldr	r0, [pc, #552]	; (8012924 <tcp_process+0x2b8>)
 80126fc:	f008 fba8 	bl	801ae50 <iprintf>
      recv_flags |= TF_RESET;
 8012700:	4b89      	ldr	r3, [pc, #548]	; (8012928 <tcp_process+0x2bc>)
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	f043 0308 	orr.w	r3, r3, #8
 8012708:	b2da      	uxtb	r2, r3
 801270a:	4b87      	ldr	r3, [pc, #540]	; (8012928 <tcp_process+0x2bc>)
 801270c:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	7e9b      	ldrb	r3, [r3, #26]
 8012712:	f023 0301 	bic.w	r3, r3, #1
 8012716:	b2da      	uxtb	r2, r3
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 801271c:	f06f 030d 	mvn.w	r3, #13
 8012720:	e34d      	b.n	8012dbe <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012722:	2300      	movs	r3, #0
 8012724:	e34b      	b.n	8012dbe <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012726:	4b7a      	ldr	r3, [pc, #488]	; (8012910 <tcp_process+0x2a4>)
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	f003 0302 	and.w	r3, r3, #2
 801272e:	2b00      	cmp	r3, #0
 8012730:	d010      	beq.n	8012754 <tcp_process+0xe8>
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	7d1b      	ldrb	r3, [r3, #20]
 8012736:	2b02      	cmp	r3, #2
 8012738:	d00c      	beq.n	8012754 <tcp_process+0xe8>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	7d1b      	ldrb	r3, [r3, #20]
 801273e:	2b03      	cmp	r3, #3
 8012740:	d008      	beq.n	8012754 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	7e9b      	ldrb	r3, [r3, #26]
 8012746:	f043 0302 	orr.w	r3, r3, #2
 801274a:	b2da      	uxtb	r2, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8012750:	2300      	movs	r3, #0
 8012752:	e334      	b.n	8012dbe <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	7e9b      	ldrb	r3, [r3, #26]
 8012758:	f003 0310 	and.w	r3, r3, #16
 801275c:	2b00      	cmp	r3, #0
 801275e:	d103      	bne.n	8012768 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012760:	4b72      	ldr	r3, [pc, #456]	; (801292c <tcp_process+0x2c0>)
 8012762:	681a      	ldr	r2, [r3, #0]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2200      	movs	r2, #0
 801276c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f001 fbdf 	bl	8013f34 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	7d1b      	ldrb	r3, [r3, #20]
 801277a:	3b02      	subs	r3, #2
 801277c:	2b07      	cmp	r3, #7
 801277e:	f200 830e 	bhi.w	8012d9e <tcp_process+0x732>
 8012782:	a201      	add	r2, pc, #4	; (adr r2, 8012788 <tcp_process+0x11c>)
 8012784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012788:	080127a9 	.word	0x080127a9
 801278c:	080129a1 	.word	0x080129a1
 8012790:	08012af9 	.word	0x08012af9
 8012794:	08012b23 	.word	0x08012b23
 8012798:	08012c4d 	.word	0x08012c4d
 801279c:	08012af9 	.word	0x08012af9
 80127a0:	08012cd9 	.word	0x08012cd9
 80127a4:	08012d69 	.word	0x08012d69
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80127a8:	4b59      	ldr	r3, [pc, #356]	; (8012910 <tcp_process+0x2a4>)
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	f003 0310 	and.w	r3, r3, #16
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	f000 80cb 	beq.w	801294c <tcp_process+0x2e0>
 80127b6:	4b56      	ldr	r3, [pc, #344]	; (8012910 <tcp_process+0x2a4>)
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	f003 0302 	and.w	r3, r3, #2
 80127be:	2b00      	cmp	r3, #0
 80127c0:	f000 80c4 	beq.w	801294c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127c8:	1c5a      	adds	r2, r3, #1
 80127ca:	4b52      	ldr	r3, [pc, #328]	; (8012914 <tcp_process+0x2a8>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	429a      	cmp	r2, r3
 80127d0:	f040 80bc 	bne.w	801294c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 80127d4:	4b50      	ldr	r3, [pc, #320]	; (8012918 <tcp_process+0x2ac>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	1c5a      	adds	r2, r3, #1
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80127e6:	4b4b      	ldr	r3, [pc, #300]	; (8012914 <tcp_process+0x2a8>)
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80127ee:	4b50      	ldr	r3, [pc, #320]	; (8012930 <tcp_process+0x2c4>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	89db      	ldrh	r3, [r3, #14]
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012808:	4b43      	ldr	r3, [pc, #268]	; (8012918 <tcp_process+0x2ac>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	1e5a      	subs	r2, r3, #1
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2204      	movs	r2, #4
 8012816:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	3304      	adds	r3, #4
 8012820:	4619      	mov	r1, r3
 8012822:	4610      	mov	r0, r2
 8012824:	f7ff f95c 	bl	8011ae0 <tcp_eff_send_mss_impl>
 8012828:	4603      	mov	r3, r0
 801282a:	461a      	mov	r2, r3
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012834:	005b      	lsls	r3, r3, #1
 8012836:	f241 121c 	movw	r2, #4380	; 0x111c
 801283a:	429a      	cmp	r2, r3
 801283c:	bf38      	it	cc
 801283e:	461a      	movcc	r2, r3
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012844:	009b      	lsls	r3, r3, #2
 8012846:	4293      	cmp	r3, r2
 8012848:	bf28      	it	cs
 801284a:	4613      	movcs	r3, r2
 801284c:	b29a      	uxth	r2, r3
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801285a:	2b00      	cmp	r3, #0
 801285c:	d106      	bne.n	801286c <tcp_process+0x200>
 801285e:	4b2f      	ldr	r3, [pc, #188]	; (801291c <tcp_process+0x2b0>)
 8012860:	f240 321a 	movw	r2, #794	; 0x31a
 8012864:	4933      	ldr	r1, [pc, #204]	; (8012934 <tcp_process+0x2c8>)
 8012866:	482f      	ldr	r0, [pc, #188]	; (8012924 <tcp_process+0x2b8>)
 8012868:	f008 faf2 	bl	801ae50 <iprintf>
      --pcb->snd_queuelen;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012872:	3b01      	subs	r3, #1
 8012874:	b29a      	uxth	r2, r3
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012880:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8012882:	69fb      	ldr	r3, [r7, #28]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d111      	bne.n	80128ac <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801288c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801288e:	69fb      	ldr	r3, [r7, #28]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d106      	bne.n	80128a2 <tcp_process+0x236>
 8012894:	4b21      	ldr	r3, [pc, #132]	; (801291c <tcp_process+0x2b0>)
 8012896:	f240 3222 	movw	r2, #802	; 0x322
 801289a:	4927      	ldr	r1, [pc, #156]	; (8012938 <tcp_process+0x2cc>)
 801289c:	4821      	ldr	r0, [pc, #132]	; (8012924 <tcp_process+0x2b8>)
 801289e:	f008 fad7 	bl	801ae50 <iprintf>
        pcb->unsent = rseg->next;
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	681a      	ldr	r2, [r3, #0]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	669a      	str	r2, [r3, #104]	; 0x68
 80128aa:	e003      	b.n	80128b4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	681a      	ldr	r2, [r3, #0]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80128b4:	69f8      	ldr	r0, [r7, #28]
 80128b6:	f7fe fde8 	bl	801148a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d104      	bne.n	80128cc <tcp_process+0x260>
        pcb->rtime = -1;
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128c8:	861a      	strh	r2, [r3, #48]	; 0x30
 80128ca:	e006      	b.n	80128da <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2200      	movs	r2, #0
 80128d0:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	2200      	movs	r2, #0
 80128d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d00a      	beq.n	80128fa <tcp_process+0x28e>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128ea:	687a      	ldr	r2, [r7, #4]
 80128ec:	6910      	ldr	r0, [r2, #16]
 80128ee:	2200      	movs	r2, #0
 80128f0:	6879      	ldr	r1, [r7, #4]
 80128f2:	4798      	blx	r3
 80128f4:	4603      	mov	r3, r0
 80128f6:	76bb      	strb	r3, [r7, #26]
 80128f8:	e001      	b.n	80128fe <tcp_process+0x292>
 80128fa:	2300      	movs	r3, #0
 80128fc:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80128fe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012902:	f113 0f0d 	cmn.w	r3, #13
 8012906:	d119      	bne.n	801293c <tcp_process+0x2d0>
        return ERR_ABRT;
 8012908:	f06f 030c 	mvn.w	r3, #12
 801290c:	e257      	b.n	8012dbe <tcp_process+0x752>
 801290e:	bf00      	nop
 8012910:	2000c998 	.word	0x2000c998
 8012914:	2000c990 	.word	0x2000c990
 8012918:	2000c98c 	.word	0x2000c98c
 801291c:	0801ef6c 	.word	0x0801ef6c
 8012920:	0801f124 	.word	0x0801f124
 8012924:	0801efb0 	.word	0x0801efb0
 8012928:	2000c999 	.word	0x2000c999
 801292c:	20016428 	.word	0x20016428
 8012930:	2000c97c 	.word	0x2000c97c
 8012934:	0801f144 	.word	0x0801f144
 8012938:	0801f15c 	.word	0x0801f15c
      }
      tcp_ack_now(pcb);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	7e9b      	ldrb	r3, [r3, #26]
 8012940:	f043 0302 	orr.w	r3, r3, #2
 8012944:	b2da      	uxtb	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 801294a:	e22a      	b.n	8012da2 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 801294c:	4b9f      	ldr	r3, [pc, #636]	; (8012bcc <tcp_process+0x560>)
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	f003 0310 	and.w	r3, r3, #16
 8012954:	2b00      	cmp	r3, #0
 8012956:	f000 8224 	beq.w	8012da2 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801295a:	4b9d      	ldr	r3, [pc, #628]	; (8012bd0 <tcp_process+0x564>)
 801295c:	6818      	ldr	r0, [r3, #0]
 801295e:	4b9d      	ldr	r3, [pc, #628]	; (8012bd4 <tcp_process+0x568>)
 8012960:	881b      	ldrh	r3, [r3, #0]
 8012962:	461a      	mov	r2, r3
 8012964:	4b9c      	ldr	r3, [pc, #624]	; (8012bd8 <tcp_process+0x56c>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801296a:	4b9c      	ldr	r3, [pc, #624]	; (8012bdc <tcp_process+0x570>)
 801296c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801296e:	885b      	ldrh	r3, [r3, #2]
 8012970:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012972:	4a9a      	ldr	r2, [pc, #616]	; (8012bdc <tcp_process+0x570>)
 8012974:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012976:	8812      	ldrh	r2, [r2, #0]
 8012978:	b292      	uxth	r2, r2
 801297a:	9201      	str	r2, [sp, #4]
 801297c:	9300      	str	r3, [sp, #0]
 801297e:	4b98      	ldr	r3, [pc, #608]	; (8012be0 <tcp_process+0x574>)
 8012980:	4a98      	ldr	r2, [pc, #608]	; (8012be4 <tcp_process+0x578>)
 8012982:	f002 fca3 	bl	80152cc <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801298c:	2b05      	cmp	r3, #5
 801298e:	f200 8208 	bhi.w	8012da2 <tcp_process+0x736>
        pcb->rtime = 0;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2200      	movs	r2, #0
 8012996:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f002 fd0d 	bl	80153b8 <tcp_rexmit_rto>
    break;
 801299e:	e200      	b.n	8012da2 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80129a0:	4b8a      	ldr	r3, [pc, #552]	; (8012bcc <tcp_process+0x560>)
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	f003 0310 	and.w	r3, r3, #16
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	f000 8091 	beq.w	8012ad0 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80129ae:	4b88      	ldr	r3, [pc, #544]	; (8012bd0 <tcp_process+0x564>)
 80129b0:	681a      	ldr	r2, [r3, #0]
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129b6:	1ad3      	subs	r3, r2, r3
 80129b8:	3b01      	subs	r3, #1
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	db71      	blt.n	8012aa2 <tcp_process+0x436>
 80129be:	4b84      	ldr	r3, [pc, #528]	; (8012bd0 <tcp_process+0x564>)
 80129c0:	681a      	ldr	r2, [r3, #0]
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80129c6:	1ad3      	subs	r3, r2, r3
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	dc6a      	bgt.n	8012aa2 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2204      	movs	r2, #4
 80129d0:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d00b      	beq.n	80129f2 <tcp_process+0x386>
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129de:	699b      	ldr	r3, [r3, #24]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d106      	bne.n	80129f2 <tcp_process+0x386>
 80129e4:	4b80      	ldr	r3, [pc, #512]	; (8012be8 <tcp_process+0x57c>)
 80129e6:	f240 3251 	movw	r2, #849	; 0x351
 80129ea:	4980      	ldr	r1, [pc, #512]	; (8012bec <tcp_process+0x580>)
 80129ec:	4880      	ldr	r0, [pc, #512]	; (8012bf0 <tcp_process+0x584>)
 80129ee:	f008 fa2f 	bl	801ae50 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d102      	bne.n	8012a00 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80129fa:	23fa      	movs	r3, #250	; 0xfa
 80129fc:	76bb      	strb	r3, [r7, #26]
 80129fe:	e011      	b.n	8012a24 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a04:	699b      	ldr	r3, [r3, #24]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d00a      	beq.n	8012a20 <tcp_process+0x3b4>
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a0e:	699b      	ldr	r3, [r3, #24]
 8012a10:	687a      	ldr	r2, [r7, #4]
 8012a12:	6910      	ldr	r0, [r2, #16]
 8012a14:	2200      	movs	r2, #0
 8012a16:	6879      	ldr	r1, [r7, #4]
 8012a18:	4798      	blx	r3
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	76bb      	strb	r3, [r7, #26]
 8012a1e:	e001      	b.n	8012a24 <tcp_process+0x3b8>
 8012a20:	23f0      	movs	r3, #240	; 0xf0
 8012a22:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8012a24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d00a      	beq.n	8012a42 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8012a2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012a30:	f113 0f0d 	cmn.w	r3, #13
 8012a34:	d002      	beq.n	8012a3c <tcp_process+0x3d0>
            tcp_abort(pcb);
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f7fd ff54 	bl	80108e4 <tcp_abort>
          }
          return ERR_ABRT;
 8012a3c:	f06f 030c 	mvn.w	r3, #12
 8012a40:	e1bd      	b.n	8012dbe <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8012a42:	6878      	ldr	r0, [r7, #4]
 8012a44:	f000 fa42 	bl	8012ecc <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8012a48:	4b6a      	ldr	r3, [pc, #424]	; (8012bf4 <tcp_process+0x588>)
 8012a4a:	881b      	ldrh	r3, [r3, #0]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d005      	beq.n	8012a5c <tcp_process+0x3f0>
          recv_acked--;
 8012a50:	4b68      	ldr	r3, [pc, #416]	; (8012bf4 <tcp_process+0x588>)
 8012a52:	881b      	ldrh	r3, [r3, #0]
 8012a54:	3b01      	subs	r3, #1
 8012a56:	b29a      	uxth	r2, r3
 8012a58:	4b66      	ldr	r3, [pc, #408]	; (8012bf4 <tcp_process+0x588>)
 8012a5a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a60:	005b      	lsls	r3, r3, #1
 8012a62:	f241 121c 	movw	r2, #4380	; 0x111c
 8012a66:	429a      	cmp	r2, r3
 8012a68:	bf38      	it	cc
 8012a6a:	461a      	movcc	r2, r3
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a70:	009b      	lsls	r3, r3, #2
 8012a72:	4293      	cmp	r3, r2
 8012a74:	bf28      	it	cs
 8012a76:	4613      	movcs	r3, r2
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8012a80:	4b5d      	ldr	r3, [pc, #372]	; (8012bf8 <tcp_process+0x58c>)
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	f003 0320 	and.w	r3, r3, #32
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d034      	beq.n	8012af6 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	7e9b      	ldrb	r3, [r3, #26]
 8012a90:	f043 0302 	orr.w	r3, r3, #2
 8012a94:	b2da      	uxtb	r2, r3
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2207      	movs	r2, #7
 8012a9e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8012aa0:	e029      	b.n	8012af6 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012aa2:	4b4b      	ldr	r3, [pc, #300]	; (8012bd0 <tcp_process+0x564>)
 8012aa4:	6818      	ldr	r0, [r3, #0]
 8012aa6:	4b4b      	ldr	r3, [pc, #300]	; (8012bd4 <tcp_process+0x568>)
 8012aa8:	881b      	ldrh	r3, [r3, #0]
 8012aaa:	461a      	mov	r2, r3
 8012aac:	4b4a      	ldr	r3, [pc, #296]	; (8012bd8 <tcp_process+0x56c>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ab2:	4b4a      	ldr	r3, [pc, #296]	; (8012bdc <tcp_process+0x570>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ab6:	885b      	ldrh	r3, [r3, #2]
 8012ab8:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012aba:	4a48      	ldr	r2, [pc, #288]	; (8012bdc <tcp_process+0x570>)
 8012abc:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012abe:	8812      	ldrh	r2, [r2, #0]
 8012ac0:	b292      	uxth	r2, r2
 8012ac2:	9201      	str	r2, [sp, #4]
 8012ac4:	9300      	str	r3, [sp, #0]
 8012ac6:	4b46      	ldr	r3, [pc, #280]	; (8012be0 <tcp_process+0x574>)
 8012ac8:	4a46      	ldr	r2, [pc, #280]	; (8012be4 <tcp_process+0x578>)
 8012aca:	f002 fbff 	bl	80152cc <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8012ace:	e16a      	b.n	8012da6 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012ad0:	4b3e      	ldr	r3, [pc, #248]	; (8012bcc <tcp_process+0x560>)
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	f003 0302 	and.w	r3, r3, #2
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f000 8164 	beq.w	8012da6 <tcp_process+0x73a>
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ae2:	1e5a      	subs	r2, r3, #1
 8012ae4:	4b3c      	ldr	r3, [pc, #240]	; (8012bd8 <tcp_process+0x56c>)
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	f040 815c 	bne.w	8012da6 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f002 fc98 	bl	8015424 <tcp_rexmit>
    break;
 8012af4:	e157      	b.n	8012da6 <tcp_process+0x73a>
 8012af6:	e156      	b.n	8012da6 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f000 f9e7 	bl	8012ecc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012afe:	4b3e      	ldr	r3, [pc, #248]	; (8012bf8 <tcp_process+0x58c>)
 8012b00:	781b      	ldrb	r3, [r3, #0]
 8012b02:	f003 0320 	and.w	r3, r3, #32
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	f000 814f 	beq.w	8012daa <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	7e9b      	ldrb	r3, [r3, #26]
 8012b10:	f043 0302 	orr.w	r3, r3, #2
 8012b14:	b2da      	uxtb	r2, r3
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2207      	movs	r2, #7
 8012b1e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8012b20:	e143      	b.n	8012daa <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f000 f9d2 	bl	8012ecc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8012b28:	4b33      	ldr	r3, [pc, #204]	; (8012bf8 <tcp_process+0x58c>)
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	f003 0320 	and.w	r3, r3, #32
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d074      	beq.n	8012c1e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012b34:	4b25      	ldr	r3, [pc, #148]	; (8012bcc <tcp_process+0x560>)
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	f003 0310 	and.w	r3, r3, #16
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d063      	beq.n	8012c08 <tcp_process+0x59c>
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012b44:	4b22      	ldr	r3, [pc, #136]	; (8012bd0 <tcp_process+0x564>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d15d      	bne.n	8012c08 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d159      	bne.n	8012c08 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	7e9b      	ldrb	r3, [r3, #26]
 8012b58:	f043 0302 	orr.w	r3, r3, #2
 8012b5c:	b2da      	uxtb	r2, r3
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f7fe fee6 	bl	8011934 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012b68:	4b24      	ldr	r3, [pc, #144]	; (8012bfc <tcp_process+0x590>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d105      	bne.n	8012b7e <tcp_process+0x512>
 8012b72:	4b22      	ldr	r3, [pc, #136]	; (8012bfc <tcp_process+0x590>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	68db      	ldr	r3, [r3, #12]
 8012b78:	4a20      	ldr	r2, [pc, #128]	; (8012bfc <tcp_process+0x590>)
 8012b7a:	6013      	str	r3, [r2, #0]
 8012b7c:	e013      	b.n	8012ba6 <tcp_process+0x53a>
 8012b7e:	4b1f      	ldr	r3, [pc, #124]	; (8012bfc <tcp_process+0x590>)
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	617b      	str	r3, [r7, #20]
 8012b84:	e00c      	b.n	8012ba0 <tcp_process+0x534>
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	68db      	ldr	r3, [r3, #12]
 8012b8a:	687a      	ldr	r2, [r7, #4]
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d104      	bne.n	8012b9a <tcp_process+0x52e>
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	68da      	ldr	r2, [r3, #12]
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	60da      	str	r2, [r3, #12]
 8012b98:	e005      	b.n	8012ba6 <tcp_process+0x53a>
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	68db      	ldr	r3, [r3, #12]
 8012b9e:	617b      	str	r3, [r7, #20]
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d1ef      	bne.n	8012b86 <tcp_process+0x51a>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	60da      	str	r2, [r3, #12]
 8012bac:	4b14      	ldr	r3, [pc, #80]	; (8012c00 <tcp_process+0x594>)
 8012bae:	2201      	movs	r2, #1
 8012bb0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	220a      	movs	r2, #10
 8012bb6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012bb8:	4b12      	ldr	r3, [pc, #72]	; (8012c04 <tcp_process+0x598>)
 8012bba:	681a      	ldr	r2, [r3, #0]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	60da      	str	r2, [r3, #12]
 8012bc0:	4a10      	ldr	r2, [pc, #64]	; (8012c04 <tcp_process+0x598>)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6013      	str	r3, [r2, #0]
 8012bc6:	f002 fdd3 	bl	8015770 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8012bca:	e0f0      	b.n	8012dae <tcp_process+0x742>
 8012bcc:	2000c998 	.word	0x2000c998
 8012bd0:	2000c990 	.word	0x2000c990
 8012bd4:	2000c996 	.word	0x2000c996
 8012bd8:	2000c98c 	.word	0x2000c98c
 8012bdc:	2000c97c 	.word	0x2000c97c
 8012be0:	20012d24 	.word	0x20012d24
 8012be4:	20012d28 	.word	0x20012d28
 8012be8:	0801ef6c 	.word	0x0801ef6c
 8012bec:	0801f170 	.word	0x0801f170
 8012bf0:	0801efb0 	.word	0x0801efb0
 8012bf4:	2000c994 	.word	0x2000c994
 8012bf8:	2000c999 	.word	0x2000c999
 8012bfc:	20016424 	.word	0x20016424
 8012c00:	20016420 	.word	0x20016420
 8012c04:	20016434 	.word	0x20016434
        tcp_ack_now(pcb);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	7e9b      	ldrb	r3, [r3, #26]
 8012c0c:	f043 0302 	orr.w	r3, r3, #2
 8012c10:	b2da      	uxtb	r2, r3
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2208      	movs	r2, #8
 8012c1a:	751a      	strb	r2, [r3, #20]
    break;
 8012c1c:	e0c7      	b.n	8012dae <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012c1e:	4b6a      	ldr	r3, [pc, #424]	; (8012dc8 <tcp_process+0x75c>)
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	f003 0310 	and.w	r3, r3, #16
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	f000 80c1 	beq.w	8012dae <tcp_process+0x742>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012c30:	4b66      	ldr	r3, [pc, #408]	; (8012dcc <tcp_process+0x760>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	f040 80ba 	bne.w	8012dae <tcp_process+0x742>
               pcb->unsent == NULL) {
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f040 80b5 	bne.w	8012dae <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2206      	movs	r2, #6
 8012c48:	751a      	strb	r2, [r3, #20]
    break;
 8012c4a:	e0b0      	b.n	8012dae <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f000 f93d 	bl	8012ecc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8012c52:	4b5f      	ldr	r3, [pc, #380]	; (8012dd0 <tcp_process+0x764>)
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	f003 0320 	and.w	r3, r3, #32
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	f000 80a9 	beq.w	8012db2 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	7e9b      	ldrb	r3, [r3, #26]
 8012c64:	f043 0302 	orr.w	r3, r3, #2
 8012c68:	b2da      	uxtb	r2, r3
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8012c6e:	6878      	ldr	r0, [r7, #4]
 8012c70:	f7fe fe60 	bl	8011934 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012c74:	4b57      	ldr	r3, [pc, #348]	; (8012dd4 <tcp_process+0x768>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	d105      	bne.n	8012c8a <tcp_process+0x61e>
 8012c7e:	4b55      	ldr	r3, [pc, #340]	; (8012dd4 <tcp_process+0x768>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	68db      	ldr	r3, [r3, #12]
 8012c84:	4a53      	ldr	r2, [pc, #332]	; (8012dd4 <tcp_process+0x768>)
 8012c86:	6013      	str	r3, [r2, #0]
 8012c88:	e013      	b.n	8012cb2 <tcp_process+0x646>
 8012c8a:	4b52      	ldr	r3, [pc, #328]	; (8012dd4 <tcp_process+0x768>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	613b      	str	r3, [r7, #16]
 8012c90:	e00c      	b.n	8012cac <tcp_process+0x640>
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	68db      	ldr	r3, [r3, #12]
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	d104      	bne.n	8012ca6 <tcp_process+0x63a>
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	68da      	ldr	r2, [r3, #12]
 8012ca0:	693b      	ldr	r3, [r7, #16]
 8012ca2:	60da      	str	r2, [r3, #12]
 8012ca4:	e005      	b.n	8012cb2 <tcp_process+0x646>
 8012ca6:	693b      	ldr	r3, [r7, #16]
 8012ca8:	68db      	ldr	r3, [r3, #12]
 8012caa:	613b      	str	r3, [r7, #16]
 8012cac:	693b      	ldr	r3, [r7, #16]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d1ef      	bne.n	8012c92 <tcp_process+0x626>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	60da      	str	r2, [r3, #12]
 8012cb8:	4b47      	ldr	r3, [pc, #284]	; (8012dd8 <tcp_process+0x76c>)
 8012cba:	2201      	movs	r2, #1
 8012cbc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	220a      	movs	r2, #10
 8012cc2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8012cc4:	4b45      	ldr	r3, [pc, #276]	; (8012ddc <tcp_process+0x770>)
 8012cc6:	681a      	ldr	r2, [r3, #0]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	60da      	str	r2, [r3, #12]
 8012ccc:	4a43      	ldr	r2, [pc, #268]	; (8012ddc <tcp_process+0x770>)
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6013      	str	r3, [r2, #0]
 8012cd2:	f002 fd4d 	bl	8015770 <tcp_timer_needed>
    }
    break;
 8012cd6:	e06c      	b.n	8012db2 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f000 f8f7 	bl	8012ecc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012cde:	4b3a      	ldr	r3, [pc, #232]	; (8012dc8 <tcp_process+0x75c>)
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	f003 0310 	and.w	r3, r3, #16
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d065      	beq.n	8012db6 <tcp_process+0x74a>
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012cee:	4b37      	ldr	r3, [pc, #220]	; (8012dcc <tcp_process+0x760>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d15f      	bne.n	8012db6 <tcp_process+0x74a>
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d15b      	bne.n	8012db6 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f7fe fe18 	bl	8011934 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012d04:	4b33      	ldr	r3, [pc, #204]	; (8012dd4 <tcp_process+0x768>)
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	687a      	ldr	r2, [r7, #4]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d105      	bne.n	8012d1a <tcp_process+0x6ae>
 8012d0e:	4b31      	ldr	r3, [pc, #196]	; (8012dd4 <tcp_process+0x768>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	68db      	ldr	r3, [r3, #12]
 8012d14:	4a2f      	ldr	r2, [pc, #188]	; (8012dd4 <tcp_process+0x768>)
 8012d16:	6013      	str	r3, [r2, #0]
 8012d18:	e013      	b.n	8012d42 <tcp_process+0x6d6>
 8012d1a:	4b2e      	ldr	r3, [pc, #184]	; (8012dd4 <tcp_process+0x768>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	60fb      	str	r3, [r7, #12]
 8012d20:	e00c      	b.n	8012d3c <tcp_process+0x6d0>
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	68db      	ldr	r3, [r3, #12]
 8012d26:	687a      	ldr	r2, [r7, #4]
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d104      	bne.n	8012d36 <tcp_process+0x6ca>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	68da      	ldr	r2, [r3, #12]
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	60da      	str	r2, [r3, #12]
 8012d34:	e005      	b.n	8012d42 <tcp_process+0x6d6>
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	68db      	ldr	r3, [r3, #12]
 8012d3a:	60fb      	str	r3, [r7, #12]
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d1ef      	bne.n	8012d22 <tcp_process+0x6b6>
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2200      	movs	r2, #0
 8012d46:	60da      	str	r2, [r3, #12]
 8012d48:	4b23      	ldr	r3, [pc, #140]	; (8012dd8 <tcp_process+0x76c>)
 8012d4a:	2201      	movs	r2, #1
 8012d4c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	220a      	movs	r2, #10
 8012d52:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8012d54:	4b21      	ldr	r3, [pc, #132]	; (8012ddc <tcp_process+0x770>)
 8012d56:	681a      	ldr	r2, [r3, #0]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	60da      	str	r2, [r3, #12]
 8012d5c:	4a1f      	ldr	r2, [pc, #124]	; (8012ddc <tcp_process+0x770>)
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6013      	str	r3, [r2, #0]
 8012d62:	f002 fd05 	bl	8015770 <tcp_timer_needed>
    }
    break;
 8012d66:	e026      	b.n	8012db6 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f000 f8af 	bl	8012ecc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012d6e:	4b16      	ldr	r3, [pc, #88]	; (8012dc8 <tcp_process+0x75c>)
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	f003 0310 	and.w	r3, r3, #16
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d01f      	beq.n	8012dba <tcp_process+0x74e>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012d7e:	4b13      	ldr	r3, [pc, #76]	; (8012dcc <tcp_process+0x760>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	429a      	cmp	r2, r3
 8012d84:	d119      	bne.n	8012dba <tcp_process+0x74e>
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d115      	bne.n	8012dba <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8012d8e:	4b10      	ldr	r3, [pc, #64]	; (8012dd0 <tcp_process+0x764>)
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	f043 0310 	orr.w	r3, r3, #16
 8012d96:	b2da      	uxtb	r2, r3
 8012d98:	4b0d      	ldr	r3, [pc, #52]	; (8012dd0 <tcp_process+0x764>)
 8012d9a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8012d9c:	e00d      	b.n	8012dba <tcp_process+0x74e>
  default:
    break;
 8012d9e:	bf00      	nop
 8012da0:	e00c      	b.n	8012dbc <tcp_process+0x750>
    break;
 8012da2:	bf00      	nop
 8012da4:	e00a      	b.n	8012dbc <tcp_process+0x750>
    break;
 8012da6:	bf00      	nop
 8012da8:	e008      	b.n	8012dbc <tcp_process+0x750>
    break;
 8012daa:	bf00      	nop
 8012dac:	e006      	b.n	8012dbc <tcp_process+0x750>
    break;
 8012dae:	bf00      	nop
 8012db0:	e004      	b.n	8012dbc <tcp_process+0x750>
    break;
 8012db2:	bf00      	nop
 8012db4:	e002      	b.n	8012dbc <tcp_process+0x750>
    break;
 8012db6:	bf00      	nop
 8012db8:	e000      	b.n	8012dbc <tcp_process+0x750>
    break;
 8012dba:	bf00      	nop
  }
  return ERR_OK;
 8012dbc:	2300      	movs	r3, #0
}
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	3720      	adds	r7, #32
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	bf00      	nop
 8012dc8:	2000c998 	.word	0x2000c998
 8012dcc:	2000c990 	.word	0x2000c990
 8012dd0:	2000c999 	.word	0x2000c999
 8012dd4:	20016424 	.word	0x20016424
 8012dd8:	20016420 	.word	0x20016420
 8012ddc:	20016434 	.word	0x20016434

08012de0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012de0:	b590      	push	{r4, r7, lr}
 8012de2:	b085      	sub	sp, #20
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	68db      	ldr	r3, [r3, #12]
 8012dee:	899b      	ldrh	r3, [r3, #12]
 8012df0:	b29b      	uxth	r3, r3
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7fb fe96 	bl	800eb24 <lwip_htons>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	f003 0301 	and.w	r3, r3, #1
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d027      	beq.n	8012e52 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012e02:	6838      	ldr	r0, [r7, #0]
 8012e04:	f7fe fb2d 	bl	8011462 <tcp_segs_free>
    next = NULL;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	603b      	str	r3, [r7, #0]
 8012e0c:	e055      	b.n	8012eba <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	68db      	ldr	r3, [r3, #12]
 8012e12:	899b      	ldrh	r3, [r3, #12]
 8012e14:	b29b      	uxth	r3, r3
 8012e16:	4618      	mov	r0, r3
 8012e18:	f7fb fe84 	bl	800eb24 <lwip_htons>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	f003 0301 	and.w	r3, r3, #1
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d00d      	beq.n	8012e42 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	68db      	ldr	r3, [r3, #12]
 8012e2a:	899b      	ldrh	r3, [r3, #12]
 8012e2c:	b29c      	uxth	r4, r3
 8012e2e:	2001      	movs	r0, #1
 8012e30:	f7fb fe78 	bl	800eb24 <lwip_htons>
 8012e34:	4603      	mov	r3, r0
 8012e36:	461a      	mov	r2, r3
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	68db      	ldr	r3, [r3, #12]
 8012e3c:	4322      	orrs	r2, r4
 8012e3e:	b292      	uxth	r2, r2
 8012e40:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012e42:	683b      	ldr	r3, [r7, #0]
 8012e44:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012e4c:	68f8      	ldr	r0, [r7, #12]
 8012e4e:	f7fe fb1c 	bl	801148a <tcp_seg_free>
    while (next &&
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d00e      	beq.n	8012e76 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	891b      	ldrh	r3, [r3, #8]
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	4b1a      	ldr	r3, [pc, #104]	; (8012ec8 <tcp_oos_insert_segment+0xe8>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	441a      	add	r2, r3
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	68db      	ldr	r3, [r3, #12]
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	6839      	ldr	r1, [r7, #0]
 8012e6c:	8909      	ldrh	r1, [r1, #8]
 8012e6e:	440b      	add	r3, r1
 8012e70:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	dacb      	bge.n	8012e0e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d01e      	beq.n	8012eba <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	891b      	ldrh	r3, [r3, #8]
 8012e80:	461a      	mov	r2, r3
 8012e82:	4b11      	ldr	r3, [pc, #68]	; (8012ec8 <tcp_oos_insert_segment+0xe8>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	441a      	add	r2, r3
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	685b      	ldr	r3, [r3, #4]
 8012e8e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	dd12      	ble.n	8012eba <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	b29a      	uxth	r2, r3
 8012e9c:	4b0a      	ldr	r3, [pc, #40]	; (8012ec8 <tcp_oos_insert_segment+0xe8>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	1ad3      	subs	r3, r2, r3
 8012ea4:	b29a      	uxth	r2, r3
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	685a      	ldr	r2, [r3, #4]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	891b      	ldrh	r3, [r3, #8]
 8012eb2:	4619      	mov	r1, r3
 8012eb4:	4610      	mov	r0, r2
 8012eb6:	f7fc fe5b 	bl	800fb70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	683a      	ldr	r2, [r7, #0]
 8012ebe:	601a      	str	r2, [r3, #0]
}
 8012ec0:	bf00      	nop
 8012ec2:	3714      	adds	r7, #20
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd90      	pop	{r4, r7, pc}
 8012ec8:	2000c98c 	.word	0x2000c98c

08012ecc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ece:	b08d      	sub	sp, #52	; 0x34
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	7d1b      	ldrb	r3, [r3, #20]
 8012edc:	2b03      	cmp	r3, #3
 8012ede:	d806      	bhi.n	8012eee <tcp_receive+0x22>
 8012ee0:	4ba6      	ldr	r3, [pc, #664]	; (801317c <tcp_receive+0x2b0>)
 8012ee2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8012ee6:	49a6      	ldr	r1, [pc, #664]	; (8013180 <tcp_receive+0x2b4>)
 8012ee8:	48a6      	ldr	r0, [pc, #664]	; (8013184 <tcp_receive+0x2b8>)
 8012eea:	f007 ffb1 	bl	801ae50 <iprintf>

  if (flags & TCP_ACK) {
 8012eee:	4ba6      	ldr	r3, [pc, #664]	; (8013188 <tcp_receive+0x2bc>)
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	f003 0310 	and.w	r3, r3, #16
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f000 82bf 	beq.w	801347a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012f02:	461a      	mov	r2, r3
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f08:	4413      	add	r3, r2
 8012f0a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f10:	4b9e      	ldr	r3, [pc, #632]	; (801318c <tcp_receive+0x2c0>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	1ad3      	subs	r3, r2, r3
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	db1b      	blt.n	8012f52 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012f1e:	4b9b      	ldr	r3, [pc, #620]	; (801318c <tcp_receive+0x2c0>)
 8012f20:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d106      	bne.n	8012f34 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f2a:	4b99      	ldr	r3, [pc, #612]	; (8013190 <tcp_receive+0x2c4>)
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	1ad3      	subs	r3, r2, r3
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	db0e      	blt.n	8012f52 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012f38:	4b95      	ldr	r3, [pc, #596]	; (8013190 <tcp_receive+0x2c4>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	d141      	bne.n	8012fc4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012f40:	4b94      	ldr	r3, [pc, #592]	; (8013194 <tcp_receive+0x2c8>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	89db      	ldrh	r3, [r3, #14]
 8012f46:	b29a      	uxth	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d938      	bls.n	8012fc4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012f52:	4b90      	ldr	r3, [pc, #576]	; (8013194 <tcp_receive+0x2c8>)
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	89db      	ldrh	r3, [r3, #14]
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d205      	bcs.n	8012f7c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8012f7c:	4b83      	ldr	r3, [pc, #524]	; (801318c <tcp_receive+0x2c0>)
 8012f7e:	681a      	ldr	r2, [r3, #0]
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8012f84:	4b82      	ldr	r3, [pc, #520]	; (8013190 <tcp_receive+0x2c4>)
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d10d      	bne.n	8012fb2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d111      	bne.n	8012fc4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2201      	movs	r2, #1
 8012fac:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8012fb0:	e008      	b.n	8012fc4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d003      	beq.n	8012fc4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012fc4:	4b72      	ldr	r3, [pc, #456]	; (8013190 <tcp_receive+0x2c4>)
 8012fc6:	681a      	ldr	r2, [r3, #0]
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fcc:	1ad3      	subs	r3, r2, r3
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	dc53      	bgt.n	801307a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8012fd2:	4b71      	ldr	r3, [pc, #452]	; (8013198 <tcp_receive+0x2cc>)
 8012fd4:	881b      	ldrh	r3, [r3, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d146      	bne.n	8013068 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8012fe4:	4413      	add	r3, r2
 8012fe6:	697a      	ldr	r2, [r7, #20]
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d13d      	bne.n	8013068 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	db38      	blt.n	8013068 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012ffa:	4b65      	ldr	r3, [pc, #404]	; (8013190 <tcp_receive+0x2c4>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d132      	bne.n	8013068 <tcp_receive+0x19c>
              found_dupack = 1;
 8013002:	2301      	movs	r3, #1
 8013004:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801300c:	2bff      	cmp	r3, #255	; 0xff
 801300e:	d007      	beq.n	8013020 <tcp_receive+0x154>
                ++pcb->dupacks;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013016:	3301      	adds	r3, #1
 8013018:	b2da      	uxtb	r2, r3
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013026:	2b03      	cmp	r3, #3
 8013028:	d916      	bls.n	8013058 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013034:	4413      	add	r3, r2
 8013036:	b29a      	uxth	r2, r3
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801303e:	429a      	cmp	r2, r3
 8013040:	d912      	bls.n	8013068 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801304c:	4413      	add	r3, r2
 801304e:	b29a      	uxth	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013056:	e007      	b.n	8013068 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801305e:	2b03      	cmp	r3, #3
 8013060:	d102      	bne.n	8013068 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f002 fa2e 	bl	80154c4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013068:	69fb      	ldr	r3, [r7, #28]
 801306a:	2b00      	cmp	r3, #0
 801306c:	f040 8169 	bne.w	8013342 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	2200      	movs	r2, #0
 8013074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013078:	e163      	b.n	8013342 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801307a:	4b45      	ldr	r3, [pc, #276]	; (8013190 <tcp_receive+0x2c4>)
 801307c:	681a      	ldr	r2, [r3, #0]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013082:	1ad3      	subs	r3, r2, r3
 8013084:	3b01      	subs	r3, #1
 8013086:	2b00      	cmp	r3, #0
 8013088:	f2c0 8107 	blt.w	801329a <tcp_receive+0x3ce>
 801308c:	4b40      	ldr	r3, [pc, #256]	; (8013190 <tcp_receive+0x2c4>)
 801308e:	681a      	ldr	r2, [r3, #0]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013094:	1ad3      	subs	r3, r2, r3
 8013096:	2b00      	cmp	r3, #0
 8013098:	f300 80ff 	bgt.w	801329a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	7e9b      	ldrb	r3, [r3, #26]
 80130a0:	f003 0304 	and.w	r3, r3, #4
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d00c      	beq.n	80130c2 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	7e9b      	ldrb	r3, [r3, #26]
 80130ac:	f023 0304 	bic.w	r3, r3, #4
 80130b0:	b2da      	uxtb	r2, r3
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2200      	movs	r2, #0
 80130c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80130d0:	10db      	asrs	r3, r3, #3
 80130d2:	b21b      	sxth	r3, r3
 80130d4:	b29a      	uxth	r2, r3
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80130dc:	b29b      	uxth	r3, r3
 80130de:	4413      	add	r3, r2
 80130e0:	b29b      	uxth	r3, r3
 80130e2:	b21a      	sxth	r2, r3
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2200      	movs	r2, #0
 80130ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80130f2:	4b27      	ldr	r3, [pc, #156]	; (8013190 <tcp_receive+0x2c4>)
 80130f4:	681a      	ldr	r2, [r3, #0]
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	7d1b      	ldrb	r3, [r3, #20]
 80130fe:	2b03      	cmp	r3, #3
 8013100:	f240 8094 	bls.w	801322c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013110:	429a      	cmp	r2, r3
 8013112:	d216      	bcs.n	8013142 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801311e:	4413      	add	r3, r2
 8013120:	b29a      	uxth	r2, r3
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013128:	429a      	cmp	r2, r3
 801312a:	d97f      	bls.n	801322c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013136:	4413      	add	r3, r2
 8013138:	b29a      	uxth	r2, r3
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013140:	e074      	b.n	801322c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801314c:	4619      	mov	r1, r3
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013152:	fb03 f301 	mul.w	r3, r3, r1
 8013156:	6879      	ldr	r1, [r7, #4]
 8013158:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 801315c:	fb93 f3f1 	sdiv	r3, r3, r1
 8013160:	b29b      	uxth	r3, r3
 8013162:	4413      	add	r3, r2
 8013164:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801316c:	8a7a      	ldrh	r2, [r7, #18]
 801316e:	429a      	cmp	r2, r3
 8013170:	d95c      	bls.n	801322c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	8a7a      	ldrh	r2, [r7, #18]
 8013176:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 801317a:	e057      	b.n	801322c <tcp_receive+0x360>
 801317c:	0801ef6c 	.word	0x0801ef6c
 8013180:	0801f190 	.word	0x0801f190
 8013184:	0801efb0 	.word	0x0801efb0
 8013188:	2000c998 	.word	0x2000c998
 801318c:	2000c98c 	.word	0x2000c98c
 8013190:	2000c990 	.word	0x2000c990
 8013194:	2000c97c 	.word	0x2000c97c
 8013198:	2000c996 	.word	0x2000c996
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131a6:	681a      	ldr	r2, [r3, #0]
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80131b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	4618      	mov	r0, r3
 80131b8:	f7fc fee8 	bl	800ff8c <pbuf_clen>
 80131bc:	4603      	mov	r3, r0
 80131be:	429c      	cmp	r4, r3
 80131c0:	d206      	bcs.n	80131d0 <tcp_receive+0x304>
 80131c2:	4b70      	ldr	r3, [pc, #448]	; (8013384 <tcp_receive+0x4b8>)
 80131c4:	f240 429e 	movw	r2, #1182	; 0x49e
 80131c8:	496f      	ldr	r1, [pc, #444]	; (8013388 <tcp_receive+0x4bc>)
 80131ca:	4870      	ldr	r0, [pc, #448]	; (801338c <tcp_receive+0x4c0>)
 80131cc:	f007 fe40 	bl	801ae50 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 80131d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d2:	685b      	ldr	r3, [r3, #4]
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7fc fed9 	bl	800ff8c <pbuf_clen>
 80131da:	4603      	mov	r3, r0
 80131dc:	461a      	mov	r2, r3
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80131e4:	1a9b      	subs	r3, r3, r2
 80131e6:	b29a      	uxth	r2, r3
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 80131ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f0:	891a      	ldrh	r2, [r3, #8]
 80131f2:	4b67      	ldr	r3, [pc, #412]	; (8013390 <tcp_receive+0x4c4>)
 80131f4:	881b      	ldrh	r3, [r3, #0]
 80131f6:	4413      	add	r3, r2
 80131f8:	b29a      	uxth	r2, r3
 80131fa:	4b65      	ldr	r3, [pc, #404]	; (8013390 <tcp_receive+0x4c4>)
 80131fc:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 80131fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013200:	f7fe f943 	bl	801148a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801320a:	2b00      	cmp	r3, #0
 801320c:	d00e      	beq.n	801322c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013212:	2b00      	cmp	r3, #0
 8013214:	d10a      	bne.n	801322c <tcp_receive+0x360>
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801321a:	2b00      	cmp	r3, #0
 801321c:	d106      	bne.n	801322c <tcp_receive+0x360>
 801321e:	4b59      	ldr	r3, [pc, #356]	; (8013384 <tcp_receive+0x4b8>)
 8013220:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8013224:	495b      	ldr	r1, [pc, #364]	; (8013394 <tcp_receive+0x4c8>)
 8013226:	4859      	ldr	r0, [pc, #356]	; (801338c <tcp_receive+0x4c0>)
 8013228:	f007 fe12 	bl	801ae50 <iprintf>
      while (pcb->unacked != NULL &&
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013230:	2b00      	cmp	r3, #0
 8013232:	d022      	beq.n	801327a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013238:	68db      	ldr	r3, [r3, #12]
 801323a:	685b      	ldr	r3, [r3, #4]
 801323c:	4618      	mov	r0, r3
 801323e:	f7fb fc7f 	bl	800eb40 <lwip_htonl>
 8013242:	4604      	mov	r4, r0
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013248:	891b      	ldrh	r3, [r3, #8]
 801324a:	461d      	mov	r5, r3
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013250:	68db      	ldr	r3, [r3, #12]
 8013252:	899b      	ldrh	r3, [r3, #12]
 8013254:	b29b      	uxth	r3, r3
 8013256:	4618      	mov	r0, r3
 8013258:	f7fb fc64 	bl	800eb24 <lwip_htons>
 801325c:	4603      	mov	r3, r0
 801325e:	f003 0303 	and.w	r3, r3, #3
 8013262:	2b00      	cmp	r3, #0
 8013264:	d001      	beq.n	801326a <tcp_receive+0x39e>
 8013266:	2301      	movs	r3, #1
 8013268:	e000      	b.n	801326c <tcp_receive+0x3a0>
 801326a:	2300      	movs	r3, #0
 801326c:	442b      	add	r3, r5
 801326e:	18e2      	adds	r2, r4, r3
 8013270:	4b49      	ldr	r3, [pc, #292]	; (8013398 <tcp_receive+0x4cc>)
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8013276:	2b00      	cmp	r3, #0
 8013278:	dd90      	ble.n	801319c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801327e:	2b00      	cmp	r3, #0
 8013280:	d104      	bne.n	801328c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013288:	861a      	strh	r2, [r3, #48]	; 0x30
 801328a:	e002      	b.n	8013292 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2200      	movs	r2, #0
 8013290:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2200      	movs	r2, #0
 8013296:	76da      	strb	r2, [r3, #27]
 8013298:	e002      	b.n	80132a0 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f001 fd30 	bl	8014d00 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80132a0:	e04f      	b.n	8013342 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80132a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80132ac:	681a      	ldr	r2, [r3, #0]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d103      	bne.n	80132c2 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2200      	movs	r2, #0
 80132be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80132c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ca:	685b      	ldr	r3, [r3, #4]
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7fc fe5d 	bl	800ff8c <pbuf_clen>
 80132d2:	4603      	mov	r3, r0
 80132d4:	429c      	cmp	r4, r3
 80132d6:	d206      	bcs.n	80132e6 <tcp_receive+0x41a>
 80132d8:	4b2a      	ldr	r3, [pc, #168]	; (8013384 <tcp_receive+0x4b8>)
 80132da:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80132de:	492a      	ldr	r1, [pc, #168]	; (8013388 <tcp_receive+0x4bc>)
 80132e0:	482a      	ldr	r0, [pc, #168]	; (801338c <tcp_receive+0x4c0>)
 80132e2:	f007 fdb5 	bl	801ae50 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80132e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fc fe4e 	bl	800ff8c <pbuf_clen>
 80132f0:	4603      	mov	r3, r0
 80132f2:	461a      	mov	r2, r3
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80132fa:	1a9b      	subs	r3, r3, r2
 80132fc:	b29a      	uxth	r2, r3
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8013304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013306:	891a      	ldrh	r2, [r3, #8]
 8013308:	4b21      	ldr	r3, [pc, #132]	; (8013390 <tcp_receive+0x4c4>)
 801330a:	881b      	ldrh	r3, [r3, #0]
 801330c:	4413      	add	r3, r2
 801330e:	b29a      	uxth	r2, r3
 8013310:	4b1f      	ldr	r3, [pc, #124]	; (8013390 <tcp_receive+0x4c4>)
 8013312:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8013314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013316:	f7fe f8b8 	bl	801148a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013320:	2b00      	cmp	r3, #0
 8013322:	d00e      	beq.n	8013342 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013328:	2b00      	cmp	r3, #0
 801332a:	d10a      	bne.n	8013342 <tcp_receive+0x476>
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013330:	2b00      	cmp	r3, #0
 8013332:	d106      	bne.n	8013342 <tcp_receive+0x476>
 8013334:	4b13      	ldr	r3, [pc, #76]	; (8013384 <tcp_receive+0x4b8>)
 8013336:	f240 42dd 	movw	r2, #1245	; 0x4dd
 801333a:	4916      	ldr	r1, [pc, #88]	; (8013394 <tcp_receive+0x4c8>)
 801333c:	4813      	ldr	r0, [pc, #76]	; (801338c <tcp_receive+0x4c0>)
 801333e:	f007 fd87 	bl	801ae50 <iprintf>
    while (pcb->unsent != NULL &&
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013346:	2b00      	cmp	r3, #0
 8013348:	d036      	beq.n	80133b8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 801334a:	4b13      	ldr	r3, [pc, #76]	; (8013398 <tcp_receive+0x4cc>)
 801334c:	681c      	ldr	r4, [r3, #0]
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013352:	68db      	ldr	r3, [r3, #12]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	4618      	mov	r0, r3
 8013358:	f7fb fbf2 	bl	800eb40 <lwip_htonl>
 801335c:	4605      	mov	r5, r0
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013362:	891b      	ldrh	r3, [r3, #8]
 8013364:	461e      	mov	r6, r3
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	899b      	ldrh	r3, [r3, #12]
 801336e:	b29b      	uxth	r3, r3
 8013370:	4618      	mov	r0, r3
 8013372:	f7fb fbd7 	bl	800eb24 <lwip_htons>
 8013376:	4603      	mov	r3, r0
 8013378:	f003 0303 	and.w	r3, r3, #3
 801337c:	2b00      	cmp	r3, #0
 801337e:	d00d      	beq.n	801339c <tcp_receive+0x4d0>
 8013380:	2301      	movs	r3, #1
 8013382:	e00c      	b.n	801339e <tcp_receive+0x4d2>
 8013384:	0801ef6c 	.word	0x0801ef6c
 8013388:	0801f1ac 	.word	0x0801f1ac
 801338c:	0801efb0 	.word	0x0801efb0
 8013390:	2000c994 	.word	0x2000c994
 8013394:	0801f1d4 	.word	0x0801f1d4
 8013398:	2000c990 	.word	0x2000c990
 801339c:	2300      	movs	r3, #0
 801339e:	4433      	add	r3, r6
 80133a0:	442b      	add	r3, r5
 80133a2:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	db07      	blt.n	80133b8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80133a8:	4b8d      	ldr	r3, [pc, #564]	; (80135e0 <tcp_receive+0x714>)
 80133aa:	681a      	ldr	r2, [r3, #0]
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133b0:	1ad3      	subs	r3, r2, r3
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f77f af75 	ble.w	80132a2 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80133be:	4b89      	ldr	r3, [pc, #548]	; (80135e4 <tcp_receive+0x718>)
 80133c0:	881b      	ldrh	r3, [r3, #0]
 80133c2:	4413      	add	r3, r2
 80133c4:	b29a      	uxth	r2, r3
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d052      	beq.n	801347a <tcp_receive+0x5ae>
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133d8:	4b81      	ldr	r3, [pc, #516]	; (80135e0 <tcp_receive+0x714>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	1ad3      	subs	r3, r2, r3
 80133de:	2b00      	cmp	r3, #0
 80133e0:	da4b      	bge.n	801347a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80133e2:	4b81      	ldr	r3, [pc, #516]	; (80135e8 <tcp_receive+0x71c>)
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	b29a      	uxth	r2, r3
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	1ad3      	subs	r3, r2, r3
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80133f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80133fc:	10db      	asrs	r3, r3, #3
 80133fe:	b21b      	sxth	r3, r3
 8013400:	b29b      	uxth	r3, r3
 8013402:	1ad3      	subs	r3, r2, r3
 8013404:	b29b      	uxth	r3, r3
 8013406:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801340e:	b29a      	uxth	r2, r3
 8013410:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013412:	4413      	add	r3, r2
 8013414:	b29b      	uxth	r3, r3
 8013416:	b21a      	sxth	r2, r3
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801341c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013420:	2b00      	cmp	r3, #0
 8013422:	da03      	bge.n	801342c <tcp_receive+0x560>
        m = -m;
 8013424:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013426:	425b      	negs	r3, r3
 8013428:	b29b      	uxth	r3, r3
 801342a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 801342c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013434:	109b      	asrs	r3, r3, #2
 8013436:	b21b      	sxth	r3, r3
 8013438:	b29b      	uxth	r3, r3
 801343a:	1ad3      	subs	r3, r2, r3
 801343c:	b29b      	uxth	r3, r3
 801343e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013446:	b29a      	uxth	r2, r3
 8013448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801344a:	4413      	add	r3, r2
 801344c:	b29b      	uxth	r3, r3
 801344e:	b21a      	sxth	r2, r3
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801345a:	10db      	asrs	r3, r3, #3
 801345c:	b21b      	sxth	r3, r3
 801345e:	b29a      	uxth	r2, r3
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013466:	b29b      	uxth	r3, r3
 8013468:	4413      	add	r3, r2
 801346a:	b29b      	uxth	r3, r3
 801346c:	b21a      	sxth	r2, r3
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2200      	movs	r2, #0
 8013478:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801347a:	4b5c      	ldr	r3, [pc, #368]	; (80135ec <tcp_receive+0x720>)
 801347c:	881b      	ldrh	r3, [r3, #0]
 801347e:	2b00      	cmp	r3, #0
 8013480:	f000 84f1 	beq.w	8013e66 <tcp_receive+0xf9a>
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	7d1b      	ldrb	r3, [r3, #20]
 8013488:	2b06      	cmp	r3, #6
 801348a:	f200 84ec 	bhi.w	8013e66 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013492:	4b57      	ldr	r3, [pc, #348]	; (80135f0 <tcp_receive+0x724>)
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	1ad3      	subs	r3, r2, r3
 8013498:	3b01      	subs	r3, #1
 801349a:	2b00      	cmp	r3, #0
 801349c:	f2c0 80b8 	blt.w	8013610 <tcp_receive+0x744>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134a4:	4b51      	ldr	r3, [pc, #324]	; (80135ec <tcp_receive+0x720>)
 80134a6:	881b      	ldrh	r3, [r3, #0]
 80134a8:	4619      	mov	r1, r3
 80134aa:	4b51      	ldr	r3, [pc, #324]	; (80135f0 <tcp_receive+0x724>)
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	440b      	add	r3, r1
 80134b0:	1ad3      	subs	r3, r2, r3
 80134b2:	3301      	adds	r3, #1
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	f300 80ab 	bgt.w	8013610 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80134ba:	4b4e      	ldr	r3, [pc, #312]	; (80135f4 <tcp_receive+0x728>)
 80134bc:	685b      	ldr	r3, [r3, #4]
 80134be:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134c4:	4b4a      	ldr	r3, [pc, #296]	; (80135f0 <tcp_receive+0x724>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	1ad3      	subs	r3, r2, r3
 80134ca:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80134cc:	4b49      	ldr	r3, [pc, #292]	; (80135f4 <tcp_receive+0x728>)
 80134ce:	685b      	ldr	r3, [r3, #4]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d106      	bne.n	80134e2 <tcp_receive+0x616>
 80134d4:	4b48      	ldr	r3, [pc, #288]	; (80135f8 <tcp_receive+0x72c>)
 80134d6:	f240 523c 	movw	r2, #1340	; 0x53c
 80134da:	4948      	ldr	r1, [pc, #288]	; (80135fc <tcp_receive+0x730>)
 80134dc:	4848      	ldr	r0, [pc, #288]	; (8013600 <tcp_receive+0x734>)
 80134de:	f007 fcb7 	bl	801ae50 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 80134e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80134e8:	4293      	cmp	r3, r2
 80134ea:	dd06      	ble.n	80134fa <tcp_receive+0x62e>
 80134ec:	4b42      	ldr	r3, [pc, #264]	; (80135f8 <tcp_receive+0x72c>)
 80134ee:	f240 523d 	movw	r2, #1341	; 0x53d
 80134f2:	4944      	ldr	r1, [pc, #272]	; (8013604 <tcp_receive+0x738>)
 80134f4:	4842      	ldr	r0, [pc, #264]	; (8013600 <tcp_receive+0x734>)
 80134f6:	f007 fcab 	bl	801ae50 <iprintf>
      if (inseg.p->len < off) {
 80134fa:	4b3e      	ldr	r3, [pc, #248]	; (80135f4 <tcp_receive+0x728>)
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	895b      	ldrh	r3, [r3, #10]
 8013500:	461a      	mov	r2, r3
 8013502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013504:	4293      	cmp	r3, r2
 8013506:	dd3e      	ble.n	8013586 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013508:	4b3a      	ldr	r3, [pc, #232]	; (80135f4 <tcp_receive+0x728>)
 801350a:	685b      	ldr	r3, [r3, #4]
 801350c:	891b      	ldrh	r3, [r3, #8]
 801350e:	461a      	mov	r2, r3
 8013510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013512:	4293      	cmp	r3, r2
 8013514:	dd06      	ble.n	8013524 <tcp_receive+0x658>
 8013516:	4b38      	ldr	r3, [pc, #224]	; (80135f8 <tcp_receive+0x72c>)
 8013518:	f240 523f 	movw	r2, #1343	; 0x53f
 801351c:	493a      	ldr	r1, [pc, #232]	; (8013608 <tcp_receive+0x73c>)
 801351e:	4838      	ldr	r0, [pc, #224]	; (8013600 <tcp_receive+0x734>)
 8013520:	f007 fc96 	bl	801ae50 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013524:	4b33      	ldr	r3, [pc, #204]	; (80135f4 <tcp_receive+0x728>)
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	891a      	ldrh	r2, [r3, #8]
 801352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801352c:	b29b      	uxth	r3, r3
 801352e:	1ad3      	subs	r3, r2, r3
 8013530:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8013532:	e00e      	b.n	8013552 <tcp_receive+0x686>
          off -= p->len;
 8013534:	69bb      	ldr	r3, [r7, #24]
 8013536:	895b      	ldrh	r3, [r3, #10]
 8013538:	461a      	mov	r2, r3
 801353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801353c:	1a9b      	subs	r3, r3, r2
 801353e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8013540:	69bb      	ldr	r3, [r7, #24]
 8013542:	8a3a      	ldrh	r2, [r7, #16]
 8013544:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8013546:	69bb      	ldr	r3, [r7, #24]
 8013548:	2200      	movs	r2, #0
 801354a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 801354c:	69bb      	ldr	r3, [r7, #24]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	895b      	ldrh	r3, [r3, #10]
 8013556:	461a      	mov	r2, r3
 8013558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801355a:	4293      	cmp	r3, r2
 801355c:	dcea      	bgt.n	8013534 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 801355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013560:	b29b      	uxth	r3, r3
 8013562:	425b      	negs	r3, r3
 8013564:	b29b      	uxth	r3, r3
 8013566:	b21b      	sxth	r3, r3
 8013568:	4619      	mov	r1, r3
 801356a:	69b8      	ldr	r0, [r7, #24]
 801356c:	f7fc fc50 	bl	800fe10 <pbuf_header>
 8013570:	4603      	mov	r3, r0
 8013572:	2b00      	cmp	r3, #0
 8013574:	d01c      	beq.n	80135b0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8013576:	4b20      	ldr	r3, [pc, #128]	; (80135f8 <tcp_receive+0x72c>)
 8013578:	f240 524c 	movw	r2, #1356	; 0x54c
 801357c:	4923      	ldr	r1, [pc, #140]	; (801360c <tcp_receive+0x740>)
 801357e:	4820      	ldr	r0, [pc, #128]	; (8013600 <tcp_receive+0x734>)
 8013580:	f007 fc66 	bl	801ae50 <iprintf>
 8013584:	e014      	b.n	80135b0 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8013586:	4b1b      	ldr	r3, [pc, #108]	; (80135f4 <tcp_receive+0x728>)
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801358c:	b292      	uxth	r2, r2
 801358e:	4252      	negs	r2, r2
 8013590:	b292      	uxth	r2, r2
 8013592:	b212      	sxth	r2, r2
 8013594:	4611      	mov	r1, r2
 8013596:	4618      	mov	r0, r3
 8013598:	f7fc fc3a 	bl	800fe10 <pbuf_header>
 801359c:	4603      	mov	r3, r0
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d006      	beq.n	80135b0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80135a2:	4b15      	ldr	r3, [pc, #84]	; (80135f8 <tcp_receive+0x72c>)
 80135a4:	f240 5251 	movw	r2, #1361	; 0x551
 80135a8:	4918      	ldr	r1, [pc, #96]	; (801360c <tcp_receive+0x740>)
 80135aa:	4815      	ldr	r0, [pc, #84]	; (8013600 <tcp_receive+0x734>)
 80135ac:	f007 fc50 	bl	801ae50 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80135b0:	4b10      	ldr	r3, [pc, #64]	; (80135f4 <tcp_receive+0x728>)
 80135b2:	891a      	ldrh	r2, [r3, #8]
 80135b4:	4b0e      	ldr	r3, [pc, #56]	; (80135f0 <tcp_receive+0x724>)
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	b299      	uxth	r1, r3
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135be:	b29b      	uxth	r3, r3
 80135c0:	1acb      	subs	r3, r1, r3
 80135c2:	b29b      	uxth	r3, r3
 80135c4:	4413      	add	r3, r2
 80135c6:	b29a      	uxth	r2, r3
 80135c8:	4b0a      	ldr	r3, [pc, #40]	; (80135f4 <tcp_receive+0x728>)
 80135ca:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135d0:	4a07      	ldr	r2, [pc, #28]	; (80135f0 <tcp_receive+0x724>)
 80135d2:	6013      	str	r3, [r2, #0]
 80135d4:	4b07      	ldr	r3, [pc, #28]	; (80135f4 <tcp_receive+0x728>)
 80135d6:	68db      	ldr	r3, [r3, #12]
 80135d8:	4a05      	ldr	r2, [pc, #20]	; (80135f0 <tcp_receive+0x724>)
 80135da:	6812      	ldr	r2, [r2, #0]
 80135dc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80135de:	e025      	b.n	801362c <tcp_receive+0x760>
 80135e0:	2000c990 	.word	0x2000c990
 80135e4:	2000c994 	.word	0x2000c994
 80135e8:	20016428 	.word	0x20016428
 80135ec:	2000c996 	.word	0x2000c996
 80135f0:	2000c98c 	.word	0x2000c98c
 80135f4:	2000c96c 	.word	0x2000c96c
 80135f8:	0801ef6c 	.word	0x0801ef6c
 80135fc:	0801f1f4 	.word	0x0801f1f4
 8013600:	0801efb0 	.word	0x0801efb0
 8013604:	0801f204 	.word	0x0801f204
 8013608:	0801f214 	.word	0x0801f214
 801360c:	0801f224 	.word	0x0801f224
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013610:	4b87      	ldr	r3, [pc, #540]	; (8013830 <tcp_receive+0x964>)
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013618:	1ad3      	subs	r3, r2, r3
 801361a:	2b00      	cmp	r3, #0
 801361c:	da06      	bge.n	801362c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	7e9b      	ldrb	r3, [r3, #26]
 8013622:	f043 0302 	orr.w	r3, r3, #2
 8013626:	b2da      	uxtb	r2, r3
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801362c:	4b80      	ldr	r3, [pc, #512]	; (8013830 <tcp_receive+0x964>)
 801362e:	681a      	ldr	r2, [r3, #0]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013634:	1ad3      	subs	r3, r2, r3
 8013636:	2b00      	cmp	r3, #0
 8013638:	f2c0 8410 	blt.w	8013e5c <tcp_receive+0xf90>
 801363c:	4b7c      	ldr	r3, [pc, #496]	; (8013830 <tcp_receive+0x964>)
 801363e:	681a      	ldr	r2, [r3, #0]
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013644:	6879      	ldr	r1, [r7, #4]
 8013646:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013648:	440b      	add	r3, r1
 801364a:	1ad3      	subs	r3, r2, r3
 801364c:	3301      	adds	r3, #1
 801364e:	2b00      	cmp	r3, #0
 8013650:	f300 8404 	bgt.w	8013e5c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013658:	4b75      	ldr	r3, [pc, #468]	; (8013830 <tcp_receive+0x964>)
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	429a      	cmp	r2, r3
 801365e:	f040 8287 	bne.w	8013b70 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013662:	4b74      	ldr	r3, [pc, #464]	; (8013834 <tcp_receive+0x968>)
 8013664:	891c      	ldrh	r4, [r3, #8]
 8013666:	4b73      	ldr	r3, [pc, #460]	; (8013834 <tcp_receive+0x968>)
 8013668:	68db      	ldr	r3, [r3, #12]
 801366a:	899b      	ldrh	r3, [r3, #12]
 801366c:	b29b      	uxth	r3, r3
 801366e:	4618      	mov	r0, r3
 8013670:	f7fb fa58 	bl	800eb24 <lwip_htons>
 8013674:	4603      	mov	r3, r0
 8013676:	f003 0303 	and.w	r3, r3, #3
 801367a:	2b00      	cmp	r3, #0
 801367c:	d001      	beq.n	8013682 <tcp_receive+0x7b6>
 801367e:	2301      	movs	r3, #1
 8013680:	e000      	b.n	8013684 <tcp_receive+0x7b8>
 8013682:	2300      	movs	r3, #0
 8013684:	4423      	add	r3, r4
 8013686:	b29a      	uxth	r2, r3
 8013688:	4b6b      	ldr	r3, [pc, #428]	; (8013838 <tcp_receive+0x96c>)
 801368a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013690:	4b69      	ldr	r3, [pc, #420]	; (8013838 <tcp_receive+0x96c>)
 8013692:	881b      	ldrh	r3, [r3, #0]
 8013694:	429a      	cmp	r2, r3
 8013696:	d26e      	bcs.n	8013776 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013698:	4b66      	ldr	r3, [pc, #408]	; (8013834 <tcp_receive+0x968>)
 801369a:	68db      	ldr	r3, [r3, #12]
 801369c:	899b      	ldrh	r3, [r3, #12]
 801369e:	b29b      	uxth	r3, r3
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7fb fa3f 	bl	800eb24 <lwip_htons>
 80136a6:	4603      	mov	r3, r0
 80136a8:	f003 0301 	and.w	r3, r3, #1
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d01b      	beq.n	80136e8 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80136b0:	4b60      	ldr	r3, [pc, #384]	; (8013834 <tcp_receive+0x968>)
 80136b2:	68db      	ldr	r3, [r3, #12]
 80136b4:	899b      	ldrh	r3, [r3, #12]
 80136b6:	b29b      	uxth	r3, r3
 80136b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80136bc:	b29c      	uxth	r4, r3
 80136be:	4b5d      	ldr	r3, [pc, #372]	; (8013834 <tcp_receive+0x968>)
 80136c0:	68db      	ldr	r3, [r3, #12]
 80136c2:	899b      	ldrh	r3, [r3, #12]
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7fb fa2c 	bl	800eb24 <lwip_htons>
 80136cc:	4603      	mov	r3, r0
 80136ce:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7fb fa25 	bl	800eb24 <lwip_htons>
 80136da:	4603      	mov	r3, r0
 80136dc:	461a      	mov	r2, r3
 80136de:	4b55      	ldr	r3, [pc, #340]	; (8013834 <tcp_receive+0x968>)
 80136e0:	68db      	ldr	r3, [r3, #12]
 80136e2:	4322      	orrs	r2, r4
 80136e4:	b292      	uxth	r2, r2
 80136e6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80136ec:	4b51      	ldr	r3, [pc, #324]	; (8013834 <tcp_receive+0x968>)
 80136ee:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80136f0:	4b50      	ldr	r3, [pc, #320]	; (8013834 <tcp_receive+0x968>)
 80136f2:	68db      	ldr	r3, [r3, #12]
 80136f4:	899b      	ldrh	r3, [r3, #12]
 80136f6:	b29b      	uxth	r3, r3
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7fb fa13 	bl	800eb24 <lwip_htons>
 80136fe:	4603      	mov	r3, r0
 8013700:	f003 0302 	and.w	r3, r3, #2
 8013704:	2b00      	cmp	r3, #0
 8013706:	d005      	beq.n	8013714 <tcp_receive+0x848>
            inseg.len -= 1;
 8013708:	4b4a      	ldr	r3, [pc, #296]	; (8013834 <tcp_receive+0x968>)
 801370a:	891b      	ldrh	r3, [r3, #8]
 801370c:	3b01      	subs	r3, #1
 801370e:	b29a      	uxth	r2, r3
 8013710:	4b48      	ldr	r3, [pc, #288]	; (8013834 <tcp_receive+0x968>)
 8013712:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013714:	4b47      	ldr	r3, [pc, #284]	; (8013834 <tcp_receive+0x968>)
 8013716:	685a      	ldr	r2, [r3, #4]
 8013718:	4b46      	ldr	r3, [pc, #280]	; (8013834 <tcp_receive+0x968>)
 801371a:	891b      	ldrh	r3, [r3, #8]
 801371c:	4619      	mov	r1, r3
 801371e:	4610      	mov	r0, r2
 8013720:	f7fc fa26 	bl	800fb70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013724:	4b43      	ldr	r3, [pc, #268]	; (8013834 <tcp_receive+0x968>)
 8013726:	891c      	ldrh	r4, [r3, #8]
 8013728:	4b42      	ldr	r3, [pc, #264]	; (8013834 <tcp_receive+0x968>)
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	899b      	ldrh	r3, [r3, #12]
 801372e:	b29b      	uxth	r3, r3
 8013730:	4618      	mov	r0, r3
 8013732:	f7fb f9f7 	bl	800eb24 <lwip_htons>
 8013736:	4603      	mov	r3, r0
 8013738:	f003 0303 	and.w	r3, r3, #3
 801373c:	2b00      	cmp	r3, #0
 801373e:	d001      	beq.n	8013744 <tcp_receive+0x878>
 8013740:	2301      	movs	r3, #1
 8013742:	e000      	b.n	8013746 <tcp_receive+0x87a>
 8013744:	2300      	movs	r3, #0
 8013746:	4423      	add	r3, r4
 8013748:	b29a      	uxth	r2, r3
 801374a:	4b3b      	ldr	r3, [pc, #236]	; (8013838 <tcp_receive+0x96c>)
 801374c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801374e:	4b3a      	ldr	r3, [pc, #232]	; (8013838 <tcp_receive+0x96c>)
 8013750:	881b      	ldrh	r3, [r3, #0]
 8013752:	461a      	mov	r2, r3
 8013754:	4b36      	ldr	r3, [pc, #216]	; (8013830 <tcp_receive+0x964>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	441a      	add	r2, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801375e:	6879      	ldr	r1, [r7, #4]
 8013760:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013762:	440b      	add	r3, r1
 8013764:	429a      	cmp	r2, r3
 8013766:	d006      	beq.n	8013776 <tcp_receive+0x8aa>
 8013768:	4b34      	ldr	r3, [pc, #208]	; (801383c <tcp_receive+0x970>)
 801376a:	f240 527f 	movw	r2, #1407	; 0x57f
 801376e:	4934      	ldr	r1, [pc, #208]	; (8013840 <tcp_receive+0x974>)
 8013770:	4834      	ldr	r0, [pc, #208]	; (8013844 <tcp_receive+0x978>)
 8013772:	f007 fb6d 	bl	801ae50 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801377a:	2b00      	cmp	r3, #0
 801377c:	f000 80e1 	beq.w	8013942 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013780:	4b2c      	ldr	r3, [pc, #176]	; (8013834 <tcp_receive+0x968>)
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	899b      	ldrh	r3, [r3, #12]
 8013786:	b29b      	uxth	r3, r3
 8013788:	4618      	mov	r0, r3
 801378a:	f7fb f9cb 	bl	800eb24 <lwip_htons>
 801378e:	4603      	mov	r3, r0
 8013790:	f003 0301 	and.w	r3, r3, #1
 8013794:	2b00      	cmp	r3, #0
 8013796:	d010      	beq.n	80137ba <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013798:	e00a      	b.n	80137b0 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801379e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80137aa:	68b8      	ldr	r0, [r7, #8]
 80137ac:	f7fd fe6d 	bl	801148a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d1f0      	bne.n	801379a <tcp_receive+0x8ce>
 80137b8:	e0c3      	b.n	8013942 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137be:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80137c0:	e04f      	b.n	8013862 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80137c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c4:	68db      	ldr	r3, [r3, #12]
 80137c6:	899b      	ldrh	r3, [r3, #12]
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7fb f9aa 	bl	800eb24 <lwip_htons>
 80137d0:	4603      	mov	r3, r0
 80137d2:	f003 0301 	and.w	r3, r3, #1
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d03b      	beq.n	8013852 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80137da:	4b16      	ldr	r3, [pc, #88]	; (8013834 <tcp_receive+0x968>)
 80137dc:	68db      	ldr	r3, [r3, #12]
 80137de:	899b      	ldrh	r3, [r3, #12]
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7fb f99e 	bl	800eb24 <lwip_htons>
 80137e8:	4603      	mov	r3, r0
 80137ea:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d12f      	bne.n	8013852 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80137f2:	4b10      	ldr	r3, [pc, #64]	; (8013834 <tcp_receive+0x968>)
 80137f4:	68db      	ldr	r3, [r3, #12]
 80137f6:	899b      	ldrh	r3, [r3, #12]
 80137f8:	b29c      	uxth	r4, r3
 80137fa:	2001      	movs	r0, #1
 80137fc:	f7fb f992 	bl	800eb24 <lwip_htons>
 8013800:	4603      	mov	r3, r0
 8013802:	461a      	mov	r2, r3
 8013804:	4b0b      	ldr	r3, [pc, #44]	; (8013834 <tcp_receive+0x968>)
 8013806:	68db      	ldr	r3, [r3, #12]
 8013808:	4322      	orrs	r2, r4
 801380a:	b292      	uxth	r2, r2
 801380c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801380e:	4b09      	ldr	r3, [pc, #36]	; (8013834 <tcp_receive+0x968>)
 8013810:	891c      	ldrh	r4, [r3, #8]
 8013812:	4b08      	ldr	r3, [pc, #32]	; (8013834 <tcp_receive+0x968>)
 8013814:	68db      	ldr	r3, [r3, #12]
 8013816:	899b      	ldrh	r3, [r3, #12]
 8013818:	b29b      	uxth	r3, r3
 801381a:	4618      	mov	r0, r3
 801381c:	f7fb f982 	bl	800eb24 <lwip_htons>
 8013820:	4603      	mov	r3, r0
 8013822:	f003 0303 	and.w	r3, r3, #3
 8013826:	2b00      	cmp	r3, #0
 8013828:	d00e      	beq.n	8013848 <tcp_receive+0x97c>
 801382a:	2301      	movs	r3, #1
 801382c:	e00d      	b.n	801384a <tcp_receive+0x97e>
 801382e:	bf00      	nop
 8013830:	2000c98c 	.word	0x2000c98c
 8013834:	2000c96c 	.word	0x2000c96c
 8013838:	2000c996 	.word	0x2000c996
 801383c:	0801ef6c 	.word	0x0801ef6c
 8013840:	0801f238 	.word	0x0801f238
 8013844:	0801efb0 	.word	0x0801efb0
 8013848:	2300      	movs	r3, #0
 801384a:	4423      	add	r3, r4
 801384c:	b29a      	uxth	r2, r3
 801384e:	4b95      	ldr	r3, [pc, #596]	; (8013aa4 <tcp_receive+0xbd8>)
 8013850:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8013852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013854:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8013856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 801385c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801385e:	f7fd fe14 	bl	801148a <tcp_seg_free>
            while (next &&
 8013862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013864:	2b00      	cmp	r3, #0
 8013866:	d00e      	beq.n	8013886 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013868:	4b8e      	ldr	r3, [pc, #568]	; (8013aa4 <tcp_receive+0xbd8>)
 801386a:	881b      	ldrh	r3, [r3, #0]
 801386c:	461a      	mov	r2, r3
 801386e:	4b8e      	ldr	r3, [pc, #568]	; (8013aa8 <tcp_receive+0xbdc>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	441a      	add	r2, r3
 8013874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013876:	68db      	ldr	r3, [r3, #12]
 8013878:	685b      	ldr	r3, [r3, #4]
 801387a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801387c:	8909      	ldrh	r1, [r1, #8]
 801387e:	440b      	add	r3, r1
 8013880:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013882:	2b00      	cmp	r3, #0
 8013884:	da9d      	bge.n	80137c2 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013888:	2b00      	cmp	r3, #0
 801388a:	d057      	beq.n	801393c <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 801388c:	4b85      	ldr	r3, [pc, #532]	; (8013aa4 <tcp_receive+0xbd8>)
 801388e:	881b      	ldrh	r3, [r3, #0]
 8013890:	461a      	mov	r2, r3
 8013892:	4b85      	ldr	r3, [pc, #532]	; (8013aa8 <tcp_receive+0xbdc>)
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	441a      	add	r2, r3
 8013898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801389a:	68db      	ldr	r3, [r3, #12]
 801389c:	685b      	ldr	r3, [r3, #4]
 801389e:	1ad3      	subs	r3, r2, r3
            if (next &&
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	dd4b      	ble.n	801393c <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80138a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a6:	68db      	ldr	r3, [r3, #12]
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	b29a      	uxth	r2, r3
 80138ac:	4b7e      	ldr	r3, [pc, #504]	; (8013aa8 <tcp_receive+0xbdc>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	1ad3      	subs	r3, r2, r3
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	4b7d      	ldr	r3, [pc, #500]	; (8013aac <tcp_receive+0xbe0>)
 80138b8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80138ba:	4b7c      	ldr	r3, [pc, #496]	; (8013aac <tcp_receive+0xbe0>)
 80138bc:	68db      	ldr	r3, [r3, #12]
 80138be:	899b      	ldrh	r3, [r3, #12]
 80138c0:	b29b      	uxth	r3, r3
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7fb f92e 	bl	800eb24 <lwip_htons>
 80138c8:	4603      	mov	r3, r0
 80138ca:	f003 0302 	and.w	r3, r3, #2
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d005      	beq.n	80138de <tcp_receive+0xa12>
                inseg.len -= 1;
 80138d2:	4b76      	ldr	r3, [pc, #472]	; (8013aac <tcp_receive+0xbe0>)
 80138d4:	891b      	ldrh	r3, [r3, #8]
 80138d6:	3b01      	subs	r3, #1
 80138d8:	b29a      	uxth	r2, r3
 80138da:	4b74      	ldr	r3, [pc, #464]	; (8013aac <tcp_receive+0xbe0>)
 80138dc:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80138de:	4b73      	ldr	r3, [pc, #460]	; (8013aac <tcp_receive+0xbe0>)
 80138e0:	685a      	ldr	r2, [r3, #4]
 80138e2:	4b72      	ldr	r3, [pc, #456]	; (8013aac <tcp_receive+0xbe0>)
 80138e4:	891b      	ldrh	r3, [r3, #8]
 80138e6:	4619      	mov	r1, r3
 80138e8:	4610      	mov	r0, r2
 80138ea:	f7fc f941 	bl	800fb70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80138ee:	4b6f      	ldr	r3, [pc, #444]	; (8013aac <tcp_receive+0xbe0>)
 80138f0:	891c      	ldrh	r4, [r3, #8]
 80138f2:	4b6e      	ldr	r3, [pc, #440]	; (8013aac <tcp_receive+0xbe0>)
 80138f4:	68db      	ldr	r3, [r3, #12]
 80138f6:	899b      	ldrh	r3, [r3, #12]
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7fb f912 	bl	800eb24 <lwip_htons>
 8013900:	4603      	mov	r3, r0
 8013902:	f003 0303 	and.w	r3, r3, #3
 8013906:	2b00      	cmp	r3, #0
 8013908:	d001      	beq.n	801390e <tcp_receive+0xa42>
 801390a:	2301      	movs	r3, #1
 801390c:	e000      	b.n	8013910 <tcp_receive+0xa44>
 801390e:	2300      	movs	r3, #0
 8013910:	4423      	add	r3, r4
 8013912:	b29a      	uxth	r2, r3
 8013914:	4b63      	ldr	r3, [pc, #396]	; (8013aa4 <tcp_receive+0xbd8>)
 8013916:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013918:	4b62      	ldr	r3, [pc, #392]	; (8013aa4 <tcp_receive+0xbd8>)
 801391a:	881b      	ldrh	r3, [r3, #0]
 801391c:	461a      	mov	r2, r3
 801391e:	4b62      	ldr	r3, [pc, #392]	; (8013aa8 <tcp_receive+0xbdc>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	441a      	add	r2, r3
 8013924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013926:	68db      	ldr	r3, [r3, #12]
 8013928:	685b      	ldr	r3, [r3, #4]
 801392a:	429a      	cmp	r2, r3
 801392c:	d006      	beq.n	801393c <tcp_receive+0xa70>
 801392e:	4b60      	ldr	r3, [pc, #384]	; (8013ab0 <tcp_receive+0xbe4>)
 8013930:	f240 52af 	movw	r2, #1455	; 0x5af
 8013934:	495f      	ldr	r1, [pc, #380]	; (8013ab4 <tcp_receive+0xbe8>)
 8013936:	4860      	ldr	r0, [pc, #384]	; (8013ab8 <tcp_receive+0xbec>)
 8013938:	f007 fa8a 	bl	801ae50 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013940:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013942:	4b58      	ldr	r3, [pc, #352]	; (8013aa4 <tcp_receive+0xbd8>)
 8013944:	881b      	ldrh	r3, [r3, #0]
 8013946:	461a      	mov	r2, r3
 8013948:	4b57      	ldr	r3, [pc, #348]	; (8013aa8 <tcp_receive+0xbdc>)
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	441a      	add	r2, r3
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013956:	4b53      	ldr	r3, [pc, #332]	; (8013aa4 <tcp_receive+0xbd8>)
 8013958:	881b      	ldrh	r3, [r3, #0]
 801395a:	429a      	cmp	r2, r3
 801395c:	d206      	bcs.n	801396c <tcp_receive+0xaa0>
 801395e:	4b54      	ldr	r3, [pc, #336]	; (8013ab0 <tcp_receive+0xbe4>)
 8013960:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013964:	4955      	ldr	r1, [pc, #340]	; (8013abc <tcp_receive+0xbf0>)
 8013966:	4854      	ldr	r0, [pc, #336]	; (8013ab8 <tcp_receive+0xbec>)
 8013968:	f007 fa72 	bl	801ae50 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013970:	4b4c      	ldr	r3, [pc, #304]	; (8013aa4 <tcp_receive+0xbd8>)
 8013972:	881b      	ldrh	r3, [r3, #0]
 8013974:	1ad3      	subs	r3, r2, r3
 8013976:	b29a      	uxth	r2, r3
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f7fd f8f7 	bl	8010b70 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013982:	4b4a      	ldr	r3, [pc, #296]	; (8013aac <tcp_receive+0xbe0>)
 8013984:	685b      	ldr	r3, [r3, #4]
 8013986:	891b      	ldrh	r3, [r3, #8]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d006      	beq.n	801399a <tcp_receive+0xace>
          recv_data = inseg.p;
 801398c:	4b47      	ldr	r3, [pc, #284]	; (8013aac <tcp_receive+0xbe0>)
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	4a4b      	ldr	r2, [pc, #300]	; (8013ac0 <tcp_receive+0xbf4>)
 8013992:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013994:	4b45      	ldr	r3, [pc, #276]	; (8013aac <tcp_receive+0xbe0>)
 8013996:	2200      	movs	r2, #0
 8013998:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801399a:	4b44      	ldr	r3, [pc, #272]	; (8013aac <tcp_receive+0xbe0>)
 801399c:	68db      	ldr	r3, [r3, #12]
 801399e:	899b      	ldrh	r3, [r3, #12]
 80139a0:	b29b      	uxth	r3, r3
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7fb f8be 	bl	800eb24 <lwip_htons>
 80139a8:	4603      	mov	r3, r0
 80139aa:	f003 0301 	and.w	r3, r3, #1
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	f000 80b4 	beq.w	8013b1c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80139b4:	4b43      	ldr	r3, [pc, #268]	; (8013ac4 <tcp_receive+0xbf8>)
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	f043 0320 	orr.w	r3, r3, #32
 80139bc:	b2da      	uxtb	r2, r3
 80139be:	4b41      	ldr	r3, [pc, #260]	; (8013ac4 <tcp_receive+0xbf8>)
 80139c0:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80139c2:	e0ab      	b.n	8013b1c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139c8:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139ce:	68db      	ldr	r3, [r3, #12]
 80139d0:	685b      	ldr	r3, [r3, #4]
 80139d2:	4a35      	ldr	r2, [pc, #212]	; (8013aa8 <tcp_receive+0xbdc>)
 80139d4:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	891b      	ldrh	r3, [r3, #8]
 80139da:	461c      	mov	r4, r3
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	68db      	ldr	r3, [r3, #12]
 80139e0:	899b      	ldrh	r3, [r3, #12]
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fb f89d 	bl	800eb24 <lwip_htons>
 80139ea:	4603      	mov	r3, r0
 80139ec:	f003 0303 	and.w	r3, r3, #3
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d001      	beq.n	80139f8 <tcp_receive+0xb2c>
 80139f4:	2301      	movs	r3, #1
 80139f6:	e000      	b.n	80139fa <tcp_receive+0xb2e>
 80139f8:	2300      	movs	r3, #0
 80139fa:	191a      	adds	r2, r3, r4
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a00:	441a      	add	r2, r3
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013a0a:	461c      	mov	r4, r3
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	891b      	ldrh	r3, [r3, #8]
 8013a10:	461d      	mov	r5, r3
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	68db      	ldr	r3, [r3, #12]
 8013a16:	899b      	ldrh	r3, [r3, #12]
 8013a18:	b29b      	uxth	r3, r3
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7fb f882 	bl	800eb24 <lwip_htons>
 8013a20:	4603      	mov	r3, r0
 8013a22:	f003 0303 	and.w	r3, r3, #3
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d001      	beq.n	8013a2e <tcp_receive+0xb62>
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	e000      	b.n	8013a30 <tcp_receive+0xb64>
 8013a2e:	2300      	movs	r3, #0
 8013a30:	442b      	add	r3, r5
 8013a32:	429c      	cmp	r4, r3
 8013a34:	d206      	bcs.n	8013a44 <tcp_receive+0xb78>
 8013a36:	4b1e      	ldr	r3, [pc, #120]	; (8013ab0 <tcp_receive+0xbe4>)
 8013a38:	f240 52de 	movw	r2, #1502	; 0x5de
 8013a3c:	4922      	ldr	r1, [pc, #136]	; (8013ac8 <tcp_receive+0xbfc>)
 8013a3e:	481e      	ldr	r0, [pc, #120]	; (8013ab8 <tcp_receive+0xbec>)
 8013a40:	f007 fa06 	bl	801ae50 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	891b      	ldrh	r3, [r3, #8]
 8013a48:	461c      	mov	r4, r3
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	68db      	ldr	r3, [r3, #12]
 8013a4e:	899b      	ldrh	r3, [r3, #12]
 8013a50:	b29b      	uxth	r3, r3
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7fb f866 	bl	800eb24 <lwip_htons>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	f003 0303 	and.w	r3, r3, #3
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d001      	beq.n	8013a66 <tcp_receive+0xb9a>
 8013a62:	2301      	movs	r3, #1
 8013a64:	e000      	b.n	8013a68 <tcp_receive+0xb9c>
 8013a66:	2300      	movs	r3, #0
 8013a68:	1919      	adds	r1, r3, r4
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013a6e:	b28b      	uxth	r3, r1
 8013a70:	1ad3      	subs	r3, r2, r3
 8013a72:	b29a      	uxth	r2, r3
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f7fd f879 	bl	8010b70 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	891b      	ldrh	r3, [r3, #8]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d028      	beq.n	8013ada <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013a88:	4b0d      	ldr	r3, [pc, #52]	; (8013ac0 <tcp_receive+0xbf4>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d01d      	beq.n	8013acc <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8013a90:	4b0b      	ldr	r3, [pc, #44]	; (8013ac0 <tcp_receive+0xbf4>)
 8013a92:	681a      	ldr	r2, [r3, #0]
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	685b      	ldr	r3, [r3, #4]
 8013a98:	4619      	mov	r1, r3
 8013a9a:	4610      	mov	r0, r2
 8013a9c:	f7fc fab6 	bl	801000c <pbuf_cat>
 8013aa0:	e018      	b.n	8013ad4 <tcp_receive+0xc08>
 8013aa2:	bf00      	nop
 8013aa4:	2000c996 	.word	0x2000c996
 8013aa8:	2000c98c 	.word	0x2000c98c
 8013aac:	2000c96c 	.word	0x2000c96c
 8013ab0:	0801ef6c 	.word	0x0801ef6c
 8013ab4:	0801f270 	.word	0x0801f270
 8013ab8:	0801efb0 	.word	0x0801efb0
 8013abc:	0801f2ac 	.word	0x0801f2ac
 8013ac0:	2000c99c 	.word	0x2000c99c
 8013ac4:	2000c999 	.word	0x2000c999
 8013ac8:	0801f2cc 	.word	0x0801f2cc
            } else {
              recv_data = cseg->p;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	685b      	ldr	r3, [r3, #4]
 8013ad0:	4a71      	ldr	r2, [pc, #452]	; (8013c98 <tcp_receive+0xdcc>)
 8013ad2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	68db      	ldr	r3, [r3, #12]
 8013ade:	899b      	ldrh	r3, [r3, #12]
 8013ae0:	b29b      	uxth	r3, r3
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7fb f81e 	bl	800eb24 <lwip_htons>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	f003 0301 	and.w	r3, r3, #1
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d00d      	beq.n	8013b0e <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013af2:	4b6a      	ldr	r3, [pc, #424]	; (8013c9c <tcp_receive+0xdd0>)
 8013af4:	781b      	ldrb	r3, [r3, #0]
 8013af6:	f043 0320 	orr.w	r3, r3, #32
 8013afa:	b2da      	uxtb	r2, r3
 8013afc:	4b67      	ldr	r3, [pc, #412]	; (8013c9c <tcp_receive+0xdd0>)
 8013afe:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	7d1b      	ldrb	r3, [r3, #20]
 8013b04:	2b04      	cmp	r3, #4
 8013b06:	d102      	bne.n	8013b0e <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2207      	movs	r2, #7
 8013b0c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	681a      	ldr	r2, [r3, #0]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8013b16:	68f8      	ldr	r0, [r7, #12]
 8013b18:	f7fd fcb7 	bl	801148a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d008      	beq.n	8013b36 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b28:	68db      	ldr	r3, [r3, #12]
 8013b2a:	685a      	ldr	r2, [r3, #4]
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013b30:	429a      	cmp	r2, r3
 8013b32:	f43f af47 	beq.w	80139c4 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	7e9b      	ldrb	r3, [r3, #26]
 8013b3a:	f003 0301 	and.w	r3, r3, #1
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d00e      	beq.n	8013b60 <tcp_receive+0xc94>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	7e9b      	ldrb	r3, [r3, #26]
 8013b46:	f023 0301 	bic.w	r3, r3, #1
 8013b4a:	b2da      	uxtb	r2, r3
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	769a      	strb	r2, [r3, #26]
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	7e9b      	ldrb	r3, [r3, #26]
 8013b54:	f043 0302 	orr.w	r3, r3, #2
 8013b58:	b2da      	uxtb	r2, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013b5e:	e181      	b.n	8013e64 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	7e9b      	ldrb	r3, [r3, #26]
 8013b64:	f043 0301 	orr.w	r3, r3, #1
 8013b68:	b2da      	uxtb	r2, r3
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013b6e:	e179      	b.n	8013e64 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f001 f8c5 	bl	8014d00 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d106      	bne.n	8013b8c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013b7e:	4848      	ldr	r0, [pc, #288]	; (8013ca0 <tcp_receive+0xdd4>)
 8013b80:	f7fd fc9b 	bl	80114ba <tcp_seg_copy>
 8013b84:	4602      	mov	r2, r0
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8013b8a:	e16b      	b.n	8013e64 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b96:	e150      	b.n	8013e3a <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8013b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	685a      	ldr	r2, [r3, #4]
 8013b9e:	4b41      	ldr	r3, [pc, #260]	; (8013ca4 <tcp_receive+0xdd8>)
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d11d      	bne.n	8013be2 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013ba6:	4b3e      	ldr	r3, [pc, #248]	; (8013ca0 <tcp_receive+0xdd4>)
 8013ba8:	891a      	ldrh	r2, [r3, #8]
 8013baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bac:	891b      	ldrh	r3, [r3, #8]
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	f240 8148 	bls.w	8013e44 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8013bb4:	483a      	ldr	r0, [pc, #232]	; (8013ca0 <tcp_receive+0xdd4>)
 8013bb6:	f7fd fc80 	bl	80114ba <tcp_seg_copy>
 8013bba:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	f000 8142 	beq.w	8013e48 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8013bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d003      	beq.n	8013bd2 <tcp_receive+0xd06>
                    prev->next = cseg;
 8013bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bcc:	68fa      	ldr	r2, [r7, #12]
 8013bce:	601a      	str	r2, [r3, #0]
 8013bd0:	e002      	b.n	8013bd8 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	68fa      	ldr	r2, [r7, #12]
 8013bd6:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013bda:	68f8      	ldr	r0, [r7, #12]
 8013bdc:	f7ff f900 	bl	8012de0 <tcp_oos_insert_segment>
                }
                break;
 8013be0:	e132      	b.n	8013e48 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d117      	bne.n	8013c18 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013be8:	4b2e      	ldr	r3, [pc, #184]	; (8013ca4 <tcp_receive+0xdd8>)
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bee:	68db      	ldr	r3, [r3, #12]
 8013bf0:	685b      	ldr	r3, [r3, #4]
 8013bf2:	1ad3      	subs	r3, r2, r3
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	da57      	bge.n	8013ca8 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8013bf8:	4829      	ldr	r0, [pc, #164]	; (8013ca0 <tcp_receive+0xdd4>)
 8013bfa:	f7fd fc5e 	bl	80114ba <tcp_seg_copy>
 8013bfe:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	f000 8122 	beq.w	8013e4c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	68fa      	ldr	r2, [r7, #12]
 8013c0c:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8013c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c10:	68f8      	ldr	r0, [r7, #12]
 8013c12:	f7ff f8e5 	bl	8012de0 <tcp_oos_insert_segment>
                  }
                  break;
 8013c16:	e119      	b.n	8013e4c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8013c18:	4b22      	ldr	r3, [pc, #136]	; (8013ca4 <tcp_receive+0xdd8>)
 8013c1a:	681a      	ldr	r2, [r3, #0]
 8013c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c1e:	68db      	ldr	r3, [r3, #12]
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	1ad3      	subs	r3, r2, r3
 8013c24:	3b01      	subs	r3, #1
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	db3e      	blt.n	8013ca8 <tcp_receive+0xddc>
 8013c2a:	4b1e      	ldr	r3, [pc, #120]	; (8013ca4 <tcp_receive+0xdd8>)
 8013c2c:	681a      	ldr	r2, [r3, #0]
 8013c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c30:	68db      	ldr	r3, [r3, #12]
 8013c32:	685b      	ldr	r3, [r3, #4]
 8013c34:	1ad3      	subs	r3, r2, r3
 8013c36:	3301      	adds	r3, #1
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	dc35      	bgt.n	8013ca8 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8013c3c:	4818      	ldr	r0, [pc, #96]	; (8013ca0 <tcp_receive+0xdd4>)
 8013c3e:	f7fd fc3c 	bl	80114ba <tcp_seg_copy>
 8013c42:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	f000 8102 	beq.w	8013e50 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c4e:	68db      	ldr	r3, [r3, #12]
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c54:	8912      	ldrh	r2, [r2, #8]
 8013c56:	441a      	add	r2, r3
 8013c58:	4b12      	ldr	r3, [pc, #72]	; (8013ca4 <tcp_receive+0xdd8>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	1ad3      	subs	r3, r2, r3
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	dd12      	ble.n	8013c88 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013c62:	4b10      	ldr	r3, [pc, #64]	; (8013ca4 <tcp_receive+0xdd8>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	b29a      	uxth	r2, r3
 8013c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6a:	68db      	ldr	r3, [r3, #12]
 8013c6c:	685b      	ldr	r3, [r3, #4]
 8013c6e:	b29b      	uxth	r3, r3
 8013c70:	1ad3      	subs	r3, r2, r3
 8013c72:	b29a      	uxth	r2, r3
 8013c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c76:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c7a:	685a      	ldr	r2, [r3, #4]
 8013c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c7e:	891b      	ldrh	r3, [r3, #8]
 8013c80:	4619      	mov	r1, r3
 8013c82:	4610      	mov	r0, r2
 8013c84:	f7fb ff74 	bl	800fb70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c8a:	68fa      	ldr	r2, [r7, #12]
 8013c8c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013c8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013c90:	68f8      	ldr	r0, [r7, #12]
 8013c92:	f7ff f8a5 	bl	8012de0 <tcp_oos_insert_segment>
                  }
                  break;
 8013c96:	e0db      	b.n	8013e50 <tcp_receive+0xf84>
 8013c98:	2000c99c 	.word	0x2000c99c
 8013c9c:	2000c999 	.word	0x2000c999
 8013ca0:	2000c96c 	.word	0x2000c96c
 8013ca4:	2000c98c 	.word	0x2000c98c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	f040 80bf 	bne.w	8013e30 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013cb2:	4b7c      	ldr	r3, [pc, #496]	; (8013ea4 <tcp_receive+0xfd8>)
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb8:	68db      	ldr	r3, [r3, #12]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	f340 80b6 	ble.w	8013e30 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc6:	68db      	ldr	r3, [r3, #12]
 8013cc8:	899b      	ldrh	r3, [r3, #12]
 8013cca:	b29b      	uxth	r3, r3
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7fa ff29 	bl	800eb24 <lwip_htons>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	f003 0301 	and.w	r3, r3, #1
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	f040 80bb 	bne.w	8013e54 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013cde:	4872      	ldr	r0, [pc, #456]	; (8013ea8 <tcp_receive+0xfdc>)
 8013ce0:	f7fd fbeb 	bl	80114ba <tcp_seg_copy>
 8013ce4:	4602      	mov	r2, r0
 8013ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce8:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	f000 80b2 	beq.w	8013e58 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cf6:	68db      	ldr	r3, [r3, #12]
 8013cf8:	685b      	ldr	r3, [r3, #4]
 8013cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cfc:	8912      	ldrh	r2, [r2, #8]
 8013cfe:	441a      	add	r2, r3
 8013d00:	4b68      	ldr	r3, [pc, #416]	; (8013ea4 <tcp_receive+0xfd8>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	1ad3      	subs	r3, r2, r3
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	dd12      	ble.n	8013d30 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013d0a:	4b66      	ldr	r3, [pc, #408]	; (8013ea4 <tcp_receive+0xfd8>)
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	b29a      	uxth	r2, r3
 8013d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d12:	68db      	ldr	r3, [r3, #12]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	b29b      	uxth	r3, r3
 8013d18:	1ad3      	subs	r3, r2, r3
 8013d1a:	b29a      	uxth	r2, r3
 8013d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d22:	685a      	ldr	r2, [r3, #4]
 8013d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d26:	891b      	ldrh	r3, [r3, #8]
 8013d28:	4619      	mov	r1, r3
 8013d2a:	4610      	mov	r0, r2
 8013d2c:	f7fb ff20 	bl	800fb70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013d30:	4b5e      	ldr	r3, [pc, #376]	; (8013eac <tcp_receive+0xfe0>)
 8013d32:	881b      	ldrh	r3, [r3, #0]
 8013d34:	461a      	mov	r2, r3
 8013d36:	4b5b      	ldr	r3, [pc, #364]	; (8013ea4 <tcp_receive+0xfd8>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	441a      	add	r2, r3
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d40:	6879      	ldr	r1, [r7, #4]
 8013d42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013d44:	440b      	add	r3, r1
 8013d46:	1ad3      	subs	r3, r2, r3
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	f340 8085 	ble.w	8013e58 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	68db      	ldr	r3, [r3, #12]
 8013d54:	899b      	ldrh	r3, [r3, #12]
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f7fa fee3 	bl	800eb24 <lwip_htons>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	f003 0301 	and.w	r3, r3, #1
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d01e      	beq.n	8013da6 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	68db      	ldr	r3, [r3, #12]
 8013d6e:	899b      	ldrh	r3, [r3, #12]
 8013d70:	b29b      	uxth	r3, r3
 8013d72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013d76:	b29c      	uxth	r4, r3
 8013d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	68db      	ldr	r3, [r3, #12]
 8013d7e:	899b      	ldrh	r3, [r3, #12]
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7fa fece 	bl	800eb24 <lwip_htons>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013d8e:	b29b      	uxth	r3, r3
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7fa fec7 	bl	800eb24 <lwip_htons>
 8013d96:	4603      	mov	r3, r0
 8013d98:	461a      	mov	r2, r3
 8013d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	4322      	orrs	r2, r4
 8013da2:	b292      	uxth	r2, r2
 8013da4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013daa:	b29a      	uxth	r2, r3
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013db0:	4413      	add	r3, r2
 8013db2:	b299      	uxth	r1, r3
 8013db4:	4b3b      	ldr	r3, [pc, #236]	; (8013ea4 <tcp_receive+0xfd8>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	b29a      	uxth	r2, r3
 8013dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	1a8a      	subs	r2, r1, r2
 8013dc0:	b292      	uxth	r2, r2
 8013dc2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	685a      	ldr	r2, [r3, #4]
 8013dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	891b      	ldrh	r3, [r3, #8]
 8013dd0:	4619      	mov	r1, r3
 8013dd2:	4610      	mov	r0, r2
 8013dd4:	f7fb fecc 	bl	800fb70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	891c      	ldrh	r4, [r3, #8]
 8013dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	68db      	ldr	r3, [r3, #12]
 8013de4:	899b      	ldrh	r3, [r3, #12]
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fa fe9b 	bl	800eb24 <lwip_htons>
 8013dee:	4603      	mov	r3, r0
 8013df0:	f003 0303 	and.w	r3, r3, #3
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d001      	beq.n	8013dfc <tcp_receive+0xf30>
 8013df8:	2301      	movs	r3, #1
 8013dfa:	e000      	b.n	8013dfe <tcp_receive+0xf32>
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	4423      	add	r3, r4
 8013e00:	b29a      	uxth	r2, r3
 8013e02:	4b2a      	ldr	r3, [pc, #168]	; (8013eac <tcp_receive+0xfe0>)
 8013e04:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013e06:	4b29      	ldr	r3, [pc, #164]	; (8013eac <tcp_receive+0xfe0>)
 8013e08:	881b      	ldrh	r3, [r3, #0]
 8013e0a:	461a      	mov	r2, r3
 8013e0c:	4b25      	ldr	r3, [pc, #148]	; (8013ea4 <tcp_receive+0xfd8>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	441a      	add	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e16:	6879      	ldr	r1, [r7, #4]
 8013e18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013e1a:	440b      	add	r3, r1
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d01b      	beq.n	8013e58 <tcp_receive+0xf8c>
 8013e20:	4b23      	ldr	r3, [pc, #140]	; (8013eb0 <tcp_receive+0xfe4>)
 8013e22:	f240 627b 	movw	r2, #1659	; 0x67b
 8013e26:	4923      	ldr	r1, [pc, #140]	; (8013eb4 <tcp_receive+0xfe8>)
 8013e28:	4823      	ldr	r0, [pc, #140]	; (8013eb8 <tcp_receive+0xfec>)
 8013e2a:	f007 f811 	bl	801ae50 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013e2e:	e013      	b.n	8013e58 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8013e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e32:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	f47f aeab 	bne.w	8013b98 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8013e42:	e00f      	b.n	8013e64 <tcp_receive+0xf98>
                break;
 8013e44:	bf00      	nop
 8013e46:	e00d      	b.n	8013e64 <tcp_receive+0xf98>
                break;
 8013e48:	bf00      	nop
 8013e4a:	e00b      	b.n	8013e64 <tcp_receive+0xf98>
                  break;
 8013e4c:	bf00      	nop
 8013e4e:	e009      	b.n	8013e64 <tcp_receive+0xf98>
                  break;
 8013e50:	bf00      	nop
 8013e52:	e007      	b.n	8013e64 <tcp_receive+0xf98>
                  break;
 8013e54:	bf00      	nop
 8013e56:	e005      	b.n	8013e64 <tcp_receive+0xf98>
                break;
 8013e58:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8013e5a:	e003      	b.n	8013e64 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f000 ff4f 	bl	8014d00 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013e62:	e01a      	b.n	8013e9a <tcp_receive+0xfce>
 8013e64:	e019      	b.n	8013e9a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013e66:	4b0f      	ldr	r3, [pc, #60]	; (8013ea4 <tcp_receive+0xfd8>)
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e6e:	1ad3      	subs	r3, r2, r3
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	db0a      	blt.n	8013e8a <tcp_receive+0xfbe>
 8013e74:	4b0b      	ldr	r3, [pc, #44]	; (8013ea4 <tcp_receive+0xfd8>)
 8013e76:	681a      	ldr	r2, [r3, #0]
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e7c:	6879      	ldr	r1, [r7, #4]
 8013e7e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013e80:	440b      	add	r3, r1
 8013e82:	1ad3      	subs	r3, r2, r3
 8013e84:	3301      	adds	r3, #1
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	dd07      	ble.n	8013e9a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	7e9b      	ldrb	r3, [r3, #26]
 8013e8e:	f043 0302 	orr.w	r3, r3, #2
 8013e92:	b2da      	uxtb	r2, r3
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8013e98:	e7ff      	b.n	8013e9a <tcp_receive+0xfce>
 8013e9a:	bf00      	nop
 8013e9c:	3734      	adds	r7, #52	; 0x34
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ea2:	bf00      	nop
 8013ea4:	2000c98c 	.word	0x2000c98c
 8013ea8:	2000c96c 	.word	0x2000c96c
 8013eac:	2000c996 	.word	0x2000c996
 8013eb0:	0801ef6c 	.word	0x0801ef6c
 8013eb4:	0801f238 	.word	0x0801f238
 8013eb8:	0801efb0 	.word	0x0801efb0

08013ebc <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8013ebc:	b480      	push	{r7}
 8013ebe:	b083      	sub	sp, #12
 8013ec0:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8013ec2:	4b18      	ldr	r3, [pc, #96]	; (8013f24 <tcp_getoptbyte+0x68>)
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d005      	beq.n	8013ed6 <tcp_getoptbyte+0x1a>
 8013eca:	4b17      	ldr	r3, [pc, #92]	; (8013f28 <tcp_getoptbyte+0x6c>)
 8013ecc:	881a      	ldrh	r2, [r3, #0]
 8013ece:	4b17      	ldr	r3, [pc, #92]	; (8013f2c <tcp_getoptbyte+0x70>)
 8013ed0:	881b      	ldrh	r3, [r3, #0]
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d20e      	bcs.n	8013ef4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8013ed6:	4b16      	ldr	r3, [pc, #88]	; (8013f30 <tcp_getoptbyte+0x74>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	3314      	adds	r3, #20
 8013edc:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8013ede:	4b12      	ldr	r3, [pc, #72]	; (8013f28 <tcp_getoptbyte+0x6c>)
 8013ee0:	881b      	ldrh	r3, [r3, #0]
 8013ee2:	1c5a      	adds	r2, r3, #1
 8013ee4:	b291      	uxth	r1, r2
 8013ee6:	4a10      	ldr	r2, [pc, #64]	; (8013f28 <tcp_getoptbyte+0x6c>)
 8013ee8:	8011      	strh	r1, [r2, #0]
 8013eea:	461a      	mov	r2, r3
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	4413      	add	r3, r2
 8013ef0:	781b      	ldrb	r3, [r3, #0]
 8013ef2:	e010      	b.n	8013f16 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8013ef4:	4b0c      	ldr	r3, [pc, #48]	; (8013f28 <tcp_getoptbyte+0x6c>)
 8013ef6:	881b      	ldrh	r3, [r3, #0]
 8013ef8:	1c5a      	adds	r2, r3, #1
 8013efa:	b291      	uxth	r1, r2
 8013efc:	4a0a      	ldr	r2, [pc, #40]	; (8013f28 <tcp_getoptbyte+0x6c>)
 8013efe:	8011      	strh	r1, [r2, #0]
 8013f00:	b2da      	uxtb	r2, r3
 8013f02:	4b0a      	ldr	r3, [pc, #40]	; (8013f2c <tcp_getoptbyte+0x70>)
 8013f04:	881b      	ldrh	r3, [r3, #0]
 8013f06:	b2db      	uxtb	r3, r3
 8013f08:	1ad3      	subs	r3, r2, r3
 8013f0a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8013f0c:	4b05      	ldr	r3, [pc, #20]	; (8013f24 <tcp_getoptbyte+0x68>)
 8013f0e:	681a      	ldr	r2, [r3, #0]
 8013f10:	79fb      	ldrb	r3, [r7, #7]
 8013f12:	4413      	add	r3, r2
 8013f14:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	370c      	adds	r7, #12
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f20:	4770      	bx	lr
 8013f22:	bf00      	nop
 8013f24:	2000c984 	.word	0x2000c984
 8013f28:	2000c988 	.word	0x2000c988
 8013f2c:	2000c982 	.word	0x2000c982
 8013f30:	2000c97c 	.word	0x2000c97c

08013f34 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b084      	sub	sp, #16
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013f3c:	4b2d      	ldr	r3, [pc, #180]	; (8013ff4 <tcp_parseopt+0xc0>)
 8013f3e:	881b      	ldrh	r3, [r3, #0]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d053      	beq.n	8013fec <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013f44:	4b2c      	ldr	r3, [pc, #176]	; (8013ff8 <tcp_parseopt+0xc4>)
 8013f46:	2200      	movs	r2, #0
 8013f48:	801a      	strh	r2, [r3, #0]
 8013f4a:	e043      	b.n	8013fd4 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8013f4c:	f7ff ffb6 	bl	8013ebc <tcp_getoptbyte>
 8013f50:	4603      	mov	r3, r0
 8013f52:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013f54:	7bfb      	ldrb	r3, [r7, #15]
 8013f56:	2b01      	cmp	r3, #1
 8013f58:	d03c      	beq.n	8013fd4 <tcp_parseopt+0xa0>
 8013f5a:	2b02      	cmp	r3, #2
 8013f5c:	d002      	beq.n	8013f64 <tcp_parseopt+0x30>
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d03f      	beq.n	8013fe2 <tcp_parseopt+0xae>
 8013f62:	e026      	b.n	8013fb2 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013f64:	f7ff ffaa 	bl	8013ebc <tcp_getoptbyte>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	2b04      	cmp	r3, #4
 8013f6c:	d13b      	bne.n	8013fe6 <tcp_parseopt+0xb2>
 8013f6e:	4b22      	ldr	r3, [pc, #136]	; (8013ff8 <tcp_parseopt+0xc4>)
 8013f70:	881b      	ldrh	r3, [r3, #0]
 8013f72:	3302      	adds	r3, #2
 8013f74:	4a1f      	ldr	r2, [pc, #124]	; (8013ff4 <tcp_parseopt+0xc0>)
 8013f76:	8812      	ldrh	r2, [r2, #0]
 8013f78:	4293      	cmp	r3, r2
 8013f7a:	dc34      	bgt.n	8013fe6 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8013f7c:	f7ff ff9e 	bl	8013ebc <tcp_getoptbyte>
 8013f80:	4603      	mov	r3, r0
 8013f82:	b29b      	uxth	r3, r3
 8013f84:	021b      	lsls	r3, r3, #8
 8013f86:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8013f88:	f7ff ff98 	bl	8013ebc <tcp_getoptbyte>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	b29a      	uxth	r2, r3
 8013f90:	89bb      	ldrh	r3, [r7, #12]
 8013f92:	4313      	orrs	r3, r2
 8013f94:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013f96:	89bb      	ldrh	r3, [r7, #12]
 8013f98:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013f9c:	d804      	bhi.n	8013fa8 <tcp_parseopt+0x74>
 8013f9e:	89bb      	ldrh	r3, [r7, #12]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d001      	beq.n	8013fa8 <tcp_parseopt+0x74>
 8013fa4:	89ba      	ldrh	r2, [r7, #12]
 8013fa6:	e001      	b.n	8013fac <tcp_parseopt+0x78>
 8013fa8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8013fb0:	e010      	b.n	8013fd4 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8013fb2:	f7ff ff83 	bl	8013ebc <tcp_getoptbyte>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8013fba:	7afb      	ldrb	r3, [r7, #11]
 8013fbc:	2b01      	cmp	r3, #1
 8013fbe:	d914      	bls.n	8013fea <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8013fc0:	7afb      	ldrb	r3, [r7, #11]
 8013fc2:	b29a      	uxth	r2, r3
 8013fc4:	4b0c      	ldr	r3, [pc, #48]	; (8013ff8 <tcp_parseopt+0xc4>)
 8013fc6:	881b      	ldrh	r3, [r3, #0]
 8013fc8:	4413      	add	r3, r2
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	3b02      	subs	r3, #2
 8013fce:	b29a      	uxth	r2, r3
 8013fd0:	4b09      	ldr	r3, [pc, #36]	; (8013ff8 <tcp_parseopt+0xc4>)
 8013fd2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013fd4:	4b08      	ldr	r3, [pc, #32]	; (8013ff8 <tcp_parseopt+0xc4>)
 8013fd6:	881a      	ldrh	r2, [r3, #0]
 8013fd8:	4b06      	ldr	r3, [pc, #24]	; (8013ff4 <tcp_parseopt+0xc0>)
 8013fda:	881b      	ldrh	r3, [r3, #0]
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d3b5      	bcc.n	8013f4c <tcp_parseopt+0x18>
 8013fe0:	e004      	b.n	8013fec <tcp_parseopt+0xb8>
        return;
 8013fe2:	bf00      	nop
 8013fe4:	e002      	b.n	8013fec <tcp_parseopt+0xb8>
          return;
 8013fe6:	bf00      	nop
 8013fe8:	e000      	b.n	8013fec <tcp_parseopt+0xb8>
          return;
 8013fea:	bf00      	nop
      }
    }
  }
}
 8013fec:	3710      	adds	r7, #16
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bd80      	pop	{r7, pc}
 8013ff2:	bf00      	nop
 8013ff4:	2000c980 	.word	0x2000c980
 8013ff8:	2000c988 	.word	0x2000c988

08013ffc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013ffc:	b480      	push	{r7}
 8013ffe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014000:	4b05      	ldr	r3, [pc, #20]	; (8014018 <tcp_trigger_input_pcb_close+0x1c>)
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	f043 0310 	orr.w	r3, r3, #16
 8014008:	b2da      	uxtb	r2, r3
 801400a:	4b03      	ldr	r3, [pc, #12]	; (8014018 <tcp_trigger_input_pcb_close+0x1c>)
 801400c:	701a      	strb	r2, [r3, #0]
}
 801400e:	bf00      	nop
 8014010:	46bd      	mov	sp, r7
 8014012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014016:	4770      	bx	lr
 8014018:	2000c999 	.word	0x2000c999

0801401c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b086      	sub	sp, #24
 8014020:	af00      	add	r7, sp, #0
 8014022:	60f8      	str	r0, [r7, #12]
 8014024:	607b      	str	r3, [r7, #4]
 8014026:	460b      	mov	r3, r1
 8014028:	817b      	strh	r3, [r7, #10]
 801402a:	4613      	mov	r3, r2
 801402c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801402e:	897a      	ldrh	r2, [r7, #10]
 8014030:	893b      	ldrh	r3, [r7, #8]
 8014032:	4413      	add	r3, r2
 8014034:	b29b      	uxth	r3, r3
 8014036:	3314      	adds	r3, #20
 8014038:	b29b      	uxth	r3, r3
 801403a:	2200      	movs	r2, #0
 801403c:	4619      	mov	r1, r3
 801403e:	2001      	movs	r0, #1
 8014040:	f7fb fb98 	bl	800f774 <pbuf_alloc>
 8014044:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d057      	beq.n	80140fc <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	895b      	ldrh	r3, [r3, #10]
 8014050:	461a      	mov	r2, r3
 8014052:	897b      	ldrh	r3, [r7, #10]
 8014054:	3314      	adds	r3, #20
 8014056:	429a      	cmp	r2, r3
 8014058:	da05      	bge.n	8014066 <tcp_output_alloc_header+0x4a>
 801405a:	4b2b      	ldr	r3, [pc, #172]	; (8014108 <tcp_output_alloc_header+0xec>)
 801405c:	2273      	movs	r2, #115	; 0x73
 801405e:	492b      	ldr	r1, [pc, #172]	; (801410c <tcp_output_alloc_header+0xf0>)
 8014060:	482b      	ldr	r0, [pc, #172]	; (8014110 <tcp_output_alloc_header+0xf4>)
 8014062:	f006 fef5 	bl	801ae50 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	685b      	ldr	r3, [r3, #4]
 801406a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	8adb      	ldrh	r3, [r3, #22]
 8014070:	4618      	mov	r0, r3
 8014072:	f7fa fd57 	bl	800eb24 <lwip_htons>
 8014076:	4603      	mov	r3, r0
 8014078:	461a      	mov	r2, r3
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	8b1b      	ldrh	r3, [r3, #24]
 8014082:	4618      	mov	r0, r3
 8014084:	f7fa fd4e 	bl	800eb24 <lwip_htons>
 8014088:	4603      	mov	r3, r0
 801408a:	461a      	mov	r2, r3
 801408c:	693b      	ldr	r3, [r7, #16]
 801408e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801409a:	4618      	mov	r0, r3
 801409c:	f7fa fd50 	bl	800eb40 <lwip_htonl>
 80140a0:	4602      	mov	r2, r0
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80140a6:	897b      	ldrh	r3, [r7, #10]
 80140a8:	089b      	lsrs	r3, r3, #2
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	3305      	adds	r3, #5
 80140ae:	b29b      	uxth	r3, r3
 80140b0:	031b      	lsls	r3, r3, #12
 80140b2:	b29b      	uxth	r3, r3
 80140b4:	f043 0310 	orr.w	r3, r3, #16
 80140b8:	b29b      	uxth	r3, r3
 80140ba:	4618      	mov	r0, r3
 80140bc:	f7fa fd32 	bl	800eb24 <lwip_htons>
 80140c0:	4603      	mov	r3, r0
 80140c2:	461a      	mov	r2, r3
 80140c4:	693b      	ldr	r3, [r7, #16]
 80140c6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80140cc:	4618      	mov	r0, r3
 80140ce:	f7fa fd29 	bl	800eb24 <lwip_htons>
 80140d2:	4603      	mov	r3, r0
 80140d4:	461a      	mov	r2, r3
 80140d6:	693b      	ldr	r3, [r7, #16]
 80140d8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80140da:	693b      	ldr	r3, [r7, #16]
 80140dc:	2200      	movs	r2, #0
 80140de:	741a      	strb	r2, [r3, #16]
 80140e0:	2200      	movs	r2, #0
 80140e2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80140e4:	693b      	ldr	r3, [r7, #16]
 80140e6:	2200      	movs	r2, #0
 80140e8:	749a      	strb	r2, [r3, #18]
 80140ea:	2200      	movs	r2, #0
 80140ec:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140f2:	68fa      	ldr	r2, [r7, #12]
 80140f4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80140f6:	441a      	add	r2, r3
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80140fc:	697b      	ldr	r3, [r7, #20]
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3718      	adds	r7, #24
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}
 8014106:	bf00      	nop
 8014108:	0801f2f4 	.word	0x0801f2f4
 801410c:	0801f328 	.word	0x0801f328
 8014110:	0801f358 	.word	0x0801f358

08014114 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014114:	b590      	push	{r4, r7, lr}
 8014116:	b085      	sub	sp, #20
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014120:	2b00      	cmp	r3, #0
 8014122:	d02d      	beq.n	8014180 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014128:	60fb      	str	r3, [r7, #12]
 801412a:	e002      	b.n	8014132 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d1f8      	bne.n	801412c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	68db      	ldr	r3, [r3, #12]
 801413e:	899b      	ldrh	r3, [r3, #12]
 8014140:	b29b      	uxth	r3, r3
 8014142:	4618      	mov	r0, r3
 8014144:	f7fa fcee 	bl	800eb24 <lwip_htons>
 8014148:	4603      	mov	r3, r0
 801414a:	f003 0307 	and.w	r3, r3, #7
 801414e:	2b00      	cmp	r3, #0
 8014150:	d116      	bne.n	8014180 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	68db      	ldr	r3, [r3, #12]
 8014156:	899b      	ldrh	r3, [r3, #12]
 8014158:	b29c      	uxth	r4, r3
 801415a:	2001      	movs	r0, #1
 801415c:	f7fa fce2 	bl	800eb24 <lwip_htons>
 8014160:	4603      	mov	r3, r0
 8014162:	461a      	mov	r2, r3
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	68db      	ldr	r3, [r3, #12]
 8014168:	4322      	orrs	r2, r4
 801416a:	b292      	uxth	r2, r2
 801416c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	7e9b      	ldrb	r3, [r3, #26]
 8014172:	f043 0320 	orr.w	r3, r3, #32
 8014176:	b2da      	uxtb	r2, r3
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 801417c:	2300      	movs	r3, #0
 801417e:	e004      	b.n	801418a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014180:	2101      	movs	r1, #1
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f000 fcc0 	bl	8014b08 <tcp_enqueue_flags>
 8014188:	4603      	mov	r3, r0
}
 801418a:	4618      	mov	r0, r3
 801418c:	3714      	adds	r7, #20
 801418e:	46bd      	mov	sp, r7
 8014190:	bd90      	pop	{r4, r7, pc}
	...

08014194 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8014194:	b590      	push	{r4, r7, lr}
 8014196:	b087      	sub	sp, #28
 8014198:	af00      	add	r7, sp, #0
 801419a:	60f8      	str	r0, [r7, #12]
 801419c:	60b9      	str	r1, [r7, #8]
 801419e:	603b      	str	r3, [r7, #0]
 80141a0:	4613      	mov	r3, r2
 80141a2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80141a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80141a8:	009b      	lsls	r3, r3, #2
 80141aa:	b2db      	uxtb	r3, r3
 80141ac:	f003 0304 	and.w	r3, r3, #4
 80141b0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80141b2:	2003      	movs	r0, #3
 80141b4:	f7fb f8a4 	bl	800f300 <memp_malloc>
 80141b8:	6138      	str	r0, [r7, #16]
 80141ba:	693b      	ldr	r3, [r7, #16]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d104      	bne.n	80141ca <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80141c0:	68b8      	ldr	r0, [r7, #8]
 80141c2:	f7fb fe49 	bl	800fe58 <pbuf_free>
    return NULL;
 80141c6:	2300      	movs	r3, #0
 80141c8:	e061      	b.n	801428e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 80141ca:	693b      	ldr	r3, [r7, #16]
 80141cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80141d0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80141d2:	693b      	ldr	r3, [r7, #16]
 80141d4:	2200      	movs	r2, #0
 80141d6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	68ba      	ldr	r2, [r7, #8]
 80141dc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80141de:	68bb      	ldr	r3, [r7, #8]
 80141e0:	891a      	ldrh	r2, [r3, #8]
 80141e2:	7dfb      	ldrb	r3, [r7, #23]
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d205      	bcs.n	80141f6 <tcp_create_segment+0x62>
 80141ea:	4b2b      	ldr	r3, [pc, #172]	; (8014298 <tcp_create_segment+0x104>)
 80141ec:	22ba      	movs	r2, #186	; 0xba
 80141ee:	492b      	ldr	r1, [pc, #172]	; (801429c <tcp_create_segment+0x108>)
 80141f0:	482b      	ldr	r0, [pc, #172]	; (80142a0 <tcp_create_segment+0x10c>)
 80141f2:	f006 fe2d 	bl	801ae50 <iprintf>
  seg->len = p->tot_len - optlen;
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	891a      	ldrh	r2, [r3, #8]
 80141fa:	7dfb      	ldrb	r3, [r7, #23]
 80141fc:	b29b      	uxth	r3, r3
 80141fe:	1ad3      	subs	r3, r2, r3
 8014200:	b29a      	uxth	r2, r3
 8014202:	693b      	ldr	r3, [r7, #16]
 8014204:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8014206:	2114      	movs	r1, #20
 8014208:	68b8      	ldr	r0, [r7, #8]
 801420a:	f7fb fe01 	bl	800fe10 <pbuf_header>
 801420e:	4603      	mov	r3, r0
 8014210:	2b00      	cmp	r3, #0
 8014212:	d004      	beq.n	801421e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014214:	6938      	ldr	r0, [r7, #16]
 8014216:	f7fd f938 	bl	801148a <tcp_seg_free>
    return NULL;
 801421a:	2300      	movs	r3, #0
 801421c:	e037      	b.n	801428e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801421e:	693b      	ldr	r3, [r7, #16]
 8014220:	685b      	ldr	r3, [r3, #4]
 8014222:	685a      	ldr	r2, [r3, #4]
 8014224:	693b      	ldr	r3, [r7, #16]
 8014226:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	8ada      	ldrh	r2, [r3, #22]
 801422c:	693b      	ldr	r3, [r7, #16]
 801422e:	68dc      	ldr	r4, [r3, #12]
 8014230:	4610      	mov	r0, r2
 8014232:	f7fa fc77 	bl	800eb24 <lwip_htons>
 8014236:	4603      	mov	r3, r0
 8014238:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	8b1a      	ldrh	r2, [r3, #24]
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	68dc      	ldr	r4, [r3, #12]
 8014242:	4610      	mov	r0, r2
 8014244:	f7fa fc6e 	bl	800eb24 <lwip_htons>
 8014248:	4603      	mov	r3, r0
 801424a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801424c:	693b      	ldr	r3, [r7, #16]
 801424e:	68dc      	ldr	r4, [r3, #12]
 8014250:	6838      	ldr	r0, [r7, #0]
 8014252:	f7fa fc75 	bl	800eb40 <lwip_htonl>
 8014256:	4603      	mov	r3, r0
 8014258:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 801425a:	7dfb      	ldrb	r3, [r7, #23]
 801425c:	089b      	lsrs	r3, r3, #2
 801425e:	b2db      	uxtb	r3, r3
 8014260:	b29b      	uxth	r3, r3
 8014262:	3305      	adds	r3, #5
 8014264:	b29b      	uxth	r3, r3
 8014266:	031b      	lsls	r3, r3, #12
 8014268:	b29a      	uxth	r2, r3
 801426a:	79fb      	ldrb	r3, [r7, #7]
 801426c:	b29b      	uxth	r3, r3
 801426e:	4313      	orrs	r3, r2
 8014270:	b29a      	uxth	r2, r3
 8014272:	693b      	ldr	r3, [r7, #16]
 8014274:	68dc      	ldr	r4, [r3, #12]
 8014276:	4610      	mov	r0, r2
 8014278:	f7fa fc54 	bl	800eb24 <lwip_htons>
 801427c:	4603      	mov	r3, r0
 801427e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014280:	693b      	ldr	r3, [r7, #16]
 8014282:	68db      	ldr	r3, [r3, #12]
 8014284:	2200      	movs	r2, #0
 8014286:	749a      	strb	r2, [r3, #18]
 8014288:	2200      	movs	r2, #0
 801428a:	74da      	strb	r2, [r3, #19]
  return seg;
 801428c:	693b      	ldr	r3, [r7, #16]
}
 801428e:	4618      	mov	r0, r3
 8014290:	371c      	adds	r7, #28
 8014292:	46bd      	mov	sp, r7
 8014294:	bd90      	pop	{r4, r7, pc}
 8014296:	bf00      	nop
 8014298:	0801f2f4 	.word	0x0801f2f4
 801429c:	0801f380 	.word	0x0801f380
 80142a0:	0801f358 	.word	0x0801f358

080142a4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b086      	sub	sp, #24
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	607b      	str	r3, [r7, #4]
 80142ac:	4603      	mov	r3, r0
 80142ae:	73fb      	strb	r3, [r7, #15]
 80142b0:	460b      	mov	r3, r1
 80142b2:	81bb      	strh	r3, [r7, #12]
 80142b4:	4613      	mov	r3, r2
 80142b6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80142b8:	89bb      	ldrh	r3, [r7, #12]
 80142ba:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80142bc:	89ba      	ldrh	r2, [r7, #12]
 80142be:	897b      	ldrh	r3, [r7, #10]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d221      	bcs.n	8014308 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80142c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80142c8:	f003 0302 	and.w	r3, r3, #2
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d111      	bne.n	80142f4 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 80142d0:	6a3b      	ldr	r3, [r7, #32]
 80142d2:	7e9b      	ldrb	r3, [r3, #26]
 80142d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d115      	bne.n	8014308 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 80142dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d007      	beq.n	80142f4 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 80142e4:	6a3b      	ldr	r3, [r7, #32]
 80142e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d103      	bne.n	80142f4 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 80142ec:	6a3b      	ldr	r3, [r7, #32]
 80142ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d009      	beq.n	8014308 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80142f4:	89bb      	ldrh	r3, [r7, #12]
 80142f6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80142fa:	f023 0203 	bic.w	r2, r3, #3
 80142fe:	897b      	ldrh	r3, [r7, #10]
 8014300:	4293      	cmp	r3, r2
 8014302:	bf28      	it	cs
 8014304:	4613      	movcs	r3, r2
 8014306:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014308:	8af9      	ldrh	r1, [r7, #22]
 801430a:	7bfb      	ldrb	r3, [r7, #15]
 801430c:	2200      	movs	r2, #0
 801430e:	4618      	mov	r0, r3
 8014310:	f7fb fa30 	bl	800f774 <pbuf_alloc>
 8014314:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014316:	693b      	ldr	r3, [r7, #16]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d101      	bne.n	8014320 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 801431c:	2300      	movs	r3, #0
 801431e:	e019      	b.n	8014354 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	681b      	ldr	r3, [r3, #0]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d006      	beq.n	8014336 <tcp_pbuf_prealloc+0x92>
 8014328:	4b0c      	ldr	r3, [pc, #48]	; (801435c <tcp_pbuf_prealloc+0xb8>)
 801432a:	f44f 7288 	mov.w	r2, #272	; 0x110
 801432e:	490c      	ldr	r1, [pc, #48]	; (8014360 <tcp_pbuf_prealloc+0xbc>)
 8014330:	480c      	ldr	r0, [pc, #48]	; (8014364 <tcp_pbuf_prealloc+0xc0>)
 8014332:	f006 fd8d 	bl	801ae50 <iprintf>
  *oversize = p->len - length;
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	895a      	ldrh	r2, [r3, #10]
 801433a:	89bb      	ldrh	r3, [r7, #12]
 801433c:	1ad3      	subs	r3, r2, r3
 801433e:	b29a      	uxth	r2, r3
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014344:	693b      	ldr	r3, [r7, #16]
 8014346:	89ba      	ldrh	r2, [r7, #12]
 8014348:	811a      	strh	r2, [r3, #8]
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	891a      	ldrh	r2, [r3, #8]
 801434e:	693b      	ldr	r3, [r7, #16]
 8014350:	815a      	strh	r2, [r3, #10]
  return p;
 8014352:	693b      	ldr	r3, [r7, #16]
}
 8014354:	4618      	mov	r0, r3
 8014356:	3718      	adds	r7, #24
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}
 801435c:	0801f2f4 	.word	0x0801f2f4
 8014360:	0801f398 	.word	0x0801f398
 8014364:	0801f358 	.word	0x0801f358

08014368 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b082      	sub	sp, #8
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
 8014370:	460b      	mov	r3, r1
 8014372:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	7d1b      	ldrb	r3, [r3, #20]
 8014378:	2b04      	cmp	r3, #4
 801437a:	d00e      	beq.n	801439a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014380:	2b07      	cmp	r3, #7
 8014382:	d00a      	beq.n	801439a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014388:	2b02      	cmp	r3, #2
 801438a:	d006      	beq.n	801439a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014390:	2b03      	cmp	r3, #3
 8014392:	d002      	beq.n	801439a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014394:	f06f 030a 	mvn.w	r3, #10
 8014398:	e04f      	b.n	801443a <tcp_write_checks+0xd2>
  } else if (len == 0) {
 801439a:	887b      	ldrh	r3, [r7, #2]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d101      	bne.n	80143a4 <tcp_write_checks+0x3c>
    return ERR_OK;
 80143a0:	2300      	movs	r3, #0
 80143a2:	e04a      	b.n	801443a <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80143aa:	887a      	ldrh	r2, [r7, #2]
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d909      	bls.n	80143c4 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	7e9b      	ldrb	r3, [r3, #26]
 80143b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80143b8:	b2da      	uxtb	r2, r3
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80143be:	f04f 33ff 	mov.w	r3, #4294967295
 80143c2:	e03a      	b.n	801443a <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80143ca:	2b08      	cmp	r3, #8
 80143cc:	d806      	bhi.n	80143dc <tcp_write_checks+0x74>
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80143d4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80143d8:	4293      	cmp	r3, r2
 80143da:	d909      	bls.n	80143f0 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	7e9b      	ldrb	r3, [r3, #26]
 80143e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80143e4:	b2da      	uxtb	r2, r3
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80143ea:	f04f 33ff 	mov.w	r3, #4294967295
 80143ee:	e024      	b.n	801443a <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d00f      	beq.n	801441a <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d11a      	bne.n	8014438 <tcp_write_checks+0xd0>
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014406:	2b00      	cmp	r3, #0
 8014408:	d116      	bne.n	8014438 <tcp_write_checks+0xd0>
 801440a:	4b0e      	ldr	r3, [pc, #56]	; (8014444 <tcp_write_checks+0xdc>)
 801440c:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8014410:	490d      	ldr	r1, [pc, #52]	; (8014448 <tcp_write_checks+0xe0>)
 8014412:	480e      	ldr	r0, [pc, #56]	; (801444c <tcp_write_checks+0xe4>)
 8014414:	f006 fd1c 	bl	801ae50 <iprintf>
 8014418:	e00e      	b.n	8014438 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801441e:	2b00      	cmp	r3, #0
 8014420:	d103      	bne.n	801442a <tcp_write_checks+0xc2>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014426:	2b00      	cmp	r3, #0
 8014428:	d006      	beq.n	8014438 <tcp_write_checks+0xd0>
 801442a:	4b06      	ldr	r3, [pc, #24]	; (8014444 <tcp_write_checks+0xdc>)
 801442c:	f240 1259 	movw	r2, #345	; 0x159
 8014430:	4907      	ldr	r1, [pc, #28]	; (8014450 <tcp_write_checks+0xe8>)
 8014432:	4806      	ldr	r0, [pc, #24]	; (801444c <tcp_write_checks+0xe4>)
 8014434:	f006 fd0c 	bl	801ae50 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8014438:	2300      	movs	r3, #0
}
 801443a:	4618      	mov	r0, r3
 801443c:	3708      	adds	r7, #8
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}
 8014442:	bf00      	nop
 8014444:	0801f2f4 	.word	0x0801f2f4
 8014448:	0801f3ac 	.word	0x0801f3ac
 801444c:	0801f358 	.word	0x0801f358
 8014450:	0801f3e8 	.word	0x0801f3e8

08014454 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014454:	b590      	push	{r4, r7, lr}
 8014456:	b09b      	sub	sp, #108	; 0x6c
 8014458:	af04      	add	r7, sp, #16
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	4611      	mov	r1, r2
 8014460:	461a      	mov	r2, r3
 8014462:	460b      	mov	r3, r1
 8014464:	80fb      	strh	r3, [r7, #6]
 8014466:	4613      	mov	r3, r2
 8014468:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801446a:	2300      	movs	r3, #0
 801446c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801446e:	2300      	movs	r3, #0
 8014470:	653b      	str	r3, [r7, #80]	; 0x50
 8014472:	2300      	movs	r3, #0
 8014474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014476:	2300      	movs	r3, #0
 8014478:	64bb      	str	r3, [r7, #72]	; 0x48
 801447a:	2300      	movs	r3, #0
 801447c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801447e:	2300      	movs	r3, #0
 8014480:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8014484:	2300      	movs	r3, #0
 8014486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 801448a:	2300      	movs	r3, #0
 801448c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014490:	2300      	movs	r3, #0
 8014492:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014494:	2300      	movs	r3, #0
 8014496:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014498:	2300      	movs	r3, #0
 801449a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80144a2:	085b      	lsrs	r3, r3, #1
 80144a4:	b29a      	uxth	r2, r3
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144aa:	4293      	cmp	r3, r2
 80144ac:	bf28      	it	cs
 80144ae:	4613      	movcs	r3, r2
 80144b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80144b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d102      	bne.n	80144be <tcp_write+0x6a>
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144bc:	e000      	b.n	80144c0 <tcp_write+0x6c>
 80144be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80144c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d109      	bne.n	80144dc <tcp_write+0x88>
 80144c8:	4b92      	ldr	r3, [pc, #584]	; (8014714 <tcp_write+0x2c0>)
 80144ca:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80144ce:	4992      	ldr	r1, [pc, #584]	; (8014718 <tcp_write+0x2c4>)
 80144d0:	4892      	ldr	r0, [pc, #584]	; (801471c <tcp_write+0x2c8>)
 80144d2:	f006 fcbd 	bl	801ae50 <iprintf>
 80144d6:	f06f 030f 	mvn.w	r3, #15
 80144da:	e30a      	b.n	8014af2 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80144dc:	88fb      	ldrh	r3, [r7, #6]
 80144de:	4619      	mov	r1, r3
 80144e0:	68f8      	ldr	r0, [r7, #12]
 80144e2:	f7ff ff41 	bl	8014368 <tcp_write_checks>
 80144e6:	4603      	mov	r3, r0
 80144e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80144ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d002      	beq.n	80144fa <tcp_write+0xa6>
    return err;
 80144f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80144f8:	e2fb      	b.n	8014af2 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014500:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014508:	2b00      	cmp	r3, #0
 801450a:	f000 80f5 	beq.w	80146f8 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014512:	653b      	str	r3, [r7, #80]	; 0x50
 8014514:	e002      	b.n	801451c <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8014516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801451c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d1f8      	bne.n	8014516 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8014524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014526:	7a9b      	ldrb	r3, [r3, #10]
 8014528:	009b      	lsls	r3, r3, #2
 801452a:	b29b      	uxth	r3, r3
 801452c:	f003 0304 	and.w	r3, r3, #4
 8014530:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014532:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014536:	891b      	ldrh	r3, [r3, #8]
 8014538:	4619      	mov	r1, r3
 801453a:	8c3b      	ldrh	r3, [r7, #32]
 801453c:	440b      	add	r3, r1
 801453e:	429a      	cmp	r2, r3
 8014540:	da06      	bge.n	8014550 <tcp_write+0xfc>
 8014542:	4b74      	ldr	r3, [pc, #464]	; (8014714 <tcp_write+0x2c0>)
 8014544:	f240 12c7 	movw	r2, #455	; 0x1c7
 8014548:	4975      	ldr	r1, [pc, #468]	; (8014720 <tcp_write+0x2cc>)
 801454a:	4874      	ldr	r0, [pc, #464]	; (801471c <tcp_write+0x2c8>)
 801454c:	f006 fc80 	bl	801ae50 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014552:	891a      	ldrh	r2, [r3, #8]
 8014554:	8c3b      	ldrh	r3, [r7, #32]
 8014556:	4413      	add	r3, r2
 8014558:	b29b      	uxth	r3, r3
 801455a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801455c:	1ad3      	subs	r3, r2, r3
 801455e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014566:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014568:	8a7b      	ldrh	r3, [r7, #18]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d027      	beq.n	80145be <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801456e:	8a7b      	ldrh	r3, [r7, #18]
 8014570:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014572:	429a      	cmp	r2, r3
 8014574:	d206      	bcs.n	8014584 <tcp_write+0x130>
 8014576:	4b67      	ldr	r3, [pc, #412]	; (8014714 <tcp_write+0x2c0>)
 8014578:	f240 12d9 	movw	r2, #473	; 0x1d9
 801457c:	4969      	ldr	r1, [pc, #420]	; (8014724 <tcp_write+0x2d0>)
 801457e:	4867      	ldr	r0, [pc, #412]	; (801471c <tcp_write+0x2c8>)
 8014580:	f006 fc66 	bl	801ae50 <iprintf>
      seg = last_unsent;
 8014584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014586:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014588:	8a7b      	ldrh	r3, [r7, #18]
 801458a:	88fa      	ldrh	r2, [r7, #6]
 801458c:	429a      	cmp	r2, r3
 801458e:	d901      	bls.n	8014594 <tcp_write+0x140>
 8014590:	8a7b      	ldrh	r3, [r7, #18]
 8014592:	e000      	b.n	8014596 <tcp_write+0x142>
 8014594:	88fb      	ldrh	r3, [r7, #6]
 8014596:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014598:	4293      	cmp	r3, r2
 801459a:	bfa8      	it	ge
 801459c:	4613      	movge	r3, r2
 801459e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80145a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80145a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80145a6:	4413      	add	r3, r2
 80145a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80145ac:	8a7a      	ldrh	r2, [r7, #18]
 80145ae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80145b0:	1ad3      	subs	r3, r2, r3
 80145b2:	b29b      	uxth	r3, r3
 80145b4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80145b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80145b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80145ba:	1ad3      	subs	r3, r2, r3
 80145bc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80145be:	8a7b      	ldrh	r3, [r7, #18]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d00b      	beq.n	80145dc <tcp_write+0x188>
 80145c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80145c8:	88fb      	ldrh	r3, [r7, #6]
 80145ca:	429a      	cmp	r2, r3
 80145cc:	d006      	beq.n	80145dc <tcp_write+0x188>
 80145ce:	4b51      	ldr	r3, [pc, #324]	; (8014714 <tcp_write+0x2c0>)
 80145d0:	f240 12e1 	movw	r2, #481	; 0x1e1
 80145d4:	4954      	ldr	r1, [pc, #336]	; (8014728 <tcp_write+0x2d4>)
 80145d6:	4851      	ldr	r0, [pc, #324]	; (801471c <tcp_write+0x2c8>)
 80145d8:	f006 fc3a 	bl	801ae50 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80145dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80145e0:	88fb      	ldrh	r3, [r7, #6]
 80145e2:	429a      	cmp	r2, r3
 80145e4:	f080 8168 	bcs.w	80148b8 <tcp_write+0x464>
 80145e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	f000 8164 	beq.w	80148b8 <tcp_write+0x464>
 80145f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80145f2:	891b      	ldrh	r3, [r3, #8]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	f000 815f 	beq.w	80148b8 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80145fa:	88fa      	ldrh	r2, [r7, #6]
 80145fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014600:	1ad2      	subs	r2, r2, r3
 8014602:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014604:	4293      	cmp	r3, r2
 8014606:	bfa8      	it	ge
 8014608:	4613      	movge	r3, r2
 801460a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801460c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801460e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014610:	797b      	ldrb	r3, [r7, #5]
 8014612:	f003 0301 	and.w	r3, r3, #1
 8014616:	2b00      	cmp	r3, #0
 8014618:	d027      	beq.n	801466a <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801461a:	f107 0012 	add.w	r0, r7, #18
 801461e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014620:	8bf9      	ldrh	r1, [r7, #30]
 8014622:	2301      	movs	r3, #1
 8014624:	9302      	str	r3, [sp, #8]
 8014626:	797b      	ldrb	r3, [r7, #5]
 8014628:	9301      	str	r3, [sp, #4]
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	9300      	str	r3, [sp, #0]
 801462e:	4603      	mov	r3, r0
 8014630:	2004      	movs	r0, #4
 8014632:	f7ff fe37 	bl	80142a4 <tcp_pbuf_prealloc>
 8014636:	6578      	str	r0, [r7, #84]	; 0x54
 8014638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801463a:	2b00      	cmp	r3, #0
 801463c:	f000 8227 	beq.w	8014a8e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8014640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014642:	6858      	ldr	r0, [r3, #4]
 8014644:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014648:	68ba      	ldr	r2, [r7, #8]
 801464a:	4413      	add	r3, r2
 801464c:	8bfa      	ldrh	r2, [r7, #30]
 801464e:	4619      	mov	r1, r3
 8014650:	f005 ff07 	bl	801a462 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8014654:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014656:	f7fb fc99 	bl	800ff8c <pbuf_clen>
 801465a:	4603      	mov	r3, r0
 801465c:	461a      	mov	r2, r3
 801465e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014662:	4413      	add	r3, r2
 8014664:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8014668:	e03f      	b.n	80146ea <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801466a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801466c:	685b      	ldr	r3, [r3, #4]
 801466e:	637b      	str	r3, [r7, #52]	; 0x34
 8014670:	e002      	b.n	8014678 <tcp_write+0x224>
 8014672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	637b      	str	r3, [r7, #52]	; 0x34
 8014678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d1f8      	bne.n	8014672 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8014680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014682:	7b1b      	ldrb	r3, [r3, #12]
 8014684:	2b01      	cmp	r3, #1
 8014686:	d115      	bne.n	80146b4 <tcp_write+0x260>
 8014688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801468a:	685b      	ldr	r3, [r3, #4]
 801468c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801468e:	8952      	ldrh	r2, [r2, #10]
 8014690:	4413      	add	r3, r2
 8014692:	68ba      	ldr	r2, [r7, #8]
 8014694:	429a      	cmp	r2, r3
 8014696:	d10d      	bne.n	80146b4 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8014698:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801469c:	2b00      	cmp	r3, #0
 801469e:	d006      	beq.n	80146ae <tcp_write+0x25a>
 80146a0:	4b1c      	ldr	r3, [pc, #112]	; (8014714 <tcp_write+0x2c0>)
 80146a2:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80146a6:	4921      	ldr	r1, [pc, #132]	; (801472c <tcp_write+0x2d8>)
 80146a8:	481c      	ldr	r0, [pc, #112]	; (801471c <tcp_write+0x2c8>)
 80146aa:	f006 fbd1 	bl	801ae50 <iprintf>
          extendlen = seglen;
 80146ae:	8bfb      	ldrh	r3, [r7, #30]
 80146b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80146b2:	e01a      	b.n	80146ea <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80146b4:	8bfb      	ldrh	r3, [r7, #30]
 80146b6:	2201      	movs	r2, #1
 80146b8:	4619      	mov	r1, r3
 80146ba:	2004      	movs	r0, #4
 80146bc:	f7fb f85a 	bl	800f774 <pbuf_alloc>
 80146c0:	6578      	str	r0, [r7, #84]	; 0x54
 80146c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	f000 81e4 	beq.w	8014a92 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 80146ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80146ce:	68ba      	ldr	r2, [r7, #8]
 80146d0:	441a      	add	r2, r3
 80146d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146d4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80146d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80146d8:	f7fb fc58 	bl	800ff8c <pbuf_clen>
 80146dc:	4603      	mov	r3, r0
 80146de:	461a      	mov	r2, r3
 80146e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80146e4:	4413      	add	r3, r2
 80146e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80146ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80146ee:	8bfb      	ldrh	r3, [r7, #30]
 80146f0:	4413      	add	r3, r2
 80146f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80146f6:	e0df      	b.n	80148b8 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80146fe:	2b00      	cmp	r3, #0
 8014700:	f000 80da 	beq.w	80148b8 <tcp_write+0x464>
 8014704:	4b03      	ldr	r3, [pc, #12]	; (8014714 <tcp_write+0x2c0>)
 8014706:	f240 2225 	movw	r2, #549	; 0x225
 801470a:	4909      	ldr	r1, [pc, #36]	; (8014730 <tcp_write+0x2dc>)
 801470c:	4803      	ldr	r0, [pc, #12]	; (801471c <tcp_write+0x2c8>)
 801470e:	f006 fb9f 	bl	801ae50 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014712:	e0d1      	b.n	80148b8 <tcp_write+0x464>
 8014714:	0801f2f4 	.word	0x0801f2f4
 8014718:	0801f41c 	.word	0x0801f41c
 801471c:	0801f358 	.word	0x0801f358
 8014720:	0801f450 	.word	0x0801f450
 8014724:	0801f468 	.word	0x0801f468
 8014728:	0801f488 	.word	0x0801f488
 801472c:	0801f4a8 	.word	0x0801f4a8
 8014730:	0801f4d4 	.word	0x0801f4d4
    struct pbuf *p;
    u16_t left = len - pos;
 8014734:	88fa      	ldrh	r2, [r7, #6]
 8014736:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801473a:	1ad3      	subs	r3, r2, r3
 801473c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801473e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014742:	b29b      	uxth	r3, r3
 8014744:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014746:	1ad3      	subs	r3, r2, r3
 8014748:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801474a:	8b7a      	ldrh	r2, [r7, #26]
 801474c:	8bbb      	ldrh	r3, [r7, #28]
 801474e:	4293      	cmp	r3, r2
 8014750:	bf28      	it	cs
 8014752:	4613      	movcs	r3, r2
 8014754:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8014756:	797b      	ldrb	r3, [r7, #5]
 8014758:	f003 0301 	and.w	r3, r3, #1
 801475c:	2b00      	cmp	r3, #0
 801475e:	d036      	beq.n	80147ce <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014764:	b29a      	uxth	r2, r3
 8014766:	8b3b      	ldrh	r3, [r7, #24]
 8014768:	4413      	add	r3, r2
 801476a:	b299      	uxth	r1, r3
 801476c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801476e:	2b00      	cmp	r3, #0
 8014770:	bf0c      	ite	eq
 8014772:	2301      	moveq	r3, #1
 8014774:	2300      	movne	r3, #0
 8014776:	b2db      	uxtb	r3, r3
 8014778:	f107 0012 	add.w	r0, r7, #18
 801477c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801477e:	9302      	str	r3, [sp, #8]
 8014780:	797b      	ldrb	r3, [r7, #5]
 8014782:	9301      	str	r3, [sp, #4]
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	9300      	str	r3, [sp, #0]
 8014788:	4603      	mov	r3, r0
 801478a:	2000      	movs	r0, #0
 801478c:	f7ff fd8a 	bl	80142a4 <tcp_pbuf_prealloc>
 8014790:	6338      	str	r0, [r7, #48]	; 0x30
 8014792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014794:	2b00      	cmp	r3, #0
 8014796:	f000 817e 	beq.w	8014a96 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801479c:	895b      	ldrh	r3, [r3, #10]
 801479e:	8b3a      	ldrh	r2, [r7, #24]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d906      	bls.n	80147b2 <tcp_write+0x35e>
 80147a4:	4b8f      	ldr	r3, [pc, #572]	; (80149e4 <tcp_write+0x590>)
 80147a6:	f240 2241 	movw	r2, #577	; 0x241
 80147aa:	498f      	ldr	r1, [pc, #572]	; (80149e8 <tcp_write+0x594>)
 80147ac:	488f      	ldr	r0, [pc, #572]	; (80149ec <tcp_write+0x598>)
 80147ae:	f006 fb4f 	bl	801ae50 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80147b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b4:	685a      	ldr	r2, [r3, #4]
 80147b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147ba:	18d0      	adds	r0, r2, r3
 80147bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80147c0:	68ba      	ldr	r2, [r7, #8]
 80147c2:	4413      	add	r3, r2
 80147c4:	8b3a      	ldrh	r2, [r7, #24]
 80147c6:	4619      	mov	r1, r3
 80147c8:	f005 fe4b 	bl	801a462 <memcpy>
 80147cc:	e02e      	b.n	801482c <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80147ce:	8a7b      	ldrh	r3, [r7, #18]
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d006      	beq.n	80147e2 <tcp_write+0x38e>
 80147d4:	4b83      	ldr	r3, [pc, #524]	; (80149e4 <tcp_write+0x590>)
 80147d6:	f240 224b 	movw	r2, #587	; 0x24b
 80147da:	4985      	ldr	r1, [pc, #532]	; (80149f0 <tcp_write+0x59c>)
 80147dc:	4883      	ldr	r0, [pc, #524]	; (80149ec <tcp_write+0x598>)
 80147de:	f006 fb37 	bl	801ae50 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80147e2:	8b3b      	ldrh	r3, [r7, #24]
 80147e4:	2201      	movs	r2, #1
 80147e6:	4619      	mov	r1, r3
 80147e8:	2000      	movs	r0, #0
 80147ea:	f7fa ffc3 	bl	800f774 <pbuf_alloc>
 80147ee:	6178      	str	r0, [r7, #20]
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	f000 8151 	beq.w	8014a9a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80147f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80147fc:	68ba      	ldr	r2, [r7, #8]
 80147fe:	441a      	add	r2, r3
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014808:	b29b      	uxth	r3, r3
 801480a:	2200      	movs	r2, #0
 801480c:	4619      	mov	r1, r3
 801480e:	2000      	movs	r0, #0
 8014810:	f7fa ffb0 	bl	800f774 <pbuf_alloc>
 8014814:	6338      	str	r0, [r7, #48]	; 0x30
 8014816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014818:	2b00      	cmp	r3, #0
 801481a:	d103      	bne.n	8014824 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801481c:	6978      	ldr	r0, [r7, #20]
 801481e:	f7fb fb1b 	bl	800fe58 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8014822:	e13d      	b.n	8014aa0 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8014824:	6979      	ldr	r1, [r7, #20]
 8014826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014828:	f7fb fbf0 	bl	801000c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801482c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801482e:	f7fb fbad 	bl	800ff8c <pbuf_clen>
 8014832:	4603      	mov	r3, r0
 8014834:	461a      	mov	r2, r3
 8014836:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801483a:	4413      	add	r3, r2
 801483c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8014840:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014844:	2b09      	cmp	r3, #9
 8014846:	d805      	bhi.n	8014854 <tcp_write+0x400>
 8014848:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801484c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8014850:	4293      	cmp	r3, r2
 8014852:	d903      	bls.n	801485c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014854:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014856:	f7fb faff 	bl	800fe58 <pbuf_free>
      goto memerr;
 801485a:	e121      	b.n	8014aa0 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014860:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014864:	441a      	add	r2, r3
 8014866:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801486a:	9300      	str	r3, [sp, #0]
 801486c:	4613      	mov	r3, r2
 801486e:	2200      	movs	r2, #0
 8014870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014872:	68f8      	ldr	r0, [r7, #12]
 8014874:	f7ff fc8e 	bl	8014194 <tcp_create_segment>
 8014878:	64f8      	str	r0, [r7, #76]	; 0x4c
 801487a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801487c:	2b00      	cmp	r3, #0
 801487e:	f000 810e 	beq.w	8014a9e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8014882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014884:	2b00      	cmp	r3, #0
 8014886:	d102      	bne.n	801488e <tcp_write+0x43a>
      queue = seg;
 8014888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801488a:	647b      	str	r3, [r7, #68]	; 0x44
 801488c:	e00c      	b.n	80148a8 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801488e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014890:	2b00      	cmp	r3, #0
 8014892:	d106      	bne.n	80148a2 <tcp_write+0x44e>
 8014894:	4b53      	ldr	r3, [pc, #332]	; (80149e4 <tcp_write+0x590>)
 8014896:	f240 2285 	movw	r2, #645	; 0x285
 801489a:	4956      	ldr	r1, [pc, #344]	; (80149f4 <tcp_write+0x5a0>)
 801489c:	4853      	ldr	r0, [pc, #332]	; (80149ec <tcp_write+0x598>)
 801489e:	f006 fad7 	bl	801ae50 <iprintf>
      prev_seg->next = seg;
 80148a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80148a6:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80148a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148aa:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80148ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80148b0:	8b3b      	ldrh	r3, [r7, #24]
 80148b2:	4413      	add	r3, r2
 80148b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80148b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80148bc:	88fb      	ldrh	r3, [r7, #6]
 80148be:	429a      	cmp	r2, r3
 80148c0:	f4ff af38 	bcc.w	8014734 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80148c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d02c      	beq.n	8014924 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80148ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148cc:	685b      	ldr	r3, [r3, #4]
 80148ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80148d0:	e01e      	b.n	8014910 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 80148d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148d4:	891a      	ldrh	r2, [r3, #8]
 80148d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80148d8:	4413      	add	r3, r2
 80148da:	b29a      	uxth	r2, r3
 80148dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148de:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80148e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d110      	bne.n	801490a <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80148e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ea:	685b      	ldr	r3, [r3, #4]
 80148ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80148ee:	8952      	ldrh	r2, [r2, #10]
 80148f0:	4413      	add	r3, r2
 80148f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80148f4:	68b9      	ldr	r1, [r7, #8]
 80148f6:	4618      	mov	r0, r3
 80148f8:	f005 fdb3 	bl	801a462 <memcpy>
        p->len += oversize_used;
 80148fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148fe:	895a      	ldrh	r2, [r3, #10]
 8014900:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014902:	4413      	add	r3, r2
 8014904:	b29a      	uxth	r2, r3
 8014906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014908:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014912:	2b00      	cmp	r3, #0
 8014914:	d1dd      	bne.n	80148d2 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8014916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014918:	891a      	ldrh	r2, [r3, #8]
 801491a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801491c:	4413      	add	r3, r2
 801491e:	b29a      	uxth	r2, r3
 8014920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014922:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8014924:	8a7a      	ldrh	r2, [r7, #18]
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801492c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801492e:	2b00      	cmp	r3, #0
 8014930:	d018      	beq.n	8014964 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014934:	2b00      	cmp	r3, #0
 8014936:	d106      	bne.n	8014946 <tcp_write+0x4f2>
 8014938:	4b2a      	ldr	r3, [pc, #168]	; (80149e4 <tcp_write+0x590>)
 801493a:	f240 22bb 	movw	r2, #699	; 0x2bb
 801493e:	492e      	ldr	r1, [pc, #184]	; (80149f8 <tcp_write+0x5a4>)
 8014940:	482a      	ldr	r0, [pc, #168]	; (80149ec <tcp_write+0x598>)
 8014942:	f006 fa85 	bl	801ae50 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8014946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801494c:	4618      	mov	r0, r3
 801494e:	f7fb fb5d 	bl	801000c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8014952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014954:	891a      	ldrh	r2, [r3, #8]
 8014956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014958:	891b      	ldrh	r3, [r3, #8]
 801495a:	4413      	add	r3, r2
 801495c:	b29a      	uxth	r2, r3
 801495e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014960:	811a      	strh	r2, [r3, #8]
 8014962:	e037      	b.n	80149d4 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8014964:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014966:	2b00      	cmp	r3, #0
 8014968:	d034      	beq.n	80149d4 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801496a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801496c:	2b00      	cmp	r3, #0
 801496e:	d003      	beq.n	8014978 <tcp_write+0x524>
 8014970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014972:	685b      	ldr	r3, [r3, #4]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d106      	bne.n	8014986 <tcp_write+0x532>
 8014978:	4b1a      	ldr	r3, [pc, #104]	; (80149e4 <tcp_write+0x590>)
 801497a:	f240 22c1 	movw	r2, #705	; 0x2c1
 801497e:	491f      	ldr	r1, [pc, #124]	; (80149fc <tcp_write+0x5a8>)
 8014980:	481a      	ldr	r0, [pc, #104]	; (80149ec <tcp_write+0x598>)
 8014982:	f006 fa65 	bl	801ae50 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014988:	685b      	ldr	r3, [r3, #4]
 801498a:	62bb      	str	r3, [r7, #40]	; 0x28
 801498c:	e009      	b.n	80149a2 <tcp_write+0x54e>
      p->tot_len += extendlen;
 801498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014990:	891a      	ldrh	r2, [r3, #8]
 8014992:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014994:	4413      	add	r3, r2
 8014996:	b29a      	uxth	r2, r3
 8014998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801499a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80149a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d1f1      	bne.n	801498e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 80149aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ac:	891a      	ldrh	r2, [r3, #8]
 80149ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80149b0:	4413      	add	r3, r2
 80149b2:	b29a      	uxth	r2, r3
 80149b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80149b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ba:	895a      	ldrh	r2, [r3, #10]
 80149bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80149be:	4413      	add	r3, r2
 80149c0:	b29a      	uxth	r2, r3
 80149c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80149c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149c8:	891a      	ldrh	r2, [r3, #8]
 80149ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80149cc:	4413      	add	r3, r2
 80149ce:	b29a      	uxth	r2, r3
 80149d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149d2:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80149d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d112      	bne.n	8014a00 <tcp_write+0x5ac>
    pcb->unsent = queue;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80149de:	669a      	str	r2, [r3, #104]	; 0x68
 80149e0:	e011      	b.n	8014a06 <tcp_write+0x5b2>
 80149e2:	bf00      	nop
 80149e4:	0801f2f4 	.word	0x0801f2f4
 80149e8:	0801f504 	.word	0x0801f504
 80149ec:	0801f358 	.word	0x0801f358
 80149f0:	0801f544 	.word	0x0801f544
 80149f4:	0801f554 	.word	0x0801f554
 80149f8:	0801f568 	.word	0x0801f568
 80149fc:	0801f5a0 	.word	0x0801f5a0
  } else {
    last_unsent->next = queue;
 8014a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014a04:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014a0a:	88fb      	ldrh	r3, [r7, #6]
 8014a0c:	441a      	add	r2, r3
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014a18:	88fb      	ldrh	r3, [r7, #6]
 8014a1a:	1ad3      	subs	r3, r2, r3
 8014a1c:	b29a      	uxth	r2, r3
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014a2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d00e      	beq.n	8014a56 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d10a      	bne.n	8014a56 <tcp_write+0x602>
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d106      	bne.n	8014a56 <tcp_write+0x602>
 8014a48:	4b2c      	ldr	r3, [pc, #176]	; (8014afc <tcp_write+0x6a8>)
 8014a4a:	f240 22ed 	movw	r2, #749	; 0x2ed
 8014a4e:	492c      	ldr	r1, [pc, #176]	; (8014b00 <tcp_write+0x6ac>)
 8014a50:	482c      	ldr	r0, [pc, #176]	; (8014b04 <tcp_write+0x6b0>)
 8014a52:	f006 f9fd 	bl	801ae50 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8014a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d016      	beq.n	8014a8a <tcp_write+0x636>
 8014a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a5e:	68db      	ldr	r3, [r3, #12]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d012      	beq.n	8014a8a <tcp_write+0x636>
 8014a64:	797b      	ldrb	r3, [r7, #5]
 8014a66:	f003 0302 	and.w	r3, r3, #2
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d10d      	bne.n	8014a8a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8014a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a70:	68db      	ldr	r3, [r3, #12]
 8014a72:	899b      	ldrh	r3, [r3, #12]
 8014a74:	b29c      	uxth	r4, r3
 8014a76:	2008      	movs	r0, #8
 8014a78:	f7fa f854 	bl	800eb24 <lwip_htons>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	461a      	mov	r2, r3
 8014a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	4322      	orrs	r2, r4
 8014a86:	b292      	uxth	r2, r2
 8014a88:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	e031      	b.n	8014af2 <tcp_write+0x69e>
          goto memerr;
 8014a8e:	bf00      	nop
 8014a90:	e006      	b.n	8014aa0 <tcp_write+0x64c>
            goto memerr;
 8014a92:	bf00      	nop
 8014a94:	e004      	b.n	8014aa0 <tcp_write+0x64c>
        goto memerr;
 8014a96:	bf00      	nop
 8014a98:	e002      	b.n	8014aa0 <tcp_write+0x64c>
        goto memerr;
 8014a9a:	bf00      	nop
 8014a9c:	e000      	b.n	8014aa0 <tcp_write+0x64c>
      goto memerr;
 8014a9e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	7e9b      	ldrb	r3, [r3, #26]
 8014aa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014aa8:	b2da      	uxtb	r2, r3
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d002      	beq.n	8014aba <tcp_write+0x666>
    pbuf_free(concat_p);
 8014ab4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014ab6:	f7fb f9cf 	bl	800fe58 <pbuf_free>
  }
  if (queue != NULL) {
 8014aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d002      	beq.n	8014ac6 <tcp_write+0x672>
    tcp_segs_free(queue);
 8014ac0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014ac2:	f7fc fcce 	bl	8011462 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d00e      	beq.n	8014aee <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d10a      	bne.n	8014aee <tcp_write+0x69a>
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d106      	bne.n	8014aee <tcp_write+0x69a>
 8014ae0:	4b06      	ldr	r3, [pc, #24]	; (8014afc <tcp_write+0x6a8>)
 8014ae2:	f240 3202 	movw	r2, #770	; 0x302
 8014ae6:	4906      	ldr	r1, [pc, #24]	; (8014b00 <tcp_write+0x6ac>)
 8014ae8:	4806      	ldr	r0, [pc, #24]	; (8014b04 <tcp_write+0x6b0>)
 8014aea:	f006 f9b1 	bl	801ae50 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	375c      	adds	r7, #92	; 0x5c
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd90      	pop	{r4, r7, pc}
 8014afa:	bf00      	nop
 8014afc:	0801f2f4 	.word	0x0801f2f4
 8014b00:	0801f5d8 	.word	0x0801f5d8
 8014b04:	0801f358 	.word	0x0801f358

08014b08 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b08a      	sub	sp, #40	; 0x28
 8014b0c:	af02      	add	r7, sp, #8
 8014b0e:	6078      	str	r0, [r7, #4]
 8014b10:	460b      	mov	r3, r1
 8014b12:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014b14:	2300      	movs	r3, #0
 8014b16:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014b18:	2300      	movs	r3, #0
 8014b1a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014b1c:	78fb      	ldrb	r3, [r7, #3]
 8014b1e:	f003 0303 	and.w	r3, r3, #3
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d106      	bne.n	8014b34 <tcp_enqueue_flags+0x2c>
 8014b26:	4b6f      	ldr	r3, [pc, #444]	; (8014ce4 <tcp_enqueue_flags+0x1dc>)
 8014b28:	f240 321b 	movw	r2, #795	; 0x31b
 8014b2c:	496e      	ldr	r1, [pc, #440]	; (8014ce8 <tcp_enqueue_flags+0x1e0>)
 8014b2e:	486f      	ldr	r0, [pc, #444]	; (8014cec <tcp_enqueue_flags+0x1e4>)
 8014b30:	f006 f98e 	bl	801ae50 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014b3a:	2b08      	cmp	r3, #8
 8014b3c:	d806      	bhi.n	8014b4c <tcp_enqueue_flags+0x44>
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014b44:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8014b48:	4293      	cmp	r3, r2
 8014b4a:	d90e      	bls.n	8014b6a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8014b4c:	78fb      	ldrb	r3, [r7, #3]
 8014b4e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d109      	bne.n	8014b6a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	7e9b      	ldrb	r3, [r3, #26]
 8014b5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014b5e:	b2da      	uxtb	r2, r3
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8014b64:	f04f 33ff 	mov.w	r3, #4294967295
 8014b68:	e0b7      	b.n	8014cda <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8014b6a:	78fb      	ldrb	r3, [r7, #3]
 8014b6c:	f003 0302 	and.w	r3, r3, #2
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d001      	beq.n	8014b78 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8014b74:	2301      	movs	r3, #1
 8014b76:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014b78:	7ffb      	ldrb	r3, [r7, #31]
 8014b7a:	009b      	lsls	r3, r3, #2
 8014b7c:	b2db      	uxtb	r3, r3
 8014b7e:	f003 0304 	and.w	r3, r3, #4
 8014b82:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014b84:	7dfb      	ldrb	r3, [r7, #23]
 8014b86:	b29b      	uxth	r3, r3
 8014b88:	2200      	movs	r2, #0
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	2000      	movs	r0, #0
 8014b8e:	f7fa fdf1 	bl	800f774 <pbuf_alloc>
 8014b92:	6138      	str	r0, [r7, #16]
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d109      	bne.n	8014bae <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	7e9b      	ldrb	r3, [r3, #26]
 8014b9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014ba2:	b2da      	uxtb	r2, r3
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8014bac:	e095      	b.n	8014cda <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014bae:	693b      	ldr	r3, [r7, #16]
 8014bb0:	895a      	ldrh	r2, [r3, #10]
 8014bb2:	7dfb      	ldrb	r3, [r7, #23]
 8014bb4:	b29b      	uxth	r3, r3
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	d206      	bcs.n	8014bc8 <tcp_enqueue_flags+0xc0>
 8014bba:	4b4a      	ldr	r3, [pc, #296]	; (8014ce4 <tcp_enqueue_flags+0x1dc>)
 8014bbc:	f240 3241 	movw	r2, #833	; 0x341
 8014bc0:	494b      	ldr	r1, [pc, #300]	; (8014cf0 <tcp_enqueue_flags+0x1e8>)
 8014bc2:	484a      	ldr	r0, [pc, #296]	; (8014cec <tcp_enqueue_flags+0x1e4>)
 8014bc4:	f006 f944 	bl	801ae50 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014bcc:	78fa      	ldrb	r2, [r7, #3]
 8014bce:	7ffb      	ldrb	r3, [r7, #31]
 8014bd0:	9300      	str	r3, [sp, #0]
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	6939      	ldr	r1, [r7, #16]
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f7ff fadc 	bl	8014194 <tcp_create_segment>
 8014bdc:	60f8      	str	r0, [r7, #12]
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d109      	bne.n	8014bf8 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	7e9b      	ldrb	r3, [r3, #26]
 8014be8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014bec:	b2da      	uxtb	r2, r3
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8014bf6:	e070      	b.n	8014cda <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	68db      	ldr	r3, [r3, #12]
 8014bfc:	f003 0303 	and.w	r3, r3, #3
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d006      	beq.n	8014c12 <tcp_enqueue_flags+0x10a>
 8014c04:	4b37      	ldr	r3, [pc, #220]	; (8014ce4 <tcp_enqueue_flags+0x1dc>)
 8014c06:	f240 3249 	movw	r2, #841	; 0x349
 8014c0a:	493a      	ldr	r1, [pc, #232]	; (8014cf4 <tcp_enqueue_flags+0x1ec>)
 8014c0c:	4837      	ldr	r0, [pc, #220]	; (8014cec <tcp_enqueue_flags+0x1e4>)
 8014c0e:	f006 f91f 	bl	801ae50 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	891b      	ldrh	r3, [r3, #8]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d006      	beq.n	8014c28 <tcp_enqueue_flags+0x120>
 8014c1a:	4b32      	ldr	r3, [pc, #200]	; (8014ce4 <tcp_enqueue_flags+0x1dc>)
 8014c1c:	f240 324a 	movw	r2, #842	; 0x34a
 8014c20:	4935      	ldr	r1, [pc, #212]	; (8014cf8 <tcp_enqueue_flags+0x1f0>)
 8014c22:	4832      	ldr	r0, [pc, #200]	; (8014cec <tcp_enqueue_flags+0x1e4>)
 8014c24:	f006 f914 	bl	801ae50 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d103      	bne.n	8014c38 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	68fa      	ldr	r2, [r7, #12]
 8014c34:	669a      	str	r2, [r3, #104]	; 0x68
 8014c36:	e00d      	b.n	8014c54 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014c3c:	61bb      	str	r3, [r7, #24]
 8014c3e:	e002      	b.n	8014c46 <tcp_enqueue_flags+0x13e>
 8014c40:	69bb      	ldr	r3, [r7, #24]
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	61bb      	str	r3, [r7, #24]
 8014c46:	69bb      	ldr	r3, [r7, #24]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d1f8      	bne.n	8014c40 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8014c4e:	69bb      	ldr	r3, [r7, #24]
 8014c50:	68fa      	ldr	r2, [r7, #12]
 8014c52:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2200      	movs	r2, #0
 8014c58:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014c5c:	78fb      	ldrb	r3, [r7, #3]
 8014c5e:	f003 0302 	and.w	r3, r3, #2
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d104      	bne.n	8014c70 <tcp_enqueue_flags+0x168>
 8014c66:	78fb      	ldrb	r3, [r7, #3]
 8014c68:	f003 0301 	and.w	r3, r3, #1
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d004      	beq.n	8014c7a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c74:	1c5a      	adds	r2, r3, #1
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014c7a:	78fb      	ldrb	r3, [r7, #3]
 8014c7c:	f003 0301 	and.w	r3, r3, #1
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d006      	beq.n	8014c92 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	7e9b      	ldrb	r3, [r3, #26]
 8014c88:	f043 0320 	orr.w	r3, r3, #32
 8014c8c:	b2da      	uxtb	r2, r3
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	685b      	ldr	r3, [r3, #4]
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7fb f978 	bl	800ff8c <pbuf_clen>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014ca6:	4413      	add	r3, r2
 8014ca8:	b29a      	uxth	r2, r3
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d00e      	beq.n	8014cd8 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d10a      	bne.n	8014cd8 <tcp_enqueue_flags+0x1d0>
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d106      	bne.n	8014cd8 <tcp_enqueue_flags+0x1d0>
 8014cca:	4b06      	ldr	r3, [pc, #24]	; (8014ce4 <tcp_enqueue_flags+0x1dc>)
 8014ccc:	f240 326d 	movw	r2, #877	; 0x36d
 8014cd0:	490a      	ldr	r1, [pc, #40]	; (8014cfc <tcp_enqueue_flags+0x1f4>)
 8014cd2:	4806      	ldr	r0, [pc, #24]	; (8014cec <tcp_enqueue_flags+0x1e4>)
 8014cd4:	f006 f8bc 	bl	801ae50 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014cd8:	2300      	movs	r3, #0
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3720      	adds	r7, #32
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}
 8014ce2:	bf00      	nop
 8014ce4:	0801f2f4 	.word	0x0801f2f4
 8014ce8:	0801f5f8 	.word	0x0801f5f8
 8014cec:	0801f358 	.word	0x0801f358
 8014cf0:	0801f650 	.word	0x0801f650
 8014cf4:	0801f68c 	.word	0x0801f68c
 8014cf8:	0801f6a4 	.word	0x0801f6a4
 8014cfc:	0801f6d0 	.word	0x0801f6d0

08014d00 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014d00:	b590      	push	{r4, r7, lr}
 8014d02:	b08b      	sub	sp, #44	; 0x2c
 8014d04:	af04      	add	r7, sp, #16
 8014d06:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014d0c:	7dbb      	ldrb	r3, [r7, #22]
 8014d0e:	b29c      	uxth	r4, r3
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014d14:	4618      	mov	r0, r3
 8014d16:	f7f9 ff13 	bl	800eb40 <lwip_htonl>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	4621      	mov	r1, r4
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f7ff f97b 	bl	801401c <tcp_output_alloc_header>
 8014d26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d109      	bne.n	8014d42 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	7e9b      	ldrb	r3, [r3, #26]
 8014d32:	f043 0303 	orr.w	r3, r3, #3
 8014d36:	b2da      	uxtb	r2, r3
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014d3c:	f06f 0301 	mvn.w	r3, #1
 8014d40:	e036      	b.n	8014db0 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	3304      	adds	r3, #4
 8014d46:	4618      	mov	r0, r3
 8014d48:	f002 f9c0 	bl	80170cc <ip4_route>
 8014d4c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d102      	bne.n	8014d5a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8014d54:	23fc      	movs	r3, #252	; 0xfc
 8014d56:	75fb      	strb	r3, [r7, #23]
 8014d58:	e012      	b.n	8014d80 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8014d5a:	6879      	ldr	r1, [r7, #4]
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	1d18      	adds	r0, r3, #4
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	7a9c      	ldrb	r4, [r3, #10]
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	7a5b      	ldrb	r3, [r3, #9]
 8014d68:	68fa      	ldr	r2, [r7, #12]
 8014d6a:	9202      	str	r2, [sp, #8]
 8014d6c:	2206      	movs	r2, #6
 8014d6e:	9201      	str	r2, [sp, #4]
 8014d70:	9300      	str	r3, [sp, #0]
 8014d72:	4623      	mov	r3, r4
 8014d74:	4602      	mov	r2, r0
 8014d76:	6938      	ldr	r0, [r7, #16]
 8014d78:	f002 fb50 	bl	801741c <ip4_output_if>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8014d80:	6938      	ldr	r0, [r7, #16]
 8014d82:	f7fb f869 	bl	800fe58 <pbuf_free>

  if (err != ERR_OK) {
 8014d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d007      	beq.n	8014d9e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	7e9b      	ldrb	r3, [r3, #26]
 8014d92:	f043 0303 	orr.w	r3, r3, #3
 8014d96:	b2da      	uxtb	r2, r3
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	769a      	strb	r2, [r3, #26]
 8014d9c:	e006      	b.n	8014dac <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	7e9b      	ldrb	r3, [r3, #26]
 8014da2:	f023 0303 	bic.w	r3, r3, #3
 8014da6:	b2da      	uxtb	r2, r3
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8014dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014db0:	4618      	mov	r0, r3
 8014db2:	371c      	adds	r7, #28
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd90      	pop	{r4, r7, pc}

08014db8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014db8:	b5b0      	push	{r4, r5, r7, lr}
 8014dba:	b08a      	sub	sp, #40	; 0x28
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	7d1b      	ldrb	r3, [r3, #20]
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	d106      	bne.n	8014dd6 <tcp_output+0x1e>
 8014dc8:	4b9b      	ldr	r3, [pc, #620]	; (8015038 <tcp_output+0x280>)
 8014dca:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8014dce:	499b      	ldr	r1, [pc, #620]	; (801503c <tcp_output+0x284>)
 8014dd0:	489b      	ldr	r0, [pc, #620]	; (8015040 <tcp_output+0x288>)
 8014dd2:	f006 f83d 	bl	801ae50 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014dd6:	4b9b      	ldr	r3, [pc, #620]	; (8015044 <tcp_output+0x28c>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	687a      	ldr	r2, [r7, #4]
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d101      	bne.n	8014de4 <tcp_output+0x2c>
    return ERR_OK;
 8014de0:	2300      	movs	r3, #0
 8014de2:	e1cf      	b.n	8015184 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014df0:	429a      	cmp	r2, r3
 8014df2:	d203      	bcs.n	8014dfc <tcp_output+0x44>
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014dfa:	e002      	b.n	8014e02 <tcp_output+0x4a>
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014e02:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014e08:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	7e9b      	ldrb	r3, [r3, #26]
 8014e0e:	f003 0302 	and.w	r3, r3, #2
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d017      	beq.n	8014e46 <tcp_output+0x8e>
 8014e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d00f      	beq.n	8014e3c <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8014e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e1e:	68db      	ldr	r3, [r3, #12]
 8014e20:	685b      	ldr	r3, [r3, #4]
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7f9 fe8c 	bl	800eb40 <lwip_htonl>
 8014e28:	4602      	mov	r2, r0
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e2e:	1ad3      	subs	r3, r2, r3
 8014e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e32:	8912      	ldrh	r2, [r2, #8]
 8014e34:	4413      	add	r3, r2
     (seg == NULL ||
 8014e36:	69ba      	ldr	r2, [r7, #24]
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d204      	bcs.n	8014e46 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f7ff ff5f 	bl	8014d00 <tcp_send_empty_ack>
 8014e42:	4603      	mov	r3, r0
 8014e44:	e19e      	b.n	8015184 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e4a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014e4c:	6a3b      	ldr	r3, [r7, #32]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d007      	beq.n	8014e62 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8014e52:	e002      	b.n	8014e5a <tcp_output+0xa2>
 8014e54:	6a3b      	ldr	r3, [r7, #32]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	623b      	str	r3, [r7, #32]
 8014e5a:	6a3b      	ldr	r3, [r7, #32]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d1f8      	bne.n	8014e54 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	3304      	adds	r3, #4
 8014e66:	4618      	mov	r0, r3
 8014e68:	f002 f930 	bl	80170cc <ip4_route>
 8014e6c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d102      	bne.n	8014e7a <tcp_output+0xc2>
    return ERR_RTE;
 8014e74:	f06f 0303 	mvn.w	r3, #3
 8014e78:	e184      	b.n	8015184 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d003      	beq.n	8014e88 <tcp_output+0xd0>
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d111      	bne.n	8014eac <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014e88:	697b      	ldr	r3, [r7, #20]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d002      	beq.n	8014e94 <tcp_output+0xdc>
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	3304      	adds	r3, #4
 8014e92:	e000      	b.n	8014e96 <tcp_output+0xde>
 8014e94:	2300      	movs	r3, #0
 8014e96:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d102      	bne.n	8014ea4 <tcp_output+0xec>
      return ERR_RTE;
 8014e9e:	f06f 0303 	mvn.w	r3, #3
 8014ea2:	e16f      	b.n	8015184 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014ea4:	693b      	ldr	r3, [r7, #16]
 8014ea6:	681a      	ldr	r2, [r3, #0]
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8014eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	f000 813e 	beq.w	8015130 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8014eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eb6:	68db      	ldr	r3, [r3, #12]
 8014eb8:	685b      	ldr	r3, [r3, #4]
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7f9 fe40 	bl	800eb40 <lwip_htonl>
 8014ec0:	4602      	mov	r2, r0
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ec6:	1ad3      	subs	r3, r2, r3
 8014ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014eca:	8912      	ldrh	r2, [r2, #8]
 8014ecc:	4413      	add	r3, r2
  if (seg != NULL &&
 8014ece:	69ba      	ldr	r2, [r7, #24]
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	f080 812d 	bcs.w	8015130 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8014ed6:	69bb      	ldr	r3, [r7, #24]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	f000 8129 	beq.w	8015130 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014ee4:	461a      	mov	r2, r3
 8014ee6:	69bb      	ldr	r3, [r7, #24]
 8014ee8:	4293      	cmp	r3, r2
 8014eea:	f040 8121 	bne.w	8015130 <tcp_output+0x378>
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	f040 811c 	bne.w	8015130 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	f040 812b 	bne.w	801515a <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	2200      	movs	r2, #0
 8014f08:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	2201      	movs	r2, #1
 8014f10:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8014f14:	e121      	b.n	801515a <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f18:	68db      	ldr	r3, [r3, #12]
 8014f1a:	899b      	ldrh	r3, [r3, #12]
 8014f1c:	b29b      	uxth	r3, r3
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f7f9 fe00 	bl	800eb24 <lwip_htons>
 8014f24:	4603      	mov	r3, r0
 8014f26:	f003 0304 	and.w	r3, r3, #4
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d006      	beq.n	8014f3c <tcp_output+0x184>
 8014f2e:	4b42      	ldr	r3, [pc, #264]	; (8015038 <tcp_output+0x280>)
 8014f30:	f240 4246 	movw	r2, #1094	; 0x446
 8014f34:	4944      	ldr	r1, [pc, #272]	; (8015048 <tcp_output+0x290>)
 8014f36:	4842      	ldr	r0, [pc, #264]	; (8015040 <tcp_output+0x288>)
 8014f38:	f005 ff8a 	bl	801ae50 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d01f      	beq.n	8014f84 <tcp_output+0x1cc>
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	7e9b      	ldrb	r3, [r3, #26]
 8014f48:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d119      	bne.n	8014f84 <tcp_output+0x1cc>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d00b      	beq.n	8014f70 <tcp_output+0x1b8>
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d110      	bne.n	8014f84 <tcp_output+0x1cc>
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014f66:	891a      	ldrh	r2, [r3, #8]
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	d209      	bcs.n	8014f84 <tcp_output+0x1cc>
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d004      	beq.n	8014f84 <tcp_output+0x1cc>
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014f80:	2b08      	cmp	r3, #8
 8014f82:	d901      	bls.n	8014f88 <tcp_output+0x1d0>
 8014f84:	2301      	movs	r3, #1
 8014f86:	e000      	b.n	8014f8a <tcp_output+0x1d2>
 8014f88:	2300      	movs	r3, #0
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d106      	bne.n	8014f9c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	7e9b      	ldrb	r3, [r3, #26]
 8014f92:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	f000 80e1 	beq.w	801515e <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	7d1b      	ldrb	r3, [r3, #20]
 8014fa0:	2b02      	cmp	r3, #2
 8014fa2:	d00d      	beq.n	8014fc0 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa6:	68db      	ldr	r3, [r3, #12]
 8014fa8:	899b      	ldrh	r3, [r3, #12]
 8014faa:	b29c      	uxth	r4, r3
 8014fac:	2010      	movs	r0, #16
 8014fae:	f7f9 fdb9 	bl	800eb24 <lwip_htons>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	461a      	mov	r2, r3
 8014fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fb8:	68db      	ldr	r3, [r3, #12]
 8014fba:	4322      	orrs	r2, r4
 8014fbc:	b292      	uxth	r2, r2
 8014fbe:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8014fc0:	697a      	ldr	r2, [r7, #20]
 8014fc2:	6879      	ldr	r1, [r7, #4]
 8014fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014fc6:	f000 f8e1 	bl	801518c <tcp_output_segment>
 8014fca:	4603      	mov	r3, r0
 8014fcc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d009      	beq.n	8014fea <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	7e9b      	ldrb	r3, [r3, #26]
 8014fda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014fde:	b2da      	uxtb	r2, r3
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	769a      	strb	r2, [r3, #26]
      return err;
 8014fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fe8:	e0cc      	b.n	8015184 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8014fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fec:	681a      	ldr	r2, [r3, #0]
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	7d1b      	ldrb	r3, [r3, #20]
 8014ff6:	2b02      	cmp	r3, #2
 8014ff8:	d006      	beq.n	8015008 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	7e9b      	ldrb	r3, [r3, #26]
 8014ffe:	f023 0303 	bic.w	r3, r3, #3
 8015002:	b2da      	uxtb	r2, r3
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801500a:	68db      	ldr	r3, [r3, #12]
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	4618      	mov	r0, r3
 8015010:	f7f9 fd96 	bl	800eb40 <lwip_htonl>
 8015014:	4604      	mov	r4, r0
 8015016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015018:	891b      	ldrh	r3, [r3, #8]
 801501a:	461d      	mov	r5, r3
 801501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501e:	68db      	ldr	r3, [r3, #12]
 8015020:	899b      	ldrh	r3, [r3, #12]
 8015022:	b29b      	uxth	r3, r3
 8015024:	4618      	mov	r0, r3
 8015026:	f7f9 fd7d 	bl	800eb24 <lwip_htons>
 801502a:	4603      	mov	r3, r0
 801502c:	f003 0303 	and.w	r3, r3, #3
 8015030:	2b00      	cmp	r3, #0
 8015032:	d00b      	beq.n	801504c <tcp_output+0x294>
 8015034:	2301      	movs	r3, #1
 8015036:	e00a      	b.n	801504e <tcp_output+0x296>
 8015038:	0801f2f4 	.word	0x0801f2f4
 801503c:	0801f6f8 	.word	0x0801f6f8
 8015040:	0801f358 	.word	0x0801f358
 8015044:	20016438 	.word	0x20016438
 8015048:	0801f720 	.word	0x0801f720
 801504c:	2300      	movs	r3, #0
 801504e:	442b      	add	r3, r5
 8015050:	4423      	add	r3, r4
 8015052:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015058:	68bb      	ldr	r3, [r7, #8]
 801505a:	1ad3      	subs	r3, r2, r3
 801505c:	2b00      	cmp	r3, #0
 801505e:	da02      	bge.n	8015066 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	68ba      	ldr	r2, [r7, #8]
 8015064:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015068:	891b      	ldrh	r3, [r3, #8]
 801506a:	461c      	mov	r4, r3
 801506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506e:	68db      	ldr	r3, [r3, #12]
 8015070:	899b      	ldrh	r3, [r3, #12]
 8015072:	b29b      	uxth	r3, r3
 8015074:	4618      	mov	r0, r3
 8015076:	f7f9 fd55 	bl	800eb24 <lwip_htons>
 801507a:	4603      	mov	r3, r0
 801507c:	f003 0303 	and.w	r3, r3, #3
 8015080:	2b00      	cmp	r3, #0
 8015082:	d001      	beq.n	8015088 <tcp_output+0x2d0>
 8015084:	2301      	movs	r3, #1
 8015086:	e000      	b.n	801508a <tcp_output+0x2d2>
 8015088:	2300      	movs	r3, #0
 801508a:	4423      	add	r3, r4
 801508c:	2b00      	cmp	r3, #0
 801508e:	d049      	beq.n	8015124 <tcp_output+0x36c>
      seg->next = NULL;
 8015090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015092:	2200      	movs	r2, #0
 8015094:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801509a:	2b00      	cmp	r3, #0
 801509c:	d105      	bne.n	80150aa <tcp_output+0x2f2>
        pcb->unacked = seg;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150a2:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 80150a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a6:	623b      	str	r3, [r7, #32]
 80150a8:	e03f      	b.n	801512a <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80150aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ac:	68db      	ldr	r3, [r3, #12]
 80150ae:	685b      	ldr	r3, [r3, #4]
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7f9 fd45 	bl	800eb40 <lwip_htonl>
 80150b6:	4604      	mov	r4, r0
 80150b8:	6a3b      	ldr	r3, [r7, #32]
 80150ba:	68db      	ldr	r3, [r3, #12]
 80150bc:	685b      	ldr	r3, [r3, #4]
 80150be:	4618      	mov	r0, r3
 80150c0:	f7f9 fd3e 	bl	800eb40 <lwip_htonl>
 80150c4:	4603      	mov	r3, r0
 80150c6:	1ae3      	subs	r3, r4, r3
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	da24      	bge.n	8015116 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	336c      	adds	r3, #108	; 0x6c
 80150d0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80150d2:	e002      	b.n	80150da <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80150d4:	69fb      	ldr	r3, [r7, #28]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80150da:	69fb      	ldr	r3, [r7, #28]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d011      	beq.n	8015106 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80150e2:	69fb      	ldr	r3, [r7, #28]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	68db      	ldr	r3, [r3, #12]
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	4618      	mov	r0, r3
 80150ec:	f7f9 fd28 	bl	800eb40 <lwip_htonl>
 80150f0:	4604      	mov	r4, r0
 80150f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f4:	68db      	ldr	r3, [r3, #12]
 80150f6:	685b      	ldr	r3, [r3, #4]
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7f9 fd21 	bl	800eb40 <lwip_htonl>
 80150fe:	4603      	mov	r3, r0
 8015100:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015102:	2b00      	cmp	r3, #0
 8015104:	dbe6      	blt.n	80150d4 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8015106:	69fb      	ldr	r3, [r7, #28]
 8015108:	681a      	ldr	r2, [r3, #0]
 801510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801510e:	69fb      	ldr	r3, [r7, #28]
 8015110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015112:	601a      	str	r2, [r3, #0]
 8015114:	e009      	b.n	801512a <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015116:	6a3b      	ldr	r3, [r7, #32]
 8015118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801511a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801511c:	6a3b      	ldr	r3, [r7, #32]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	623b      	str	r3, [r7, #32]
 8015122:	e002      	b.n	801512a <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015124:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015126:	f7fc f9b0 	bl	801148a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801512e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015132:	2b00      	cmp	r3, #0
 8015134:	d015      	beq.n	8015162 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015138:	68db      	ldr	r3, [r3, #12]
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	4618      	mov	r0, r3
 801513e:	f7f9 fcff 	bl	800eb40 <lwip_htonl>
 8015142:	4602      	mov	r2, r0
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015148:	1ad3      	subs	r3, r2, r3
 801514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801514c:	8912      	ldrh	r2, [r2, #8]
 801514e:	4413      	add	r3, r2
  while (seg != NULL &&
 8015150:	69ba      	ldr	r2, [r7, #24]
 8015152:	429a      	cmp	r2, r3
 8015154:	f4bf aedf 	bcs.w	8014f16 <tcp_output+0x15e>
  }
output_done:
 8015158:	e003      	b.n	8015162 <tcp_output+0x3aa>
    goto output_done;
 801515a:	bf00      	nop
 801515c:	e002      	b.n	8015164 <tcp_output+0x3ac>
      break;
 801515e:	bf00      	nop
 8015160:	e000      	b.n	8015164 <tcp_output+0x3ac>
output_done:
 8015162:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015168:	2b00      	cmp	r3, #0
 801516a:	d103      	bne.n	8015174 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	2200      	movs	r2, #0
 8015170:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	7e9b      	ldrb	r3, [r3, #26]
 8015178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801517c:	b2da      	uxtb	r2, r3
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8015182:	2300      	movs	r3, #0
}
 8015184:	4618      	mov	r0, r3
 8015186:	3728      	adds	r7, #40	; 0x28
 8015188:	46bd      	mov	sp, r7
 801518a:	bdb0      	pop	{r4, r5, r7, pc}

0801518c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801518c:	b5b0      	push	{r4, r5, r7, lr}
 801518e:	b08c      	sub	sp, #48	; 0x30
 8015190:	af04      	add	r7, sp, #16
 8015192:	60f8      	str	r0, [r7, #12]
 8015194:	60b9      	str	r1, [r7, #8]
 8015196:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	685b      	ldr	r3, [r3, #4]
 801519c:	89db      	ldrh	r3, [r3, #14]
 801519e:	2b01      	cmp	r3, #1
 80151a0:	d001      	beq.n	80151a6 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80151a2:	2300      	movs	r3, #0
 80151a4:	e08b      	b.n	80152be <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80151a6:	68bb      	ldr	r3, [r7, #8]
 80151a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	68dc      	ldr	r4, [r3, #12]
 80151ae:	4610      	mov	r0, r2
 80151b0:	f7f9 fcc6 	bl	800eb40 <lwip_htonl>
 80151b4:	4603      	mov	r3, r0
 80151b6:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	68dc      	ldr	r4, [r3, #12]
 80151c0:	4610      	mov	r0, r2
 80151c2:	f7f9 fcaf 	bl	800eb24 <lwip_htons>
 80151c6:	4603      	mov	r3, r0
 80151c8:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ce:	68ba      	ldr	r2, [r7, #8]
 80151d0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80151d2:	441a      	add	r2, r3
 80151d4:	68bb      	ldr	r3, [r7, #8]
 80151d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	68db      	ldr	r3, [r3, #12]
 80151dc:	3314      	adds	r3, #20
 80151de:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	7a9b      	ldrb	r3, [r3, #10]
 80151e4:	f003 0301 	and.w	r3, r3, #1
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d014      	beq.n	8015216 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	3304      	adds	r3, #4
 80151f0:	4619      	mov	r1, r3
 80151f2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80151f6:	f7fc fc73 	bl	8011ae0 <tcp_eff_send_mss_impl>
 80151fa:	4603      	mov	r3, r0
 80151fc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80151fe:	8b7b      	ldrh	r3, [r7, #26]
 8015200:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015204:	4618      	mov	r0, r3
 8015206:	f7f9 fc9b 	bl	800eb40 <lwip_htonl>
 801520a:	4602      	mov	r2, r0
 801520c:	69fb      	ldr	r3, [r7, #28]
 801520e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015210:	69fb      	ldr	r3, [r7, #28]
 8015212:	3304      	adds	r3, #4
 8015214:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801521c:	2b00      	cmp	r3, #0
 801521e:	da02      	bge.n	8015226 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8015220:	68bb      	ldr	r3, [r7, #8]
 8015222:	2200      	movs	r2, #0
 8015224:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801522a:	2b00      	cmp	r3, #0
 801522c:	d10c      	bne.n	8015248 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801522e:	4b26      	ldr	r3, [pc, #152]	; (80152c8 <tcp_output_segment+0x13c>)
 8015230:	681a      	ldr	r2, [r3, #0]
 8015232:	68bb      	ldr	r3, [r7, #8]
 8015234:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	68db      	ldr	r3, [r3, #12]
 801523a:	685b      	ldr	r3, [r3, #4]
 801523c:	4618      	mov	r0, r3
 801523e:	f7f9 fc7f 	bl	800eb40 <lwip_htonl>
 8015242:	4602      	mov	r2, r0
 8015244:	68bb      	ldr	r3, [r7, #8]
 8015246:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	68db      	ldr	r3, [r3, #12]
 801524c:	461a      	mov	r2, r3
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	685b      	ldr	r3, [r3, #4]
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	1ad3      	subs	r3, r2, r3
 8015256:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	685b      	ldr	r3, [r3, #4]
 801525c:	8959      	ldrh	r1, [r3, #10]
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	685b      	ldr	r3, [r3, #4]
 8015262:	8b3a      	ldrh	r2, [r7, #24]
 8015264:	1a8a      	subs	r2, r1, r2
 8015266:	b292      	uxth	r2, r2
 8015268:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	685b      	ldr	r3, [r3, #4]
 801526e:	8919      	ldrh	r1, [r3, #8]
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	685b      	ldr	r3, [r3, #4]
 8015274:	8b3a      	ldrh	r2, [r7, #24]
 8015276:	1a8a      	subs	r2, r1, r2
 8015278:	b292      	uxth	r2, r2
 801527a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	685b      	ldr	r3, [r3, #4]
 8015280:	68fa      	ldr	r2, [r7, #12]
 8015282:	68d2      	ldr	r2, [r2, #12]
 8015284:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	68db      	ldr	r3, [r3, #12]
 801528a:	2200      	movs	r2, #0
 801528c:	741a      	strb	r2, [r3, #16]
 801528e:	2200      	movs	r2, #0
 8015290:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	6858      	ldr	r0, [r3, #4]
 8015296:	68b9      	ldr	r1, [r7, #8]
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	1d1c      	adds	r4, r3, #4
 801529c:	68bb      	ldr	r3, [r7, #8]
 801529e:	7a9d      	ldrb	r5, [r3, #10]
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	7a5b      	ldrb	r3, [r3, #9]
 80152a4:	687a      	ldr	r2, [r7, #4]
 80152a6:	9202      	str	r2, [sp, #8]
 80152a8:	2206      	movs	r2, #6
 80152aa:	9201      	str	r2, [sp, #4]
 80152ac:	9300      	str	r3, [sp, #0]
 80152ae:	462b      	mov	r3, r5
 80152b0:	4622      	mov	r2, r4
 80152b2:	f002 f8b3 	bl	801741c <ip4_output_if>
 80152b6:	4603      	mov	r3, r0
 80152b8:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80152ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152be:	4618      	mov	r0, r3
 80152c0:	3720      	adds	r7, #32
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bdb0      	pop	{r4, r5, r7, pc}
 80152c6:	bf00      	nop
 80152c8:	20016428 	.word	0x20016428

080152cc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b08c      	sub	sp, #48	; 0x30
 80152d0:	af04      	add	r7, sp, #16
 80152d2:	60f8      	str	r0, [r7, #12]
 80152d4:	60b9      	str	r1, [r7, #8]
 80152d6:	607a      	str	r2, [r7, #4]
 80152d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80152da:	2200      	movs	r2, #0
 80152dc:	2114      	movs	r1, #20
 80152de:	2001      	movs	r0, #1
 80152e0:	f7fa fa48 	bl	800f774 <pbuf_alloc>
 80152e4:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80152e6:	69fb      	ldr	r3, [r7, #28]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d05b      	beq.n	80153a4 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80152ec:	69fb      	ldr	r3, [r7, #28]
 80152ee:	895b      	ldrh	r3, [r3, #10]
 80152f0:	2b13      	cmp	r3, #19
 80152f2:	d806      	bhi.n	8015302 <tcp_rst+0x36>
 80152f4:	4b2d      	ldr	r3, [pc, #180]	; (80153ac <tcp_rst+0xe0>)
 80152f6:	f240 524d 	movw	r2, #1357	; 0x54d
 80152fa:	492d      	ldr	r1, [pc, #180]	; (80153b0 <tcp_rst+0xe4>)
 80152fc:	482d      	ldr	r0, [pc, #180]	; (80153b4 <tcp_rst+0xe8>)
 80152fe:	f005 fda7 	bl	801ae50 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8015302:	69fb      	ldr	r3, [r7, #28]
 8015304:	685b      	ldr	r3, [r3, #4]
 8015306:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8015308:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801530a:	4618      	mov	r0, r3
 801530c:	f7f9 fc0a 	bl	800eb24 <lwip_htons>
 8015310:	4603      	mov	r3, r0
 8015312:	461a      	mov	r2, r3
 8015314:	69bb      	ldr	r3, [r7, #24]
 8015316:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8015318:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801531a:	4618      	mov	r0, r3
 801531c:	f7f9 fc02 	bl	800eb24 <lwip_htons>
 8015320:	4603      	mov	r3, r0
 8015322:	461a      	mov	r2, r3
 8015324:	69bb      	ldr	r3, [r7, #24]
 8015326:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8015328:	68f8      	ldr	r0, [r7, #12]
 801532a:	f7f9 fc09 	bl	800eb40 <lwip_htonl>
 801532e:	4602      	mov	r2, r0
 8015330:	69bb      	ldr	r3, [r7, #24]
 8015332:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8015334:	68b8      	ldr	r0, [r7, #8]
 8015336:	f7f9 fc03 	bl	800eb40 <lwip_htonl>
 801533a:	4602      	mov	r2, r0
 801533c:	69bb      	ldr	r3, [r7, #24]
 801533e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8015340:	f245 0014 	movw	r0, #20500	; 0x5014
 8015344:	f7f9 fbee 	bl	800eb24 <lwip_htons>
 8015348:	4603      	mov	r3, r0
 801534a:	461a      	mov	r2, r3
 801534c:	69bb      	ldr	r3, [r7, #24]
 801534e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8015350:	69bb      	ldr	r3, [r7, #24]
 8015352:	2200      	movs	r2, #0
 8015354:	f042 0208 	orr.w	r2, r2, #8
 8015358:	739a      	strb	r2, [r3, #14]
 801535a:	2200      	movs	r2, #0
 801535c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8015360:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8015362:	69bb      	ldr	r3, [r7, #24]
 8015364:	2200      	movs	r2, #0
 8015366:	741a      	strb	r2, [r3, #16]
 8015368:	2200      	movs	r2, #0
 801536a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 801536c:	69bb      	ldr	r3, [r7, #24]
 801536e:	2200      	movs	r2, #0
 8015370:	749a      	strb	r2, [r3, #18]
 8015372:	2200      	movs	r2, #0
 8015374:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8015376:	6838      	ldr	r0, [r7, #0]
 8015378:	f001 fea8 	bl	80170cc <ip4_route>
 801537c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801537e:	697b      	ldr	r3, [r7, #20]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d00b      	beq.n	801539c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	9302      	str	r3, [sp, #8]
 8015388:	2306      	movs	r3, #6
 801538a:	9301      	str	r3, [sp, #4]
 801538c:	2300      	movs	r3, #0
 801538e:	9300      	str	r3, [sp, #0]
 8015390:	23ff      	movs	r3, #255	; 0xff
 8015392:	683a      	ldr	r2, [r7, #0]
 8015394:	6879      	ldr	r1, [r7, #4]
 8015396:	69f8      	ldr	r0, [r7, #28]
 8015398:	f002 f840 	bl	801741c <ip4_output_if>
  }
  pbuf_free(p);
 801539c:	69f8      	ldr	r0, [r7, #28]
 801539e:	f7fa fd5b 	bl	800fe58 <pbuf_free>
 80153a2:	e000      	b.n	80153a6 <tcp_rst+0xda>
    return;
 80153a4:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80153a6:	3720      	adds	r7, #32
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}
 80153ac:	0801f2f4 	.word	0x0801f2f4
 80153b0:	0801f328 	.word	0x0801f328
 80153b4:	0801f358 	.word	0x0801f358

080153b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d029      	beq.n	801541c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80153cc:	60fb      	str	r3, [r7, #12]
 80153ce:	e002      	b.n	80153d6 <tcp_rexmit_rto+0x1e>
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	60fb      	str	r3, [r7, #12]
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d1f8      	bne.n	80153d0 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	2200      	movs	r2, #0
 80153f2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80153fa:	2bff      	cmp	r3, #255	; 0xff
 80153fc:	d007      	beq.n	801540e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015404:	3301      	adds	r3, #1
 8015406:	b2da      	uxtb	r2, r3
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	2200      	movs	r2, #0
 8015412:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8015414:	6878      	ldr	r0, [r7, #4]
 8015416:	f7ff fccf 	bl	8014db8 <tcp_output>
 801541a:	e000      	b.n	801541e <tcp_rexmit_rto+0x66>
    return;
 801541c:	bf00      	nop
}
 801541e:	3710      	adds	r7, #16
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}

08015424 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015424:	b590      	push	{r4, r7, lr}
 8015426:	b085      	sub	sp, #20
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015430:	2b00      	cmp	r3, #0
 8015432:	d043      	beq.n	80154bc <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015438:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	681a      	ldr	r2, [r3, #0]
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	3368      	adds	r3, #104	; 0x68
 8015446:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015448:	e002      	b.n	8015450 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d011      	beq.n	801547c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	68db      	ldr	r3, [r3, #12]
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	4618      	mov	r0, r3
 8015462:	f7f9 fb6d 	bl	800eb40 <lwip_htonl>
 8015466:	4604      	mov	r4, r0
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	68db      	ldr	r3, [r3, #12]
 801546c:	685b      	ldr	r3, [r3, #4]
 801546e:	4618      	mov	r0, r3
 8015470:	f7f9 fb66 	bl	800eb40 <lwip_htonl>
 8015474:	4603      	mov	r3, r0
 8015476:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015478:	2b00      	cmp	r3, #0
 801547a:	dbe6      	blt.n	801544a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	681a      	ldr	r2, [r3, #0]
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	68ba      	ldr	r2, [r7, #8]
 8015488:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d103      	bne.n	801549a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	2200      	movs	r2, #0
 8015496:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80154a0:	2bff      	cmp	r3, #255	; 0xff
 80154a2:	d007      	beq.n	80154b4 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80154aa:	3301      	adds	r3, #1
 80154ac:	b2da      	uxtb	r2, r3
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	2200      	movs	r2, #0
 80154b8:	635a      	str	r2, [r3, #52]	; 0x34
 80154ba:	e000      	b.n	80154be <tcp_rexmit+0x9a>
    return;
 80154bc:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80154be:	3714      	adds	r7, #20
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd90      	pop	{r4, r7, pc}

080154c4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b082      	sub	sp, #8
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d04c      	beq.n	801556e <tcp_rexmit_fast+0xaa>
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	7e9b      	ldrb	r3, [r3, #26]
 80154d8:	f003 0304 	and.w	r3, r3, #4
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d146      	bne.n	801556e <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80154e0:	6878      	ldr	r0, [r7, #4]
 80154e2:	f7ff ff9f 	bl	8015424 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80154f2:	429a      	cmp	r2, r3
 80154f4:	d208      	bcs.n	8015508 <tcp_rexmit_fast+0x44>
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	da00      	bge.n	8015502 <tcp_rexmit_fast+0x3e>
 8015500:	3301      	adds	r3, #1
 8015502:	105b      	asrs	r3, r3, #1
 8015504:	b29b      	uxth	r3, r3
 8015506:	e007      	b.n	8015518 <tcp_rexmit_fast+0x54>
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801550e:	2b00      	cmp	r3, #0
 8015510:	da00      	bge.n	8015514 <tcp_rexmit_fast+0x50>
 8015512:	3301      	adds	r3, #1
 8015514:	105b      	asrs	r3, r3, #1
 8015516:	b29b      	uxth	r3, r3
 8015518:	687a      	ldr	r2, [r7, #4]
 801551a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015524:	461a      	mov	r2, r3
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801552a:	005b      	lsls	r3, r3, #1
 801552c:	429a      	cmp	r2, r3
 801552e:	d206      	bcs.n	801553e <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015534:	005b      	lsls	r3, r3, #1
 8015536:	b29a      	uxth	r2, r3
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015548:	4619      	mov	r1, r3
 801554a:	0049      	lsls	r1, r1, #1
 801554c:	440b      	add	r3, r1
 801554e:	b29b      	uxth	r3, r3
 8015550:	4413      	add	r3, r2
 8015552:	b29a      	uxth	r2, r3
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	7e9b      	ldrb	r3, [r3, #26]
 801555e:	f043 0304 	orr.w	r3, r3, #4
 8015562:	b2da      	uxtb	r2, r3
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2200      	movs	r2, #0
 801556c:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 801556e:	bf00      	nop
 8015570:	3708      	adds	r7, #8
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}

08015576 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015576:	b580      	push	{r7, lr}
 8015578:	b08a      	sub	sp, #40	; 0x28
 801557a:	af04      	add	r7, sp, #16
 801557c:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015582:	3b01      	subs	r3, #1
 8015584:	4618      	mov	r0, r3
 8015586:	f7f9 fadb 	bl	800eb40 <lwip_htonl>
 801558a:	4603      	mov	r3, r0
 801558c:	2200      	movs	r2, #0
 801558e:	2100      	movs	r1, #0
 8015590:	6878      	ldr	r0, [r7, #4]
 8015592:	f7fe fd43 	bl	801401c <tcp_output_alloc_header>
 8015596:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015598:	693b      	ldr	r3, [r7, #16]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d102      	bne.n	80155a4 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801559e:	f04f 33ff 	mov.w	r3, #4294967295
 80155a2:	e021      	b.n	80155e8 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	3304      	adds	r3, #4
 80155a8:	4618      	mov	r0, r3
 80155aa:	f001 fd8f 	bl	80170cc <ip4_route>
 80155ae:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d102      	bne.n	80155bc <tcp_keepalive+0x46>
    err = ERR_RTE;
 80155b6:	23fc      	movs	r3, #252	; 0xfc
 80155b8:	75fb      	strb	r3, [r7, #23]
 80155ba:	e010      	b.n	80155de <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80155bc:	6879      	ldr	r1, [r7, #4]
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	1d1a      	adds	r2, r3, #4
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	7a98      	ldrb	r0, [r3, #10]
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	9302      	str	r3, [sp, #8]
 80155ca:	2306      	movs	r3, #6
 80155cc:	9301      	str	r3, [sp, #4]
 80155ce:	2300      	movs	r3, #0
 80155d0:	9300      	str	r3, [sp, #0]
 80155d2:	4603      	mov	r3, r0
 80155d4:	6938      	ldr	r0, [r7, #16]
 80155d6:	f001 ff21 	bl	801741c <ip4_output_if>
 80155da:	4603      	mov	r3, r0
 80155dc:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80155de:	6938      	ldr	r0, [r7, #16]
 80155e0:	f7fa fc3a 	bl	800fe58 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80155e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80155e8:	4618      	mov	r0, r3
 80155ea:	3718      	adds	r7, #24
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}

080155f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80155f0:	b590      	push	{r4, r7, lr}
 80155f2:	b08f      	sub	sp, #60	; 0x3c
 80155f4:	af04      	add	r7, sp, #16
 80155f6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155fc:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80155fe:	6a3b      	ldr	r3, [r7, #32]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d102      	bne.n	801560a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015608:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801560a:	6a3b      	ldr	r3, [r7, #32]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d101      	bne.n	8015614 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8015610:	2300      	movs	r3, #0
 8015612:	e085      	b.n	8015720 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015614:	6a3b      	ldr	r3, [r7, #32]
 8015616:	68db      	ldr	r3, [r3, #12]
 8015618:	899b      	ldrh	r3, [r3, #12]
 801561a:	b29b      	uxth	r3, r3
 801561c:	4618      	mov	r0, r3
 801561e:	f7f9 fa81 	bl	800eb24 <lwip_htons>
 8015622:	4603      	mov	r3, r0
 8015624:	f003 0301 	and.w	r3, r3, #1
 8015628:	2b00      	cmp	r3, #0
 801562a:	d005      	beq.n	8015638 <tcp_zero_window_probe+0x48>
 801562c:	6a3b      	ldr	r3, [r7, #32]
 801562e:	891b      	ldrh	r3, [r3, #8]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d101      	bne.n	8015638 <tcp_zero_window_probe+0x48>
 8015634:	2301      	movs	r3, #1
 8015636:	e000      	b.n	801563a <tcp_zero_window_probe+0x4a>
 8015638:	2300      	movs	r3, #0
 801563a:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801563c:	7ffb      	ldrb	r3, [r7, #31]
 801563e:	2b00      	cmp	r3, #0
 8015640:	bf0c      	ite	eq
 8015642:	2301      	moveq	r3, #1
 8015644:	2300      	movne	r3, #0
 8015646:	b2db      	uxtb	r3, r3
 8015648:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801564a:	6a3b      	ldr	r3, [r7, #32]
 801564c:	68db      	ldr	r3, [r3, #12]
 801564e:	685b      	ldr	r3, [r3, #4]
 8015650:	8bba      	ldrh	r2, [r7, #28]
 8015652:	2100      	movs	r1, #0
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f7fe fce1 	bl	801401c <tcp_output_alloc_header>
 801565a:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801565c:	69bb      	ldr	r3, [r7, #24]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d102      	bne.n	8015668 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015662:	f04f 33ff 	mov.w	r3, #4294967295
 8015666:	e05b      	b.n	8015720 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015668:	69bb      	ldr	r3, [r7, #24]
 801566a:	685b      	ldr	r3, [r3, #4]
 801566c:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801566e:	7ffb      	ldrb	r3, [r7, #31]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d00e      	beq.n	8015692 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	899b      	ldrh	r3, [r3, #12]
 8015678:	b29b      	uxth	r3, r3
 801567a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801567e:	b29c      	uxth	r4, r3
 8015680:	2011      	movs	r0, #17
 8015682:	f7f9 fa4f 	bl	800eb24 <lwip_htons>
 8015686:	4603      	mov	r3, r0
 8015688:	4323      	orrs	r3, r4
 801568a:	b29a      	uxth	r2, r3
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	819a      	strh	r2, [r3, #12]
 8015690:	e010      	b.n	80156b4 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015692:	69bb      	ldr	r3, [r7, #24]
 8015694:	685b      	ldr	r3, [r3, #4]
 8015696:	3314      	adds	r3, #20
 8015698:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801569a:	6a3b      	ldr	r3, [r7, #32]
 801569c:	6858      	ldr	r0, [r3, #4]
 801569e:	6a3b      	ldr	r3, [r7, #32]
 80156a0:	685b      	ldr	r3, [r3, #4]
 80156a2:	891a      	ldrh	r2, [r3, #8]
 80156a4:	6a3b      	ldr	r3, [r7, #32]
 80156a6:	891b      	ldrh	r3, [r3, #8]
 80156a8:	1ad3      	subs	r3, r2, r3
 80156aa:	b29b      	uxth	r3, r3
 80156ac:	2201      	movs	r2, #1
 80156ae:	6939      	ldr	r1, [r7, #16]
 80156b0:	f7fa fdce 	bl	8010250 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80156b4:	6a3b      	ldr	r3, [r7, #32]
 80156b6:	68db      	ldr	r3, [r3, #12]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7f9 fa40 	bl	800eb40 <lwip_htonl>
 80156c0:	4603      	mov	r3, r0
 80156c2:	3301      	adds	r3, #1
 80156c4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	1ad3      	subs	r3, r2, r3
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	da02      	bge.n	80156d8 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	68fa      	ldr	r2, [r7, #12]
 80156d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	3304      	adds	r3, #4
 80156dc:	4618      	mov	r0, r3
 80156de:	f001 fcf5 	bl	80170cc <ip4_route>
 80156e2:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d103      	bne.n	80156f2 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80156ea:	23fc      	movs	r3, #252	; 0xfc
 80156ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80156f0:	e011      	b.n	8015716 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80156f2:	6879      	ldr	r1, [r7, #4]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	1d1a      	adds	r2, r3, #4
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	7a98      	ldrb	r0, [r3, #10]
 80156fc:	68bb      	ldr	r3, [r7, #8]
 80156fe:	9302      	str	r3, [sp, #8]
 8015700:	2306      	movs	r3, #6
 8015702:	9301      	str	r3, [sp, #4]
 8015704:	2300      	movs	r3, #0
 8015706:	9300      	str	r3, [sp, #0]
 8015708:	4603      	mov	r3, r0
 801570a:	69b8      	ldr	r0, [r7, #24]
 801570c:	f001 fe86 	bl	801741c <ip4_output_if>
 8015710:	4603      	mov	r3, r0
 8015712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8015716:	69b8      	ldr	r0, [r7, #24]
 8015718:	f7fa fb9e 	bl	800fe58 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801571c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015720:	4618      	mov	r0, r3
 8015722:	372c      	adds	r7, #44	; 0x2c
 8015724:	46bd      	mov	sp, r7
 8015726:	bd90      	pop	{r4, r7, pc}

08015728 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015730:	f7fa fe10 	bl	8010354 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015734:	4b0a      	ldr	r3, [pc, #40]	; (8015760 <tcpip_tcp_timer+0x38>)
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d103      	bne.n	8015744 <tcpip_tcp_timer+0x1c>
 801573c:	4b09      	ldr	r3, [pc, #36]	; (8015764 <tcpip_tcp_timer+0x3c>)
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d005      	beq.n	8015750 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015744:	2200      	movs	r2, #0
 8015746:	4908      	ldr	r1, [pc, #32]	; (8015768 <tcpip_tcp_timer+0x40>)
 8015748:	20fa      	movs	r0, #250	; 0xfa
 801574a:	f000 f86f 	bl	801582c <sys_timeout>
 801574e:	e002      	b.n	8015756 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015750:	4b06      	ldr	r3, [pc, #24]	; (801576c <tcpip_tcp_timer+0x44>)
 8015752:	2200      	movs	r2, #0
 8015754:	601a      	str	r2, [r3, #0]
  }
}
 8015756:	bf00      	nop
 8015758:	3708      	adds	r7, #8
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
 801575e:	bf00      	nop
 8015760:	20016424 	.word	0x20016424
 8015764:	20016434 	.word	0x20016434
 8015768:	08015729 	.word	0x08015729
 801576c:	2000c9a8 	.word	0x2000c9a8

08015770 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015774:	4b0a      	ldr	r3, [pc, #40]	; (80157a0 <tcp_timer_needed+0x30>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d10f      	bne.n	801579c <tcp_timer_needed+0x2c>
 801577c:	4b09      	ldr	r3, [pc, #36]	; (80157a4 <tcp_timer_needed+0x34>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d103      	bne.n	801578c <tcp_timer_needed+0x1c>
 8015784:	4b08      	ldr	r3, [pc, #32]	; (80157a8 <tcp_timer_needed+0x38>)
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d007      	beq.n	801579c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801578c:	4b04      	ldr	r3, [pc, #16]	; (80157a0 <tcp_timer_needed+0x30>)
 801578e:	2201      	movs	r2, #1
 8015790:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015792:	2200      	movs	r2, #0
 8015794:	4905      	ldr	r1, [pc, #20]	; (80157ac <tcp_timer_needed+0x3c>)
 8015796:	20fa      	movs	r0, #250	; 0xfa
 8015798:	f000 f848 	bl	801582c <sys_timeout>
  }
}
 801579c:	bf00      	nop
 801579e:	bd80      	pop	{r7, pc}
 80157a0:	2000c9a8 	.word	0x2000c9a8
 80157a4:	20016424 	.word	0x20016424
 80157a8:	20016434 	.word	0x20016434
 80157ac:	08015729 	.word	0x08015729

080157b0 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b084      	sub	sp, #16
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	685b      	ldr	r3, [r3, #4]
 80157c0:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	687a      	ldr	r2, [r7, #4]
 80157c8:	4903      	ldr	r1, [pc, #12]	; (80157d8 <cyclic_timer+0x28>)
 80157ca:	4618      	mov	r0, r3
 80157cc:	f000 f82e 	bl	801582c <sys_timeout>
}
 80157d0:	bf00      	nop
 80157d2:	3710      	adds	r7, #16
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}
 80157d8:	080157b1 	.word	0x080157b1

080157dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b082      	sub	sp, #8
 80157e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80157e2:	2301      	movs	r3, #1
 80157e4:	607b      	str	r3, [r7, #4]
 80157e6:	e00e      	b.n	8015806 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80157e8:	4a0d      	ldr	r2, [pc, #52]	; (8015820 <sys_timeouts_init+0x44>)
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	00db      	lsls	r3, r3, #3
 80157f4:	4a0a      	ldr	r2, [pc, #40]	; (8015820 <sys_timeouts_init+0x44>)
 80157f6:	4413      	add	r3, r2
 80157f8:	461a      	mov	r2, r3
 80157fa:	490a      	ldr	r1, [pc, #40]	; (8015824 <sys_timeouts_init+0x48>)
 80157fc:	f000 f816 	bl	801582c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	3301      	adds	r3, #1
 8015804:	607b      	str	r3, [r7, #4]
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	2b02      	cmp	r3, #2
 801580a:	d9ed      	bls.n	80157e8 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 801580c:	f7f3 fc60 	bl	80090d0 <sys_now>
 8015810:	4602      	mov	r2, r0
 8015812:	4b05      	ldr	r3, [pc, #20]	; (8015828 <sys_timeouts_init+0x4c>)
 8015814:	601a      	str	r2, [r3, #0]
}
 8015816:	bf00      	nop
 8015818:	3708      	adds	r7, #8
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	080200d0 	.word	0x080200d0
 8015824:	080157b1 	.word	0x080157b1
 8015828:	2000c9a4 	.word	0x2000c9a4

0801582c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b088      	sub	sp, #32
 8015830:	af00      	add	r7, sp, #0
 8015832:	60f8      	str	r0, [r7, #12]
 8015834:	60b9      	str	r1, [r7, #8]
 8015836:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015838:	200a      	movs	r0, #10
 801583a:	f7f9 fd61 	bl	800f300 <memp_malloc>
 801583e:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d10a      	bne.n	801585c <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015846:	697b      	ldr	r3, [r7, #20]
 8015848:	2b00      	cmp	r3, #0
 801584a:	f040 8084 	bne.w	8015956 <sys_timeout+0x12a>
 801584e:	4b44      	ldr	r3, [pc, #272]	; (8015960 <sys_timeout+0x134>)
 8015850:	22d4      	movs	r2, #212	; 0xd4
 8015852:	4944      	ldr	r1, [pc, #272]	; (8015964 <sys_timeout+0x138>)
 8015854:	4844      	ldr	r0, [pc, #272]	; (8015968 <sys_timeout+0x13c>)
 8015856:	f005 fafb 	bl	801ae50 <iprintf>
    return;
 801585a:	e07c      	b.n	8015956 <sys_timeout+0x12a>
  }

  now = sys_now();
 801585c:	f7f3 fc38 	bl	80090d0 <sys_now>
 8015860:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8015862:	4b42      	ldr	r3, [pc, #264]	; (801596c <sys_timeout+0x140>)
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d105      	bne.n	8015876 <sys_timeout+0x4a>
    diff = 0;
 801586a:	2300      	movs	r3, #0
 801586c:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801586e:	4a40      	ldr	r2, [pc, #256]	; (8015970 <sys_timeout+0x144>)
 8015870:	693b      	ldr	r3, [r7, #16]
 8015872:	6013      	str	r3, [r2, #0]
 8015874:	e004      	b.n	8015880 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8015876:	4b3e      	ldr	r3, [pc, #248]	; (8015970 <sys_timeout+0x144>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	693a      	ldr	r2, [r7, #16]
 801587c:	1ad3      	subs	r3, r2, r3
 801587e:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	2200      	movs	r2, #0
 8015884:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015886:	697b      	ldr	r3, [r7, #20]
 8015888:	68ba      	ldr	r2, [r7, #8]
 801588a:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801588c:	697b      	ldr	r3, [r7, #20]
 801588e:	687a      	ldr	r2, [r7, #4]
 8015890:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8015892:	68fa      	ldr	r2, [r7, #12]
 8015894:	69bb      	ldr	r3, [r7, #24]
 8015896:	441a      	add	r2, r3
 8015898:	697b      	ldr	r3, [r7, #20]
 801589a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801589c:	4b33      	ldr	r3, [pc, #204]	; (801596c <sys_timeout+0x140>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d103      	bne.n	80158ac <sys_timeout+0x80>
    next_timeout = timeout;
 80158a4:	4a31      	ldr	r2, [pc, #196]	; (801596c <sys_timeout+0x140>)
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	6013      	str	r3, [r2, #0]
    return;
 80158aa:	e055      	b.n	8015958 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80158ac:	4b2f      	ldr	r3, [pc, #188]	; (801596c <sys_timeout+0x140>)
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	68fa      	ldr	r2, [r7, #12]
 80158b4:	429a      	cmp	r2, r3
 80158b6:	d20f      	bcs.n	80158d8 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80158b8:	4b2c      	ldr	r3, [pc, #176]	; (801596c <sys_timeout+0x140>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	6859      	ldr	r1, [r3, #4]
 80158be:	4b2b      	ldr	r3, [pc, #172]	; (801596c <sys_timeout+0x140>)
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	68fa      	ldr	r2, [r7, #12]
 80158c4:	1a8a      	subs	r2, r1, r2
 80158c6:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 80158c8:	4b28      	ldr	r3, [pc, #160]	; (801596c <sys_timeout+0x140>)
 80158ca:	681a      	ldr	r2, [r3, #0]
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80158d0:	4a26      	ldr	r2, [pc, #152]	; (801596c <sys_timeout+0x140>)
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	6013      	str	r3, [r2, #0]
 80158d6:	e03f      	b.n	8015958 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80158d8:	4b24      	ldr	r3, [pc, #144]	; (801596c <sys_timeout+0x140>)
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	61fb      	str	r3, [r7, #28]
 80158de:	e036      	b.n	801594e <sys_timeout+0x122>
      timeout->time -= t->time;
 80158e0:	697b      	ldr	r3, [r7, #20]
 80158e2:	685a      	ldr	r2, [r3, #4]
 80158e4:	69fb      	ldr	r3, [r7, #28]
 80158e6:	685b      	ldr	r3, [r3, #4]
 80158e8:	1ad2      	subs	r2, r2, r3
 80158ea:	697b      	ldr	r3, [r7, #20]
 80158ec:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80158ee:	69fb      	ldr	r3, [r7, #28]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d006      	beq.n	8015904 <sys_timeout+0xd8>
 80158f6:	69fb      	ldr	r3, [r7, #28]
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	685a      	ldr	r2, [r3, #4]
 80158fc:	697b      	ldr	r3, [r7, #20]
 80158fe:	685b      	ldr	r3, [r3, #4]
 8015900:	429a      	cmp	r2, r3
 8015902:	d921      	bls.n	8015948 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8015904:	69fb      	ldr	r3, [r7, #28]
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d009      	beq.n	8015920 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 801590c:	69fb      	ldr	r3, [r7, #28]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	6859      	ldr	r1, [r3, #4]
 8015912:	697b      	ldr	r3, [r7, #20]
 8015914:	685a      	ldr	r2, [r3, #4]
 8015916:	69fb      	ldr	r3, [r7, #28]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	1a8a      	subs	r2, r1, r2
 801591c:	605a      	str	r2, [r3, #4]
 801591e:	e00b      	b.n	8015938 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	685b      	ldr	r3, [r3, #4]
 8015924:	68fa      	ldr	r2, [r7, #12]
 8015926:	429a      	cmp	r2, r3
 8015928:	d206      	bcs.n	8015938 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 801592a:	4b10      	ldr	r3, [pc, #64]	; (801596c <sys_timeout+0x140>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	685a      	ldr	r2, [r3, #4]
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	441a      	add	r2, r3
 8015934:	697b      	ldr	r3, [r7, #20]
 8015936:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8015938:	69fb      	ldr	r3, [r7, #28]
 801593a:	681a      	ldr	r2, [r3, #0]
 801593c:	697b      	ldr	r3, [r7, #20]
 801593e:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015940:	69fb      	ldr	r3, [r7, #28]
 8015942:	697a      	ldr	r2, [r7, #20]
 8015944:	601a      	str	r2, [r3, #0]
        break;
 8015946:	e007      	b.n	8015958 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015948:	69fb      	ldr	r3, [r7, #28]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	61fb      	str	r3, [r7, #28]
 801594e:	69fb      	ldr	r3, [r7, #28]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d1c5      	bne.n	80158e0 <sys_timeout+0xb4>
 8015954:	e000      	b.n	8015958 <sys_timeout+0x12c>
    return;
 8015956:	bf00      	nop
      }
    }
  }
}
 8015958:	3720      	adds	r7, #32
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}
 801595e:	bf00      	nop
 8015960:	0801f738 	.word	0x0801f738
 8015964:	0801f76c 	.word	0x0801f76c
 8015968:	0801f7ac 	.word	0x0801f7ac
 801596c:	2000c9a0 	.word	0x2000c9a0
 8015970:	2000c9a4 	.word	0x2000c9a4

08015974 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b086      	sub	sp, #24
 8015978:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801597a:	4b24      	ldr	r3, [pc, #144]	; (8015a0c <sys_check_timeouts+0x98>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d03f      	beq.n	8015a02 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8015982:	f7f3 fba5 	bl	80090d0 <sys_now>
 8015986:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8015988:	4b21      	ldr	r3, [pc, #132]	; (8015a10 <sys_check_timeouts+0x9c>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	68fa      	ldr	r2, [r7, #12]
 801598e:	1ad3      	subs	r3, r2, r3
 8015990:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8015992:	2300      	movs	r3, #0
 8015994:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8015996:	4b1d      	ldr	r3, [pc, #116]	; (8015a0c <sys_check_timeouts+0x98>)
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 801599c:	68bb      	ldr	r3, [r7, #8]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d02c      	beq.n	80159fc <sys_check_timeouts+0x88>
 80159a2:	68bb      	ldr	r3, [r7, #8]
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	697a      	ldr	r2, [r7, #20]
 80159a8:	429a      	cmp	r2, r3
 80159aa:	d327      	bcc.n	80159fc <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 80159ac:	2301      	movs	r3, #1
 80159ae:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 80159b0:	68bb      	ldr	r3, [r7, #8]
 80159b2:	685a      	ldr	r2, [r3, #4]
 80159b4:	4b16      	ldr	r3, [pc, #88]	; (8015a10 <sys_check_timeouts+0x9c>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	4413      	add	r3, r2
 80159ba:	4a15      	ldr	r2, [pc, #84]	; (8015a10 <sys_check_timeouts+0x9c>)
 80159bc:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	685b      	ldr	r3, [r3, #4]
 80159c2:	697a      	ldr	r2, [r7, #20]
 80159c4:	1ad3      	subs	r3, r2, r3
 80159c6:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	4a0f      	ldr	r2, [pc, #60]	; (8015a0c <sys_check_timeouts+0x98>)
 80159ce:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	689b      	ldr	r3, [r3, #8]
 80159d4:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	68db      	ldr	r3, [r3, #12]
 80159da:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80159dc:	68b9      	ldr	r1, [r7, #8]
 80159de:	200a      	movs	r0, #10
 80159e0:	f7f9 fce0 	bl	800f3a4 <memp_free>
        if (handler != NULL) {
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d008      	beq.n	80159fc <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80159ea:	480a      	ldr	r0, [pc, #40]	; (8015a14 <sys_check_timeouts+0xa0>)
 80159ec:	f002 fe6a 	bl	80186c4 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	6838      	ldr	r0, [r7, #0]
 80159f4:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80159f6:	4807      	ldr	r0, [pc, #28]	; (8015a14 <sys_check_timeouts+0xa0>)
 80159f8:	f002 fe73 	bl	80186e2 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80159fc:	7cfb      	ldrb	r3, [r7, #19]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d1c7      	bne.n	8015992 <sys_check_timeouts+0x1e>
  }
}
 8015a02:	bf00      	nop
 8015a04:	3718      	adds	r7, #24
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}
 8015a0a:	bf00      	nop
 8015a0c:	2000c9a0 	.word	0x2000c9a0
 8015a10:	2000c9a4 	.word	0x2000c9a4
 8015a14:	20012d10 	.word	0x20012d10

08015a18 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8015a1e:	4b0f      	ldr	r3, [pc, #60]	; (8015a5c <sys_timeouts_sleeptime+0x44>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d102      	bne.n	8015a2c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8015a26:	f04f 33ff 	mov.w	r3, #4294967295
 8015a2a:	e013      	b.n	8015a54 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8015a2c:	f7f3 fb50 	bl	80090d0 <sys_now>
 8015a30:	4602      	mov	r2, r0
 8015a32:	4b0b      	ldr	r3, [pc, #44]	; (8015a60 <sys_timeouts_sleeptime+0x48>)
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	1ad3      	subs	r3, r2, r3
 8015a38:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8015a3a:	4b08      	ldr	r3, [pc, #32]	; (8015a5c <sys_timeouts_sleeptime+0x44>)
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	685b      	ldr	r3, [r3, #4]
 8015a40:	687a      	ldr	r2, [r7, #4]
 8015a42:	429a      	cmp	r2, r3
 8015a44:	d901      	bls.n	8015a4a <sys_timeouts_sleeptime+0x32>
    return 0;
 8015a46:	2300      	movs	r3, #0
 8015a48:	e004      	b.n	8015a54 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8015a4a:	4b04      	ldr	r3, [pc, #16]	; (8015a5c <sys_timeouts_sleeptime+0x44>)
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	685a      	ldr	r2, [r3, #4]
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	1ad3      	subs	r3, r2, r3
  }
}
 8015a54:	4618      	mov	r0, r3
 8015a56:	3708      	adds	r7, #8
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}
 8015a5c:	2000c9a0 	.word	0x2000c9a0
 8015a60:	2000c9a4 	.word	0x2000c9a4

08015a64 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b084      	sub	sp, #16
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
 8015a6c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8015a6e:	4b0f      	ldr	r3, [pc, #60]	; (8015aac <sys_timeouts_mbox_fetch+0x48>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d105      	bne.n	8015a82 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8015a76:	2200      	movs	r2, #0
 8015a78:	6839      	ldr	r1, [r7, #0]
 8015a7a:	6878      	ldr	r0, [r7, #4]
 8015a7c:	f002 fced 	bl	801845a <sys_arch_mbox_fetch>
    return;
 8015a80:	e011      	b.n	8015aa6 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8015a82:	f7ff ffc9 	bl	8015a18 <sys_timeouts_sleeptime>
 8015a86:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d008      	beq.n	8015aa0 <sys_timeouts_mbox_fetch+0x3c>
 8015a8e:	68fa      	ldr	r2, [r7, #12]
 8015a90:	6839      	ldr	r1, [r7, #0]
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f002 fce1 	bl	801845a <sys_arch_mbox_fetch>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a9e:	d102      	bne.n	8015aa6 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8015aa0:	f7ff ff68 	bl	8015974 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015aa4:	e7e3      	b.n	8015a6e <sys_timeouts_mbox_fetch+0xa>
  }
}
 8015aa6:	3710      	adds	r7, #16
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	bd80      	pop	{r7, pc}
 8015aac:	2000c9a0 	.word	0x2000c9a0

08015ab0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015ab0:	b480      	push	{r7}
 8015ab2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8015ab4:	bf00      	nop
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015abc:	4770      	bx	lr
	...

08015ac0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015ac0:	b480      	push	{r7}
 8015ac2:	b083      	sub	sp, #12
 8015ac4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015aca:	4b17      	ldr	r3, [pc, #92]	; (8015b28 <udp_new_port+0x68>)
 8015acc:	881b      	ldrh	r3, [r3, #0]
 8015ace:	1c5a      	adds	r2, r3, #1
 8015ad0:	b291      	uxth	r1, r2
 8015ad2:	4a15      	ldr	r2, [pc, #84]	; (8015b28 <udp_new_port+0x68>)
 8015ad4:	8011      	strh	r1, [r2, #0]
 8015ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ada:	4293      	cmp	r3, r2
 8015adc:	d103      	bne.n	8015ae6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015ade:	4b12      	ldr	r3, [pc, #72]	; (8015b28 <udp_new_port+0x68>)
 8015ae0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015ae4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ae6:	4b11      	ldr	r3, [pc, #68]	; (8015b2c <udp_new_port+0x6c>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	603b      	str	r3, [r7, #0]
 8015aec:	e011      	b.n	8015b12 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	8a5a      	ldrh	r2, [r3, #18]
 8015af2:	4b0d      	ldr	r3, [pc, #52]	; (8015b28 <udp_new_port+0x68>)
 8015af4:	881b      	ldrh	r3, [r3, #0]
 8015af6:	429a      	cmp	r2, r3
 8015af8:	d108      	bne.n	8015b0c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015afa:	88fb      	ldrh	r3, [r7, #6]
 8015afc:	3301      	adds	r3, #1
 8015afe:	80fb      	strh	r3, [r7, #6]
 8015b00:	88fb      	ldrh	r3, [r7, #6]
 8015b02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015b06:	d3e0      	bcc.n	8015aca <udp_new_port+0xa>
        return 0;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	e007      	b.n	8015b1c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	68db      	ldr	r3, [r3, #12]
 8015b10:	603b      	str	r3, [r7, #0]
 8015b12:	683b      	ldr	r3, [r7, #0]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d1ea      	bne.n	8015aee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015b18:	4b03      	ldr	r3, [pc, #12]	; (8015b28 <udp_new_port+0x68>)
 8015b1a:	881b      	ldrh	r3, [r3, #0]
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	370c      	adds	r7, #12
 8015b20:	46bd      	mov	sp, r7
 8015b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b26:	4770      	bx	lr
 8015b28:	20000024 	.word	0x20000024
 8015b2c:	2001643c 	.word	0x2001643c

08015b30 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015b30:	b480      	push	{r7}
 8015b32:	b085      	sub	sp, #20
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	60f8      	str	r0, [r7, #12]
 8015b38:	60b9      	str	r1, [r7, #8]
 8015b3a:	4613      	mov	r3, r2
 8015b3c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015b3e:	79fb      	ldrb	r3, [r7, #7]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d018      	beq.n	8015b76 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d013      	beq.n	8015b72 <udp_input_local_match+0x42>
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d00f      	beq.n	8015b72 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015b52:	4b14      	ldr	r3, [pc, #80]	; (8015ba4 <udp_input_local_match+0x74>)
 8015b54:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b5a:	d00a      	beq.n	8015b72 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	4b10      	ldr	r3, [pc, #64]	; (8015ba4 <udp_input_local_match+0x74>)
 8015b62:	695b      	ldr	r3, [r3, #20]
 8015b64:	405a      	eors	r2, r3
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	3308      	adds	r3, #8
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d110      	bne.n	8015b94 <udp_input_local_match+0x64>
          return 1;
 8015b72:	2301      	movs	r3, #1
 8015b74:	e00f      	b.n	8015b96 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d009      	beq.n	8015b90 <udp_input_local_match+0x60>
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d005      	beq.n	8015b90 <udp_input_local_match+0x60>
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	681a      	ldr	r2, [r3, #0]
 8015b88:	4b06      	ldr	r3, [pc, #24]	; (8015ba4 <udp_input_local_match+0x74>)
 8015b8a:	695b      	ldr	r3, [r3, #20]
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d101      	bne.n	8015b94 <udp_input_local_match+0x64>
      return 1;
 8015b90:	2301      	movs	r3, #1
 8015b92:	e000      	b.n	8015b96 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8015b94:	2300      	movs	r3, #0
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3714      	adds	r7, #20
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba0:	4770      	bx	lr
 8015ba2:	bf00      	nop
 8015ba4:	20012d14 	.word	0x20012d14

08015ba8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015ba8:	b590      	push	{r4, r7, lr}
 8015baa:	b08d      	sub	sp, #52	; 0x34
 8015bac:	af02      	add	r7, sp, #8
 8015bae:	6078      	str	r0, [r7, #4]
 8015bb0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	895b      	ldrh	r3, [r3, #10]
 8015bba:	2b07      	cmp	r3, #7
 8015bbc:	d803      	bhi.n	8015bc6 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015bbe:	6878      	ldr	r0, [r7, #4]
 8015bc0:	f7fa f94a 	bl	800fe58 <pbuf_free>
    goto end;
 8015bc4:	e0c6      	b.n	8015d54 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	685b      	ldr	r3, [r3, #4]
 8015bca:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015bcc:	4b63      	ldr	r3, [pc, #396]	; (8015d5c <udp_input+0x1b4>)
 8015bce:	695a      	ldr	r2, [r3, #20]
 8015bd0:	4b62      	ldr	r3, [pc, #392]	; (8015d5c <udp_input+0x1b4>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	4619      	mov	r1, r3
 8015bd6:	4610      	mov	r0, r2
 8015bd8:	f001 fcf2 	bl	80175c0 <ip4_addr_isbroadcast_u32>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015be0:	697b      	ldr	r3, [r7, #20]
 8015be2:	881b      	ldrh	r3, [r3, #0]
 8015be4:	b29b      	uxth	r3, r3
 8015be6:	4618      	mov	r0, r3
 8015be8:	f7f8 ff9c 	bl	800eb24 <lwip_htons>
 8015bec:	4603      	mov	r3, r0
 8015bee:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015bf0:	697b      	ldr	r3, [r7, #20]
 8015bf2:	885b      	ldrh	r3, [r3, #2]
 8015bf4:	b29b      	uxth	r3, r3
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f7f8 ff94 	bl	800eb24 <lwip_htons>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015c00:	2300      	movs	r3, #0
 8015c02:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015c04:	2300      	movs	r3, #0
 8015c06:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015c08:	2300      	movs	r3, #0
 8015c0a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c0c:	4b54      	ldr	r3, [pc, #336]	; (8015d60 <udp_input+0x1b8>)
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	627b      	str	r3, [r7, #36]	; 0x24
 8015c12:	e03b      	b.n	8015c8c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c16:	8a5b      	ldrh	r3, [r3, #18]
 8015c18:	89fa      	ldrh	r2, [r7, #14]
 8015c1a:	429a      	cmp	r2, r3
 8015c1c:	d131      	bne.n	8015c82 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015c1e:	7cfb      	ldrb	r3, [r7, #19]
 8015c20:	461a      	mov	r2, r3
 8015c22:	6839      	ldr	r1, [r7, #0]
 8015c24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c26:	f7ff ff83 	bl	8015b30 <udp_input_local_match>
 8015c2a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d028      	beq.n	8015c82 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8015c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c32:	7c1b      	ldrb	r3, [r3, #16]
 8015c34:	f003 0304 	and.w	r3, r3, #4
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d104      	bne.n	8015c46 <udp_input+0x9e>
 8015c3c:	69fb      	ldr	r3, [r7, #28]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d101      	bne.n	8015c46 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8015c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c44:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c48:	8a9b      	ldrh	r3, [r3, #20]
 8015c4a:	8a3a      	ldrh	r2, [r7, #16]
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	d118      	bne.n	8015c82 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c52:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d005      	beq.n	8015c64 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c5a:	685a      	ldr	r2, [r3, #4]
 8015c5c:	4b3f      	ldr	r3, [pc, #252]	; (8015d5c <udp_input+0x1b4>)
 8015c5e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015c60:	429a      	cmp	r2, r3
 8015c62:	d10e      	bne.n	8015c82 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015c64:	6a3b      	ldr	r3, [r7, #32]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d014      	beq.n	8015c94 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c6c:	68da      	ldr	r2, [r3, #12]
 8015c6e:	6a3b      	ldr	r3, [r7, #32]
 8015c70:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015c72:	4b3b      	ldr	r3, [pc, #236]	; (8015d60 <udp_input+0x1b8>)
 8015c74:	681a      	ldr	r2, [r3, #0]
 8015c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c78:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015c7a:	4a39      	ldr	r2, [pc, #228]	; (8015d60 <udp_input+0x1b8>)
 8015c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015c80:	e008      	b.n	8015c94 <udp_input+0xec>
      }
    }

    prev = pcb;
 8015c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c84:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c88:	68db      	ldr	r3, [r3, #12]
 8015c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8015c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d1c0      	bne.n	8015c14 <udp_input+0x6c>
 8015c92:	e000      	b.n	8015c96 <udp_input+0xee>
        break;
 8015c94:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d101      	bne.n	8015ca0 <udp_input+0xf8>
    pcb = uncon_pcb;
 8015c9c:	69fb      	ldr	r3, [r7, #28]
 8015c9e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d002      	beq.n	8015cac <udp_input+0x104>
    for_us = 1;
 8015ca6:	2301      	movs	r3, #1
 8015ca8:	76fb      	strb	r3, [r7, #27]
 8015caa:	e00a      	b.n	8015cc2 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	3304      	adds	r3, #4
 8015cb0:	681a      	ldr	r2, [r3, #0]
 8015cb2:	4b2a      	ldr	r3, [pc, #168]	; (8015d5c <udp_input+0x1b4>)
 8015cb4:	695b      	ldr	r3, [r3, #20]
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	bf0c      	ite	eq
 8015cba:	2301      	moveq	r3, #1
 8015cbc:	2300      	movne	r3, #0
 8015cbe:	b2db      	uxtb	r3, r3
 8015cc0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015cc2:	7efb      	ldrb	r3, [r7, #27]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d042      	beq.n	8015d4e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8015cc8:	f06f 0107 	mvn.w	r1, #7
 8015ccc:	6878      	ldr	r0, [r7, #4]
 8015cce:	f7fa f89f 	bl	800fe10 <pbuf_header>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d00a      	beq.n	8015cee <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8015cd8:	4b22      	ldr	r3, [pc, #136]	; (8015d64 <udp_input+0x1bc>)
 8015cda:	f240 1255 	movw	r2, #341	; 0x155
 8015cde:	4922      	ldr	r1, [pc, #136]	; (8015d68 <udp_input+0x1c0>)
 8015ce0:	4822      	ldr	r0, [pc, #136]	; (8015d6c <udp_input+0x1c4>)
 8015ce2:	f005 f8b5 	bl	801ae50 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015ce6:	6878      	ldr	r0, [r7, #4]
 8015ce8:	f7fa f8b6 	bl	800fe58 <pbuf_free>
      goto end;
 8015cec:	e032      	b.n	8015d54 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8015cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d012      	beq.n	8015d1a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf6:	699b      	ldr	r3, [r3, #24]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d00a      	beq.n	8015d12 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cfe:	699c      	ldr	r4, [r3, #24]
 8015d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d02:	69d8      	ldr	r0, [r3, #28]
 8015d04:	8a3b      	ldrh	r3, [r7, #16]
 8015d06:	9300      	str	r3, [sp, #0]
 8015d08:	4b19      	ldr	r3, [pc, #100]	; (8015d70 <udp_input+0x1c8>)
 8015d0a:	687a      	ldr	r2, [r7, #4]
 8015d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d0e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015d10:	e021      	b.n	8015d56 <udp_input+0x1ae>
        pbuf_free(p);
 8015d12:	6878      	ldr	r0, [r7, #4]
 8015d14:	f7fa f8a0 	bl	800fe58 <pbuf_free>
        goto end;
 8015d18:	e01c      	b.n	8015d54 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015d1a:	7cfb      	ldrb	r3, [r7, #19]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d112      	bne.n	8015d46 <udp_input+0x19e>
 8015d20:	4b0e      	ldr	r3, [pc, #56]	; (8015d5c <udp_input+0x1b4>)
 8015d22:	695b      	ldr	r3, [r3, #20]
 8015d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d28:	2be0      	cmp	r3, #224	; 0xe0
 8015d2a:	d00c      	beq.n	8015d46 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015d2c:	4b0b      	ldr	r3, [pc, #44]	; (8015d5c <udp_input+0x1b4>)
 8015d2e:	899b      	ldrh	r3, [r3, #12]
 8015d30:	3308      	adds	r3, #8
 8015d32:	b29b      	uxth	r3, r3
 8015d34:	b21b      	sxth	r3, r3
 8015d36:	4619      	mov	r1, r3
 8015d38:	6878      	ldr	r0, [r7, #4]
 8015d3a:	f7fa f87b 	bl	800fe34 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015d3e:	2103      	movs	r1, #3
 8015d40:	6878      	ldr	r0, [r7, #4]
 8015d42:	f001 f93b 	bl	8016fbc <icmp_dest_unreach>
      pbuf_free(p);
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f7fa f886 	bl	800fe58 <pbuf_free>
  return;
 8015d4c:	e003      	b.n	8015d56 <udp_input+0x1ae>
    pbuf_free(p);
 8015d4e:	6878      	ldr	r0, [r7, #4]
 8015d50:	f7fa f882 	bl	800fe58 <pbuf_free>
  return;
 8015d54:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015d56:	372c      	adds	r7, #44	; 0x2c
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd90      	pop	{r4, r7, pc}
 8015d5c:	20012d14 	.word	0x20012d14
 8015d60:	2001643c 	.word	0x2001643c
 8015d64:	0801f7d4 	.word	0x0801f7d4
 8015d68:	0801f804 	.word	0x0801f804
 8015d6c:	0801f818 	.word	0x0801f818
 8015d70:	20012d24 	.word	0x20012d24

08015d74 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b086      	sub	sp, #24
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	60f8      	str	r0, [r7, #12]
 8015d7c:	60b9      	str	r1, [r7, #8]
 8015d7e:	4613      	mov	r3, r2
 8015d80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015d82:	68bb      	ldr	r3, [r7, #8]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d101      	bne.n	8015d8c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015d88:	4b30      	ldr	r3, [pc, #192]	; (8015e4c <udp_bind+0xd8>)
 8015d8a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d002      	beq.n	8015d98 <udp_bind+0x24>
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d102      	bne.n	8015d9e <udp_bind+0x2a>
    return ERR_VAL;
 8015d98:	f06f 0305 	mvn.w	r3, #5
 8015d9c:	e052      	b.n	8015e44 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015da2:	4b2b      	ldr	r3, [pc, #172]	; (8015e50 <udp_bind+0xdc>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	617b      	str	r3, [r7, #20]
 8015da8:	e009      	b.n	8015dbe <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015daa:	68fa      	ldr	r2, [r7, #12]
 8015dac:	697b      	ldr	r3, [r7, #20]
 8015dae:	429a      	cmp	r2, r3
 8015db0:	d102      	bne.n	8015db8 <udp_bind+0x44>
      rebind = 1;
 8015db2:	2301      	movs	r3, #1
 8015db4:	74fb      	strb	r3, [r7, #19]
      break;
 8015db6:	e005      	b.n	8015dc4 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	68db      	ldr	r3, [r3, #12]
 8015dbc:	617b      	str	r3, [r7, #20]
 8015dbe:	697b      	ldr	r3, [r7, #20]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d1f2      	bne.n	8015daa <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8015dc4:	88fb      	ldrh	r3, [r7, #6]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d109      	bne.n	8015dde <udp_bind+0x6a>
    port = udp_new_port();
 8015dca:	f7ff fe79 	bl	8015ac0 <udp_new_port>
 8015dce:	4603      	mov	r3, r0
 8015dd0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015dd2:	88fb      	ldrh	r3, [r7, #6]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d11e      	bne.n	8015e16 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015dd8:	f06f 0307 	mvn.w	r3, #7
 8015ddc:	e032      	b.n	8015e44 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015dde:	4b1c      	ldr	r3, [pc, #112]	; (8015e50 <udp_bind+0xdc>)
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	617b      	str	r3, [r7, #20]
 8015de4:	e014      	b.n	8015e10 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8015de6:	68fa      	ldr	r2, [r7, #12]
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d00d      	beq.n	8015e0a <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015dee:	697b      	ldr	r3, [r7, #20]
 8015df0:	8a5b      	ldrh	r3, [r3, #18]
 8015df2:	88fa      	ldrh	r2, [r7, #6]
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d108      	bne.n	8015e0a <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8015df8:	697b      	ldr	r3, [r7, #20]
 8015dfa:	681a      	ldr	r2, [r3, #0]
 8015dfc:	68bb      	ldr	r3, [r7, #8]
 8015dfe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015e00:	429a      	cmp	r2, r3
 8015e02:	d102      	bne.n	8015e0a <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015e04:	f06f 0307 	mvn.w	r3, #7
 8015e08:	e01c      	b.n	8015e44 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	68db      	ldr	r3, [r3, #12]
 8015e0e:	617b      	str	r3, [r7, #20]
 8015e10:	697b      	ldr	r3, [r7, #20]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d1e7      	bne.n	8015de6 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d002      	beq.n	8015e22 <udp_bind+0xae>
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	e000      	b.n	8015e24 <udp_bind+0xb0>
 8015e22:	2300      	movs	r3, #0
 8015e24:	68fa      	ldr	r2, [r7, #12]
 8015e26:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	88fa      	ldrh	r2, [r7, #6]
 8015e2c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015e2e:	7cfb      	ldrb	r3, [r7, #19]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d106      	bne.n	8015e42 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015e34:	4b06      	ldr	r3, [pc, #24]	; (8015e50 <udp_bind+0xdc>)
 8015e36:	681a      	ldr	r2, [r3, #0]
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015e3c:	4a04      	ldr	r2, [pc, #16]	; (8015e50 <udp_bind+0xdc>)
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015e42:	2300      	movs	r3, #0
}
 8015e44:	4618      	mov	r0, r3
 8015e46:	3718      	adds	r7, #24
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd80      	pop	{r7, pc}
 8015e4c:	080200e8 	.word	0x080200e8
 8015e50:	2001643c 	.word	0x2001643c

08015e54 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015e54:	b480      	push	{r7}
 8015e56:	b085      	sub	sp, #20
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	60f8      	str	r0, [r7, #12]
 8015e5c:	60b9      	str	r1, [r7, #8]
 8015e5e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	68ba      	ldr	r2, [r7, #8]
 8015e64:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	687a      	ldr	r2, [r7, #4]
 8015e6a:	61da      	str	r2, [r3, #28]
}
 8015e6c:	bf00      	nop
 8015e6e:	3714      	adds	r7, #20
 8015e70:	46bd      	mov	sp, r7
 8015e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e76:	4770      	bx	lr

08015e78 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b084      	sub	sp, #16
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015e80:	4b15      	ldr	r3, [pc, #84]	; (8015ed8 <udp_remove+0x60>)
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	687a      	ldr	r2, [r7, #4]
 8015e86:	429a      	cmp	r2, r3
 8015e88:	d105      	bne.n	8015e96 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015e8a:	4b13      	ldr	r3, [pc, #76]	; (8015ed8 <udp_remove+0x60>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	68db      	ldr	r3, [r3, #12]
 8015e90:	4a11      	ldr	r2, [pc, #68]	; (8015ed8 <udp_remove+0x60>)
 8015e92:	6013      	str	r3, [r2, #0]
 8015e94:	e017      	b.n	8015ec6 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015e96:	4b10      	ldr	r3, [pc, #64]	; (8015ed8 <udp_remove+0x60>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	60fb      	str	r3, [r7, #12]
 8015e9c:	e010      	b.n	8015ec0 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	68db      	ldr	r3, [r3, #12]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d009      	beq.n	8015eba <udp_remove+0x42>
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	68db      	ldr	r3, [r3, #12]
 8015eaa:	687a      	ldr	r2, [r7, #4]
 8015eac:	429a      	cmp	r2, r3
 8015eae:	d104      	bne.n	8015eba <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	68da      	ldr	r2, [r3, #12]
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	60da      	str	r2, [r3, #12]
        break;
 8015eb8:	e005      	b.n	8015ec6 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	68db      	ldr	r3, [r3, #12]
 8015ebe:	60fb      	str	r3, [r7, #12]
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d1eb      	bne.n	8015e9e <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015ec6:	6879      	ldr	r1, [r7, #4]
 8015ec8:	2000      	movs	r0, #0
 8015eca:	f7f9 fa6b 	bl	800f3a4 <memp_free>
}
 8015ece:	bf00      	nop
 8015ed0:	3710      	adds	r7, #16
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd80      	pop	{r7, pc}
 8015ed6:	bf00      	nop
 8015ed8:	2001643c 	.word	0x2001643c

08015edc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b082      	sub	sp, #8
 8015ee0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015ee2:	2000      	movs	r0, #0
 8015ee4:	f7f9 fa0c 	bl	800f300 <memp_malloc>
 8015ee8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d007      	beq.n	8015f00 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015ef0:	2220      	movs	r2, #32
 8015ef2:	2100      	movs	r1, #0
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f004 fabf 	bl	801a478 <memset>
    pcb->ttl = UDP_TTL;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	22ff      	movs	r2, #255	; 0xff
 8015efe:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015f00:	687b      	ldr	r3, [r7, #4]
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	3708      	adds	r7, #8
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}

08015f0a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015f0a:	b580      	push	{r7, lr}
 8015f0c:	b084      	sub	sp, #16
 8015f0e:	af00      	add	r7, sp, #0
 8015f10:	4603      	mov	r3, r0
 8015f12:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8015f14:	f7ff ffe2 	bl	8015edc <udp_new>
 8015f18:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
}
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	3710      	adds	r7, #16
 8015f20:	46bd      	mov	sp, r7
 8015f22:	bd80      	pop	{r7, pc}

08015f24 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8015f24:	b480      	push	{r7}
 8015f26:	b085      	sub	sp, #20
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
 8015f2c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d01e      	beq.n	8015f72 <udp_netif_ip_addr_changed+0x4e>
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d01a      	beq.n	8015f72 <udp_netif_ip_addr_changed+0x4e>
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d017      	beq.n	8015f72 <udp_netif_ip_addr_changed+0x4e>
 8015f42:	683b      	ldr	r3, [r7, #0]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d013      	beq.n	8015f72 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015f4a:	4b0d      	ldr	r3, [pc, #52]	; (8015f80 <udp_netif_ip_addr_changed+0x5c>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	60fb      	str	r3, [r7, #12]
 8015f50:	e00c      	b.n	8015f6c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	681a      	ldr	r2, [r3, #0]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d103      	bne.n	8015f66 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	681a      	ldr	r2, [r3, #0]
 8015f62:	68fb      	ldr	r3, [r7, #12]
 8015f64:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	68db      	ldr	r3, [r3, #12]
 8015f6a:	60fb      	str	r3, [r7, #12]
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d1ef      	bne.n	8015f52 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015f72:	bf00      	nop
 8015f74:	3714      	adds	r7, #20
 8015f76:	46bd      	mov	sp, r7
 8015f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f7c:	4770      	bx	lr
 8015f7e:	bf00      	nop
 8015f80:	2001643c 	.word	0x2001643c

08015f84 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b082      	sub	sp, #8
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015f8c:	4915      	ldr	r1, [pc, #84]	; (8015fe4 <etharp_free_entry+0x60>)
 8015f8e:	687a      	ldr	r2, [r7, #4]
 8015f90:	4613      	mov	r3, r2
 8015f92:	005b      	lsls	r3, r3, #1
 8015f94:	4413      	add	r3, r2
 8015f96:	00db      	lsls	r3, r3, #3
 8015f98:	440b      	add	r3, r1
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d013      	beq.n	8015fc8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015fa0:	4910      	ldr	r1, [pc, #64]	; (8015fe4 <etharp_free_entry+0x60>)
 8015fa2:	687a      	ldr	r2, [r7, #4]
 8015fa4:	4613      	mov	r3, r2
 8015fa6:	005b      	lsls	r3, r3, #1
 8015fa8:	4413      	add	r3, r2
 8015faa:	00db      	lsls	r3, r3, #3
 8015fac:	440b      	add	r3, r1
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f7f9 ff51 	bl	800fe58 <pbuf_free>
    arp_table[i].q = NULL;
 8015fb6:	490b      	ldr	r1, [pc, #44]	; (8015fe4 <etharp_free_entry+0x60>)
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	4613      	mov	r3, r2
 8015fbc:	005b      	lsls	r3, r3, #1
 8015fbe:	4413      	add	r3, r2
 8015fc0:	00db      	lsls	r3, r3, #3
 8015fc2:	440b      	add	r3, r1
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015fc8:	4906      	ldr	r1, [pc, #24]	; (8015fe4 <etharp_free_entry+0x60>)
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	4613      	mov	r3, r2
 8015fce:	005b      	lsls	r3, r3, #1
 8015fd0:	4413      	add	r3, r2
 8015fd2:	00db      	lsls	r3, r3, #3
 8015fd4:	440b      	add	r3, r1
 8015fd6:	3314      	adds	r3, #20
 8015fd8:	2200      	movs	r2, #0
 8015fda:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015fdc:	bf00      	nop
 8015fde:	3708      	adds	r7, #8
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd80      	pop	{r7, pc}
 8015fe4:	2000c9ac 	.word	0x2000c9ac

08015fe8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b082      	sub	sp, #8
 8015fec:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015fee:	2300      	movs	r3, #0
 8015ff0:	71fb      	strb	r3, [r7, #7]
 8015ff2:	e096      	b.n	8016122 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015ff4:	79fa      	ldrb	r2, [r7, #7]
 8015ff6:	494f      	ldr	r1, [pc, #316]	; (8016134 <etharp_tmr+0x14c>)
 8015ff8:	4613      	mov	r3, r2
 8015ffa:	005b      	lsls	r3, r3, #1
 8015ffc:	4413      	add	r3, r2
 8015ffe:	00db      	lsls	r3, r3, #3
 8016000:	440b      	add	r3, r1
 8016002:	3314      	adds	r3, #20
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8016008:	79bb      	ldrb	r3, [r7, #6]
 801600a:	2b00      	cmp	r3, #0
 801600c:	f000 8086 	beq.w	801611c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8016010:	79fa      	ldrb	r2, [r7, #7]
 8016012:	4948      	ldr	r1, [pc, #288]	; (8016134 <etharp_tmr+0x14c>)
 8016014:	4613      	mov	r3, r2
 8016016:	005b      	lsls	r3, r3, #1
 8016018:	4413      	add	r3, r2
 801601a:	00db      	lsls	r3, r3, #3
 801601c:	440b      	add	r3, r1
 801601e:	3312      	adds	r3, #18
 8016020:	881b      	ldrh	r3, [r3, #0]
 8016022:	3301      	adds	r3, #1
 8016024:	b298      	uxth	r0, r3
 8016026:	4943      	ldr	r1, [pc, #268]	; (8016134 <etharp_tmr+0x14c>)
 8016028:	4613      	mov	r3, r2
 801602a:	005b      	lsls	r3, r3, #1
 801602c:	4413      	add	r3, r2
 801602e:	00db      	lsls	r3, r3, #3
 8016030:	440b      	add	r3, r1
 8016032:	3312      	adds	r3, #18
 8016034:	4602      	mov	r2, r0
 8016036:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016038:	79fa      	ldrb	r2, [r7, #7]
 801603a:	493e      	ldr	r1, [pc, #248]	; (8016134 <etharp_tmr+0x14c>)
 801603c:	4613      	mov	r3, r2
 801603e:	005b      	lsls	r3, r3, #1
 8016040:	4413      	add	r3, r2
 8016042:	00db      	lsls	r3, r3, #3
 8016044:	440b      	add	r3, r1
 8016046:	3312      	adds	r3, #18
 8016048:	881b      	ldrh	r3, [r3, #0]
 801604a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801604e:	d215      	bcs.n	801607c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016050:	79fa      	ldrb	r2, [r7, #7]
 8016052:	4938      	ldr	r1, [pc, #224]	; (8016134 <etharp_tmr+0x14c>)
 8016054:	4613      	mov	r3, r2
 8016056:	005b      	lsls	r3, r3, #1
 8016058:	4413      	add	r3, r2
 801605a:	00db      	lsls	r3, r3, #3
 801605c:	440b      	add	r3, r1
 801605e:	3314      	adds	r3, #20
 8016060:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016062:	2b01      	cmp	r3, #1
 8016064:	d10f      	bne.n	8016086 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016066:	79fa      	ldrb	r2, [r7, #7]
 8016068:	4932      	ldr	r1, [pc, #200]	; (8016134 <etharp_tmr+0x14c>)
 801606a:	4613      	mov	r3, r2
 801606c:	005b      	lsls	r3, r3, #1
 801606e:	4413      	add	r3, r2
 8016070:	00db      	lsls	r3, r3, #3
 8016072:	440b      	add	r3, r1
 8016074:	3312      	adds	r3, #18
 8016076:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016078:	2b04      	cmp	r3, #4
 801607a:	d904      	bls.n	8016086 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801607c:	79fb      	ldrb	r3, [r7, #7]
 801607e:	4618      	mov	r0, r3
 8016080:	f7ff ff80 	bl	8015f84 <etharp_free_entry>
 8016084:	e04a      	b.n	801611c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016086:	79fa      	ldrb	r2, [r7, #7]
 8016088:	492a      	ldr	r1, [pc, #168]	; (8016134 <etharp_tmr+0x14c>)
 801608a:	4613      	mov	r3, r2
 801608c:	005b      	lsls	r3, r3, #1
 801608e:	4413      	add	r3, r2
 8016090:	00db      	lsls	r3, r3, #3
 8016092:	440b      	add	r3, r1
 8016094:	3314      	adds	r3, #20
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	2b03      	cmp	r3, #3
 801609a:	d10a      	bne.n	80160b2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801609c:	79fa      	ldrb	r2, [r7, #7]
 801609e:	4925      	ldr	r1, [pc, #148]	; (8016134 <etharp_tmr+0x14c>)
 80160a0:	4613      	mov	r3, r2
 80160a2:	005b      	lsls	r3, r3, #1
 80160a4:	4413      	add	r3, r2
 80160a6:	00db      	lsls	r3, r3, #3
 80160a8:	440b      	add	r3, r1
 80160aa:	3314      	adds	r3, #20
 80160ac:	2204      	movs	r2, #4
 80160ae:	701a      	strb	r2, [r3, #0]
 80160b0:	e034      	b.n	801611c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80160b2:	79fa      	ldrb	r2, [r7, #7]
 80160b4:	491f      	ldr	r1, [pc, #124]	; (8016134 <etharp_tmr+0x14c>)
 80160b6:	4613      	mov	r3, r2
 80160b8:	005b      	lsls	r3, r3, #1
 80160ba:	4413      	add	r3, r2
 80160bc:	00db      	lsls	r3, r3, #3
 80160be:	440b      	add	r3, r1
 80160c0:	3314      	adds	r3, #20
 80160c2:	781b      	ldrb	r3, [r3, #0]
 80160c4:	2b04      	cmp	r3, #4
 80160c6:	d10a      	bne.n	80160de <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80160c8:	79fa      	ldrb	r2, [r7, #7]
 80160ca:	491a      	ldr	r1, [pc, #104]	; (8016134 <etharp_tmr+0x14c>)
 80160cc:	4613      	mov	r3, r2
 80160ce:	005b      	lsls	r3, r3, #1
 80160d0:	4413      	add	r3, r2
 80160d2:	00db      	lsls	r3, r3, #3
 80160d4:	440b      	add	r3, r1
 80160d6:	3314      	adds	r3, #20
 80160d8:	2202      	movs	r2, #2
 80160da:	701a      	strb	r2, [r3, #0]
 80160dc:	e01e      	b.n	801611c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80160de:	79fa      	ldrb	r2, [r7, #7]
 80160e0:	4914      	ldr	r1, [pc, #80]	; (8016134 <etharp_tmr+0x14c>)
 80160e2:	4613      	mov	r3, r2
 80160e4:	005b      	lsls	r3, r3, #1
 80160e6:	4413      	add	r3, r2
 80160e8:	00db      	lsls	r3, r3, #3
 80160ea:	440b      	add	r3, r1
 80160ec:	3314      	adds	r3, #20
 80160ee:	781b      	ldrb	r3, [r3, #0]
 80160f0:	2b01      	cmp	r3, #1
 80160f2:	d113      	bne.n	801611c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80160f4:	79fa      	ldrb	r2, [r7, #7]
 80160f6:	490f      	ldr	r1, [pc, #60]	; (8016134 <etharp_tmr+0x14c>)
 80160f8:	4613      	mov	r3, r2
 80160fa:	005b      	lsls	r3, r3, #1
 80160fc:	4413      	add	r3, r2
 80160fe:	00db      	lsls	r3, r3, #3
 8016100:	440b      	add	r3, r1
 8016102:	3308      	adds	r3, #8
 8016104:	6818      	ldr	r0, [r3, #0]
 8016106:	79fa      	ldrb	r2, [r7, #7]
 8016108:	4613      	mov	r3, r2
 801610a:	005b      	lsls	r3, r3, #1
 801610c:	4413      	add	r3, r2
 801610e:	00db      	lsls	r3, r3, #3
 8016110:	4a08      	ldr	r2, [pc, #32]	; (8016134 <etharp_tmr+0x14c>)
 8016112:	4413      	add	r3, r2
 8016114:	3304      	adds	r3, #4
 8016116:	4619      	mov	r1, r3
 8016118:	f000 fe38 	bl	8016d8c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801611c:	79fb      	ldrb	r3, [r7, #7]
 801611e:	3301      	adds	r3, #1
 8016120:	71fb      	strb	r3, [r7, #7]
 8016122:	79fb      	ldrb	r3, [r7, #7]
 8016124:	2b09      	cmp	r3, #9
 8016126:	f67f af65 	bls.w	8015ff4 <etharp_tmr+0xc>
      }
    }
  }
}
 801612a:	bf00      	nop
 801612c:	3708      	adds	r7, #8
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
 8016132:	bf00      	nop
 8016134:	2000c9ac 	.word	0x2000c9ac

08016138 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b088      	sub	sp, #32
 801613c:	af00      	add	r7, sp, #0
 801613e:	60f8      	str	r0, [r7, #12]
 8016140:	460b      	mov	r3, r1
 8016142:	607a      	str	r2, [r7, #4]
 8016144:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016146:	230a      	movs	r3, #10
 8016148:	77fb      	strb	r3, [r7, #31]
 801614a:	230a      	movs	r3, #10
 801614c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801614e:	230a      	movs	r3, #10
 8016150:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8016152:	2300      	movs	r3, #0
 8016154:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8016156:	230a      	movs	r3, #10
 8016158:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801615a:	2300      	movs	r3, #0
 801615c:	833b      	strh	r3, [r7, #24]
 801615e:	2300      	movs	r3, #0
 8016160:	82fb      	strh	r3, [r7, #22]
 8016162:	2300      	movs	r3, #0
 8016164:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016166:	2300      	movs	r3, #0
 8016168:	773b      	strb	r3, [r7, #28]
 801616a:	e093      	b.n	8016294 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 801616c:	7f3a      	ldrb	r2, [r7, #28]
 801616e:	4990      	ldr	r1, [pc, #576]	; (80163b0 <etharp_find_entry+0x278>)
 8016170:	4613      	mov	r3, r2
 8016172:	005b      	lsls	r3, r3, #1
 8016174:	4413      	add	r3, r2
 8016176:	00db      	lsls	r3, r3, #3
 8016178:	440b      	add	r3, r1
 801617a:	3314      	adds	r3, #20
 801617c:	781b      	ldrb	r3, [r3, #0]
 801617e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016180:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016184:	2b0a      	cmp	r3, #10
 8016186:	d105      	bne.n	8016194 <etharp_find_entry+0x5c>
 8016188:	7cfb      	ldrb	r3, [r7, #19]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d102      	bne.n	8016194 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801618e:	7f3b      	ldrb	r3, [r7, #28]
 8016190:	777b      	strb	r3, [r7, #29]
 8016192:	e07c      	b.n	801628e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016194:	7cfb      	ldrb	r3, [r7, #19]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d079      	beq.n	801628e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801619a:	7cfb      	ldrb	r3, [r7, #19]
 801619c:	2b01      	cmp	r3, #1
 801619e:	d009      	beq.n	80161b4 <etharp_find_entry+0x7c>
 80161a0:	7cfb      	ldrb	r3, [r7, #19]
 80161a2:	2b01      	cmp	r3, #1
 80161a4:	d806      	bhi.n	80161b4 <etharp_find_entry+0x7c>
 80161a6:	4b83      	ldr	r3, [pc, #524]	; (80163b4 <etharp_find_entry+0x27c>)
 80161a8:	f44f 7293 	mov.w	r2, #294	; 0x126
 80161ac:	4982      	ldr	r1, [pc, #520]	; (80163b8 <etharp_find_entry+0x280>)
 80161ae:	4883      	ldr	r0, [pc, #524]	; (80163bc <etharp_find_entry+0x284>)
 80161b0:	f004 fe4e 	bl	801ae50 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d00f      	beq.n	80161da <etharp_find_entry+0xa2>
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	6819      	ldr	r1, [r3, #0]
 80161be:	7f3a      	ldrb	r2, [r7, #28]
 80161c0:	487b      	ldr	r0, [pc, #492]	; (80163b0 <etharp_find_entry+0x278>)
 80161c2:	4613      	mov	r3, r2
 80161c4:	005b      	lsls	r3, r3, #1
 80161c6:	4413      	add	r3, r2
 80161c8:	00db      	lsls	r3, r3, #3
 80161ca:	4403      	add	r3, r0
 80161cc:	3304      	adds	r3, #4
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	4299      	cmp	r1, r3
 80161d2:	d102      	bne.n	80161da <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80161d4:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80161d8:	e0e5      	b.n	80163a6 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80161da:	7cfb      	ldrb	r3, [r7, #19]
 80161dc:	2b01      	cmp	r3, #1
 80161de:	d13b      	bne.n	8016258 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80161e0:	7f3a      	ldrb	r2, [r7, #28]
 80161e2:	4973      	ldr	r1, [pc, #460]	; (80163b0 <etharp_find_entry+0x278>)
 80161e4:	4613      	mov	r3, r2
 80161e6:	005b      	lsls	r3, r3, #1
 80161e8:	4413      	add	r3, r2
 80161ea:	00db      	lsls	r3, r3, #3
 80161ec:	440b      	add	r3, r1
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d018      	beq.n	8016226 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80161f4:	7f3a      	ldrb	r2, [r7, #28]
 80161f6:	496e      	ldr	r1, [pc, #440]	; (80163b0 <etharp_find_entry+0x278>)
 80161f8:	4613      	mov	r3, r2
 80161fa:	005b      	lsls	r3, r3, #1
 80161fc:	4413      	add	r3, r2
 80161fe:	00db      	lsls	r3, r3, #3
 8016200:	440b      	add	r3, r1
 8016202:	3312      	adds	r3, #18
 8016204:	881b      	ldrh	r3, [r3, #0]
 8016206:	8b3a      	ldrh	r2, [r7, #24]
 8016208:	429a      	cmp	r2, r3
 801620a:	d840      	bhi.n	801628e <etharp_find_entry+0x156>
            old_queue = i;
 801620c:	7f3b      	ldrb	r3, [r7, #28]
 801620e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8016210:	7f3a      	ldrb	r2, [r7, #28]
 8016212:	4967      	ldr	r1, [pc, #412]	; (80163b0 <etharp_find_entry+0x278>)
 8016214:	4613      	mov	r3, r2
 8016216:	005b      	lsls	r3, r3, #1
 8016218:	4413      	add	r3, r2
 801621a:	00db      	lsls	r3, r3, #3
 801621c:	440b      	add	r3, r1
 801621e:	3312      	adds	r3, #18
 8016220:	881b      	ldrh	r3, [r3, #0]
 8016222:	833b      	strh	r3, [r7, #24]
 8016224:	e033      	b.n	801628e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016226:	7f3a      	ldrb	r2, [r7, #28]
 8016228:	4961      	ldr	r1, [pc, #388]	; (80163b0 <etharp_find_entry+0x278>)
 801622a:	4613      	mov	r3, r2
 801622c:	005b      	lsls	r3, r3, #1
 801622e:	4413      	add	r3, r2
 8016230:	00db      	lsls	r3, r3, #3
 8016232:	440b      	add	r3, r1
 8016234:	3312      	adds	r3, #18
 8016236:	881b      	ldrh	r3, [r3, #0]
 8016238:	8afa      	ldrh	r2, [r7, #22]
 801623a:	429a      	cmp	r2, r3
 801623c:	d827      	bhi.n	801628e <etharp_find_entry+0x156>
            old_pending = i;
 801623e:	7f3b      	ldrb	r3, [r7, #28]
 8016240:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8016242:	7f3a      	ldrb	r2, [r7, #28]
 8016244:	495a      	ldr	r1, [pc, #360]	; (80163b0 <etharp_find_entry+0x278>)
 8016246:	4613      	mov	r3, r2
 8016248:	005b      	lsls	r3, r3, #1
 801624a:	4413      	add	r3, r2
 801624c:	00db      	lsls	r3, r3, #3
 801624e:	440b      	add	r3, r1
 8016250:	3312      	adds	r3, #18
 8016252:	881b      	ldrh	r3, [r3, #0]
 8016254:	82fb      	strh	r3, [r7, #22]
 8016256:	e01a      	b.n	801628e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016258:	7cfb      	ldrb	r3, [r7, #19]
 801625a:	2b01      	cmp	r3, #1
 801625c:	d917      	bls.n	801628e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801625e:	7f3a      	ldrb	r2, [r7, #28]
 8016260:	4953      	ldr	r1, [pc, #332]	; (80163b0 <etharp_find_entry+0x278>)
 8016262:	4613      	mov	r3, r2
 8016264:	005b      	lsls	r3, r3, #1
 8016266:	4413      	add	r3, r2
 8016268:	00db      	lsls	r3, r3, #3
 801626a:	440b      	add	r3, r1
 801626c:	3312      	adds	r3, #18
 801626e:	881b      	ldrh	r3, [r3, #0]
 8016270:	8aba      	ldrh	r2, [r7, #20]
 8016272:	429a      	cmp	r2, r3
 8016274:	d80b      	bhi.n	801628e <etharp_find_entry+0x156>
            old_stable = i;
 8016276:	7f3b      	ldrb	r3, [r7, #28]
 8016278:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801627a:	7f3a      	ldrb	r2, [r7, #28]
 801627c:	494c      	ldr	r1, [pc, #304]	; (80163b0 <etharp_find_entry+0x278>)
 801627e:	4613      	mov	r3, r2
 8016280:	005b      	lsls	r3, r3, #1
 8016282:	4413      	add	r3, r2
 8016284:	00db      	lsls	r3, r3, #3
 8016286:	440b      	add	r3, r1
 8016288:	3312      	adds	r3, #18
 801628a:	881b      	ldrh	r3, [r3, #0]
 801628c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801628e:	7f3b      	ldrb	r3, [r7, #28]
 8016290:	3301      	adds	r3, #1
 8016292:	773b      	strb	r3, [r7, #28]
 8016294:	7f3b      	ldrb	r3, [r7, #28]
 8016296:	2b09      	cmp	r3, #9
 8016298:	f67f af68 	bls.w	801616c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801629c:	7afb      	ldrb	r3, [r7, #11]
 801629e:	f003 0302 	and.w	r3, r3, #2
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d108      	bne.n	80162b8 <etharp_find_entry+0x180>
 80162a6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80162aa:	2b0a      	cmp	r3, #10
 80162ac:	d107      	bne.n	80162be <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80162ae:	7afb      	ldrb	r3, [r7, #11]
 80162b0:	f003 0301 	and.w	r3, r3, #1
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d102      	bne.n	80162be <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80162b8:	f04f 33ff 	mov.w	r3, #4294967295
 80162bc:	e073      	b.n	80163a6 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80162be:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80162c2:	2b09      	cmp	r3, #9
 80162c4:	dc02      	bgt.n	80162cc <etharp_find_entry+0x194>
    i = empty;
 80162c6:	7f7b      	ldrb	r3, [r7, #29]
 80162c8:	773b      	strb	r3, [r7, #28]
 80162ca:	e036      	b.n	801633a <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80162cc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80162d0:	2b09      	cmp	r3, #9
 80162d2:	dc13      	bgt.n	80162fc <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80162d4:	7fbb      	ldrb	r3, [r7, #30]
 80162d6:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80162d8:	7f3a      	ldrb	r2, [r7, #28]
 80162da:	4935      	ldr	r1, [pc, #212]	; (80163b0 <etharp_find_entry+0x278>)
 80162dc:	4613      	mov	r3, r2
 80162de:	005b      	lsls	r3, r3, #1
 80162e0:	4413      	add	r3, r2
 80162e2:	00db      	lsls	r3, r3, #3
 80162e4:	440b      	add	r3, r1
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d018      	beq.n	801631e <etharp_find_entry+0x1e6>
 80162ec:	4b31      	ldr	r3, [pc, #196]	; (80163b4 <etharp_find_entry+0x27c>)
 80162ee:	f240 126f 	movw	r2, #367	; 0x16f
 80162f2:	4933      	ldr	r1, [pc, #204]	; (80163c0 <etharp_find_entry+0x288>)
 80162f4:	4831      	ldr	r0, [pc, #196]	; (80163bc <etharp_find_entry+0x284>)
 80162f6:	f004 fdab 	bl	801ae50 <iprintf>
 80162fa:	e010      	b.n	801631e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80162fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016300:	2b09      	cmp	r3, #9
 8016302:	dc02      	bgt.n	801630a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8016304:	7ffb      	ldrb	r3, [r7, #31]
 8016306:	773b      	strb	r3, [r7, #28]
 8016308:	e009      	b.n	801631e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801630a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801630e:	2b09      	cmp	r3, #9
 8016310:	dc02      	bgt.n	8016318 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016312:	7efb      	ldrb	r3, [r7, #27]
 8016314:	773b      	strb	r3, [r7, #28]
 8016316:	e002      	b.n	801631e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8016318:	f04f 33ff 	mov.w	r3, #4294967295
 801631c:	e043      	b.n	80163a6 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801631e:	7f3b      	ldrb	r3, [r7, #28]
 8016320:	2b09      	cmp	r3, #9
 8016322:	d906      	bls.n	8016332 <etharp_find_entry+0x1fa>
 8016324:	4b23      	ldr	r3, [pc, #140]	; (80163b4 <etharp_find_entry+0x27c>)
 8016326:	f240 1281 	movw	r2, #385	; 0x181
 801632a:	4926      	ldr	r1, [pc, #152]	; (80163c4 <etharp_find_entry+0x28c>)
 801632c:	4823      	ldr	r0, [pc, #140]	; (80163bc <etharp_find_entry+0x284>)
 801632e:	f004 fd8f 	bl	801ae50 <iprintf>
    etharp_free_entry(i);
 8016332:	7f3b      	ldrb	r3, [r7, #28]
 8016334:	4618      	mov	r0, r3
 8016336:	f7ff fe25 	bl	8015f84 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801633a:	7f3b      	ldrb	r3, [r7, #28]
 801633c:	2b09      	cmp	r3, #9
 801633e:	d906      	bls.n	801634e <etharp_find_entry+0x216>
 8016340:	4b1c      	ldr	r3, [pc, #112]	; (80163b4 <etharp_find_entry+0x27c>)
 8016342:	f240 1285 	movw	r2, #389	; 0x185
 8016346:	491f      	ldr	r1, [pc, #124]	; (80163c4 <etharp_find_entry+0x28c>)
 8016348:	481c      	ldr	r0, [pc, #112]	; (80163bc <etharp_find_entry+0x284>)
 801634a:	f004 fd81 	bl	801ae50 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801634e:	7f3a      	ldrb	r2, [r7, #28]
 8016350:	4917      	ldr	r1, [pc, #92]	; (80163b0 <etharp_find_entry+0x278>)
 8016352:	4613      	mov	r3, r2
 8016354:	005b      	lsls	r3, r3, #1
 8016356:	4413      	add	r3, r2
 8016358:	00db      	lsls	r3, r3, #3
 801635a:	440b      	add	r3, r1
 801635c:	3314      	adds	r3, #20
 801635e:	781b      	ldrb	r3, [r3, #0]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d006      	beq.n	8016372 <etharp_find_entry+0x23a>
 8016364:	4b13      	ldr	r3, [pc, #76]	; (80163b4 <etharp_find_entry+0x27c>)
 8016366:	f240 1287 	movw	r2, #391	; 0x187
 801636a:	4917      	ldr	r1, [pc, #92]	; (80163c8 <etharp_find_entry+0x290>)
 801636c:	4813      	ldr	r0, [pc, #76]	; (80163bc <etharp_find_entry+0x284>)
 801636e:	f004 fd6f 	bl	801ae50 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d00a      	beq.n	801638e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016378:	7f3a      	ldrb	r2, [r7, #28]
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	6819      	ldr	r1, [r3, #0]
 801637e:	480c      	ldr	r0, [pc, #48]	; (80163b0 <etharp_find_entry+0x278>)
 8016380:	4613      	mov	r3, r2
 8016382:	005b      	lsls	r3, r3, #1
 8016384:	4413      	add	r3, r2
 8016386:	00db      	lsls	r3, r3, #3
 8016388:	4403      	add	r3, r0
 801638a:	3304      	adds	r3, #4
 801638c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801638e:	7f3a      	ldrb	r2, [r7, #28]
 8016390:	4907      	ldr	r1, [pc, #28]	; (80163b0 <etharp_find_entry+0x278>)
 8016392:	4613      	mov	r3, r2
 8016394:	005b      	lsls	r3, r3, #1
 8016396:	4413      	add	r3, r2
 8016398:	00db      	lsls	r3, r3, #3
 801639a:	440b      	add	r3, r1
 801639c:	3312      	adds	r3, #18
 801639e:	2200      	movs	r2, #0
 80163a0:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80163a2:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	3720      	adds	r7, #32
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
 80163ae:	bf00      	nop
 80163b0:	2000c9ac 	.word	0x2000c9ac
 80163b4:	0801f870 	.word	0x0801f870
 80163b8:	0801f8a8 	.word	0x0801f8a8
 80163bc:	0801f8e8 	.word	0x0801f8e8
 80163c0:	0801f910 	.word	0x0801f910
 80163c4:	0801f928 	.word	0x0801f928
 80163c8:	0801f93c 	.word	0x0801f93c

080163cc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b088      	sub	sp, #32
 80163d0:	af02      	add	r7, sp, #8
 80163d2:	60f8      	str	r0, [r7, #12]
 80163d4:	60b9      	str	r1, [r7, #8]
 80163d6:	607a      	str	r2, [r7, #4]
 80163d8:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80163e0:	2b06      	cmp	r3, #6
 80163e2:	d006      	beq.n	80163f2 <etharp_update_arp_entry+0x26>
 80163e4:	4b48      	ldr	r3, [pc, #288]	; (8016508 <etharp_update_arp_entry+0x13c>)
 80163e6:	f240 12ab 	movw	r2, #427	; 0x1ab
 80163ea:	4948      	ldr	r1, [pc, #288]	; (801650c <etharp_update_arp_entry+0x140>)
 80163ec:	4848      	ldr	r0, [pc, #288]	; (8016510 <etharp_update_arp_entry+0x144>)
 80163ee:	f004 fd2f 	bl	801ae50 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80163f2:	68bb      	ldr	r3, [r7, #8]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d012      	beq.n	801641e <etharp_update_arp_entry+0x52>
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d00e      	beq.n	801641e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016400:	68bb      	ldr	r3, [r7, #8]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	68f9      	ldr	r1, [r7, #12]
 8016406:	4618      	mov	r0, r3
 8016408:	f001 f8da 	bl	80175c0 <ip4_addr_isbroadcast_u32>
 801640c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801640e:	2b00      	cmp	r3, #0
 8016410:	d105      	bne.n	801641e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016412:	68bb      	ldr	r3, [r7, #8]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801641a:	2be0      	cmp	r3, #224	; 0xe0
 801641c:	d102      	bne.n	8016424 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801641e:	f06f 030f 	mvn.w	r3, #15
 8016422:	e06c      	b.n	80164fe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016424:	78fb      	ldrb	r3, [r7, #3]
 8016426:	68fa      	ldr	r2, [r7, #12]
 8016428:	4619      	mov	r1, r3
 801642a:	68b8      	ldr	r0, [r7, #8]
 801642c:	f7ff fe84 	bl	8016138 <etharp_find_entry>
 8016430:	4603      	mov	r3, r0
 8016432:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016438:	2b00      	cmp	r3, #0
 801643a:	da02      	bge.n	8016442 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801643c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016440:	e05d      	b.n	80164fe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016442:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016446:	4933      	ldr	r1, [pc, #204]	; (8016514 <etharp_update_arp_entry+0x148>)
 8016448:	4613      	mov	r3, r2
 801644a:	005b      	lsls	r3, r3, #1
 801644c:	4413      	add	r3, r2
 801644e:	00db      	lsls	r3, r3, #3
 8016450:	440b      	add	r3, r1
 8016452:	3314      	adds	r3, #20
 8016454:	2202      	movs	r2, #2
 8016456:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016458:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801645c:	492d      	ldr	r1, [pc, #180]	; (8016514 <etharp_update_arp_entry+0x148>)
 801645e:	4613      	mov	r3, r2
 8016460:	005b      	lsls	r3, r3, #1
 8016462:	4413      	add	r3, r2
 8016464:	00db      	lsls	r3, r3, #3
 8016466:	440b      	add	r3, r1
 8016468:	3308      	adds	r3, #8
 801646a:	68fa      	ldr	r2, [r7, #12]
 801646c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 801646e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016472:	4613      	mov	r3, r2
 8016474:	005b      	lsls	r3, r3, #1
 8016476:	4413      	add	r3, r2
 8016478:	00db      	lsls	r3, r3, #3
 801647a:	3308      	adds	r3, #8
 801647c:	4a25      	ldr	r2, [pc, #148]	; (8016514 <etharp_update_arp_entry+0x148>)
 801647e:	4413      	add	r3, r2
 8016480:	3304      	adds	r3, #4
 8016482:	2206      	movs	r2, #6
 8016484:	6879      	ldr	r1, [r7, #4]
 8016486:	4618      	mov	r0, r3
 8016488:	f003 ffeb 	bl	801a462 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801648c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016490:	4920      	ldr	r1, [pc, #128]	; (8016514 <etharp_update_arp_entry+0x148>)
 8016492:	4613      	mov	r3, r2
 8016494:	005b      	lsls	r3, r3, #1
 8016496:	4413      	add	r3, r2
 8016498:	00db      	lsls	r3, r3, #3
 801649a:	440b      	add	r3, r1
 801649c:	3312      	adds	r3, #18
 801649e:	2200      	movs	r2, #0
 80164a0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80164a2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80164a6:	491b      	ldr	r1, [pc, #108]	; (8016514 <etharp_update_arp_entry+0x148>)
 80164a8:	4613      	mov	r3, r2
 80164aa:	005b      	lsls	r3, r3, #1
 80164ac:	4413      	add	r3, r2
 80164ae:	00db      	lsls	r3, r3, #3
 80164b0:	440b      	add	r3, r1
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d021      	beq.n	80164fc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80164b8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80164bc:	4915      	ldr	r1, [pc, #84]	; (8016514 <etharp_update_arp_entry+0x148>)
 80164be:	4613      	mov	r3, r2
 80164c0:	005b      	lsls	r3, r3, #1
 80164c2:	4413      	add	r3, r2
 80164c4:	00db      	lsls	r3, r3, #3
 80164c6:	440b      	add	r3, r1
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80164cc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80164d0:	4910      	ldr	r1, [pc, #64]	; (8016514 <etharp_update_arp_entry+0x148>)
 80164d2:	4613      	mov	r3, r2
 80164d4:	005b      	lsls	r3, r3, #1
 80164d6:	4413      	add	r3, r2
 80164d8:	00db      	lsls	r3, r3, #3
 80164da:	440b      	add	r3, r1
 80164dc:	2200      	movs	r2, #0
 80164de:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80164e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80164ea:	9300      	str	r3, [sp, #0]
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	6939      	ldr	r1, [r7, #16]
 80164f0:	68f8      	ldr	r0, [r7, #12]
 80164f2:	f001 ff07 	bl	8018304 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80164f6:	6938      	ldr	r0, [r7, #16]
 80164f8:	f7f9 fcae 	bl	800fe58 <pbuf_free>
  }
  return ERR_OK;
 80164fc:	2300      	movs	r3, #0
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3718      	adds	r7, #24
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	0801f870 	.word	0x0801f870
 801650c:	0801f968 	.word	0x0801f968
 8016510:	0801f8e8 	.word	0x0801f8e8
 8016514:	2000c9ac 	.word	0x2000c9ac

08016518 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016518:	b580      	push	{r7, lr}
 801651a:	b084      	sub	sp, #16
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016520:	2300      	movs	r3, #0
 8016522:	73fb      	strb	r3, [r7, #15]
 8016524:	e01f      	b.n	8016566 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8016526:	7bfa      	ldrb	r2, [r7, #15]
 8016528:	4912      	ldr	r1, [pc, #72]	; (8016574 <etharp_cleanup_netif+0x5c>)
 801652a:	4613      	mov	r3, r2
 801652c:	005b      	lsls	r3, r3, #1
 801652e:	4413      	add	r3, r2
 8016530:	00db      	lsls	r3, r3, #3
 8016532:	440b      	add	r3, r1
 8016534:	3314      	adds	r3, #20
 8016536:	781b      	ldrb	r3, [r3, #0]
 8016538:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801653a:	7bbb      	ldrb	r3, [r7, #14]
 801653c:	2b00      	cmp	r3, #0
 801653e:	d00f      	beq.n	8016560 <etharp_cleanup_netif+0x48>
 8016540:	7bfa      	ldrb	r2, [r7, #15]
 8016542:	490c      	ldr	r1, [pc, #48]	; (8016574 <etharp_cleanup_netif+0x5c>)
 8016544:	4613      	mov	r3, r2
 8016546:	005b      	lsls	r3, r3, #1
 8016548:	4413      	add	r3, r2
 801654a:	00db      	lsls	r3, r3, #3
 801654c:	440b      	add	r3, r1
 801654e:	3308      	adds	r3, #8
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	687a      	ldr	r2, [r7, #4]
 8016554:	429a      	cmp	r2, r3
 8016556:	d103      	bne.n	8016560 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8016558:	7bfb      	ldrb	r3, [r7, #15]
 801655a:	4618      	mov	r0, r3
 801655c:	f7ff fd12 	bl	8015f84 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016560:	7bfb      	ldrb	r3, [r7, #15]
 8016562:	3301      	adds	r3, #1
 8016564:	73fb      	strb	r3, [r7, #15]
 8016566:	7bfb      	ldrb	r3, [r7, #15]
 8016568:	2b09      	cmp	r3, #9
 801656a:	d9dc      	bls.n	8016526 <etharp_cleanup_netif+0xe>
    }
  }
}
 801656c:	bf00      	nop
 801656e:	3710      	adds	r7, #16
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	2000c9ac 	.word	0x2000c9ac

08016578 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016578:	b5b0      	push	{r4, r5, r7, lr}
 801657a:	b08a      	sub	sp, #40	; 0x28
 801657c:	af04      	add	r7, sp, #16
 801657e:	6078      	str	r0, [r7, #4]
 8016580:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016582:	683b      	ldr	r3, [r7, #0]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d107      	bne.n	8016598 <etharp_input+0x20>
 8016588:	4b3d      	ldr	r3, [pc, #244]	; (8016680 <etharp_input+0x108>)
 801658a:	f44f 7222 	mov.w	r2, #648	; 0x288
 801658e:	493d      	ldr	r1, [pc, #244]	; (8016684 <etharp_input+0x10c>)
 8016590:	483d      	ldr	r0, [pc, #244]	; (8016688 <etharp_input+0x110>)
 8016592:	f004 fc5d 	bl	801ae50 <iprintf>
 8016596:	e06f      	b.n	8016678 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801659e:	693b      	ldr	r3, [r7, #16]
 80165a0:	881b      	ldrh	r3, [r3, #0]
 80165a2:	b29b      	uxth	r3, r3
 80165a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80165a8:	d10c      	bne.n	80165c4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80165aa:	693b      	ldr	r3, [r7, #16]
 80165ac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80165ae:	2b06      	cmp	r3, #6
 80165b0:	d108      	bne.n	80165c4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80165b2:	693b      	ldr	r3, [r7, #16]
 80165b4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80165b6:	2b04      	cmp	r3, #4
 80165b8:	d104      	bne.n	80165c4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80165ba:	693b      	ldr	r3, [r7, #16]
 80165bc:	885b      	ldrh	r3, [r3, #2]
 80165be:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80165c0:	2b08      	cmp	r3, #8
 80165c2:	d003      	beq.n	80165cc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80165c4:	6878      	ldr	r0, [r7, #4]
 80165c6:	f7f9 fc47 	bl	800fe58 <pbuf_free>
    return;
 80165ca:	e055      	b.n	8016678 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80165cc:	693b      	ldr	r3, [r7, #16]
 80165ce:	330e      	adds	r3, #14
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80165d4:	693b      	ldr	r3, [r7, #16]
 80165d6:	3318      	adds	r3, #24
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80165dc:	683b      	ldr	r3, [r7, #0]
 80165de:	3304      	adds	r3, #4
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d102      	bne.n	80165ec <etharp_input+0x74>
    for_us = 0;
 80165e6:	2300      	movs	r3, #0
 80165e8:	75fb      	strb	r3, [r7, #23]
 80165ea:	e009      	b.n	8016600 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80165ec:	68ba      	ldr	r2, [r7, #8]
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	3304      	adds	r3, #4
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	429a      	cmp	r2, r3
 80165f6:	bf0c      	ite	eq
 80165f8:	2301      	moveq	r3, #1
 80165fa:	2300      	movne	r3, #0
 80165fc:	b2db      	uxtb	r3, r3
 80165fe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016600:	693b      	ldr	r3, [r7, #16]
 8016602:	f103 0208 	add.w	r2, r3, #8
 8016606:	7dfb      	ldrb	r3, [r7, #23]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d001      	beq.n	8016610 <etharp_input+0x98>
 801660c:	2301      	movs	r3, #1
 801660e:	e000      	b.n	8016612 <etharp_input+0x9a>
 8016610:	2302      	movs	r3, #2
 8016612:	f107 010c 	add.w	r1, r7, #12
 8016616:	6838      	ldr	r0, [r7, #0]
 8016618:	f7ff fed8 	bl	80163cc <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801661c:	693b      	ldr	r3, [r7, #16]
 801661e:	88db      	ldrh	r3, [r3, #6]
 8016620:	b29b      	uxth	r3, r3
 8016622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016626:	d003      	beq.n	8016630 <etharp_input+0xb8>
 8016628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801662c:	d01e      	beq.n	801666c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 801662e:	e020      	b.n	8016672 <etharp_input+0xfa>
    if (for_us) {
 8016630:	7dfb      	ldrb	r3, [r7, #23]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d01c      	beq.n	8016670 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016636:	683b      	ldr	r3, [r7, #0]
 8016638:	f103 0025 	add.w	r0, r3, #37	; 0x25
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016642:	683b      	ldr	r3, [r7, #0]
 8016644:	f103 0525 	add.w	r5, r3, #37	; 0x25
 8016648:	683b      	ldr	r3, [r7, #0]
 801664a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 801664c:	693a      	ldr	r2, [r7, #16]
 801664e:	3208      	adds	r2, #8
      etharp_raw(netif,
 8016650:	2102      	movs	r1, #2
 8016652:	9103      	str	r1, [sp, #12]
 8016654:	f107 010c 	add.w	r1, r7, #12
 8016658:	9102      	str	r1, [sp, #8]
 801665a:	9201      	str	r2, [sp, #4]
 801665c:	9300      	str	r3, [sp, #0]
 801665e:	462b      	mov	r3, r5
 8016660:	4622      	mov	r2, r4
 8016662:	4601      	mov	r1, r0
 8016664:	6838      	ldr	r0, [r7, #0]
 8016666:	f000 fae3 	bl	8016c30 <etharp_raw>
    break;
 801666a:	e001      	b.n	8016670 <etharp_input+0xf8>
    break;
 801666c:	bf00      	nop
 801666e:	e000      	b.n	8016672 <etharp_input+0xfa>
    break;
 8016670:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016672:	6878      	ldr	r0, [r7, #4]
 8016674:	f7f9 fbf0 	bl	800fe58 <pbuf_free>
}
 8016678:	3718      	adds	r7, #24
 801667a:	46bd      	mov	sp, r7
 801667c:	bdb0      	pop	{r4, r5, r7, pc}
 801667e:	bf00      	nop
 8016680:	0801f870 	.word	0x0801f870
 8016684:	0801f9c0 	.word	0x0801f9c0
 8016688:	0801f8e8 	.word	0x0801f8e8

0801668c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b086      	sub	sp, #24
 8016690:	af02      	add	r7, sp, #8
 8016692:	60f8      	str	r0, [r7, #12]
 8016694:	60b9      	str	r1, [r7, #8]
 8016696:	4613      	mov	r3, r2
 8016698:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801669a:	79fa      	ldrb	r2, [r7, #7]
 801669c:	4944      	ldr	r1, [pc, #272]	; (80167b0 <etharp_output_to_arp_index+0x124>)
 801669e:	4613      	mov	r3, r2
 80166a0:	005b      	lsls	r3, r3, #1
 80166a2:	4413      	add	r3, r2
 80166a4:	00db      	lsls	r3, r3, #3
 80166a6:	440b      	add	r3, r1
 80166a8:	3314      	adds	r3, #20
 80166aa:	781b      	ldrb	r3, [r3, #0]
 80166ac:	2b01      	cmp	r3, #1
 80166ae:	d806      	bhi.n	80166be <etharp_output_to_arp_index+0x32>
 80166b0:	4b40      	ldr	r3, [pc, #256]	; (80167b4 <etharp_output_to_arp_index+0x128>)
 80166b2:	f240 22ed 	movw	r2, #749	; 0x2ed
 80166b6:	4940      	ldr	r1, [pc, #256]	; (80167b8 <etharp_output_to_arp_index+0x12c>)
 80166b8:	4840      	ldr	r0, [pc, #256]	; (80167bc <etharp_output_to_arp_index+0x130>)
 80166ba:	f004 fbc9 	bl	801ae50 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80166be:	79fa      	ldrb	r2, [r7, #7]
 80166c0:	493b      	ldr	r1, [pc, #236]	; (80167b0 <etharp_output_to_arp_index+0x124>)
 80166c2:	4613      	mov	r3, r2
 80166c4:	005b      	lsls	r3, r3, #1
 80166c6:	4413      	add	r3, r2
 80166c8:	00db      	lsls	r3, r3, #3
 80166ca:	440b      	add	r3, r1
 80166cc:	3314      	adds	r3, #20
 80166ce:	781b      	ldrb	r3, [r3, #0]
 80166d0:	2b02      	cmp	r3, #2
 80166d2:	d153      	bne.n	801677c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80166d4:	79fa      	ldrb	r2, [r7, #7]
 80166d6:	4936      	ldr	r1, [pc, #216]	; (80167b0 <etharp_output_to_arp_index+0x124>)
 80166d8:	4613      	mov	r3, r2
 80166da:	005b      	lsls	r3, r3, #1
 80166dc:	4413      	add	r3, r2
 80166de:	00db      	lsls	r3, r3, #3
 80166e0:	440b      	add	r3, r1
 80166e2:	3312      	adds	r3, #18
 80166e4:	881b      	ldrh	r3, [r3, #0]
 80166e6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80166ea:	d919      	bls.n	8016720 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80166ec:	79fa      	ldrb	r2, [r7, #7]
 80166ee:	4613      	mov	r3, r2
 80166f0:	005b      	lsls	r3, r3, #1
 80166f2:	4413      	add	r3, r2
 80166f4:	00db      	lsls	r3, r3, #3
 80166f6:	4a2e      	ldr	r2, [pc, #184]	; (80167b0 <etharp_output_to_arp_index+0x124>)
 80166f8:	4413      	add	r3, r2
 80166fa:	3304      	adds	r3, #4
 80166fc:	4619      	mov	r1, r3
 80166fe:	68f8      	ldr	r0, [r7, #12]
 8016700:	f000 fb44 	bl	8016d8c <etharp_request>
 8016704:	4603      	mov	r3, r0
 8016706:	2b00      	cmp	r3, #0
 8016708:	d138      	bne.n	801677c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801670a:	79fa      	ldrb	r2, [r7, #7]
 801670c:	4928      	ldr	r1, [pc, #160]	; (80167b0 <etharp_output_to_arp_index+0x124>)
 801670e:	4613      	mov	r3, r2
 8016710:	005b      	lsls	r3, r3, #1
 8016712:	4413      	add	r3, r2
 8016714:	00db      	lsls	r3, r3, #3
 8016716:	440b      	add	r3, r1
 8016718:	3314      	adds	r3, #20
 801671a:	2203      	movs	r2, #3
 801671c:	701a      	strb	r2, [r3, #0]
 801671e:	e02d      	b.n	801677c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016720:	79fa      	ldrb	r2, [r7, #7]
 8016722:	4923      	ldr	r1, [pc, #140]	; (80167b0 <etharp_output_to_arp_index+0x124>)
 8016724:	4613      	mov	r3, r2
 8016726:	005b      	lsls	r3, r3, #1
 8016728:	4413      	add	r3, r2
 801672a:	00db      	lsls	r3, r3, #3
 801672c:	440b      	add	r3, r1
 801672e:	3312      	adds	r3, #18
 8016730:	881b      	ldrh	r3, [r3, #0]
 8016732:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016736:	d321      	bcc.n	801677c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016738:	79fa      	ldrb	r2, [r7, #7]
 801673a:	4613      	mov	r3, r2
 801673c:	005b      	lsls	r3, r3, #1
 801673e:	4413      	add	r3, r2
 8016740:	00db      	lsls	r3, r3, #3
 8016742:	4a1b      	ldr	r2, [pc, #108]	; (80167b0 <etharp_output_to_arp_index+0x124>)
 8016744:	4413      	add	r3, r2
 8016746:	1d19      	adds	r1, r3, #4
 8016748:	79fa      	ldrb	r2, [r7, #7]
 801674a:	4613      	mov	r3, r2
 801674c:	005b      	lsls	r3, r3, #1
 801674e:	4413      	add	r3, r2
 8016750:	00db      	lsls	r3, r3, #3
 8016752:	3308      	adds	r3, #8
 8016754:	4a16      	ldr	r2, [pc, #88]	; (80167b0 <etharp_output_to_arp_index+0x124>)
 8016756:	4413      	add	r3, r2
 8016758:	3304      	adds	r3, #4
 801675a:	461a      	mov	r2, r3
 801675c:	68f8      	ldr	r0, [r7, #12]
 801675e:	f000 faf3 	bl	8016d48 <etharp_request_dst>
 8016762:	4603      	mov	r3, r0
 8016764:	2b00      	cmp	r3, #0
 8016766:	d109      	bne.n	801677c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016768:	79fa      	ldrb	r2, [r7, #7]
 801676a:	4911      	ldr	r1, [pc, #68]	; (80167b0 <etharp_output_to_arp_index+0x124>)
 801676c:	4613      	mov	r3, r2
 801676e:	005b      	lsls	r3, r3, #1
 8016770:	4413      	add	r3, r2
 8016772:	00db      	lsls	r3, r3, #3
 8016774:	440b      	add	r3, r1
 8016776:	3314      	adds	r3, #20
 8016778:	2203      	movs	r2, #3
 801677a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8016782:	79fa      	ldrb	r2, [r7, #7]
 8016784:	4613      	mov	r3, r2
 8016786:	005b      	lsls	r3, r3, #1
 8016788:	4413      	add	r3, r2
 801678a:	00db      	lsls	r3, r3, #3
 801678c:	3308      	adds	r3, #8
 801678e:	4a08      	ldr	r2, [pc, #32]	; (80167b0 <etharp_output_to_arp_index+0x124>)
 8016790:	4413      	add	r3, r2
 8016792:	1d1a      	adds	r2, r3, #4
 8016794:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016798:	9300      	str	r3, [sp, #0]
 801679a:	4613      	mov	r3, r2
 801679c:	460a      	mov	r2, r1
 801679e:	68b9      	ldr	r1, [r7, #8]
 80167a0:	68f8      	ldr	r0, [r7, #12]
 80167a2:	f001 fdaf 	bl	8018304 <ethernet_output>
 80167a6:	4603      	mov	r3, r0
}
 80167a8:	4618      	mov	r0, r3
 80167aa:	3710      	adds	r7, #16
 80167ac:	46bd      	mov	sp, r7
 80167ae:	bd80      	pop	{r7, pc}
 80167b0:	2000c9ac 	.word	0x2000c9ac
 80167b4:	0801f870 	.word	0x0801f870
 80167b8:	0801f9e0 	.word	0x0801f9e0
 80167bc:	0801f8e8 	.word	0x0801f8e8

080167c0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b08a      	sub	sp, #40	; 0x28
 80167c4:	af02      	add	r7, sp, #8
 80167c6:	60f8      	str	r0, [r7, #12]
 80167c8:	60b9      	str	r1, [r7, #8]
 80167ca:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d106      	bne.n	80167e4 <etharp_output+0x24>
 80167d6:	4b69      	ldr	r3, [pc, #420]	; (801697c <etharp_output+0x1bc>)
 80167d8:	f240 321b 	movw	r2, #795	; 0x31b
 80167dc:	4968      	ldr	r1, [pc, #416]	; (8016980 <etharp_output+0x1c0>)
 80167de:	4869      	ldr	r0, [pc, #420]	; (8016984 <etharp_output+0x1c4>)
 80167e0:	f004 fb36 	bl	801ae50 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80167e4:	68bb      	ldr	r3, [r7, #8]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d106      	bne.n	80167f8 <etharp_output+0x38>
 80167ea:	4b64      	ldr	r3, [pc, #400]	; (801697c <etharp_output+0x1bc>)
 80167ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80167f0:	4965      	ldr	r1, [pc, #404]	; (8016988 <etharp_output+0x1c8>)
 80167f2:	4864      	ldr	r0, [pc, #400]	; (8016984 <etharp_output+0x1c4>)
 80167f4:	f004 fb2c 	bl	801ae50 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d106      	bne.n	801680c <etharp_output+0x4c>
 80167fe:	4b5f      	ldr	r3, [pc, #380]	; (801697c <etharp_output+0x1bc>)
 8016800:	f240 321d 	movw	r2, #797	; 0x31d
 8016804:	4961      	ldr	r1, [pc, #388]	; (801698c <etharp_output+0x1cc>)
 8016806:	485f      	ldr	r0, [pc, #380]	; (8016984 <etharp_output+0x1c4>)
 8016808:	f004 fb22 	bl	801ae50 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	68f9      	ldr	r1, [r7, #12]
 8016812:	4618      	mov	r0, r3
 8016814:	f000 fed4 	bl	80175c0 <ip4_addr_isbroadcast_u32>
 8016818:	4603      	mov	r3, r0
 801681a:	2b00      	cmp	r3, #0
 801681c:	d002      	beq.n	8016824 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801681e:	4b5c      	ldr	r3, [pc, #368]	; (8016990 <etharp_output+0x1d0>)
 8016820:	61fb      	str	r3, [r7, #28]
 8016822:	e09b      	b.n	801695c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801682c:	2be0      	cmp	r3, #224	; 0xe0
 801682e:	d118      	bne.n	8016862 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016830:	2301      	movs	r3, #1
 8016832:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016834:	2300      	movs	r3, #0
 8016836:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016838:	235e      	movs	r3, #94	; 0x5e
 801683a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	3301      	adds	r3, #1
 8016840:	781b      	ldrb	r3, [r3, #0]
 8016842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016846:	b2db      	uxtb	r3, r3
 8016848:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	3302      	adds	r3, #2
 801684e:	781b      	ldrb	r3, [r3, #0]
 8016850:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	3303      	adds	r3, #3
 8016856:	781b      	ldrb	r3, [r3, #0]
 8016858:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801685a:	f107 0310 	add.w	r3, r7, #16
 801685e:	61fb      	str	r3, [r7, #28]
 8016860:	e07c      	b.n	801695c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	681a      	ldr	r2, [r3, #0]
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	3304      	adds	r3, #4
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	405a      	eors	r2, r3
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	3308      	adds	r3, #8
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	4013      	ands	r3, r2
 8016876:	2b00      	cmp	r3, #0
 8016878:	d012      	beq.n	80168a0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016880:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016884:	4293      	cmp	r3, r2
 8016886:	d00b      	beq.n	80168a0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	330c      	adds	r3, #12
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d003      	beq.n	801689a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	330c      	adds	r3, #12
 8016896:	61bb      	str	r3, [r7, #24]
 8016898:	e002      	b.n	80168a0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801689a:	f06f 0303 	mvn.w	r3, #3
 801689e:	e069      	b.n	8016974 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80168a0:	4b3c      	ldr	r3, [pc, #240]	; (8016994 <etharp_output+0x1d4>)
 80168a2:	781b      	ldrb	r3, [r3, #0]
 80168a4:	4619      	mov	r1, r3
 80168a6:	4a3c      	ldr	r2, [pc, #240]	; (8016998 <etharp_output+0x1d8>)
 80168a8:	460b      	mov	r3, r1
 80168aa:	005b      	lsls	r3, r3, #1
 80168ac:	440b      	add	r3, r1
 80168ae:	00db      	lsls	r3, r3, #3
 80168b0:	4413      	add	r3, r2
 80168b2:	3314      	adds	r3, #20
 80168b4:	781b      	ldrb	r3, [r3, #0]
 80168b6:	2b01      	cmp	r3, #1
 80168b8:	d917      	bls.n	80168ea <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80168ba:	69bb      	ldr	r3, [r7, #24]
 80168bc:	681a      	ldr	r2, [r3, #0]
 80168be:	4b35      	ldr	r3, [pc, #212]	; (8016994 <etharp_output+0x1d4>)
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	4618      	mov	r0, r3
 80168c4:	4934      	ldr	r1, [pc, #208]	; (8016998 <etharp_output+0x1d8>)
 80168c6:	4603      	mov	r3, r0
 80168c8:	005b      	lsls	r3, r3, #1
 80168ca:	4403      	add	r3, r0
 80168cc:	00db      	lsls	r3, r3, #3
 80168ce:	440b      	add	r3, r1
 80168d0:	3304      	adds	r3, #4
 80168d2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80168d4:	429a      	cmp	r2, r3
 80168d6:	d108      	bne.n	80168ea <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80168d8:	4b2e      	ldr	r3, [pc, #184]	; (8016994 <etharp_output+0x1d4>)
 80168da:	781b      	ldrb	r3, [r3, #0]
 80168dc:	461a      	mov	r2, r3
 80168de:	68b9      	ldr	r1, [r7, #8]
 80168e0:	68f8      	ldr	r0, [r7, #12]
 80168e2:	f7ff fed3 	bl	801668c <etharp_output_to_arp_index>
 80168e6:	4603      	mov	r3, r0
 80168e8:	e044      	b.n	8016974 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80168ea:	2300      	movs	r3, #0
 80168ec:	75fb      	strb	r3, [r7, #23]
 80168ee:	e02a      	b.n	8016946 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80168f0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80168f4:	4928      	ldr	r1, [pc, #160]	; (8016998 <etharp_output+0x1d8>)
 80168f6:	4613      	mov	r3, r2
 80168f8:	005b      	lsls	r3, r3, #1
 80168fa:	4413      	add	r3, r2
 80168fc:	00db      	lsls	r3, r3, #3
 80168fe:	440b      	add	r3, r1
 8016900:	3314      	adds	r3, #20
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	2b01      	cmp	r3, #1
 8016906:	d918      	bls.n	801693a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016908:	69bb      	ldr	r3, [r7, #24]
 801690a:	6819      	ldr	r1, [r3, #0]
 801690c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8016910:	4821      	ldr	r0, [pc, #132]	; (8016998 <etharp_output+0x1d8>)
 8016912:	4613      	mov	r3, r2
 8016914:	005b      	lsls	r3, r3, #1
 8016916:	4413      	add	r3, r2
 8016918:	00db      	lsls	r3, r3, #3
 801691a:	4403      	add	r3, r0
 801691c:	3304      	adds	r3, #4
 801691e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016920:	4299      	cmp	r1, r3
 8016922:	d10a      	bne.n	801693a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8016924:	7dfa      	ldrb	r2, [r7, #23]
 8016926:	4b1b      	ldr	r3, [pc, #108]	; (8016994 <etharp_output+0x1d4>)
 8016928:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801692a:	7dfb      	ldrb	r3, [r7, #23]
 801692c:	461a      	mov	r2, r3
 801692e:	68b9      	ldr	r1, [r7, #8]
 8016930:	68f8      	ldr	r0, [r7, #12]
 8016932:	f7ff feab 	bl	801668c <etharp_output_to_arp_index>
 8016936:	4603      	mov	r3, r0
 8016938:	e01c      	b.n	8016974 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801693a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801693e:	b2db      	uxtb	r3, r3
 8016940:	3301      	adds	r3, #1
 8016942:	b2db      	uxtb	r3, r3
 8016944:	75fb      	strb	r3, [r7, #23]
 8016946:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801694a:	2b09      	cmp	r3, #9
 801694c:	ddd0      	ble.n	80168f0 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801694e:	68ba      	ldr	r2, [r7, #8]
 8016950:	69b9      	ldr	r1, [r7, #24]
 8016952:	68f8      	ldr	r0, [r7, #12]
 8016954:	f000 f822 	bl	801699c <etharp_query>
 8016958:	4603      	mov	r3, r0
 801695a:	e00b      	b.n	8016974 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8016962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016966:	9300      	str	r3, [sp, #0]
 8016968:	69fb      	ldr	r3, [r7, #28]
 801696a:	68b9      	ldr	r1, [r7, #8]
 801696c:	68f8      	ldr	r0, [r7, #12]
 801696e:	f001 fcc9 	bl	8018304 <ethernet_output>
 8016972:	4603      	mov	r3, r0
}
 8016974:	4618      	mov	r0, r3
 8016976:	3720      	adds	r7, #32
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}
 801697c:	0801f870 	.word	0x0801f870
 8016980:	0801f9c0 	.word	0x0801f9c0
 8016984:	0801f8e8 	.word	0x0801f8e8
 8016988:	0801fa10 	.word	0x0801fa10
 801698c:	0801f9b0 	.word	0x0801f9b0
 8016990:	080200ec 	.word	0x080200ec
 8016994:	2000ca9c 	.word	0x2000ca9c
 8016998:	2000c9ac 	.word	0x2000c9ac

0801699c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b08c      	sub	sp, #48	; 0x30
 80169a0:	af02      	add	r7, sp, #8
 80169a2:	60f8      	str	r0, [r7, #12]
 80169a4:	60b9      	str	r1, [r7, #8]
 80169a6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	3325      	adds	r3, #37	; 0x25
 80169ac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80169ae:	23ff      	movs	r3, #255	; 0xff
 80169b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80169b4:	2300      	movs	r3, #0
 80169b6:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	68f9      	ldr	r1, [r7, #12]
 80169be:	4618      	mov	r0, r3
 80169c0:	f000 fdfe 	bl	80175c0 <ip4_addr_isbroadcast_u32>
 80169c4:	4603      	mov	r3, r0
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d10c      	bne.n	80169e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80169ca:	68bb      	ldr	r3, [r7, #8]
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80169d2:	2be0      	cmp	r3, #224	; 0xe0
 80169d4:	d006      	beq.n	80169e4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d003      	beq.n	80169e4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80169dc:	68bb      	ldr	r3, [r7, #8]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d102      	bne.n	80169ea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80169e4:	f06f 030f 	mvn.w	r3, #15
 80169e8:	e10f      	b.n	8016c0a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80169ea:	68fa      	ldr	r2, [r7, #12]
 80169ec:	2101      	movs	r1, #1
 80169ee:	68b8      	ldr	r0, [r7, #8]
 80169f0:	f7ff fba2 	bl	8016138 <etharp_find_entry>
 80169f4:	4603      	mov	r3, r0
 80169f6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 80169f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	da02      	bge.n	8016a06 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8016a00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a04:	e101      	b.n	8016c0a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016a06:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016a0a:	4982      	ldr	r1, [pc, #520]	; (8016c14 <etharp_query+0x278>)
 8016a0c:	4613      	mov	r3, r2
 8016a0e:	005b      	lsls	r3, r3, #1
 8016a10:	4413      	add	r3, r2
 8016a12:	00db      	lsls	r3, r3, #3
 8016a14:	440b      	add	r3, r1
 8016a16:	3314      	adds	r3, #20
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d117      	bne.n	8016a4e <etharp_query+0xb2>
    is_new_entry = 1;
 8016a1e:	2301      	movs	r3, #1
 8016a20:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016a22:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016a26:	497b      	ldr	r1, [pc, #492]	; (8016c14 <etharp_query+0x278>)
 8016a28:	4613      	mov	r3, r2
 8016a2a:	005b      	lsls	r3, r3, #1
 8016a2c:	4413      	add	r3, r2
 8016a2e:	00db      	lsls	r3, r3, #3
 8016a30:	440b      	add	r3, r1
 8016a32:	3314      	adds	r3, #20
 8016a34:	2201      	movs	r2, #1
 8016a36:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016a38:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016a3c:	4975      	ldr	r1, [pc, #468]	; (8016c14 <etharp_query+0x278>)
 8016a3e:	4613      	mov	r3, r2
 8016a40:	005b      	lsls	r3, r3, #1
 8016a42:	4413      	add	r3, r2
 8016a44:	00db      	lsls	r3, r3, #3
 8016a46:	440b      	add	r3, r1
 8016a48:	3308      	adds	r3, #8
 8016a4a:	68fa      	ldr	r2, [r7, #12]
 8016a4c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016a4e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016a52:	4970      	ldr	r1, [pc, #448]	; (8016c14 <etharp_query+0x278>)
 8016a54:	4613      	mov	r3, r2
 8016a56:	005b      	lsls	r3, r3, #1
 8016a58:	4413      	add	r3, r2
 8016a5a:	00db      	lsls	r3, r3, #3
 8016a5c:	440b      	add	r3, r1
 8016a5e:	3314      	adds	r3, #20
 8016a60:	781b      	ldrb	r3, [r3, #0]
 8016a62:	2b01      	cmp	r3, #1
 8016a64:	d012      	beq.n	8016a8c <etharp_query+0xf0>
 8016a66:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016a6a:	496a      	ldr	r1, [pc, #424]	; (8016c14 <etharp_query+0x278>)
 8016a6c:	4613      	mov	r3, r2
 8016a6e:	005b      	lsls	r3, r3, #1
 8016a70:	4413      	add	r3, r2
 8016a72:	00db      	lsls	r3, r3, #3
 8016a74:	440b      	add	r3, r1
 8016a76:	3314      	adds	r3, #20
 8016a78:	781b      	ldrb	r3, [r3, #0]
 8016a7a:	2b01      	cmp	r3, #1
 8016a7c:	d806      	bhi.n	8016a8c <etharp_query+0xf0>
 8016a7e:	4b66      	ldr	r3, [pc, #408]	; (8016c18 <etharp_query+0x27c>)
 8016a80:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016a84:	4965      	ldr	r1, [pc, #404]	; (8016c1c <etharp_query+0x280>)
 8016a86:	4866      	ldr	r0, [pc, #408]	; (8016c20 <etharp_query+0x284>)
 8016a88:	f004 f9e2 	bl	801ae50 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016a8c:	6a3b      	ldr	r3, [r7, #32]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d102      	bne.n	8016a98 <etharp_query+0xfc>
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d10c      	bne.n	8016ab2 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016a98:	68b9      	ldr	r1, [r7, #8]
 8016a9a:	68f8      	ldr	r0, [r7, #12]
 8016a9c:	f000 f976 	bl	8016d8c <etharp_request>
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d102      	bne.n	8016ab2 <etharp_query+0x116>
      return result;
 8016aac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016ab0:	e0ab      	b.n	8016c0a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d106      	bne.n	8016ac6 <etharp_query+0x12a>
 8016ab8:	4b57      	ldr	r3, [pc, #348]	; (8016c18 <etharp_query+0x27c>)
 8016aba:	f240 32db 	movw	r2, #987	; 0x3db
 8016abe:	4959      	ldr	r1, [pc, #356]	; (8016c24 <etharp_query+0x288>)
 8016ac0:	4857      	ldr	r0, [pc, #348]	; (8016c20 <etharp_query+0x284>)
 8016ac2:	f004 f9c5 	bl	801ae50 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016ac6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016aca:	4952      	ldr	r1, [pc, #328]	; (8016c14 <etharp_query+0x278>)
 8016acc:	4613      	mov	r3, r2
 8016ace:	005b      	lsls	r3, r3, #1
 8016ad0:	4413      	add	r3, r2
 8016ad2:	00db      	lsls	r3, r3, #3
 8016ad4:	440b      	add	r3, r1
 8016ad6:	3314      	adds	r3, #20
 8016ad8:	781b      	ldrb	r3, [r3, #0]
 8016ada:	2b01      	cmp	r3, #1
 8016adc:	d919      	bls.n	8016b12 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8016ade:	7cfa      	ldrb	r2, [r7, #19]
 8016ae0:	4b51      	ldr	r3, [pc, #324]	; (8016c28 <etharp_query+0x28c>)
 8016ae2:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016ae4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016ae8:	4613      	mov	r3, r2
 8016aea:	005b      	lsls	r3, r3, #1
 8016aec:	4413      	add	r3, r2
 8016aee:	00db      	lsls	r3, r3, #3
 8016af0:	3308      	adds	r3, #8
 8016af2:	4a48      	ldr	r2, [pc, #288]	; (8016c14 <etharp_query+0x278>)
 8016af4:	4413      	add	r3, r2
 8016af6:	1d1a      	adds	r2, r3, #4
 8016af8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016afc:	9300      	str	r3, [sp, #0]
 8016afe:	4613      	mov	r3, r2
 8016b00:	697a      	ldr	r2, [r7, #20]
 8016b02:	6879      	ldr	r1, [r7, #4]
 8016b04:	68f8      	ldr	r0, [r7, #12]
 8016b06:	f001 fbfd 	bl	8018304 <ethernet_output>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016b10:	e079      	b.n	8016c06 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016b12:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016b16:	493f      	ldr	r1, [pc, #252]	; (8016c14 <etharp_query+0x278>)
 8016b18:	4613      	mov	r3, r2
 8016b1a:	005b      	lsls	r3, r3, #1
 8016b1c:	4413      	add	r3, r2
 8016b1e:	00db      	lsls	r3, r3, #3
 8016b20:	440b      	add	r3, r1
 8016b22:	3314      	adds	r3, #20
 8016b24:	781b      	ldrb	r3, [r3, #0]
 8016b26:	2b01      	cmp	r3, #1
 8016b28:	d16d      	bne.n	8016c06 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016b32:	e01a      	b.n	8016b6a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016b34:	69fb      	ldr	r3, [r7, #28]
 8016b36:	895a      	ldrh	r2, [r3, #10]
 8016b38:	69fb      	ldr	r3, [r7, #28]
 8016b3a:	891b      	ldrh	r3, [r3, #8]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	d10a      	bne.n	8016b56 <etharp_query+0x1ba>
 8016b40:	69fb      	ldr	r3, [r7, #28]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d006      	beq.n	8016b56 <etharp_query+0x1ba>
 8016b48:	4b33      	ldr	r3, [pc, #204]	; (8016c18 <etharp_query+0x27c>)
 8016b4a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8016b4e:	4937      	ldr	r1, [pc, #220]	; (8016c2c <etharp_query+0x290>)
 8016b50:	4833      	ldr	r0, [pc, #204]	; (8016c20 <etharp_query+0x284>)
 8016b52:	f004 f97d 	bl	801ae50 <iprintf>
      if (p->type != PBUF_ROM) {
 8016b56:	69fb      	ldr	r3, [r7, #28]
 8016b58:	7b1b      	ldrb	r3, [r3, #12]
 8016b5a:	2b01      	cmp	r3, #1
 8016b5c:	d002      	beq.n	8016b64 <etharp_query+0x1c8>
        copy_needed = 1;
 8016b5e:	2301      	movs	r3, #1
 8016b60:	61bb      	str	r3, [r7, #24]
        break;
 8016b62:	e005      	b.n	8016b70 <etharp_query+0x1d4>
      }
      p = p->next;
 8016b64:	69fb      	ldr	r3, [r7, #28]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016b6a:	69fb      	ldr	r3, [r7, #28]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d1e1      	bne.n	8016b34 <etharp_query+0x198>
    }
    if (copy_needed) {
 8016b70:	69bb      	ldr	r3, [r7, #24]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d017      	beq.n	8016ba6 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8016b76:	69fb      	ldr	r3, [r7, #28]
 8016b78:	891b      	ldrh	r3, [r3, #8]
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	4619      	mov	r1, r3
 8016b7e:	2002      	movs	r0, #2
 8016b80:	f7f8 fdf8 	bl	800f774 <pbuf_alloc>
 8016b84:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8016b86:	69fb      	ldr	r3, [r7, #28]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d011      	beq.n	8016bb0 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8016b8c:	6879      	ldr	r1, [r7, #4]
 8016b8e:	69f8      	ldr	r0, [r7, #28]
 8016b90:	f7f9 fa92 	bl	80100b8 <pbuf_copy>
 8016b94:	4603      	mov	r3, r0
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d00a      	beq.n	8016bb0 <etharp_query+0x214>
          pbuf_free(p);
 8016b9a:	69f8      	ldr	r0, [r7, #28]
 8016b9c:	f7f9 f95c 	bl	800fe58 <pbuf_free>
          p = NULL;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	61fb      	str	r3, [r7, #28]
 8016ba4:	e004      	b.n	8016bb0 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016baa:	69f8      	ldr	r0, [r7, #28]
 8016bac:	f7f9 fa06 	bl	800ffbc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d024      	beq.n	8016c00 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016bb6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016bba:	4916      	ldr	r1, [pc, #88]	; (8016c14 <etharp_query+0x278>)
 8016bbc:	4613      	mov	r3, r2
 8016bbe:	005b      	lsls	r3, r3, #1
 8016bc0:	4413      	add	r3, r2
 8016bc2:	00db      	lsls	r3, r3, #3
 8016bc4:	440b      	add	r3, r1
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d00b      	beq.n	8016be4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8016bcc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016bd0:	4910      	ldr	r1, [pc, #64]	; (8016c14 <etharp_query+0x278>)
 8016bd2:	4613      	mov	r3, r2
 8016bd4:	005b      	lsls	r3, r3, #1
 8016bd6:	4413      	add	r3, r2
 8016bd8:	00db      	lsls	r3, r3, #3
 8016bda:	440b      	add	r3, r1
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	4618      	mov	r0, r3
 8016be0:	f7f9 f93a 	bl	800fe58 <pbuf_free>
      }
      arp_table[i].q = p;
 8016be4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016be8:	490a      	ldr	r1, [pc, #40]	; (8016c14 <etharp_query+0x278>)
 8016bea:	4613      	mov	r3, r2
 8016bec:	005b      	lsls	r3, r3, #1
 8016bee:	4413      	add	r3, r2
 8016bf0:	00db      	lsls	r3, r3, #3
 8016bf2:	440b      	add	r3, r1
 8016bf4:	69fa      	ldr	r2, [r7, #28]
 8016bf6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016bfe:	e002      	b.n	8016c06 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016c00:	23ff      	movs	r3, #255	; 0xff
 8016c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016c06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	3728      	adds	r7, #40	; 0x28
 8016c0e:	46bd      	mov	sp, r7
 8016c10:	bd80      	pop	{r7, pc}
 8016c12:	bf00      	nop
 8016c14:	2000c9ac 	.word	0x2000c9ac
 8016c18:	0801f870 	.word	0x0801f870
 8016c1c:	0801fa1c 	.word	0x0801fa1c
 8016c20:	0801f8e8 	.word	0x0801f8e8
 8016c24:	0801fa10 	.word	0x0801fa10
 8016c28:	2000ca9c 	.word	0x2000ca9c
 8016c2c:	0801fa44 	.word	0x0801fa44

08016c30 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b08a      	sub	sp, #40	; 0x28
 8016c34:	af02      	add	r7, sp, #8
 8016c36:	60f8      	str	r0, [r7, #12]
 8016c38:	60b9      	str	r1, [r7, #8]
 8016c3a:	607a      	str	r2, [r7, #4]
 8016c3c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d106      	bne.n	8016c56 <etharp_raw+0x26>
 8016c48:	4b3a      	ldr	r3, [pc, #232]	; (8016d34 <etharp_raw+0x104>)
 8016c4a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8016c4e:	493a      	ldr	r1, [pc, #232]	; (8016d38 <etharp_raw+0x108>)
 8016c50:	483a      	ldr	r0, [pc, #232]	; (8016d3c <etharp_raw+0x10c>)
 8016c52:	f004 f8fd 	bl	801ae50 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016c56:	2200      	movs	r2, #0
 8016c58:	211c      	movs	r1, #28
 8016c5a:	2002      	movs	r0, #2
 8016c5c:	f7f8 fd8a 	bl	800f774 <pbuf_alloc>
 8016c60:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016c62:	69bb      	ldr	r3, [r7, #24]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d102      	bne.n	8016c6e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016c68:	f04f 33ff 	mov.w	r3, #4294967295
 8016c6c:	e05d      	b.n	8016d2a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016c6e:	69bb      	ldr	r3, [r7, #24]
 8016c70:	895b      	ldrh	r3, [r3, #10]
 8016c72:	2b1b      	cmp	r3, #27
 8016c74:	d806      	bhi.n	8016c84 <etharp_raw+0x54>
 8016c76:	4b2f      	ldr	r3, [pc, #188]	; (8016d34 <etharp_raw+0x104>)
 8016c78:	f240 4264 	movw	r2, #1124	; 0x464
 8016c7c:	4930      	ldr	r1, [pc, #192]	; (8016d40 <etharp_raw+0x110>)
 8016c7e:	482f      	ldr	r0, [pc, #188]	; (8016d3c <etharp_raw+0x10c>)
 8016c80:	f004 f8e6 	bl	801ae50 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016c84:	69bb      	ldr	r3, [r7, #24]
 8016c86:	685b      	ldr	r3, [r3, #4]
 8016c88:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016c8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f7f7 ff49 	bl	800eb24 <lwip_htons>
 8016c92:	4603      	mov	r3, r0
 8016c94:	461a      	mov	r2, r3
 8016c96:	697b      	ldr	r3, [r7, #20]
 8016c98:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016ca0:	2b06      	cmp	r3, #6
 8016ca2:	d006      	beq.n	8016cb2 <etharp_raw+0x82>
 8016ca4:	4b23      	ldr	r3, [pc, #140]	; (8016d34 <etharp_raw+0x104>)
 8016ca6:	f240 426b 	movw	r2, #1131	; 0x46b
 8016caa:	4926      	ldr	r1, [pc, #152]	; (8016d44 <etharp_raw+0x114>)
 8016cac:	4823      	ldr	r0, [pc, #140]	; (8016d3c <etharp_raw+0x10c>)
 8016cae:	f004 f8cf 	bl	801ae50 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8016cb2:	697b      	ldr	r3, [r7, #20]
 8016cb4:	3308      	adds	r3, #8
 8016cb6:	2206      	movs	r2, #6
 8016cb8:	6839      	ldr	r1, [r7, #0]
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f003 fbd1 	bl	801a462 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8016cc0:	697b      	ldr	r3, [r7, #20]
 8016cc2:	3312      	adds	r3, #18
 8016cc4:	2206      	movs	r2, #6
 8016cc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f003 fbca 	bl	801a462 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8016cce:	697b      	ldr	r3, [r7, #20]
 8016cd0:	330e      	adds	r3, #14
 8016cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016cd4:	6812      	ldr	r2, [r2, #0]
 8016cd6:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	3318      	adds	r3, #24
 8016cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016cde:	6812      	ldr	r2, [r2, #0]
 8016ce0:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8016ce2:	697b      	ldr	r3, [r7, #20]
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	701a      	strb	r2, [r3, #0]
 8016ce8:	2200      	movs	r2, #0
 8016cea:	f042 0201 	orr.w	r2, r2, #1
 8016cee:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016cf0:	697b      	ldr	r3, [r7, #20]
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	f042 0208 	orr.w	r2, r2, #8
 8016cf8:	709a      	strb	r2, [r3, #2]
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	2206      	movs	r2, #6
 8016d02:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016d04:	697b      	ldr	r3, [r7, #20]
 8016d06:	2204      	movs	r2, #4
 8016d08:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016d0a:	f640 0306 	movw	r3, #2054	; 0x806
 8016d0e:	9300      	str	r3, [sp, #0]
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	68ba      	ldr	r2, [r7, #8]
 8016d14:	69b9      	ldr	r1, [r7, #24]
 8016d16:	68f8      	ldr	r0, [r7, #12]
 8016d18:	f001 faf4 	bl	8018304 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016d1c:	69b8      	ldr	r0, [r7, #24]
 8016d1e:	f7f9 f89b 	bl	800fe58 <pbuf_free>
  p = NULL;
 8016d22:	2300      	movs	r3, #0
 8016d24:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016d26:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	3720      	adds	r7, #32
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	bd80      	pop	{r7, pc}
 8016d32:	bf00      	nop
 8016d34:	0801f870 	.word	0x0801f870
 8016d38:	0801f9c0 	.word	0x0801f9c0
 8016d3c:	0801f8e8 	.word	0x0801f8e8
 8016d40:	0801fa60 	.word	0x0801fa60
 8016d44:	0801fa94 	.word	0x0801fa94

08016d48 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b088      	sub	sp, #32
 8016d4c:	af04      	add	r7, sp, #16
 8016d4e:	60f8      	str	r0, [r7, #12]
 8016d50:	60b9      	str	r1, [r7, #8]
 8016d52:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016d64:	2201      	movs	r2, #1
 8016d66:	9203      	str	r2, [sp, #12]
 8016d68:	68ba      	ldr	r2, [r7, #8]
 8016d6a:	9202      	str	r2, [sp, #8]
 8016d6c:	4a06      	ldr	r2, [pc, #24]	; (8016d88 <etharp_request_dst+0x40>)
 8016d6e:	9201      	str	r2, [sp, #4]
 8016d70:	9300      	str	r3, [sp, #0]
 8016d72:	4603      	mov	r3, r0
 8016d74:	687a      	ldr	r2, [r7, #4]
 8016d76:	68f8      	ldr	r0, [r7, #12]
 8016d78:	f7ff ff5a 	bl	8016c30 <etharp_raw>
 8016d7c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	3710      	adds	r7, #16
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bd80      	pop	{r7, pc}
 8016d86:	bf00      	nop
 8016d88:	080200f4 	.word	0x080200f4

08016d8c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b082      	sub	sp, #8
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
 8016d94:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016d96:	4a05      	ldr	r2, [pc, #20]	; (8016dac <etharp_request+0x20>)
 8016d98:	6839      	ldr	r1, [r7, #0]
 8016d9a:	6878      	ldr	r0, [r7, #4]
 8016d9c:	f7ff ffd4 	bl	8016d48 <etharp_request_dst>
 8016da0:	4603      	mov	r3, r0
}
 8016da2:	4618      	mov	r0, r3
 8016da4:	3708      	adds	r7, #8
 8016da6:	46bd      	mov	sp, r7
 8016da8:	bd80      	pop	{r7, pc}
 8016daa:	bf00      	nop
 8016dac:	080200ec 	.word	0x080200ec

08016db0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b08e      	sub	sp, #56	; 0x38
 8016db4:	af04      	add	r7, sp, #16
 8016db6:	6078      	str	r0, [r7, #4]
 8016db8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016dba:	4b7a      	ldr	r3, [pc, #488]	; (8016fa4 <icmp_input+0x1f4>)
 8016dbc:	689b      	ldr	r3, [r3, #8]
 8016dbe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8016dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc2:	781b      	ldrb	r3, [r3, #0]
 8016dc4:	b29b      	uxth	r3, r3
 8016dc6:	f003 030f 	and.w	r3, r3, #15
 8016dca:	b29b      	uxth	r3, r3
 8016dcc:	009b      	lsls	r3, r3, #2
 8016dce:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016dd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016dd2:	2b13      	cmp	r3, #19
 8016dd4:	f240 80d1 	bls.w	8016f7a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	895b      	ldrh	r3, [r3, #10]
 8016ddc:	2b03      	cmp	r3, #3
 8016dde:	f240 80ce 	bls.w	8016f7e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	685b      	ldr	r3, [r3, #4]
 8016de6:	781b      	ldrb	r3, [r3, #0]
 8016de8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016dec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	f000 80bb 	beq.w	8016f6c <icmp_input+0x1bc>
 8016df6:	2b08      	cmp	r3, #8
 8016df8:	f040 80bb 	bne.w	8016f72 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8016dfc:	4b6a      	ldr	r3, [pc, #424]	; (8016fa8 <icmp_input+0x1f8>)
 8016dfe:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016e00:	4b68      	ldr	r3, [pc, #416]	; (8016fa4 <icmp_input+0x1f4>)
 8016e02:	695b      	ldr	r3, [r3, #20]
 8016e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016e08:	2be0      	cmp	r3, #224	; 0xe0
 8016e0a:	f000 80bf 	beq.w	8016f8c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016e0e:	4b65      	ldr	r3, [pc, #404]	; (8016fa4 <icmp_input+0x1f4>)
 8016e10:	695a      	ldr	r2, [r3, #20]
 8016e12:	4b64      	ldr	r3, [pc, #400]	; (8016fa4 <icmp_input+0x1f4>)
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	4619      	mov	r1, r3
 8016e18:	4610      	mov	r0, r2
 8016e1a:	f000 fbd1 	bl	80175c0 <ip4_addr_isbroadcast_u32>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	f040 80b5 	bne.w	8016f90 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	891b      	ldrh	r3, [r3, #8]
 8016e2a:	2b07      	cmp	r3, #7
 8016e2c:	f240 80a9 	bls.w	8016f82 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016e30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e32:	330e      	adds	r3, #14
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	b21b      	sxth	r3, r3
 8016e38:	4619      	mov	r1, r3
 8016e3a:	6878      	ldr	r0, [r7, #4]
 8016e3c:	f7f8 ffe8 	bl	800fe10 <pbuf_header>
 8016e40:	4603      	mov	r3, r0
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d046      	beq.n	8016ed4 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	891a      	ldrh	r2, [r3, #8]
 8016e4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e4c:	4413      	add	r3, r2
 8016e4e:	b29b      	uxth	r3, r3
 8016e50:	2200      	movs	r2, #0
 8016e52:	4619      	mov	r1, r3
 8016e54:	2002      	movs	r0, #2
 8016e56:	f7f8 fc8d 	bl	800f774 <pbuf_alloc>
 8016e5a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8016e5c:	69bb      	ldr	r3, [r7, #24]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	f000 8098 	beq.w	8016f94 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016e64:	69bb      	ldr	r3, [r7, #24]
 8016e66:	895b      	ldrh	r3, [r3, #10]
 8016e68:	461a      	mov	r2, r3
 8016e6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e6c:	3308      	adds	r3, #8
 8016e6e:	429a      	cmp	r2, r3
 8016e70:	d203      	bcs.n	8016e7a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8016e72:	69b8      	ldr	r0, [r7, #24]
 8016e74:	f7f8 fff0 	bl	800fe58 <pbuf_free>
        goto icmperr;
 8016e78:	e08d      	b.n	8016f96 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8016e7a:	69bb      	ldr	r3, [r7, #24]
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016e82:	4618      	mov	r0, r3
 8016e84:	f003 faed 	bl	801a462 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8016e88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e8a:	425b      	negs	r3, r3
 8016e8c:	b29b      	uxth	r3, r3
 8016e8e:	b21b      	sxth	r3, r3
 8016e90:	4619      	mov	r1, r3
 8016e92:	69b8      	ldr	r0, [r7, #24]
 8016e94:	f7f8 ffbc 	bl	800fe10 <pbuf_header>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d009      	beq.n	8016eb2 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016e9e:	4b43      	ldr	r3, [pc, #268]	; (8016fac <icmp_input+0x1fc>)
 8016ea0:	22af      	movs	r2, #175	; 0xaf
 8016ea2:	4943      	ldr	r1, [pc, #268]	; (8016fb0 <icmp_input+0x200>)
 8016ea4:	4843      	ldr	r0, [pc, #268]	; (8016fb4 <icmp_input+0x204>)
 8016ea6:	f003 ffd3 	bl	801ae50 <iprintf>
        pbuf_free(r);
 8016eaa:	69b8      	ldr	r0, [r7, #24]
 8016eac:	f7f8 ffd4 	bl	800fe58 <pbuf_free>
        goto icmperr;
 8016eb0:	e071      	b.n	8016f96 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8016eb2:	6879      	ldr	r1, [r7, #4]
 8016eb4:	69b8      	ldr	r0, [r7, #24]
 8016eb6:	f7f9 f8ff 	bl	80100b8 <pbuf_copy>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d003      	beq.n	8016ec8 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8016ec0:	69b8      	ldr	r0, [r7, #24]
 8016ec2:	f7f8 ffc9 	bl	800fe58 <pbuf_free>
        goto icmperr;
 8016ec6:	e066      	b.n	8016f96 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8016ec8:	6878      	ldr	r0, [r7, #4]
 8016eca:	f7f8 ffc5 	bl	800fe58 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8016ece:	69bb      	ldr	r3, [r7, #24]
 8016ed0:	607b      	str	r3, [r7, #4]
 8016ed2:	e015      	b.n	8016f00 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016ed4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ed6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8016eda:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8016ede:	33f2      	adds	r3, #242	; 0xf2
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	b21b      	sxth	r3, r3
 8016ee4:	4619      	mov	r1, r3
 8016ee6:	6878      	ldr	r0, [r7, #4]
 8016ee8:	f7f8 ff92 	bl	800fe10 <pbuf_header>
 8016eec:	4603      	mov	r3, r0
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d006      	beq.n	8016f00 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016ef2:	4b2e      	ldr	r3, [pc, #184]	; (8016fac <icmp_input+0x1fc>)
 8016ef4:	22c0      	movs	r2, #192	; 0xc0
 8016ef6:	4930      	ldr	r1, [pc, #192]	; (8016fb8 <icmp_input+0x208>)
 8016ef8:	482e      	ldr	r0, [pc, #184]	; (8016fb4 <icmp_input+0x204>)
 8016efa:	f003 ffa9 	bl	801ae50 <iprintf>
        goto icmperr;
 8016efe:	e04a      	b.n	8016f96 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	685b      	ldr	r3, [r3, #4]
 8016f04:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8016f06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016f0a:	4619      	mov	r1, r3
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f7f8 ff7f 	bl	800fe10 <pbuf_header>
 8016f12:	4603      	mov	r3, r0
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d12b      	bne.n	8016f70 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	685b      	ldr	r3, [r3, #4]
 8016f1c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8016f1e:	69fb      	ldr	r3, [r7, #28]
 8016f20:	681a      	ldr	r2, [r3, #0]
 8016f22:	693b      	ldr	r3, [r7, #16]
 8016f24:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016f26:	4b1f      	ldr	r3, [pc, #124]	; (8016fa4 <icmp_input+0x1f4>)
 8016f28:	691a      	ldr	r2, [r3, #16]
 8016f2a:	693b      	ldr	r3, [r7, #16]
 8016f2c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016f2e:	697b      	ldr	r3, [r7, #20]
 8016f30:	2200      	movs	r2, #0
 8016f32:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8016f34:	697b      	ldr	r3, [r7, #20]
 8016f36:	2200      	movs	r2, #0
 8016f38:	709a      	strb	r2, [r3, #2]
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8016f3e:	693b      	ldr	r3, [r7, #16]
 8016f40:	22ff      	movs	r2, #255	; 0xff
 8016f42:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8016f44:	693b      	ldr	r3, [r7, #16]
 8016f46:	2200      	movs	r2, #0
 8016f48:	729a      	strb	r2, [r3, #10]
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016f4e:	683b      	ldr	r3, [r7, #0]
 8016f50:	9302      	str	r3, [sp, #8]
 8016f52:	2301      	movs	r3, #1
 8016f54:	9301      	str	r3, [sp, #4]
 8016f56:	2300      	movs	r3, #0
 8016f58:	9300      	str	r3, [sp, #0]
 8016f5a:	23ff      	movs	r3, #255	; 0xff
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	69f9      	ldr	r1, [r7, #28]
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f000 fa5b 	bl	801741c <ip4_output_if>
 8016f66:	4603      	mov	r3, r0
 8016f68:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8016f6a:	e001      	b.n	8016f70 <icmp_input+0x1c0>
    break;
 8016f6c:	bf00      	nop
 8016f6e:	e000      	b.n	8016f72 <icmp_input+0x1c2>
    break;
 8016f70:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016f72:	6878      	ldr	r0, [r7, #4]
 8016f74:	f7f8 ff70 	bl	800fe58 <pbuf_free>
  return;
 8016f78:	e011      	b.n	8016f9e <icmp_input+0x1ee>
    goto lenerr;
 8016f7a:	bf00      	nop
 8016f7c:	e002      	b.n	8016f84 <icmp_input+0x1d4>
    goto lenerr;
 8016f7e:	bf00      	nop
 8016f80:	e000      	b.n	8016f84 <icmp_input+0x1d4>
      goto lenerr;
 8016f82:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016f84:	6878      	ldr	r0, [r7, #4]
 8016f86:	f7f8 ff67 	bl	800fe58 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016f8a:	e008      	b.n	8016f9e <icmp_input+0x1ee>
      goto icmperr;
 8016f8c:	bf00      	nop
 8016f8e:	e002      	b.n	8016f96 <icmp_input+0x1e6>
      goto icmperr;
 8016f90:	bf00      	nop
 8016f92:	e000      	b.n	8016f96 <icmp_input+0x1e6>
        goto icmperr;
 8016f94:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016f96:	6878      	ldr	r0, [r7, #4]
 8016f98:	f7f8 ff5e 	bl	800fe58 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016f9c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016f9e:	3728      	adds	r7, #40	; 0x28
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}
 8016fa4:	20012d14 	.word	0x20012d14
 8016fa8:	20012d28 	.word	0x20012d28
 8016fac:	0801fad8 	.word	0x0801fad8
 8016fb0:	0801fb10 	.word	0x0801fb10
 8016fb4:	0801fb48 	.word	0x0801fb48
 8016fb8:	0801fb70 	.word	0x0801fb70

08016fbc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b082      	sub	sp, #8
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	6078      	str	r0, [r7, #4]
 8016fc4:	460b      	mov	r3, r1
 8016fc6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016fc8:	78fb      	ldrb	r3, [r7, #3]
 8016fca:	461a      	mov	r2, r3
 8016fcc:	2103      	movs	r1, #3
 8016fce:	6878      	ldr	r0, [r7, #4]
 8016fd0:	f000 f814 	bl	8016ffc <icmp_send_response>
}
 8016fd4:	bf00      	nop
 8016fd6:	3708      	adds	r7, #8
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}

08016fdc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b082      	sub	sp, #8
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	6078      	str	r0, [r7, #4]
 8016fe4:	460b      	mov	r3, r1
 8016fe6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016fe8:	78fb      	ldrb	r3, [r7, #3]
 8016fea:	461a      	mov	r2, r3
 8016fec:	210b      	movs	r1, #11
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	f000 f804 	bl	8016ffc <icmp_send_response>
}
 8016ff4:	bf00      	nop
 8016ff6:	3708      	adds	r7, #8
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}

08016ffc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b08c      	sub	sp, #48	; 0x30
 8017000:	af04      	add	r7, sp, #16
 8017002:	6078      	str	r0, [r7, #4]
 8017004:	460b      	mov	r3, r1
 8017006:	70fb      	strb	r3, [r7, #3]
 8017008:	4613      	mov	r3, r2
 801700a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801700c:	2200      	movs	r2, #0
 801700e:	2124      	movs	r1, #36	; 0x24
 8017010:	2001      	movs	r0, #1
 8017012:	f7f8 fbaf 	bl	800f774 <pbuf_alloc>
 8017016:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017018:	69fb      	ldr	r3, [r7, #28]
 801701a:	2b00      	cmp	r3, #0
 801701c:	d04c      	beq.n	80170b8 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801701e:	69fb      	ldr	r3, [r7, #28]
 8017020:	895b      	ldrh	r3, [r3, #10]
 8017022:	2b23      	cmp	r3, #35	; 0x23
 8017024:	d806      	bhi.n	8017034 <icmp_send_response+0x38>
 8017026:	4b26      	ldr	r3, [pc, #152]	; (80170c0 <icmp_send_response+0xc4>)
 8017028:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801702c:	4925      	ldr	r1, [pc, #148]	; (80170c4 <icmp_send_response+0xc8>)
 801702e:	4826      	ldr	r0, [pc, #152]	; (80170c8 <icmp_send_response+0xcc>)
 8017030:	f003 ff0e 	bl	801ae50 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	685b      	ldr	r3, [r3, #4]
 8017038:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801703a:	69fb      	ldr	r3, [r7, #28]
 801703c:	685b      	ldr	r3, [r3, #4]
 801703e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017040:	697b      	ldr	r3, [r7, #20]
 8017042:	78fa      	ldrb	r2, [r7, #3]
 8017044:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017046:	697b      	ldr	r3, [r7, #20]
 8017048:	78ba      	ldrb	r2, [r7, #2]
 801704a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801704c:	697b      	ldr	r3, [r7, #20]
 801704e:	2200      	movs	r2, #0
 8017050:	711a      	strb	r2, [r3, #4]
 8017052:	2200      	movs	r2, #0
 8017054:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	2200      	movs	r2, #0
 801705a:	719a      	strb	r2, [r3, #6]
 801705c:	2200      	movs	r2, #0
 801705e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017060:	69fb      	ldr	r3, [r7, #28]
 8017062:	685b      	ldr	r3, [r3, #4]
 8017064:	f103 0008 	add.w	r0, r3, #8
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	685b      	ldr	r3, [r3, #4]
 801706c:	221c      	movs	r2, #28
 801706e:	4619      	mov	r1, r3
 8017070:	f003 f9f7 	bl	801a462 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017074:	69bb      	ldr	r3, [r7, #24]
 8017076:	68db      	ldr	r3, [r3, #12]
 8017078:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801707a:	f107 030c 	add.w	r3, r7, #12
 801707e:	4618      	mov	r0, r3
 8017080:	f000 f824 	bl	80170cc <ip4_route>
 8017084:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017086:	693b      	ldr	r3, [r7, #16]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d011      	beq.n	80170b0 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801708c:	697b      	ldr	r3, [r7, #20]
 801708e:	2200      	movs	r2, #0
 8017090:	709a      	strb	r2, [r3, #2]
 8017092:	2200      	movs	r2, #0
 8017094:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017096:	f107 020c 	add.w	r2, r7, #12
 801709a:	693b      	ldr	r3, [r7, #16]
 801709c:	9302      	str	r3, [sp, #8]
 801709e:	2301      	movs	r3, #1
 80170a0:	9301      	str	r3, [sp, #4]
 80170a2:	2300      	movs	r3, #0
 80170a4:	9300      	str	r3, [sp, #0]
 80170a6:	23ff      	movs	r3, #255	; 0xff
 80170a8:	2100      	movs	r1, #0
 80170aa:	69f8      	ldr	r0, [r7, #28]
 80170ac:	f000 f9b6 	bl	801741c <ip4_output_if>
  }
  pbuf_free(q);
 80170b0:	69f8      	ldr	r0, [r7, #28]
 80170b2:	f7f8 fed1 	bl	800fe58 <pbuf_free>
 80170b6:	e000      	b.n	80170ba <icmp_send_response+0xbe>
    return;
 80170b8:	bf00      	nop
}
 80170ba:	3720      	adds	r7, #32
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}
 80170c0:	0801fad8 	.word	0x0801fad8
 80170c4:	0801fba4 	.word	0x0801fba4
 80170c8:	0801fb48 	.word	0x0801fb48

080170cc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80170cc:	b480      	push	{r7}
 80170ce:	b085      	sub	sp, #20
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80170d4:	4b30      	ldr	r3, [pc, #192]	; (8017198 <ip4_route+0xcc>)
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	60fb      	str	r3, [r7, #12]
 80170da:	e036      	b.n	801714a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80170e2:	f003 0301 	and.w	r3, r3, #1
 80170e6:	b2db      	uxtb	r3, r3
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d02b      	beq.n	8017144 <ip4_route+0x78>
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80170f2:	089b      	lsrs	r3, r3, #2
 80170f4:	f003 0301 	and.w	r3, r3, #1
 80170f8:	b2db      	uxtb	r3, r3
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d022      	beq.n	8017144 <ip4_route+0x78>
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	3304      	adds	r3, #4
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d01d      	beq.n	8017144 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681a      	ldr	r2, [r3, #0]
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	3304      	adds	r3, #4
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	405a      	eors	r2, r3
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	3308      	adds	r3, #8
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	4013      	ands	r3, r2
 801711c:	2b00      	cmp	r3, #0
 801711e:	d101      	bne.n	8017124 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	e033      	b.n	801718c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801712a:	f003 0302 	and.w	r3, r3, #2
 801712e:	2b00      	cmp	r3, #0
 8017130:	d108      	bne.n	8017144 <ip4_route+0x78>
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	681a      	ldr	r2, [r3, #0]
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	330c      	adds	r3, #12
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	429a      	cmp	r2, r3
 801713e:	d101      	bne.n	8017144 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	e023      	b.n	801718c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	60fb      	str	r3, [r7, #12]
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d1c5      	bne.n	80170dc <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017150:	4b12      	ldr	r3, [pc, #72]	; (801719c <ip4_route+0xd0>)
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	2b00      	cmp	r3, #0
 8017156:	d015      	beq.n	8017184 <ip4_route+0xb8>
 8017158:	4b10      	ldr	r3, [pc, #64]	; (801719c <ip4_route+0xd0>)
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017160:	f003 0301 	and.w	r3, r3, #1
 8017164:	2b00      	cmp	r3, #0
 8017166:	d00d      	beq.n	8017184 <ip4_route+0xb8>
 8017168:	4b0c      	ldr	r3, [pc, #48]	; (801719c <ip4_route+0xd0>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017170:	f003 0304 	and.w	r3, r3, #4
 8017174:	2b00      	cmp	r3, #0
 8017176:	d005      	beq.n	8017184 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8017178:	4b08      	ldr	r3, [pc, #32]	; (801719c <ip4_route+0xd0>)
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	3304      	adds	r3, #4
 801717e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017180:	2b00      	cmp	r3, #0
 8017182:	d101      	bne.n	8017188 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017184:	2300      	movs	r3, #0
 8017186:	e001      	b.n	801718c <ip4_route+0xc0>
  }

  return netif_default;
 8017188:	4b04      	ldr	r3, [pc, #16]	; (801719c <ip4_route+0xd0>)
 801718a:	681b      	ldr	r3, [r3, #0]
}
 801718c:	4618      	mov	r0, r3
 801718e:	3714      	adds	r7, #20
 8017190:	46bd      	mov	sp, r7
 8017192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017196:	4770      	bx	lr
 8017198:	20016414 	.word	0x20016414
 801719c:	20016418 	.word	0x20016418

080171a0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b086      	sub	sp, #24
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
 80171a8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	685b      	ldr	r3, [r3, #4]
 80171ae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80171b0:	697b      	ldr	r3, [r7, #20]
 80171b2:	781b      	ldrb	r3, [r3, #0]
 80171b4:	091b      	lsrs	r3, r3, #4
 80171b6:	b2db      	uxtb	r3, r3
 80171b8:	2b04      	cmp	r3, #4
 80171ba:	d004      	beq.n	80171c6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80171bc:	6878      	ldr	r0, [r7, #4]
 80171be:	f7f8 fe4b 	bl	800fe58 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80171c2:	2300      	movs	r3, #0
 80171c4:	e122      	b.n	801740c <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80171c6:	697b      	ldr	r3, [r7, #20]
 80171c8:	781b      	ldrb	r3, [r3, #0]
 80171ca:	b29b      	uxth	r3, r3
 80171cc:	f003 030f 	and.w	r3, r3, #15
 80171d0:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 80171d2:	897b      	ldrh	r3, [r7, #10]
 80171d4:	009b      	lsls	r3, r3, #2
 80171d6:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80171d8:	697b      	ldr	r3, [r7, #20]
 80171da:	885b      	ldrh	r3, [r3, #2]
 80171dc:	b29b      	uxth	r3, r3
 80171de:	4618      	mov	r0, r3
 80171e0:	f7f7 fca0 	bl	800eb24 <lwip_htons>
 80171e4:	4603      	mov	r3, r0
 80171e6:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	891b      	ldrh	r3, [r3, #8]
 80171ec:	893a      	ldrh	r2, [r7, #8]
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d204      	bcs.n	80171fc <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 80171f2:	893b      	ldrh	r3, [r7, #8]
 80171f4:	4619      	mov	r1, r3
 80171f6:	6878      	ldr	r0, [r7, #4]
 80171f8:	f7f8 fcba 	bl	800fb70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	895b      	ldrh	r3, [r3, #10]
 8017200:	897a      	ldrh	r2, [r7, #10]
 8017202:	429a      	cmp	r2, r3
 8017204:	d807      	bhi.n	8017216 <ip4_input+0x76>
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	891b      	ldrh	r3, [r3, #8]
 801720a:	893a      	ldrh	r2, [r7, #8]
 801720c:	429a      	cmp	r2, r3
 801720e:	d802      	bhi.n	8017216 <ip4_input+0x76>
 8017210:	897b      	ldrh	r3, [r7, #10]
 8017212:	2b13      	cmp	r3, #19
 8017214:	d804      	bhi.n	8017220 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017216:	6878      	ldr	r0, [r7, #4]
 8017218:	f7f8 fe1e 	bl	800fe58 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801721c:	2300      	movs	r3, #0
 801721e:	e0f5      	b.n	801740c <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017220:	697b      	ldr	r3, [r7, #20]
 8017222:	691b      	ldr	r3, [r3, #16]
 8017224:	4a7b      	ldr	r2, [pc, #492]	; (8017414 <ip4_input+0x274>)
 8017226:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017228:	697b      	ldr	r3, [r7, #20]
 801722a:	68db      	ldr	r3, [r3, #12]
 801722c:	4a79      	ldr	r2, [pc, #484]	; (8017414 <ip4_input+0x274>)
 801722e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017230:	4b78      	ldr	r3, [pc, #480]	; (8017414 <ip4_input+0x274>)
 8017232:	695b      	ldr	r3, [r3, #20]
 8017234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017238:	2be0      	cmp	r3, #224	; 0xe0
 801723a:	d112      	bne.n	8017262 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017242:	f003 0301 	and.w	r3, r3, #1
 8017246:	b2db      	uxtb	r3, r3
 8017248:	2b00      	cmp	r3, #0
 801724a:	d007      	beq.n	801725c <ip4_input+0xbc>
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	3304      	adds	r3, #4
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d002      	beq.n	801725c <ip4_input+0xbc>
      netif = inp;
 8017256:	683b      	ldr	r3, [r7, #0]
 8017258:	613b      	str	r3, [r7, #16]
 801725a:	e041      	b.n	80172e0 <ip4_input+0x140>
    } else {
      netif = NULL;
 801725c:	2300      	movs	r3, #0
 801725e:	613b      	str	r3, [r7, #16]
 8017260:	e03e      	b.n	80172e0 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8017262:	2301      	movs	r3, #1
 8017264:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801726a:	693b      	ldr	r3, [r7, #16]
 801726c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017270:	f003 0301 	and.w	r3, r3, #1
 8017274:	b2db      	uxtb	r3, r3
 8017276:	2b00      	cmp	r3, #0
 8017278:	d014      	beq.n	80172a4 <ip4_input+0x104>
 801727a:	693b      	ldr	r3, [r7, #16]
 801727c:	3304      	adds	r3, #4
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d00f      	beq.n	80172a4 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017284:	4b63      	ldr	r3, [pc, #396]	; (8017414 <ip4_input+0x274>)
 8017286:	695a      	ldr	r2, [r3, #20]
 8017288:	693b      	ldr	r3, [r7, #16]
 801728a:	3304      	adds	r3, #4
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	429a      	cmp	r2, r3
 8017290:	d026      	beq.n	80172e0 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017292:	4b60      	ldr	r3, [pc, #384]	; (8017414 <ip4_input+0x274>)
 8017294:	695b      	ldr	r3, [r3, #20]
 8017296:	6939      	ldr	r1, [r7, #16]
 8017298:	4618      	mov	r0, r3
 801729a:	f000 f991 	bl	80175c0 <ip4_addr_isbroadcast_u32>
 801729e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d11d      	bne.n	80172e0 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d00d      	beq.n	80172c6 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80172aa:	4b5a      	ldr	r3, [pc, #360]	; (8017414 <ip4_input+0x274>)
 80172ac:	695b      	ldr	r3, [r3, #20]
 80172ae:	b2db      	uxtb	r3, r3
 80172b0:	2b7f      	cmp	r3, #127	; 0x7f
 80172b2:	d102      	bne.n	80172ba <ip4_input+0x11a>
          netif = NULL;
 80172b4:	2300      	movs	r3, #0
 80172b6:	613b      	str	r3, [r7, #16]
          break;
 80172b8:	e012      	b.n	80172e0 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 80172ba:	2300      	movs	r3, #0
 80172bc:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 80172be:	4b56      	ldr	r3, [pc, #344]	; (8017418 <ip4_input+0x278>)
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	613b      	str	r3, [r7, #16]
 80172c4:	e002      	b.n	80172cc <ip4_input+0x12c>
      } else {
        netif = netif->next;
 80172c6:	693b      	ldr	r3, [r7, #16]
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 80172cc:	693a      	ldr	r2, [r7, #16]
 80172ce:	683b      	ldr	r3, [r7, #0]
 80172d0:	429a      	cmp	r2, r3
 80172d2:	d102      	bne.n	80172da <ip4_input+0x13a>
        netif = netif->next;
 80172d4:	693b      	ldr	r3, [r7, #16]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 80172da:	693b      	ldr	r3, [r7, #16]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d1c4      	bne.n	801726a <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80172e0:	4b4c      	ldr	r3, [pc, #304]	; (8017414 <ip4_input+0x274>)
 80172e2:	691b      	ldr	r3, [r3, #16]
 80172e4:	6839      	ldr	r1, [r7, #0]
 80172e6:	4618      	mov	r0, r3
 80172e8:	f000 f96a 	bl	80175c0 <ip4_addr_isbroadcast_u32>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d105      	bne.n	80172fe <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80172f2:	4b48      	ldr	r3, [pc, #288]	; (8017414 <ip4_input+0x274>)
 80172f4:	691b      	ldr	r3, [r3, #16]
 80172f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80172fa:	2be0      	cmp	r3, #224	; 0xe0
 80172fc:	d104      	bne.n	8017308 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f7f8 fdaa 	bl	800fe58 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017304:	2300      	movs	r3, #0
 8017306:	e081      	b.n	801740c <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017308:	693b      	ldr	r3, [r7, #16]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d104      	bne.n	8017318 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	f7f8 fda2 	bl	800fe58 <pbuf_free>
    return ERR_OK;
 8017314:	2300      	movs	r3, #0
 8017316:	e079      	b.n	801740c <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017318:	697b      	ldr	r3, [r7, #20]
 801731a:	88db      	ldrh	r3, [r3, #6]
 801731c:	b29b      	uxth	r3, r3
 801731e:	461a      	mov	r2, r3
 8017320:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017324:	4013      	ands	r3, r2
 8017326:	2b00      	cmp	r3, #0
 8017328:	d00b      	beq.n	8017342 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801732a:	6878      	ldr	r0, [r7, #4]
 801732c:	f000 fc8e 	bl	8017c4c <ip4_reass>
 8017330:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d101      	bne.n	801733c <ip4_input+0x19c>
      return ERR_OK;
 8017338:	2300      	movs	r3, #0
 801733a:	e067      	b.n	801740c <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	685b      	ldr	r3, [r3, #4]
 8017340:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017342:	4a34      	ldr	r2, [pc, #208]	; (8017414 <ip4_input+0x274>)
 8017344:	693b      	ldr	r3, [r7, #16]
 8017346:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017348:	4a32      	ldr	r2, [pc, #200]	; (8017414 <ip4_input+0x274>)
 801734a:	683b      	ldr	r3, [r7, #0]
 801734c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801734e:	4a31      	ldr	r2, [pc, #196]	; (8017414 <ip4_input+0x274>)
 8017350:	697b      	ldr	r3, [r7, #20]
 8017352:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8017354:	697b      	ldr	r3, [r7, #20]
 8017356:	781b      	ldrb	r3, [r3, #0]
 8017358:	b29b      	uxth	r3, r3
 801735a:	f003 030f 	and.w	r3, r3, #15
 801735e:	b29b      	uxth	r3, r3
 8017360:	009b      	lsls	r3, r3, #2
 8017362:	b29a      	uxth	r2, r3
 8017364:	4b2b      	ldr	r3, [pc, #172]	; (8017414 <ip4_input+0x274>)
 8017366:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8017368:	897b      	ldrh	r3, [r7, #10]
 801736a:	425b      	negs	r3, r3
 801736c:	b29b      	uxth	r3, r3
 801736e:	b21b      	sxth	r3, r3
 8017370:	4619      	mov	r1, r3
 8017372:	6878      	ldr	r0, [r7, #4]
 8017374:	f7f8 fd4c 	bl	800fe10 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8017378:	697b      	ldr	r3, [r7, #20]
 801737a:	7a5b      	ldrb	r3, [r3, #9]
 801737c:	2b06      	cmp	r3, #6
 801737e:	d009      	beq.n	8017394 <ip4_input+0x1f4>
 8017380:	2b11      	cmp	r3, #17
 8017382:	d002      	beq.n	801738a <ip4_input+0x1ea>
 8017384:	2b01      	cmp	r3, #1
 8017386:	d00a      	beq.n	801739e <ip4_input+0x1fe>
 8017388:	e00e      	b.n	80173a8 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801738a:	6839      	ldr	r1, [r7, #0]
 801738c:	6878      	ldr	r0, [r7, #4]
 801738e:	f7fe fc0b 	bl	8015ba8 <udp_input>
      break;
 8017392:	e028      	b.n	80173e6 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8017394:	6839      	ldr	r1, [r7, #0]
 8017396:	6878      	ldr	r0, [r7, #4]
 8017398:	f7fa fc28 	bl	8011bec <tcp_input>
      break;
 801739c:	e023      	b.n	80173e6 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801739e:	6839      	ldr	r1, [r7, #0]
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f7ff fd05 	bl	8016db0 <icmp_input>
      break;
 80173a6:	e01e      	b.n	80173e6 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80173a8:	4b1a      	ldr	r3, [pc, #104]	; (8017414 <ip4_input+0x274>)
 80173aa:	695b      	ldr	r3, [r3, #20]
 80173ac:	6939      	ldr	r1, [r7, #16]
 80173ae:	4618      	mov	r0, r3
 80173b0:	f000 f906 	bl	80175c0 <ip4_addr_isbroadcast_u32>
 80173b4:	4603      	mov	r3, r0
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d112      	bne.n	80173e0 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80173ba:	4b16      	ldr	r3, [pc, #88]	; (8017414 <ip4_input+0x274>)
 80173bc:	695b      	ldr	r3, [r3, #20]
 80173be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80173c2:	2be0      	cmp	r3, #224	; 0xe0
 80173c4:	d00c      	beq.n	80173e0 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80173c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80173ca:	4619      	mov	r1, r3
 80173cc:	6878      	ldr	r0, [r7, #4]
 80173ce:	f7f8 fd31 	bl	800fe34 <pbuf_header_force>
        p->payload = iphdr;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	697a      	ldr	r2, [r7, #20]
 80173d6:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80173d8:	2102      	movs	r1, #2
 80173da:	6878      	ldr	r0, [r7, #4]
 80173dc:	f7ff fdee 	bl	8016fbc <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80173e0:	6878      	ldr	r0, [r7, #4]
 80173e2:	f7f8 fd39 	bl	800fe58 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80173e6:	4b0b      	ldr	r3, [pc, #44]	; (8017414 <ip4_input+0x274>)
 80173e8:	2200      	movs	r2, #0
 80173ea:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80173ec:	4b09      	ldr	r3, [pc, #36]	; (8017414 <ip4_input+0x274>)
 80173ee:	2200      	movs	r2, #0
 80173f0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80173f2:	4b08      	ldr	r3, [pc, #32]	; (8017414 <ip4_input+0x274>)
 80173f4:	2200      	movs	r2, #0
 80173f6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80173f8:	4b06      	ldr	r3, [pc, #24]	; (8017414 <ip4_input+0x274>)
 80173fa:	2200      	movs	r2, #0
 80173fc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80173fe:	4b05      	ldr	r3, [pc, #20]	; (8017414 <ip4_input+0x274>)
 8017400:	2200      	movs	r2, #0
 8017402:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017404:	4b03      	ldr	r3, [pc, #12]	; (8017414 <ip4_input+0x274>)
 8017406:	2200      	movs	r2, #0
 8017408:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801740a:	2300      	movs	r3, #0
}
 801740c:	4618      	mov	r0, r3
 801740e:	3718      	adds	r7, #24
 8017410:	46bd      	mov	sp, r7
 8017412:	bd80      	pop	{r7, pc}
 8017414:	20012d14 	.word	0x20012d14
 8017418:	20016414 	.word	0x20016414

0801741c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b08a      	sub	sp, #40	; 0x28
 8017420:	af04      	add	r7, sp, #16
 8017422:	60f8      	str	r0, [r7, #12]
 8017424:	60b9      	str	r1, [r7, #8]
 8017426:	607a      	str	r2, [r7, #4]
 8017428:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801742a:	68bb      	ldr	r3, [r7, #8]
 801742c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d009      	beq.n	8017448 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017434:	68bb      	ldr	r3, [r7, #8]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d003      	beq.n	8017442 <ip4_output_if+0x26>
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	681b      	ldr	r3, [r3, #0]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d102      	bne.n	8017448 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017444:	3304      	adds	r3, #4
 8017446:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017448:	78fa      	ldrb	r2, [r7, #3]
 801744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801744c:	9302      	str	r3, [sp, #8]
 801744e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017452:	9301      	str	r3, [sp, #4]
 8017454:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017458:	9300      	str	r3, [sp, #0]
 801745a:	4613      	mov	r3, r2
 801745c:	687a      	ldr	r2, [r7, #4]
 801745e:	6979      	ldr	r1, [r7, #20]
 8017460:	68f8      	ldr	r0, [r7, #12]
 8017462:	f000 f805 	bl	8017470 <ip4_output_if_src>
 8017466:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017468:	4618      	mov	r0, r3
 801746a:	3718      	adds	r7, #24
 801746c:	46bd      	mov	sp, r7
 801746e:	bd80      	pop	{r7, pc}

08017470 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b088      	sub	sp, #32
 8017474:	af00      	add	r7, sp, #0
 8017476:	60f8      	str	r0, [r7, #12]
 8017478:	60b9      	str	r1, [r7, #8]
 801747a:	607a      	str	r2, [r7, #4]
 801747c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	89db      	ldrh	r3, [r3, #14]
 8017482:	2b01      	cmp	r3, #1
 8017484:	d006      	beq.n	8017494 <ip4_output_if_src+0x24>
 8017486:	4b48      	ldr	r3, [pc, #288]	; (80175a8 <ip4_output_if_src+0x138>)
 8017488:	f240 3233 	movw	r2, #819	; 0x333
 801748c:	4947      	ldr	r1, [pc, #284]	; (80175ac <ip4_output_if_src+0x13c>)
 801748e:	4848      	ldr	r0, [pc, #288]	; (80175b0 <ip4_output_if_src+0x140>)
 8017490:	f003 fcde 	bl	801ae50 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d060      	beq.n	801755c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801749a:	2314      	movs	r3, #20
 801749c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801749e:	2114      	movs	r1, #20
 80174a0:	68f8      	ldr	r0, [r7, #12]
 80174a2:	f7f8 fcb5 	bl	800fe10 <pbuf_header>
 80174a6:	4603      	mov	r3, r0
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d002      	beq.n	80174b2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80174ac:	f06f 0301 	mvn.w	r3, #1
 80174b0:	e075      	b.n	801759e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	685b      	ldr	r3, [r3, #4]
 80174b6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	895b      	ldrh	r3, [r3, #10]
 80174bc:	2b13      	cmp	r3, #19
 80174be:	d806      	bhi.n	80174ce <ip4_output_if_src+0x5e>
 80174c0:	4b39      	ldr	r3, [pc, #228]	; (80175a8 <ip4_output_if_src+0x138>)
 80174c2:	f240 3261 	movw	r2, #865	; 0x361
 80174c6:	493b      	ldr	r1, [pc, #236]	; (80175b4 <ip4_output_if_src+0x144>)
 80174c8:	4839      	ldr	r0, [pc, #228]	; (80175b0 <ip4_output_if_src+0x140>)
 80174ca:	f003 fcc1 	bl	801ae50 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80174ce:	69fb      	ldr	r3, [r7, #28]
 80174d0:	78fa      	ldrb	r2, [r7, #3]
 80174d2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80174d4:	69fb      	ldr	r3, [r7, #28]
 80174d6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80174da:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681a      	ldr	r2, [r3, #0]
 80174e0:	69fb      	ldr	r3, [r7, #28]
 80174e2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80174e4:	8b7b      	ldrh	r3, [r7, #26]
 80174e6:	089b      	lsrs	r3, r3, #2
 80174e8:	b29b      	uxth	r3, r3
 80174ea:	b2db      	uxtb	r3, r3
 80174ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174f0:	b2da      	uxtb	r2, r3
 80174f2:	69fb      	ldr	r3, [r7, #28]
 80174f4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80174f6:	69fb      	ldr	r3, [r7, #28]
 80174f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80174fc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	891b      	ldrh	r3, [r3, #8]
 8017502:	4618      	mov	r0, r3
 8017504:	f7f7 fb0e 	bl	800eb24 <lwip_htons>
 8017508:	4603      	mov	r3, r0
 801750a:	461a      	mov	r2, r3
 801750c:	69fb      	ldr	r3, [r7, #28]
 801750e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017510:	69fb      	ldr	r3, [r7, #28]
 8017512:	2200      	movs	r2, #0
 8017514:	719a      	strb	r2, [r3, #6]
 8017516:	2200      	movs	r2, #0
 8017518:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801751a:	4b27      	ldr	r3, [pc, #156]	; (80175b8 <ip4_output_if_src+0x148>)
 801751c:	881b      	ldrh	r3, [r3, #0]
 801751e:	4618      	mov	r0, r3
 8017520:	f7f7 fb00 	bl	800eb24 <lwip_htons>
 8017524:	4603      	mov	r3, r0
 8017526:	461a      	mov	r2, r3
 8017528:	69fb      	ldr	r3, [r7, #28]
 801752a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801752c:	4b22      	ldr	r3, [pc, #136]	; (80175b8 <ip4_output_if_src+0x148>)
 801752e:	881b      	ldrh	r3, [r3, #0]
 8017530:	3301      	adds	r3, #1
 8017532:	b29a      	uxth	r2, r3
 8017534:	4b20      	ldr	r3, [pc, #128]	; (80175b8 <ip4_output_if_src+0x148>)
 8017536:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017538:	68bb      	ldr	r3, [r7, #8]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d104      	bne.n	8017548 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801753e:	4b1f      	ldr	r3, [pc, #124]	; (80175bc <ip4_output_if_src+0x14c>)
 8017540:	681a      	ldr	r2, [r3, #0]
 8017542:	69fb      	ldr	r3, [r7, #28]
 8017544:	60da      	str	r2, [r3, #12]
 8017546:	e003      	b.n	8017550 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017548:	68bb      	ldr	r3, [r7, #8]
 801754a:	681a      	ldr	r2, [r3, #0]
 801754c:	69fb      	ldr	r3, [r7, #28]
 801754e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017550:	69fb      	ldr	r3, [r7, #28]
 8017552:	2200      	movs	r2, #0
 8017554:	729a      	strb	r2, [r3, #10]
 8017556:	2200      	movs	r2, #0
 8017558:	72da      	strb	r2, [r3, #11]
 801755a:	e008      	b.n	801756e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	685b      	ldr	r3, [r3, #4]
 8017560:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017562:	69fb      	ldr	r3, [r7, #28]
 8017564:	691b      	ldr	r3, [r3, #16]
 8017566:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017568:	f107 0314 	add.w	r3, r7, #20
 801756c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017570:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017572:	2b00      	cmp	r3, #0
 8017574:	d00c      	beq.n	8017590 <ip4_output_if_src+0x120>
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	891a      	ldrh	r2, [r3, #8]
 801757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801757c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801757e:	429a      	cmp	r2, r3
 8017580:	d906      	bls.n	8017590 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8017582:	687a      	ldr	r2, [r7, #4]
 8017584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017586:	68f8      	ldr	r0, [r7, #12]
 8017588:	f000 fd0a 	bl	8017fa0 <ip4_frag>
 801758c:	4603      	mov	r3, r0
 801758e:	e006      	b.n	801759e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017592:	695b      	ldr	r3, [r3, #20]
 8017594:	687a      	ldr	r2, [r7, #4]
 8017596:	68f9      	ldr	r1, [r7, #12]
 8017598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801759a:	4798      	blx	r3
 801759c:	4603      	mov	r3, r0
}
 801759e:	4618      	mov	r0, r3
 80175a0:	3720      	adds	r7, #32
 80175a2:	46bd      	mov	sp, r7
 80175a4:	bd80      	pop	{r7, pc}
 80175a6:	bf00      	nop
 80175a8:	0801fbd0 	.word	0x0801fbd0
 80175ac:	0801fc04 	.word	0x0801fc04
 80175b0:	0801fc10 	.word	0x0801fc10
 80175b4:	0801fc38 	.word	0x0801fc38
 80175b8:	2000ca9e 	.word	0x2000ca9e
 80175bc:	080200e8 	.word	0x080200e8

080175c0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80175c0:	b480      	push	{r7}
 80175c2:	b085      	sub	sp, #20
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
 80175c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175d4:	d002      	beq.n	80175dc <ip4_addr_isbroadcast_u32+0x1c>
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d101      	bne.n	80175e0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80175dc:	2301      	movs	r3, #1
 80175de:	e02a      	b.n	8017636 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80175e0:	683b      	ldr	r3, [r7, #0]
 80175e2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80175e6:	f003 0302 	and.w	r3, r3, #2
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d101      	bne.n	80175f2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80175ee:	2300      	movs	r3, #0
 80175f0:	e021      	b.n	8017636 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80175f2:	683b      	ldr	r3, [r7, #0]
 80175f4:	3304      	adds	r3, #4
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	687a      	ldr	r2, [r7, #4]
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d101      	bne.n	8017602 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80175fe:	2300      	movs	r3, #0
 8017600:	e019      	b.n	8017636 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017602:	68fa      	ldr	r2, [r7, #12]
 8017604:	683b      	ldr	r3, [r7, #0]
 8017606:	3304      	adds	r3, #4
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	405a      	eors	r2, r3
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	3308      	adds	r3, #8
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	4013      	ands	r3, r2
 8017614:	2b00      	cmp	r3, #0
 8017616:	d10d      	bne.n	8017634 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017618:	683b      	ldr	r3, [r7, #0]
 801761a:	3308      	adds	r3, #8
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	43da      	mvns	r2, r3
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017624:	683b      	ldr	r3, [r7, #0]
 8017626:	3308      	adds	r3, #8
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801762c:	429a      	cmp	r2, r3
 801762e:	d101      	bne.n	8017634 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017630:	2301      	movs	r3, #1
 8017632:	e000      	b.n	8017636 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017634:	2300      	movs	r3, #0
  }
}
 8017636:	4618      	mov	r0, r3
 8017638:	3714      	adds	r7, #20
 801763a:	46bd      	mov	sp, r7
 801763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017640:	4770      	bx	lr
	...

08017644 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b084      	sub	sp, #16
 8017648:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801764a:	2300      	movs	r3, #0
 801764c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801764e:	4b12      	ldr	r3, [pc, #72]	; (8017698 <ip_reass_tmr+0x54>)
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017654:	e018      	b.n	8017688 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	7fdb      	ldrb	r3, [r3, #31]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d00b      	beq.n	8017676 <ip_reass_tmr+0x32>
      r->timer--;
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	7fdb      	ldrb	r3, [r3, #31]
 8017662:	3b01      	subs	r3, #1
 8017664:	b2da      	uxtb	r2, r3
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	60fb      	str	r3, [r7, #12]
 8017674:	e008      	b.n	8017688 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801767a:	68fb      	ldr	r3, [r7, #12]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017680:	68b9      	ldr	r1, [r7, #8]
 8017682:	6878      	ldr	r0, [r7, #4]
 8017684:	f000 f80a 	bl	801769c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d1e3      	bne.n	8017656 <ip_reass_tmr+0x12>
     }
   }
}
 801768e:	bf00      	nop
 8017690:	3710      	adds	r7, #16
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
 8017696:	bf00      	nop
 8017698:	2000caa0 	.word	0x2000caa0

0801769c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b088      	sub	sp, #32
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
 80176a4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80176a6:	2300      	movs	r3, #0
 80176a8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80176aa:	683a      	ldr	r2, [r7, #0]
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	429a      	cmp	r2, r3
 80176b0:	d105      	bne.n	80176be <ip_reass_free_complete_datagram+0x22>
 80176b2:	4b45      	ldr	r3, [pc, #276]	; (80177c8 <ip_reass_free_complete_datagram+0x12c>)
 80176b4:	22ab      	movs	r2, #171	; 0xab
 80176b6:	4945      	ldr	r1, [pc, #276]	; (80177cc <ip_reass_free_complete_datagram+0x130>)
 80176b8:	4845      	ldr	r0, [pc, #276]	; (80177d0 <ip_reass_free_complete_datagram+0x134>)
 80176ba:	f003 fbc9 	bl	801ae50 <iprintf>
  if (prev != NULL) {
 80176be:	683b      	ldr	r3, [r7, #0]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d00a      	beq.n	80176da <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	687a      	ldr	r2, [r7, #4]
 80176ca:	429a      	cmp	r2, r3
 80176cc:	d005      	beq.n	80176da <ip_reass_free_complete_datagram+0x3e>
 80176ce:	4b3e      	ldr	r3, [pc, #248]	; (80177c8 <ip_reass_free_complete_datagram+0x12c>)
 80176d0:	22ad      	movs	r2, #173	; 0xad
 80176d2:	4940      	ldr	r1, [pc, #256]	; (80177d4 <ip_reass_free_complete_datagram+0x138>)
 80176d4:	483e      	ldr	r0, [pc, #248]	; (80177d0 <ip_reass_free_complete_datagram+0x134>)
 80176d6:	f003 fbbb 	bl	801ae50 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	685b      	ldr	r3, [r3, #4]
 80176de:	685b      	ldr	r3, [r3, #4]
 80176e0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80176e2:	697b      	ldr	r3, [r7, #20]
 80176e4:	889b      	ldrh	r3, [r3, #4]
 80176e6:	b29b      	uxth	r3, r3
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d12a      	bne.n	8017742 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	685b      	ldr	r3, [r3, #4]
 80176f0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80176f2:	697b      	ldr	r3, [r7, #20]
 80176f4:	681a      	ldr	r2, [r3, #0]
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80176fa:	69bb      	ldr	r3, [r7, #24]
 80176fc:	6858      	ldr	r0, [r3, #4]
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	3308      	adds	r3, #8
 8017702:	2214      	movs	r2, #20
 8017704:	4619      	mov	r1, r3
 8017706:	f002 feac 	bl	801a462 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801770a:	2101      	movs	r1, #1
 801770c:	69b8      	ldr	r0, [r7, #24]
 801770e:	f7ff fc65 	bl	8016fdc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017712:	69b8      	ldr	r0, [r7, #24]
 8017714:	f7f8 fc3a 	bl	800ff8c <pbuf_clen>
 8017718:	4603      	mov	r3, r0
 801771a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801771c:	8bfa      	ldrh	r2, [r7, #30]
 801771e:	8a7b      	ldrh	r3, [r7, #18]
 8017720:	4413      	add	r3, r2
 8017722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017726:	db05      	blt.n	8017734 <ip_reass_free_complete_datagram+0x98>
 8017728:	4b27      	ldr	r3, [pc, #156]	; (80177c8 <ip_reass_free_complete_datagram+0x12c>)
 801772a:	22bc      	movs	r2, #188	; 0xbc
 801772c:	492a      	ldr	r1, [pc, #168]	; (80177d8 <ip_reass_free_complete_datagram+0x13c>)
 801772e:	4828      	ldr	r0, [pc, #160]	; (80177d0 <ip_reass_free_complete_datagram+0x134>)
 8017730:	f003 fb8e 	bl	801ae50 <iprintf>
    pbufs_freed += clen;
 8017734:	8bfa      	ldrh	r2, [r7, #30]
 8017736:	8a7b      	ldrh	r3, [r7, #18]
 8017738:	4413      	add	r3, r2
 801773a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801773c:	69b8      	ldr	r0, [r7, #24]
 801773e:	f7f8 fb8b 	bl	800fe58 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	685b      	ldr	r3, [r3, #4]
 8017746:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017748:	e01f      	b.n	801778a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801774a:	69bb      	ldr	r3, [r7, #24]
 801774c:	685b      	ldr	r3, [r3, #4]
 801774e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017750:	69bb      	ldr	r3, [r7, #24]
 8017752:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017754:	697b      	ldr	r3, [r7, #20]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801775a:	68f8      	ldr	r0, [r7, #12]
 801775c:	f7f8 fc16 	bl	800ff8c <pbuf_clen>
 8017760:	4603      	mov	r3, r0
 8017762:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017764:	8bfa      	ldrh	r2, [r7, #30]
 8017766:	8a7b      	ldrh	r3, [r7, #18]
 8017768:	4413      	add	r3, r2
 801776a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801776e:	db05      	blt.n	801777c <ip_reass_free_complete_datagram+0xe0>
 8017770:	4b15      	ldr	r3, [pc, #84]	; (80177c8 <ip_reass_free_complete_datagram+0x12c>)
 8017772:	22cc      	movs	r2, #204	; 0xcc
 8017774:	4918      	ldr	r1, [pc, #96]	; (80177d8 <ip_reass_free_complete_datagram+0x13c>)
 8017776:	4816      	ldr	r0, [pc, #88]	; (80177d0 <ip_reass_free_complete_datagram+0x134>)
 8017778:	f003 fb6a 	bl	801ae50 <iprintf>
    pbufs_freed += clen;
 801777c:	8bfa      	ldrh	r2, [r7, #30]
 801777e:	8a7b      	ldrh	r3, [r7, #18]
 8017780:	4413      	add	r3, r2
 8017782:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017784:	68f8      	ldr	r0, [r7, #12]
 8017786:	f7f8 fb67 	bl	800fe58 <pbuf_free>
  while (p != NULL) {
 801778a:	69bb      	ldr	r3, [r7, #24]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d1dc      	bne.n	801774a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017790:	6839      	ldr	r1, [r7, #0]
 8017792:	6878      	ldr	r0, [r7, #4]
 8017794:	f000 f8c2 	bl	801791c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8017798:	4b10      	ldr	r3, [pc, #64]	; (80177dc <ip_reass_free_complete_datagram+0x140>)
 801779a:	881b      	ldrh	r3, [r3, #0]
 801779c:	8bfa      	ldrh	r2, [r7, #30]
 801779e:	429a      	cmp	r2, r3
 80177a0:	d905      	bls.n	80177ae <ip_reass_free_complete_datagram+0x112>
 80177a2:	4b09      	ldr	r3, [pc, #36]	; (80177c8 <ip_reass_free_complete_datagram+0x12c>)
 80177a4:	22d2      	movs	r2, #210	; 0xd2
 80177a6:	490e      	ldr	r1, [pc, #56]	; (80177e0 <ip_reass_free_complete_datagram+0x144>)
 80177a8:	4809      	ldr	r0, [pc, #36]	; (80177d0 <ip_reass_free_complete_datagram+0x134>)
 80177aa:	f003 fb51 	bl	801ae50 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80177ae:	4b0b      	ldr	r3, [pc, #44]	; (80177dc <ip_reass_free_complete_datagram+0x140>)
 80177b0:	881a      	ldrh	r2, [r3, #0]
 80177b2:	8bfb      	ldrh	r3, [r7, #30]
 80177b4:	1ad3      	subs	r3, r2, r3
 80177b6:	b29a      	uxth	r2, r3
 80177b8:	4b08      	ldr	r3, [pc, #32]	; (80177dc <ip_reass_free_complete_datagram+0x140>)
 80177ba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80177bc:	8bfb      	ldrh	r3, [r7, #30]
}
 80177be:	4618      	mov	r0, r3
 80177c0:	3720      	adds	r7, #32
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bd80      	pop	{r7, pc}
 80177c6:	bf00      	nop
 80177c8:	0801fc68 	.word	0x0801fc68
 80177cc:	0801fca4 	.word	0x0801fca4
 80177d0:	0801fcb0 	.word	0x0801fcb0
 80177d4:	0801fcd8 	.word	0x0801fcd8
 80177d8:	0801fcec 	.word	0x0801fcec
 80177dc:	2000caa4 	.word	0x2000caa4
 80177e0:	0801fd0c 	.word	0x0801fd0c

080177e4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b08a      	sub	sp, #40	; 0x28
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
 80177ec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80177ee:	2300      	movs	r3, #0
 80177f0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80177f2:	2300      	movs	r3, #0
 80177f4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80177f6:	2300      	movs	r3, #0
 80177f8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80177fa:	2300      	movs	r3, #0
 80177fc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80177fe:	2300      	movs	r3, #0
 8017800:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017802:	4b28      	ldr	r3, [pc, #160]	; (80178a4 <ip_reass_remove_oldest_datagram+0xc0>)
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017808:	e030      	b.n	801786c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801780c:	695a      	ldr	r2, [r3, #20]
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	68db      	ldr	r3, [r3, #12]
 8017812:	429a      	cmp	r2, r3
 8017814:	d10c      	bne.n	8017830 <ip_reass_remove_oldest_datagram+0x4c>
 8017816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017818:	699a      	ldr	r2, [r3, #24]
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	691b      	ldr	r3, [r3, #16]
 801781e:	429a      	cmp	r2, r3
 8017820:	d106      	bne.n	8017830 <ip_reass_remove_oldest_datagram+0x4c>
 8017822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017824:	899a      	ldrh	r2, [r3, #12]
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	889b      	ldrh	r3, [r3, #4]
 801782a:	b29b      	uxth	r3, r3
 801782c:	429a      	cmp	r2, r3
 801782e:	d014      	beq.n	801785a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	3301      	adds	r3, #1
 8017834:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017836:	6a3b      	ldr	r3, [r7, #32]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d104      	bne.n	8017846 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801783e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017840:	69fb      	ldr	r3, [r7, #28]
 8017842:	61bb      	str	r3, [r7, #24]
 8017844:	e009      	b.n	801785a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017848:	7fda      	ldrb	r2, [r3, #31]
 801784a:	6a3b      	ldr	r3, [r7, #32]
 801784c:	7fdb      	ldrb	r3, [r3, #31]
 801784e:	429a      	cmp	r2, r3
 8017850:	d803      	bhi.n	801785a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017854:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017856:	69fb      	ldr	r3, [r7, #28]
 8017858:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d001      	beq.n	8017866 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017864:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801786e:	2b00      	cmp	r3, #0
 8017870:	d1cb      	bne.n	801780a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017872:	6a3b      	ldr	r3, [r7, #32]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d008      	beq.n	801788a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017878:	69b9      	ldr	r1, [r7, #24]
 801787a:	6a38      	ldr	r0, [r7, #32]
 801787c:	f7ff ff0e 	bl	801769c <ip_reass_free_complete_datagram>
 8017880:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017882:	697a      	ldr	r2, [r7, #20]
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	4413      	add	r3, r2
 8017888:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801788a:	697a      	ldr	r2, [r7, #20]
 801788c:	683b      	ldr	r3, [r7, #0]
 801788e:	429a      	cmp	r2, r3
 8017890:	da02      	bge.n	8017898 <ip_reass_remove_oldest_datagram+0xb4>
 8017892:	693b      	ldr	r3, [r7, #16]
 8017894:	2b01      	cmp	r3, #1
 8017896:	dcac      	bgt.n	80177f2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017898:	697b      	ldr	r3, [r7, #20]
}
 801789a:	4618      	mov	r0, r3
 801789c:	3728      	adds	r7, #40	; 0x28
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}
 80178a2:	bf00      	nop
 80178a4:	2000caa0 	.word	0x2000caa0

080178a8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b084      	sub	sp, #16
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
 80178b0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80178b2:	2004      	movs	r0, #4
 80178b4:	f7f7 fd24 	bl	800f300 <memp_malloc>
 80178b8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d110      	bne.n	80178e2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80178c0:	6839      	ldr	r1, [r7, #0]
 80178c2:	6878      	ldr	r0, [r7, #4]
 80178c4:	f7ff ff8e 	bl	80177e4 <ip_reass_remove_oldest_datagram>
 80178c8:	4602      	mov	r2, r0
 80178ca:	683b      	ldr	r3, [r7, #0]
 80178cc:	4293      	cmp	r3, r2
 80178ce:	dc03      	bgt.n	80178d8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80178d0:	2004      	movs	r0, #4
 80178d2:	f7f7 fd15 	bl	800f300 <memp_malloc>
 80178d6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d101      	bne.n	80178e2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 80178de:	2300      	movs	r3, #0
 80178e0:	e016      	b.n	8017910 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80178e2:	2220      	movs	r2, #32
 80178e4:	2100      	movs	r1, #0
 80178e6:	68f8      	ldr	r0, [r7, #12]
 80178e8:	f002 fdc6 	bl	801a478 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	2203      	movs	r2, #3
 80178f0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80178f2:	4b09      	ldr	r3, [pc, #36]	; (8017918 <ip_reass_enqueue_new_datagram+0x70>)
 80178f4:	681a      	ldr	r2, [r3, #0]
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80178fa:	4a07      	ldr	r2, [pc, #28]	; (8017918 <ip_reass_enqueue_new_datagram+0x70>)
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	3308      	adds	r3, #8
 8017904:	2214      	movs	r2, #20
 8017906:	6879      	ldr	r1, [r7, #4]
 8017908:	4618      	mov	r0, r3
 801790a:	f002 fdaa 	bl	801a462 <memcpy>
  return ipr;
 801790e:	68fb      	ldr	r3, [r7, #12]
}
 8017910:	4618      	mov	r0, r3
 8017912:	3710      	adds	r7, #16
 8017914:	46bd      	mov	sp, r7
 8017916:	bd80      	pop	{r7, pc}
 8017918:	2000caa0 	.word	0x2000caa0

0801791c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
 8017924:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017926:	4b10      	ldr	r3, [pc, #64]	; (8017968 <ip_reass_dequeue_datagram+0x4c>)
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	687a      	ldr	r2, [r7, #4]
 801792c:	429a      	cmp	r2, r3
 801792e:	d104      	bne.n	801793a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	4a0c      	ldr	r2, [pc, #48]	; (8017968 <ip_reass_dequeue_datagram+0x4c>)
 8017936:	6013      	str	r3, [r2, #0]
 8017938:	e00d      	b.n	8017956 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801793a:	683b      	ldr	r3, [r7, #0]
 801793c:	2b00      	cmp	r3, #0
 801793e:	d106      	bne.n	801794e <ip_reass_dequeue_datagram+0x32>
 8017940:	4b0a      	ldr	r3, [pc, #40]	; (801796c <ip_reass_dequeue_datagram+0x50>)
 8017942:	f240 1245 	movw	r2, #325	; 0x145
 8017946:	490a      	ldr	r1, [pc, #40]	; (8017970 <ip_reass_dequeue_datagram+0x54>)
 8017948:	480a      	ldr	r0, [pc, #40]	; (8017974 <ip_reass_dequeue_datagram+0x58>)
 801794a:	f003 fa81 	bl	801ae50 <iprintf>
    prev->next = ipr->next;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	681a      	ldr	r2, [r3, #0]
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017956:	6879      	ldr	r1, [r7, #4]
 8017958:	2004      	movs	r0, #4
 801795a:	f7f7 fd23 	bl	800f3a4 <memp_free>
}
 801795e:	bf00      	nop
 8017960:	3708      	adds	r7, #8
 8017962:	46bd      	mov	sp, r7
 8017964:	bd80      	pop	{r7, pc}
 8017966:	bf00      	nop
 8017968:	2000caa0 	.word	0x2000caa0
 801796c:	0801fc68 	.word	0x0801fc68
 8017970:	0801fd28 	.word	0x0801fd28
 8017974:	0801fcb0 	.word	0x0801fcb0

08017978 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b08c      	sub	sp, #48	; 0x30
 801797c:	af00      	add	r7, sp, #0
 801797e:	60f8      	str	r0, [r7, #12]
 8017980:	60b9      	str	r1, [r7, #8]
 8017982:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8017984:	2300      	movs	r3, #0
 8017986:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017988:	2301      	movs	r3, #1
 801798a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 801798c:	68bb      	ldr	r3, [r7, #8]
 801798e:	685b      	ldr	r3, [r3, #4]
 8017990:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8017992:	69fb      	ldr	r3, [r7, #28]
 8017994:	885b      	ldrh	r3, [r3, #2]
 8017996:	b29b      	uxth	r3, r3
 8017998:	4618      	mov	r0, r3
 801799a:	f7f7 f8c3 	bl	800eb24 <lwip_htons>
 801799e:	4603      	mov	r3, r0
 80179a0:	461a      	mov	r2, r3
 80179a2:	69fb      	ldr	r3, [r7, #28]
 80179a4:	781b      	ldrb	r3, [r3, #0]
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	f003 030f 	and.w	r3, r3, #15
 80179ac:	b29b      	uxth	r3, r3
 80179ae:	009b      	lsls	r3, r3, #2
 80179b0:	b29b      	uxth	r3, r3
 80179b2:	1ad3      	subs	r3, r2, r3
 80179b4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80179b6:	69fb      	ldr	r3, [r7, #28]
 80179b8:	88db      	ldrh	r3, [r3, #6]
 80179ba:	b29b      	uxth	r3, r3
 80179bc:	4618      	mov	r0, r3
 80179be:	f7f7 f8b1 	bl	800eb24 <lwip_htons>
 80179c2:	4603      	mov	r3, r0
 80179c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80179c8:	b29b      	uxth	r3, r3
 80179ca:	00db      	lsls	r3, r3, #3
 80179cc:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 80179ce:	68bb      	ldr	r3, [r7, #8]
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80179d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179d6:	2200      	movs	r2, #0
 80179d8:	701a      	strb	r2, [r3, #0]
 80179da:	2200      	movs	r2, #0
 80179dc:	705a      	strb	r2, [r3, #1]
 80179de:	2200      	movs	r2, #0
 80179e0:	709a      	strb	r2, [r3, #2]
 80179e2:	2200      	movs	r2, #0
 80179e4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80179e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179e8:	8b3a      	ldrh	r2, [r7, #24]
 80179ea:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80179ec:	8b3a      	ldrh	r2, [r7, #24]
 80179ee:	8b7b      	ldrh	r3, [r7, #26]
 80179f0:	4413      	add	r3, r2
 80179f2:	b29a      	uxth	r2, r3
 80179f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80179f6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	685b      	ldr	r3, [r3, #4]
 80179fc:	627b      	str	r3, [r7, #36]	; 0x24
 80179fe:	e061      	b.n	8017ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8017a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8017a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a08:	889b      	ldrh	r3, [r3, #4]
 8017a0a:	b29a      	uxth	r2, r3
 8017a0c:	697b      	ldr	r3, [r7, #20]
 8017a0e:	889b      	ldrh	r3, [r3, #4]
 8017a10:	b29b      	uxth	r3, r3
 8017a12:	429a      	cmp	r2, r3
 8017a14:	d232      	bcs.n	8017a7c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a1a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d01f      	beq.n	8017a62 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a24:	889b      	ldrh	r3, [r3, #4]
 8017a26:	b29a      	uxth	r2, r3
 8017a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a2a:	88db      	ldrh	r3, [r3, #6]
 8017a2c:	b29b      	uxth	r3, r3
 8017a2e:	429a      	cmp	r2, r3
 8017a30:	f0c0 80e3 	bcc.w	8017bfa <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8017a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a36:	88db      	ldrh	r3, [r3, #6]
 8017a38:	b29a      	uxth	r2, r3
 8017a3a:	697b      	ldr	r3, [r7, #20]
 8017a3c:	889b      	ldrh	r3, [r3, #4]
 8017a3e:	b29b      	uxth	r3, r3
 8017a40:	429a      	cmp	r2, r3
 8017a42:	f200 80da 	bhi.w	8017bfa <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a48:	68ba      	ldr	r2, [r7, #8]
 8017a4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a4e:	88db      	ldrh	r3, [r3, #6]
 8017a50:	b29a      	uxth	r2, r3
 8017a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a54:	889b      	ldrh	r3, [r3, #4]
 8017a56:	b29b      	uxth	r3, r3
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d037      	beq.n	8017acc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017a60:	e034      	b.n	8017acc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8017a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a64:	88db      	ldrh	r3, [r3, #6]
 8017a66:	b29a      	uxth	r2, r3
 8017a68:	697b      	ldr	r3, [r7, #20]
 8017a6a:	889b      	ldrh	r3, [r3, #4]
 8017a6c:	b29b      	uxth	r3, r3
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	f200 80c5 	bhi.w	8017bfe <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	68ba      	ldr	r2, [r7, #8]
 8017a78:	605a      	str	r2, [r3, #4]
      break;
 8017a7a:	e027      	b.n	8017acc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8017a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a7e:	889b      	ldrh	r3, [r3, #4]
 8017a80:	b29a      	uxth	r2, r3
 8017a82:	697b      	ldr	r3, [r7, #20]
 8017a84:	889b      	ldrh	r3, [r3, #4]
 8017a86:	b29b      	uxth	r3, r3
 8017a88:	429a      	cmp	r2, r3
 8017a8a:	f000 80ba 	beq.w	8017c02 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a90:	889b      	ldrh	r3, [r3, #4]
 8017a92:	b29a      	uxth	r2, r3
 8017a94:	697b      	ldr	r3, [r7, #20]
 8017a96:	88db      	ldrh	r3, [r3, #6]
 8017a98:	b29b      	uxth	r3, r3
 8017a9a:	429a      	cmp	r2, r3
 8017a9c:	f0c0 80b3 	bcc.w	8017c06 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d009      	beq.n	8017aba <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8017aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017aa8:	88db      	ldrh	r3, [r3, #6]
 8017aaa:	b29a      	uxth	r2, r3
 8017aac:	697b      	ldr	r3, [r7, #20]
 8017aae:	889b      	ldrh	r3, [r3, #4]
 8017ab0:	b29b      	uxth	r3, r3
 8017ab2:	429a      	cmp	r2, r3
 8017ab4:	d001      	beq.n	8017aba <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017aba:	697b      	ldr	r3, [r7, #20]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017ac0:	697b      	ldr	r3, [r7, #20]
 8017ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d19a      	bne.n	8017a00 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8017aca:	e000      	b.n	8017ace <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8017acc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d12d      	bne.n	8017b30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8017ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d01c      	beq.n	8017b14 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017adc:	88db      	ldrh	r3, [r3, #6]
 8017ade:	b29a      	uxth	r2, r3
 8017ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ae2:	889b      	ldrh	r3, [r3, #4]
 8017ae4:	b29b      	uxth	r3, r3
 8017ae6:	429a      	cmp	r2, r3
 8017ae8:	d906      	bls.n	8017af8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8017aea:	4b51      	ldr	r3, [pc, #324]	; (8017c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017aec:	f240 12ab 	movw	r2, #427	; 0x1ab
 8017af0:	4950      	ldr	r1, [pc, #320]	; (8017c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017af2:	4851      	ldr	r0, [pc, #324]	; (8017c38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017af4:	f003 f9ac 	bl	801ae50 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017afa:	68ba      	ldr	r2, [r7, #8]
 8017afc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b00:	88db      	ldrh	r3, [r3, #6]
 8017b02:	b29a      	uxth	r2, r3
 8017b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b06:	889b      	ldrh	r3, [r3, #4]
 8017b08:	b29b      	uxth	r3, r3
 8017b0a:	429a      	cmp	r2, r3
 8017b0c:	d010      	beq.n	8017b30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	623b      	str	r3, [r7, #32]
 8017b12:	e00d      	b.n	8017b30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	685b      	ldr	r3, [r3, #4]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d006      	beq.n	8017b2a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8017b1c:	4b44      	ldr	r3, [pc, #272]	; (8017c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017b1e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8017b22:	4946      	ldr	r1, [pc, #280]	; (8017c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017b24:	4844      	ldr	r0, [pc, #272]	; (8017c38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017b26:	f003 f993 	bl	801ae50 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	68ba      	ldr	r2, [r7, #8]
 8017b2e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d105      	bne.n	8017b42 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	7f9b      	ldrb	r3, [r3, #30]
 8017b3a:	f003 0301 	and.w	r3, r3, #1
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d059      	beq.n	8017bf6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8017b42:	6a3b      	ldr	r3, [r7, #32]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d04f      	beq.n	8017be8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	685b      	ldr	r3, [r3, #4]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d006      	beq.n	8017b5e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	685b      	ldr	r3, [r3, #4]
 8017b54:	685b      	ldr	r3, [r3, #4]
 8017b56:	889b      	ldrh	r3, [r3, #4]
 8017b58:	b29b      	uxth	r3, r3
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d002      	beq.n	8017b64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017b5e:	2300      	movs	r3, #0
 8017b60:	623b      	str	r3, [r7, #32]
 8017b62:	e041      	b.n	8017be8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b66:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017b6e:	e012      	b.n	8017b96 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8017b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b72:	685b      	ldr	r3, [r3, #4]
 8017b74:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b78:	88db      	ldrh	r3, [r3, #6]
 8017b7a:	b29a      	uxth	r2, r3
 8017b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b7e:	889b      	ldrh	r3, [r3, #4]
 8017b80:	b29b      	uxth	r3, r3
 8017b82:	429a      	cmp	r2, r3
 8017b84:	d002      	beq.n	8017b8c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8017b86:	2300      	movs	r3, #0
 8017b88:	623b      	str	r3, [r7, #32]
            break;
 8017b8a:	e007      	b.n	8017b9c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8017b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b8e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d1e9      	bne.n	8017b70 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017b9c:	6a3b      	ldr	r3, [r7, #32]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d022      	beq.n	8017be8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	685b      	ldr	r3, [r3, #4]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d106      	bne.n	8017bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8017baa:	4b21      	ldr	r3, [pc, #132]	; (8017c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017bac:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8017bb0:	4923      	ldr	r1, [pc, #140]	; (8017c40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017bb2:	4821      	ldr	r0, [pc, #132]	; (8017c38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017bb4:	f003 f94c 	bl	801ae50 <iprintf>
          LWIP_ASSERT("sanity check",
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	685b      	ldr	r3, [r3, #4]
 8017bbc:	685b      	ldr	r3, [r3, #4]
 8017bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bc0:	429a      	cmp	r2, r3
 8017bc2:	d106      	bne.n	8017bd2 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8017bc4:	4b1a      	ldr	r3, [pc, #104]	; (8017c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017bc6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017bca:	491d      	ldr	r1, [pc, #116]	; (8017c40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017bcc:	481a      	ldr	r0, [pc, #104]	; (8017c38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017bce:	f003 f93f 	bl	801ae50 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d006      	beq.n	8017be8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8017bda:	4b15      	ldr	r3, [pc, #84]	; (8017c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017bdc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8017be0:	4918      	ldr	r1, [pc, #96]	; (8017c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017be2:	4815      	ldr	r0, [pc, #84]	; (8017c38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017be4:	f003 f934 	bl	801ae50 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017be8:	6a3b      	ldr	r3, [r7, #32]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	bf14      	ite	ne
 8017bee:	2301      	movne	r3, #1
 8017bf0:	2300      	moveq	r3, #0
 8017bf2:	b2db      	uxtb	r3, r3
 8017bf4:	e018      	b.n	8017c28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	e016      	b.n	8017c28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8017bfa:	bf00      	nop
 8017bfc:	e004      	b.n	8017c08 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8017bfe:	bf00      	nop
 8017c00:	e002      	b.n	8017c08 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8017c02:	bf00      	nop
 8017c04:	e000      	b.n	8017c08 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8017c06:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8017c08:	68b8      	ldr	r0, [r7, #8]
 8017c0a:	f7f8 f9bf 	bl	800ff8c <pbuf_clen>
 8017c0e:	4603      	mov	r3, r0
 8017c10:	461a      	mov	r2, r3
 8017c12:	4b0d      	ldr	r3, [pc, #52]	; (8017c48 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017c14:	881b      	ldrh	r3, [r3, #0]
 8017c16:	1a9b      	subs	r3, r3, r2
 8017c18:	b29a      	uxth	r2, r3
 8017c1a:	4b0b      	ldr	r3, [pc, #44]	; (8017c48 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017c1c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8017c1e:	68b8      	ldr	r0, [r7, #8]
 8017c20:	f7f8 f91a 	bl	800fe58 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c24:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8017c28:	4618      	mov	r0, r3
 8017c2a:	3730      	adds	r7, #48	; 0x30
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}
 8017c30:	0801fc68 	.word	0x0801fc68
 8017c34:	0801fd44 	.word	0x0801fd44
 8017c38:	0801fcb0 	.word	0x0801fcb0
 8017c3c:	0801fd64 	.word	0x0801fd64
 8017c40:	0801fd9c 	.word	0x0801fd9c
 8017c44:	0801fdac 	.word	0x0801fdac
 8017c48:	2000caa4 	.word	0x2000caa4

08017c4c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b08e      	sub	sp, #56	; 0x38
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	685b      	ldr	r3, [r3, #4]
 8017c58:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8017c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c5c:	781b      	ldrb	r3, [r3, #0]
 8017c5e:	f003 030f 	and.w	r3, r3, #15
 8017c62:	009b      	lsls	r3, r3, #2
 8017c64:	2b14      	cmp	r3, #20
 8017c66:	f040 8131 	bne.w	8017ecc <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8017c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6c:	88db      	ldrh	r3, [r3, #6]
 8017c6e:	b29b      	uxth	r3, r3
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7f6 ff57 	bl	800eb24 <lwip_htons>
 8017c76:	4603      	mov	r3, r0
 8017c78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c7c:	b29b      	uxth	r3, r3
 8017c7e:	00db      	lsls	r3, r3, #3
 8017c80:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8017c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c84:	885b      	ldrh	r3, [r3, #2]
 8017c86:	b29b      	uxth	r3, r3
 8017c88:	4618      	mov	r0, r3
 8017c8a:	f7f6 ff4b 	bl	800eb24 <lwip_htons>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	461a      	mov	r2, r3
 8017c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c94:	781b      	ldrb	r3, [r3, #0]
 8017c96:	b29b      	uxth	r3, r3
 8017c98:	f003 030f 	and.w	r3, r3, #15
 8017c9c:	b29b      	uxth	r3, r3
 8017c9e:	009b      	lsls	r3, r3, #2
 8017ca0:	b29b      	uxth	r3, r3
 8017ca2:	1ad3      	subs	r3, r2, r3
 8017ca4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017ca6:	6878      	ldr	r0, [r7, #4]
 8017ca8:	f7f8 f970 	bl	800ff8c <pbuf_clen>
 8017cac:	4603      	mov	r3, r0
 8017cae:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017cb0:	4b8d      	ldr	r3, [pc, #564]	; (8017ee8 <ip4_reass+0x29c>)
 8017cb2:	881b      	ldrh	r3, [r3, #0]
 8017cb4:	461a      	mov	r2, r3
 8017cb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017cb8:	4413      	add	r3, r2
 8017cba:	2b0a      	cmp	r3, #10
 8017cbc:	dd10      	ble.n	8017ce0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017cbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017cc0:	4619      	mov	r1, r3
 8017cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cc4:	f7ff fd8e 	bl	80177e4 <ip_reass_remove_oldest_datagram>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	f000 8100 	beq.w	8017ed0 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017cd0:	4b85      	ldr	r3, [pc, #532]	; (8017ee8 <ip4_reass+0x29c>)
 8017cd2:	881b      	ldrh	r3, [r3, #0]
 8017cd4:	461a      	mov	r2, r3
 8017cd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017cd8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017cda:	2b0a      	cmp	r3, #10
 8017cdc:	f300 80f8 	bgt.w	8017ed0 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017ce0:	4b82      	ldr	r3, [pc, #520]	; (8017eec <ip4_reass+0x2a0>)
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8017ce6:	e015      	b.n	8017d14 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cea:	695a      	ldr	r2, [r3, #20]
 8017cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cee:	68db      	ldr	r3, [r3, #12]
 8017cf0:	429a      	cmp	r2, r3
 8017cf2:	d10c      	bne.n	8017d0e <ip4_reass+0xc2>
 8017cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf6:	699a      	ldr	r2, [r3, #24]
 8017cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cfa:	691b      	ldr	r3, [r3, #16]
 8017cfc:	429a      	cmp	r2, r3
 8017cfe:	d106      	bne.n	8017d0e <ip4_reass+0xc2>
 8017d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d02:	899a      	ldrh	r2, [r3, #12]
 8017d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d06:	889b      	ldrh	r3, [r3, #4]
 8017d08:	b29b      	uxth	r3, r3
 8017d0a:	429a      	cmp	r2, r3
 8017d0c:	d006      	beq.n	8017d1c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	633b      	str	r3, [r7, #48]	; 0x30
 8017d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d1e6      	bne.n	8017ce8 <ip4_reass+0x9c>
 8017d1a:	e000      	b.n	8017d1e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017d1c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d109      	bne.n	8017d38 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017d24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d26:	4619      	mov	r1, r3
 8017d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d2a:	f7ff fdbd 	bl	80178a8 <ip_reass_enqueue_new_datagram>
 8017d2e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d11c      	bne.n	8017d70 <ip4_reass+0x124>
      goto nullreturn;
 8017d36:	e0ce      	b.n	8017ed6 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d3a:	88db      	ldrh	r3, [r3, #6]
 8017d3c:	b29b      	uxth	r3, r3
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f7f6 fef0 	bl	800eb24 <lwip_htons>
 8017d44:	4603      	mov	r3, r0
 8017d46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d110      	bne.n	8017d70 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d50:	89db      	ldrh	r3, [r3, #14]
 8017d52:	4618      	mov	r0, r3
 8017d54:	f7f6 fee6 	bl	800eb24 <lwip_htons>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d006      	beq.n	8017d70 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d64:	3308      	adds	r3, #8
 8017d66:	2214      	movs	r2, #20
 8017d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f002 fb79 	bl	801a462 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d72:	88db      	ldrh	r3, [r3, #6]
 8017d74:	b29b      	uxth	r3, r3
 8017d76:	f003 0320 	and.w	r3, r3, #32
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	bf0c      	ite	eq
 8017d7e:	2301      	moveq	r3, #1
 8017d80:	2300      	movne	r3, #0
 8017d82:	b2db      	uxtb	r3, r3
 8017d84:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017d86:	69fb      	ldr	r3, [r7, #28]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d00e      	beq.n	8017daa <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8017d8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d90:	4413      	add	r3, r2
 8017d92:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017d94:	8b7a      	ldrh	r2, [r7, #26]
 8017d96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017d98:	429a      	cmp	r2, r3
 8017d9a:	f0c0 8099 	bcc.w	8017ed0 <ip4_reass+0x284>
 8017d9e:	8b7b      	ldrh	r3, [r7, #26]
 8017da0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017da4:	4293      	cmp	r3, r2
 8017da6:	f200 8093 	bhi.w	8017ed0 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017daa:	69fa      	ldr	r2, [r7, #28]
 8017dac:	6879      	ldr	r1, [r7, #4]
 8017dae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017db0:	f7ff fde2 	bl	8017978 <ip_reass_chain_frag_into_datagram_and_validate>
 8017db4:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017db6:	697b      	ldr	r3, [r7, #20]
 8017db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dbc:	f000 808a 	beq.w	8017ed4 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017dc0:	4b49      	ldr	r3, [pc, #292]	; (8017ee8 <ip4_reass+0x29c>)
 8017dc2:	881a      	ldrh	r2, [r3, #0]
 8017dc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017dc6:	4413      	add	r3, r2
 8017dc8:	b29a      	uxth	r2, r3
 8017dca:	4b47      	ldr	r3, [pc, #284]	; (8017ee8 <ip4_reass+0x29c>)
 8017dcc:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017dce:	69fb      	ldr	r3, [r7, #28]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d00d      	beq.n	8017df0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8017dd4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017dd8:	4413      	add	r3, r2
 8017dda:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dde:	8a7a      	ldrh	r2, [r7, #18]
 8017de0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017de4:	7f9b      	ldrb	r3, [r3, #30]
 8017de6:	f043 0301 	orr.w	r3, r3, #1
 8017dea:	b2da      	uxtb	r2, r3
 8017dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dee:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017df0:	697b      	ldr	r3, [r7, #20]
 8017df2:	2b01      	cmp	r3, #1
 8017df4:	d168      	bne.n	8017ec8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8017df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017df8:	8b9b      	ldrh	r3, [r3, #28]
 8017dfa:	3314      	adds	r3, #20
 8017dfc:	b29a      	uxth	r2, r3
 8017dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e00:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8017e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e04:	685b      	ldr	r3, [r3, #4]
 8017e06:	685b      	ldr	r3, [r3, #4]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8017e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e0e:	685b      	ldr	r3, [r3, #4]
 8017e10:	685b      	ldr	r3, [r3, #4]
 8017e12:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e16:	3308      	adds	r3, #8
 8017e18:	2214      	movs	r2, #20
 8017e1a:	4619      	mov	r1, r3
 8017e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e1e:	f002 fb20 	bl	801a462 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8017e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e24:	8b9b      	ldrh	r3, [r3, #28]
 8017e26:	4618      	mov	r0, r3
 8017e28:	f7f6 fe7c 	bl	800eb24 <lwip_htons>
 8017e2c:	4603      	mov	r3, r0
 8017e2e:	461a      	mov	r2, r3
 8017e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e32:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e36:	2200      	movs	r2, #0
 8017e38:	719a      	strb	r2, [r3, #6]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e40:	2200      	movs	r2, #0
 8017e42:	729a      	strb	r2, [r3, #10]
 8017e44:	2200      	movs	r2, #0
 8017e46:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e4a:	685b      	ldr	r3, [r3, #4]
 8017e4c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017e4e:	e00e      	b.n	8017e6e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8017e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e52:	685b      	ldr	r3, [r3, #4]
 8017e54:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8017e56:	f06f 0113 	mvn.w	r1, #19
 8017e5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017e5c:	f7f7 ffd8 	bl	800fe10 <pbuf_header>
      pbuf_cat(p, r);
 8017e60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017e62:	6878      	ldr	r0, [r7, #4]
 8017e64:	f7f8 f8d2 	bl	801000c <pbuf_cat>
      r = iprh->next_pbuf;
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d1ed      	bne.n	8017e50 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017e74:	4b1d      	ldr	r3, [pc, #116]	; (8017eec <ip4_reass+0x2a0>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e7a:	429a      	cmp	r2, r3
 8017e7c:	d102      	bne.n	8017e84 <ip4_reass+0x238>
      ipr_prev = NULL;
 8017e7e:	2300      	movs	r3, #0
 8017e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e82:	e010      	b.n	8017ea6 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017e84:	4b19      	ldr	r3, [pc, #100]	; (8017eec <ip4_reass+0x2a0>)
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e8a:	e007      	b.n	8017e9c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8017e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017e92:	429a      	cmp	r2, r3
 8017e94:	d006      	beq.n	8017ea4 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d1f4      	bne.n	8017e8c <ip4_reass+0x240>
 8017ea2:	e000      	b.n	8017ea6 <ip4_reass+0x25a>
          break;
 8017ea4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017ea6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017eaa:	f7ff fd37 	bl	801791c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8017eae:	6878      	ldr	r0, [r7, #4]
 8017eb0:	f7f8 f86c 	bl	800ff8c <pbuf_clen>
 8017eb4:	4603      	mov	r3, r0
 8017eb6:	461a      	mov	r2, r3
 8017eb8:	4b0b      	ldr	r3, [pc, #44]	; (8017ee8 <ip4_reass+0x29c>)
 8017eba:	881b      	ldrh	r3, [r3, #0]
 8017ebc:	1a9b      	subs	r3, r3, r2
 8017ebe:	b29a      	uxth	r2, r3
 8017ec0:	4b09      	ldr	r3, [pc, #36]	; (8017ee8 <ip4_reass+0x29c>)
 8017ec2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	e00a      	b.n	8017ede <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017ec8:	2300      	movs	r3, #0
 8017eca:	e008      	b.n	8017ede <ip4_reass+0x292>
    goto nullreturn;
 8017ecc:	bf00      	nop
 8017ece:	e002      	b.n	8017ed6 <ip4_reass+0x28a>

nullreturn:
 8017ed0:	bf00      	nop
 8017ed2:	e000      	b.n	8017ed6 <ip4_reass+0x28a>
    goto nullreturn;
 8017ed4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017ed6:	6878      	ldr	r0, [r7, #4]
 8017ed8:	f7f7 ffbe 	bl	800fe58 <pbuf_free>
  return NULL;
 8017edc:	2300      	movs	r3, #0
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	3738      	adds	r7, #56	; 0x38
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}
 8017ee6:	bf00      	nop
 8017ee8:	2000caa4 	.word	0x2000caa4
 8017eec:	2000caa0 	.word	0x2000caa0

08017ef0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8017ef4:	2005      	movs	r0, #5
 8017ef6:	f7f7 fa03 	bl	800f300 <memp_malloc>
 8017efa:	4603      	mov	r3, r0
}
 8017efc:	4618      	mov	r0, r3
 8017efe:	bd80      	pop	{r7, pc}

08017f00 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	b082      	sub	sp, #8
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d106      	bne.n	8017f1c <ip_frag_free_pbuf_custom_ref+0x1c>
 8017f0e:	4b07      	ldr	r3, [pc, #28]	; (8017f2c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017f10:	f240 22ae 	movw	r2, #686	; 0x2ae
 8017f14:	4906      	ldr	r1, [pc, #24]	; (8017f30 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017f16:	4807      	ldr	r0, [pc, #28]	; (8017f34 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017f18:	f002 ff9a 	bl	801ae50 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017f1c:	6879      	ldr	r1, [r7, #4]
 8017f1e:	2005      	movs	r0, #5
 8017f20:	f7f7 fa40 	bl	800f3a4 <memp_free>
}
 8017f24:	bf00      	nop
 8017f26:	3708      	adds	r7, #8
 8017f28:	46bd      	mov	sp, r7
 8017f2a:	bd80      	pop	{r7, pc}
 8017f2c:	0801fc68 	.word	0x0801fc68
 8017f30:	0801fdd0 	.word	0x0801fdd0
 8017f34:	0801fcb0 	.word	0x0801fcb0

08017f38 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b084      	sub	sp, #16
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017f44:	68fb      	ldr	r3, [r7, #12]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d106      	bne.n	8017f58 <ipfrag_free_pbuf_custom+0x20>
 8017f4a:	4b11      	ldr	r3, [pc, #68]	; (8017f90 <ipfrag_free_pbuf_custom+0x58>)
 8017f4c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8017f50:	4910      	ldr	r1, [pc, #64]	; (8017f94 <ipfrag_free_pbuf_custom+0x5c>)
 8017f52:	4811      	ldr	r0, [pc, #68]	; (8017f98 <ipfrag_free_pbuf_custom+0x60>)
 8017f54:	f002 ff7c 	bl	801ae50 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8017f58:	68fa      	ldr	r2, [r7, #12]
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d006      	beq.n	8017f6e <ipfrag_free_pbuf_custom+0x36>
 8017f60:	4b0b      	ldr	r3, [pc, #44]	; (8017f90 <ipfrag_free_pbuf_custom+0x58>)
 8017f62:	f240 22b9 	movw	r2, #697	; 0x2b9
 8017f66:	490d      	ldr	r1, [pc, #52]	; (8017f9c <ipfrag_free_pbuf_custom+0x64>)
 8017f68:	480b      	ldr	r0, [pc, #44]	; (8017f98 <ipfrag_free_pbuf_custom+0x60>)
 8017f6a:	f002 ff71 	bl	801ae50 <iprintf>
  if (pcr->original != NULL) {
 8017f6e:	68fb      	ldr	r3, [r7, #12]
 8017f70:	695b      	ldr	r3, [r3, #20]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d004      	beq.n	8017f80 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	695b      	ldr	r3, [r3, #20]
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	f7f7 ff6c 	bl	800fe58 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017f80:	68f8      	ldr	r0, [r7, #12]
 8017f82:	f7ff ffbd 	bl	8017f00 <ip_frag_free_pbuf_custom_ref>
}
 8017f86:	bf00      	nop
 8017f88:	3710      	adds	r7, #16
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	bd80      	pop	{r7, pc}
 8017f8e:	bf00      	nop
 8017f90:	0801fc68 	.word	0x0801fc68
 8017f94:	0801fddc 	.word	0x0801fddc
 8017f98:	0801fcb0 	.word	0x0801fcb0
 8017f9c:	0801fde8 	.word	0x0801fde8

08017fa0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b092      	sub	sp, #72	; 0x48
 8017fa4:	af02      	add	r7, sp, #8
 8017fa6:	60f8      	str	r0, [r7, #12]
 8017fa8:	60b9      	str	r1, [r7, #8]
 8017faa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017fac:	2300      	movs	r3, #0
 8017fae:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8017fb0:	68bb      	ldr	r3, [r7, #8]
 8017fb2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8017fb4:	3b14      	subs	r3, #20
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	da00      	bge.n	8017fbc <ip4_frag+0x1c>
 8017fba:	3307      	adds	r3, #7
 8017fbc:	10db      	asrs	r3, r3, #3
 8017fbe:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017fc0:	2314      	movs	r3, #20
 8017fc2:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	685b      	ldr	r3, [r3, #4]
 8017fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8017fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8017fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fd0:	781b      	ldrb	r3, [r3, #0]
 8017fd2:	f003 030f 	and.w	r3, r3, #15
 8017fd6:	009b      	lsls	r3, r3, #2
 8017fd8:	2b14      	cmp	r3, #20
 8017fda:	d009      	beq.n	8017ff0 <ip4_frag+0x50>
 8017fdc:	4b79      	ldr	r3, [pc, #484]	; (80181c4 <ip4_frag+0x224>)
 8017fde:	f240 22e1 	movw	r2, #737	; 0x2e1
 8017fe2:	4979      	ldr	r1, [pc, #484]	; (80181c8 <ip4_frag+0x228>)
 8017fe4:	4879      	ldr	r0, [pc, #484]	; (80181cc <ip4_frag+0x22c>)
 8017fe6:	f002 ff33 	bl	801ae50 <iprintf>
 8017fea:	f06f 0305 	mvn.w	r3, #5
 8017fee:	e0e5      	b.n	80181bc <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ff2:	88db      	ldrh	r3, [r3, #6]
 8017ff4:	b29b      	uxth	r3, r3
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7f6 fd94 	bl	800eb24 <lwip_htons>
 8017ffc:	4603      	mov	r3, r0
 8017ffe:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8018000:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018002:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018006:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8018008:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801800a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801800e:	2b00      	cmp	r3, #0
 8018010:	d009      	beq.n	8018026 <ip4_frag+0x86>
 8018012:	4b6c      	ldr	r3, [pc, #432]	; (80181c4 <ip4_frag+0x224>)
 8018014:	f240 22e6 	movw	r2, #742	; 0x2e6
 8018018:	496d      	ldr	r1, [pc, #436]	; (80181d0 <ip4_frag+0x230>)
 801801a:	486c      	ldr	r0, [pc, #432]	; (80181cc <ip4_frag+0x22c>)
 801801c:	f002 ff18 	bl	801ae50 <iprintf>
 8018020:	f06f 0305 	mvn.w	r3, #5
 8018024:	e0ca      	b.n	80181bc <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	891b      	ldrh	r3, [r3, #8]
 801802a:	3b14      	subs	r3, #20
 801802c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801802e:	e0bc      	b.n	80181aa <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8018030:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8018032:	00da      	lsls	r2, r3, #3
 8018034:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018036:	4293      	cmp	r3, r2
 8018038:	bfa8      	it	ge
 801803a:	4613      	movge	r3, r2
 801803c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801803e:	2200      	movs	r2, #0
 8018040:	2114      	movs	r1, #20
 8018042:	2002      	movs	r0, #2
 8018044:	f7f7 fb96 	bl	800f774 <pbuf_alloc>
 8018048:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801804a:	6a3b      	ldr	r3, [r7, #32]
 801804c:	2b00      	cmp	r3, #0
 801804e:	f000 80b2 	beq.w	80181b6 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	895b      	ldrh	r3, [r3, #10]
 8018056:	2b13      	cmp	r3, #19
 8018058:	d806      	bhi.n	8018068 <ip4_frag+0xc8>
 801805a:	4b5a      	ldr	r3, [pc, #360]	; (80181c4 <ip4_frag+0x224>)
 801805c:	f240 3209 	movw	r2, #777	; 0x309
 8018060:	495c      	ldr	r1, [pc, #368]	; (80181d4 <ip4_frag+0x234>)
 8018062:	485a      	ldr	r0, [pc, #360]	; (80181cc <ip4_frag+0x22c>)
 8018064:	f002 fef4 	bl	801ae50 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018068:	6a3b      	ldr	r3, [r7, #32]
 801806a:	685b      	ldr	r3, [r3, #4]
 801806c:	2214      	movs	r2, #20
 801806e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018070:	4618      	mov	r0, r3
 8018072:	f002 f9f6 	bl	801a462 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018076:	6a3b      	ldr	r3, [r7, #32]
 8018078:	685b      	ldr	r3, [r3, #4]
 801807a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801807c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801807e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8018080:	e04f      	b.n	8018122 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	895a      	ldrh	r2, [r3, #10]
 8018086:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018088:	1ad3      	subs	r3, r2, r3
 801808a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801808c:	8b7a      	ldrh	r2, [r7, #26]
 801808e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018090:	4293      	cmp	r3, r2
 8018092:	bf28      	it	cs
 8018094:	4613      	movcs	r3, r2
 8018096:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018098:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801809a:	2b00      	cmp	r3, #0
 801809c:	d105      	bne.n	80180aa <ip4_frag+0x10a>
        poff = 0;
 801809e:	2300      	movs	r3, #0
 80180a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	60fb      	str	r3, [r7, #12]
        continue;
 80180a8:	e03b      	b.n	8018122 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80180aa:	f7ff ff21 	bl	8017ef0 <ip_frag_alloc_pbuf_custom_ref>
 80180ae:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80180b0:	697b      	ldr	r3, [r7, #20]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d103      	bne.n	80180be <ip4_frag+0x11e>
        pbuf_free(rambuf);
 80180b6:	6a38      	ldr	r0, [r7, #32]
 80180b8:	f7f7 fece 	bl	800fe58 <pbuf_free>
        goto memerr;
 80180bc:	e07c      	b.n	80181b8 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80180be:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80180c0:	68fb      	ldr	r3, [r7, #12]
 80180c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80180c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80180c6:	4413      	add	r3, r2
 80180c8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80180ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80180cc:	9201      	str	r2, [sp, #4]
 80180ce:	9300      	str	r3, [sp, #0]
 80180d0:	4603      	mov	r3, r0
 80180d2:	2202      	movs	r2, #2
 80180d4:	2004      	movs	r0, #4
 80180d6:	f7f7 fce1 	bl	800fa9c <pbuf_alloced_custom>
 80180da:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80180dc:	693b      	ldr	r3, [r7, #16]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d106      	bne.n	80180f0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80180e2:	6978      	ldr	r0, [r7, #20]
 80180e4:	f7ff ff0c 	bl	8017f00 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80180e8:	6a38      	ldr	r0, [r7, #32]
 80180ea:	f7f7 feb5 	bl	800fe58 <pbuf_free>
        goto memerr;
 80180ee:	e063      	b.n	80181b8 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 80180f0:	68f8      	ldr	r0, [r7, #12]
 80180f2:	f7f7 ff63 	bl	800ffbc <pbuf_ref>
      pcr->original = p;
 80180f6:	697b      	ldr	r3, [r7, #20]
 80180f8:	68fa      	ldr	r2, [r7, #12]
 80180fa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80180fc:	697b      	ldr	r3, [r7, #20]
 80180fe:	4a36      	ldr	r2, [pc, #216]	; (80181d8 <ip4_frag+0x238>)
 8018100:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018102:	6939      	ldr	r1, [r7, #16]
 8018104:	6a38      	ldr	r0, [r7, #32]
 8018106:	f7f7 ff81 	bl	801000c <pbuf_cat>
      left_to_copy -= newpbuflen;
 801810a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801810c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801810e:	1ad3      	subs	r3, r2, r3
 8018110:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8018112:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018114:	2b00      	cmp	r3, #0
 8018116:	d004      	beq.n	8018122 <ip4_frag+0x182>
        poff = 0;
 8018118:	2300      	movs	r3, #0
 801811a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018122:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018124:	2b00      	cmp	r3, #0
 8018126:	d1ac      	bne.n	8018082 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8018128:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801812a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801812c:	4413      	add	r3, r2
 801812e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018130:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018132:	68bb      	ldr	r3, [r7, #8]
 8018134:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018136:	3b14      	subs	r3, #20
 8018138:	429a      	cmp	r2, r3
 801813a:	bfd4      	ite	le
 801813c:	2301      	movle	r3, #1
 801813e:	2300      	movgt	r3, #0
 8018140:	b2db      	uxtb	r3, r3
 8018142:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018144:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018146:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801814a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801814c:	69fb      	ldr	r3, [r7, #28]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d103      	bne.n	801815a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8018152:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018154:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018158:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801815a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801815c:	4618      	mov	r0, r3
 801815e:	f7f6 fce1 	bl	800eb24 <lwip_htons>
 8018162:	4603      	mov	r3, r0
 8018164:	461a      	mov	r2, r3
 8018166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018168:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801816a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801816c:	3314      	adds	r3, #20
 801816e:	b29b      	uxth	r3, r3
 8018170:	4618      	mov	r0, r3
 8018172:	f7f6 fcd7 	bl	800eb24 <lwip_htons>
 8018176:	4603      	mov	r3, r0
 8018178:	461a      	mov	r2, r3
 801817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801817c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018180:	2200      	movs	r2, #0
 8018182:	729a      	strb	r2, [r3, #10]
 8018184:	2200      	movs	r2, #0
 8018186:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018188:	68bb      	ldr	r3, [r7, #8]
 801818a:	695b      	ldr	r3, [r3, #20]
 801818c:	687a      	ldr	r2, [r7, #4]
 801818e:	6a39      	ldr	r1, [r7, #32]
 8018190:	68b8      	ldr	r0, [r7, #8]
 8018192:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018194:	6a38      	ldr	r0, [r7, #32]
 8018196:	f7f7 fe5f 	bl	800fe58 <pbuf_free>
    left -= fragsize;
 801819a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801819c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801819e:	1ad3      	subs	r3, r2, r3
 80181a0:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 80181a2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80181a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80181a6:	4413      	add	r3, r2
 80181a8:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 80181aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	f47f af3f 	bne.w	8018030 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80181b2:	2300      	movs	r3, #0
 80181b4:	e002      	b.n	80181bc <ip4_frag+0x21c>
      goto memerr;
 80181b6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80181b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80181bc:	4618      	mov	r0, r3
 80181be:	3740      	adds	r7, #64	; 0x40
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bd80      	pop	{r7, pc}
 80181c4:	0801fc68 	.word	0x0801fc68
 80181c8:	0801fdf4 	.word	0x0801fdf4
 80181cc:	0801fcb0 	.word	0x0801fcb0
 80181d0:	0801fe1c 	.word	0x0801fe1c
 80181d4:	0801fe38 	.word	0x0801fe38
 80181d8:	08017f39 	.word	0x08017f39

080181dc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b086      	sub	sp, #24
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	6078      	str	r0, [r7, #4]
 80181e4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80181e6:	230e      	movs	r3, #14
 80181e8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	895b      	ldrh	r3, [r3, #10]
 80181ee:	2b0e      	cmp	r3, #14
 80181f0:	d977      	bls.n	80182e2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	685b      	ldr	r3, [r3, #4]
 80181f6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80181f8:	693b      	ldr	r3, [r7, #16]
 80181fa:	7b1a      	ldrb	r2, [r3, #12]
 80181fc:	7b5b      	ldrb	r3, [r3, #13]
 80181fe:	021b      	lsls	r3, r3, #8
 8018200:	4313      	orrs	r3, r2
 8018202:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018204:	693b      	ldr	r3, [r7, #16]
 8018206:	781b      	ldrb	r3, [r3, #0]
 8018208:	f003 0301 	and.w	r3, r3, #1
 801820c:	2b00      	cmp	r3, #0
 801820e:	d023      	beq.n	8018258 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018210:	693b      	ldr	r3, [r7, #16]
 8018212:	781b      	ldrb	r3, [r3, #0]
 8018214:	2b01      	cmp	r3, #1
 8018216:	d10f      	bne.n	8018238 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018218:	693b      	ldr	r3, [r7, #16]
 801821a:	785b      	ldrb	r3, [r3, #1]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d11b      	bne.n	8018258 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018220:	693b      	ldr	r3, [r7, #16]
 8018222:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018224:	2b5e      	cmp	r3, #94	; 0x5e
 8018226:	d117      	bne.n	8018258 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	7b5b      	ldrb	r3, [r3, #13]
 801822c:	f043 0310 	orr.w	r3, r3, #16
 8018230:	b2da      	uxtb	r2, r3
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	735a      	strb	r2, [r3, #13]
 8018236:	e00f      	b.n	8018258 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018238:	693b      	ldr	r3, [r7, #16]
 801823a:	2206      	movs	r2, #6
 801823c:	4930      	ldr	r1, [pc, #192]	; (8018300 <ethernet_input+0x124>)
 801823e:	4618      	mov	r0, r3
 8018240:	f002 f900 	bl	801a444 <memcmp>
 8018244:	4603      	mov	r3, r0
 8018246:	2b00      	cmp	r3, #0
 8018248:	d106      	bne.n	8018258 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	7b5b      	ldrb	r3, [r3, #13]
 801824e:	f043 0308 	orr.w	r3, r3, #8
 8018252:	b2da      	uxtb	r2, r3
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018258:	89fb      	ldrh	r3, [r7, #14]
 801825a:	2b08      	cmp	r3, #8
 801825c:	d003      	beq.n	8018266 <ethernet_input+0x8a>
 801825e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018262:	d01e      	beq.n	80182a2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018264:	e044      	b.n	80182f0 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018266:	683b      	ldr	r3, [r7, #0]
 8018268:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801826c:	f003 0308 	and.w	r3, r3, #8
 8018270:	2b00      	cmp	r3, #0
 8018272:	d038      	beq.n	80182e6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	895b      	ldrh	r3, [r3, #10]
 8018278:	461a      	mov	r2, r3
 801827a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801827e:	429a      	cmp	r2, r3
 8018280:	db33      	blt.n	80182ea <ethernet_input+0x10e>
 8018282:	8afb      	ldrh	r3, [r7, #22]
 8018284:	425b      	negs	r3, r3
 8018286:	b29b      	uxth	r3, r3
 8018288:	b21b      	sxth	r3, r3
 801828a:	4619      	mov	r1, r3
 801828c:	6878      	ldr	r0, [r7, #4]
 801828e:	f7f7 fdbf 	bl	800fe10 <pbuf_header>
 8018292:	4603      	mov	r3, r0
 8018294:	2b00      	cmp	r3, #0
 8018296:	d128      	bne.n	80182ea <ethernet_input+0x10e>
        ip4_input(p, netif);
 8018298:	6839      	ldr	r1, [r7, #0]
 801829a:	6878      	ldr	r0, [r7, #4]
 801829c:	f7fe ff80 	bl	80171a0 <ip4_input>
      break;
 80182a0:	e01d      	b.n	80182de <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80182a2:	683b      	ldr	r3, [r7, #0]
 80182a4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80182a8:	f003 0308 	and.w	r3, r3, #8
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d01e      	beq.n	80182ee <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	895b      	ldrh	r3, [r3, #10]
 80182b4:	461a      	mov	r2, r3
 80182b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80182ba:	429a      	cmp	r2, r3
 80182bc:	db15      	blt.n	80182ea <ethernet_input+0x10e>
 80182be:	8afb      	ldrh	r3, [r7, #22]
 80182c0:	425b      	negs	r3, r3
 80182c2:	b29b      	uxth	r3, r3
 80182c4:	b21b      	sxth	r3, r3
 80182c6:	4619      	mov	r1, r3
 80182c8:	6878      	ldr	r0, [r7, #4]
 80182ca:	f7f7 fda1 	bl	800fe10 <pbuf_header>
 80182ce:	4603      	mov	r3, r0
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d10a      	bne.n	80182ea <ethernet_input+0x10e>
        etharp_input(p, netif);
 80182d4:	6839      	ldr	r1, [r7, #0]
 80182d6:	6878      	ldr	r0, [r7, #4]
 80182d8:	f7fe f94e 	bl	8016578 <etharp_input>
      break;
 80182dc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80182de:	2300      	movs	r3, #0
 80182e0:	e00a      	b.n	80182f8 <ethernet_input+0x11c>
    goto free_and_return;
 80182e2:	bf00      	nop
 80182e4:	e004      	b.n	80182f0 <ethernet_input+0x114>
        goto free_and_return;
 80182e6:	bf00      	nop
 80182e8:	e002      	b.n	80182f0 <ethernet_input+0x114>

free_and_return:
 80182ea:	bf00      	nop
 80182ec:	e000      	b.n	80182f0 <ethernet_input+0x114>
        goto free_and_return;
 80182ee:	bf00      	nop
  pbuf_free(p);
 80182f0:	6878      	ldr	r0, [r7, #4]
 80182f2:	f7f7 fdb1 	bl	800fe58 <pbuf_free>
  return ERR_OK;
 80182f6:	2300      	movs	r3, #0
}
 80182f8:	4618      	mov	r0, r3
 80182fa:	3718      	adds	r7, #24
 80182fc:	46bd      	mov	sp, r7
 80182fe:	bd80      	pop	{r7, pc}
 8018300:	080200ec 	.word	0x080200ec

08018304 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b086      	sub	sp, #24
 8018308:	af00      	add	r7, sp, #0
 801830a:	60f8      	str	r0, [r7, #12]
 801830c:	60b9      	str	r1, [r7, #8]
 801830e:	607a      	str	r2, [r7, #4]
 8018310:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018312:	8c3b      	ldrh	r3, [r7, #32]
 8018314:	4618      	mov	r0, r3
 8018316:	f7f6 fc05 	bl	800eb24 <lwip_htons>
 801831a:	4603      	mov	r3, r0
 801831c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801831e:	210e      	movs	r1, #14
 8018320:	68b8      	ldr	r0, [r7, #8]
 8018322:	f7f7 fd75 	bl	800fe10 <pbuf_header>
 8018326:	4603      	mov	r3, r0
 8018328:	2b00      	cmp	r3, #0
 801832a:	d125      	bne.n	8018378 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	685b      	ldr	r3, [r3, #4]
 8018330:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018332:	693b      	ldr	r3, [r7, #16]
 8018334:	8afa      	ldrh	r2, [r7, #22]
 8018336:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8018338:	693b      	ldr	r3, [r7, #16]
 801833a:	2206      	movs	r2, #6
 801833c:	6839      	ldr	r1, [r7, #0]
 801833e:	4618      	mov	r0, r3
 8018340:	f002 f88f 	bl	801a462 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8018344:	693b      	ldr	r3, [r7, #16]
 8018346:	3306      	adds	r3, #6
 8018348:	2206      	movs	r2, #6
 801834a:	6879      	ldr	r1, [r7, #4]
 801834c:	4618      	mov	r0, r3
 801834e:	f002 f888 	bl	801a462 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018358:	2b06      	cmp	r3, #6
 801835a:	d006      	beq.n	801836a <ethernet_output+0x66>
 801835c:	4b0a      	ldr	r3, [pc, #40]	; (8018388 <ethernet_output+0x84>)
 801835e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8018362:	490a      	ldr	r1, [pc, #40]	; (801838c <ethernet_output+0x88>)
 8018364:	480a      	ldr	r0, [pc, #40]	; (8018390 <ethernet_output+0x8c>)
 8018366:	f002 fd73 	bl	801ae50 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	699b      	ldr	r3, [r3, #24]
 801836e:	68b9      	ldr	r1, [r7, #8]
 8018370:	68f8      	ldr	r0, [r7, #12]
 8018372:	4798      	blx	r3
 8018374:	4603      	mov	r3, r0
 8018376:	e002      	b.n	801837e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018378:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801837a:	f06f 0301 	mvn.w	r3, #1
}
 801837e:	4618      	mov	r0, r3
 8018380:	3718      	adds	r7, #24
 8018382:	46bd      	mov	sp, r7
 8018384:	bd80      	pop	{r7, pc}
 8018386:	bf00      	nop
 8018388:	0801fe58 	.word	0x0801fe58
 801838c:	0801fe90 	.word	0x0801fe90
 8018390:	0801fec4 	.word	0x0801fec4

08018394 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b086      	sub	sp, #24
 8018398:	af00      	add	r7, sp, #0
 801839a:	6078      	str	r0, [r7, #4]
 801839c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	60bb      	str	r3, [r7, #8]
 80183a2:	2304      	movs	r3, #4
 80183a4:	60fb      	str	r3, [r7, #12]
 80183a6:	2300      	movs	r3, #0
 80183a8:	613b      	str	r3, [r7, #16]
 80183aa:	2300      	movs	r3, #0
 80183ac:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80183ae:	f107 0308 	add.w	r3, r7, #8
 80183b2:	2100      	movs	r1, #0
 80183b4:	4618      	mov	r0, r3
 80183b6:	f7f1 f8ae 	bl	8009516 <osMessageCreate>
 80183ba:	4602      	mov	r2, r0
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d102      	bne.n	80183ce <sys_mbox_new+0x3a>
    return ERR_MEM;
 80183c8:	f04f 33ff 	mov.w	r3, #4294967295
 80183cc:	e000      	b.n	80183d0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80183ce:	2300      	movs	r3, #0
}
 80183d0:	4618      	mov	r0, r3
 80183d2:	3718      	adds	r7, #24
 80183d4:	46bd      	mov	sp, r7
 80183d6:	bd80      	pop	{r7, pc}

080183d8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b082      	sub	sp, #8
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	4618      	mov	r0, r3
 80183e6:	f7f1 f973 	bl	80096d0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	4618      	mov	r0, r3
 80183f0:	f7f1 f984 	bl	80096fc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80183f4:	bf00      	nop
 80183f6:	3708      	adds	r7, #8
 80183f8:	46bd      	mov	sp, r7
 80183fa:	bd80      	pop	{r7, pc}

080183fc <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b082      	sub	sp, #8
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
 8018404:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8018406:	bf00      	nop
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	6839      	ldr	r1, [r7, #0]
 801840e:	f04f 32ff 	mov.w	r2, #4294967295
 8018412:	4618      	mov	r0, r3
 8018414:	f7f1 f8a8 	bl	8009568 <osMessagePut>
 8018418:	4603      	mov	r3, r0
 801841a:	2b00      	cmp	r3, #0
 801841c:	d1f4      	bne.n	8018408 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801841e:	bf00      	nop
 8018420:	3708      	adds	r7, #8
 8018422:	46bd      	mov	sp, r7
 8018424:	bd80      	pop	{r7, pc}

08018426 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018426:	b580      	push	{r7, lr}
 8018428:	b084      	sub	sp, #16
 801842a:	af00      	add	r7, sp, #0
 801842c:	6078      	str	r0, [r7, #4]
 801842e:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	6839      	ldr	r1, [r7, #0]
 8018436:	2200      	movs	r2, #0
 8018438:	4618      	mov	r0, r3
 801843a:	f7f1 f895 	bl	8009568 <osMessagePut>
 801843e:	4603      	mov	r3, r0
 8018440:	2b00      	cmp	r3, #0
 8018442:	d102      	bne.n	801844a <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018444:	2300      	movs	r3, #0
 8018446:	73fb      	strb	r3, [r7, #15]
 8018448:	e001      	b.n	801844e <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801844a:	23ff      	movs	r3, #255	; 0xff
 801844c:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801844e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018452:	4618      	mov	r0, r3
 8018454:	3710      	adds	r7, #16
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}

0801845a <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801845a:	b580      	push	{r7, lr}
 801845c:	b08c      	sub	sp, #48	; 0x30
 801845e:	af00      	add	r7, sp, #0
 8018460:	61f8      	str	r0, [r7, #28]
 8018462:	61b9      	str	r1, [r7, #24]
 8018464:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018466:	f7f0 fe6b 	bl	8009140 <osKernelSysTick>
 801846a:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801846c:	697b      	ldr	r3, [r7, #20]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d017      	beq.n	80184a2 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018472:	69fb      	ldr	r3, [r7, #28]
 8018474:	6819      	ldr	r1, [r3, #0]
 8018476:	f107 0320 	add.w	r3, r7, #32
 801847a:	697a      	ldr	r2, [r7, #20]
 801847c:	4618      	mov	r0, r3
 801847e:	f7f1 f8b3 	bl	80095e8 <osMessageGet>

    if(event.status == osEventMessage)
 8018482:	6a3b      	ldr	r3, [r7, #32]
 8018484:	2b10      	cmp	r3, #16
 8018486:	d109      	bne.n	801849c <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801848a:	461a      	mov	r2, r3
 801848c:	69bb      	ldr	r3, [r7, #24]
 801848e:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018490:	f7f0 fe56 	bl	8009140 <osKernelSysTick>
 8018494:	4602      	mov	r2, r0
 8018496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018498:	1ad3      	subs	r3, r2, r3
 801849a:	e019      	b.n	80184d0 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801849c:	f04f 33ff 	mov.w	r3, #4294967295
 80184a0:	e016      	b.n	80184d0 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80184a2:	69fb      	ldr	r3, [r7, #28]
 80184a4:	6819      	ldr	r1, [r3, #0]
 80184a6:	463b      	mov	r3, r7
 80184a8:	f04f 32ff 	mov.w	r2, #4294967295
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7f1 f89b 	bl	80095e8 <osMessageGet>
 80184b2:	f107 0320 	add.w	r3, r7, #32
 80184b6:	463a      	mov	r2, r7
 80184b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80184ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80184be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184c0:	461a      	mov	r2, r3
 80184c2:	69bb      	ldr	r3, [r7, #24]
 80184c4:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80184c6:	f7f0 fe3b 	bl	8009140 <osKernelSysTick>
 80184ca:	4602      	mov	r2, r0
 80184cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184ce:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80184d0:	4618      	mov	r0, r3
 80184d2:	3730      	adds	r7, #48	; 0x30
 80184d4:	46bd      	mov	sp, r7
 80184d6:	bd80      	pop	{r7, pc}

080184d8 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b086      	sub	sp, #24
 80184dc:	af00      	add	r7, sp, #0
 80184de:	6078      	str	r0, [r7, #4]
 80184e0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	6819      	ldr	r1, [r3, #0]
 80184e6:	f107 030c 	add.w	r3, r7, #12
 80184ea:	2200      	movs	r2, #0
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7f1 f87b 	bl	80095e8 <osMessageGet>

  if(event.status == osEventMessage)
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	2b10      	cmp	r3, #16
 80184f6:	d105      	bne.n	8018504 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80184f8:	693b      	ldr	r3, [r7, #16]
 80184fa:	461a      	mov	r2, r3
 80184fc:	683b      	ldr	r3, [r7, #0]
 80184fe:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018500:	2300      	movs	r3, #0
 8018502:	e001      	b.n	8018508 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018504:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018508:	4618      	mov	r0, r3
 801850a:	3718      	adds	r7, #24
 801850c:	46bd      	mov	sp, r7
 801850e:	bd80      	pop	{r7, pc}

08018510 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018510:	b480      	push	{r7}
 8018512:	b083      	sub	sp, #12
 8018514:	af00      	add	r7, sp, #0
 8018516:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	2b00      	cmp	r3, #0
 801851e:	d101      	bne.n	8018524 <sys_mbox_valid+0x14>
    return 0;
 8018520:	2300      	movs	r3, #0
 8018522:	e000      	b.n	8018526 <sys_mbox_valid+0x16>
  else
    return 1;
 8018524:	2301      	movs	r3, #1
}
 8018526:	4618      	mov	r0, r3
 8018528:	370c      	adds	r7, #12
 801852a:	46bd      	mov	sp, r7
 801852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018530:	4770      	bx	lr

08018532 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018532:	b480      	push	{r7}
 8018534:	b083      	sub	sp, #12
 8018536:	af00      	add	r7, sp, #0
 8018538:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	2200      	movs	r2, #0
 801853e:	601a      	str	r2, [r3, #0]
}
 8018540:	bf00      	nop
 8018542:	370c      	adds	r7, #12
 8018544:	46bd      	mov	sp, r7
 8018546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801854a:	4770      	bx	lr

0801854c <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801854c:	b580      	push	{r7, lr}
 801854e:	b084      	sub	sp, #16
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
 8018554:	460b      	mov	r3, r1
 8018556:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018558:	2300      	movs	r3, #0
 801855a:	60bb      	str	r3, [r7, #8]
 801855c:	2300      	movs	r3, #0
 801855e:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018560:	f107 0308 	add.w	r3, r7, #8
 8018564:	2101      	movs	r1, #1
 8018566:	4618      	mov	r0, r3
 8018568:	f7f0 ff0a 	bl	8009380 <osSemaphoreCreate>
 801856c:	4602      	mov	r2, r0
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	2b00      	cmp	r3, #0
 8018578:	d102      	bne.n	8018580 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801857a:	f04f 33ff 	mov.w	r3, #4294967295
 801857e:	e009      	b.n	8018594 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018580:	78fb      	ldrb	r3, [r7, #3]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d105      	bne.n	8018592 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	2100      	movs	r1, #0
 801858c:	4618      	mov	r0, r3
 801858e:	f7f0 ff2b 	bl	80093e8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018592:	2300      	movs	r3, #0
}
 8018594:	4618      	mov	r0, r3
 8018596:	3710      	adds	r7, #16
 8018598:	46bd      	mov	sp, r7
 801859a:	bd80      	pop	{r7, pc}

0801859c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b084      	sub	sp, #16
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
 80185a4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80185a6:	f7f0 fdcb 	bl	8009140 <osKernelSysTick>
 80185aa:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80185ac:	683b      	ldr	r3, [r7, #0]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d011      	beq.n	80185d6 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	6839      	ldr	r1, [r7, #0]
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7f0 ff15 	bl	80093e8 <osSemaphoreWait>
 80185be:	4603      	mov	r3, r0
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d105      	bne.n	80185d0 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80185c4:	f7f0 fdbc 	bl	8009140 <osKernelSysTick>
 80185c8:	4602      	mov	r2, r0
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	1ad3      	subs	r3, r2, r3
 80185ce:	e012      	b.n	80185f6 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80185d0:	f04f 33ff 	mov.w	r3, #4294967295
 80185d4:	e00f      	b.n	80185f6 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80185d6:	bf00      	nop
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	f04f 31ff 	mov.w	r1, #4294967295
 80185e0:	4618      	mov	r0, r3
 80185e2:	f7f0 ff01 	bl	80093e8 <osSemaphoreWait>
 80185e6:	4603      	mov	r3, r0
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d1f5      	bne.n	80185d8 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80185ec:	f7f0 fda8 	bl	8009140 <osKernelSysTick>
 80185f0:	4602      	mov	r2, r0
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80185f6:	4618      	mov	r0, r3
 80185f8:	3710      	adds	r7, #16
 80185fa:	46bd      	mov	sp, r7
 80185fc:	bd80      	pop	{r7, pc}

080185fe <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80185fe:	b580      	push	{r7, lr}
 8018600:	b082      	sub	sp, #8
 8018602:	af00      	add	r7, sp, #0
 8018604:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	4618      	mov	r0, r3
 801860c:	f7f0 ff3a 	bl	8009484 <osSemaphoreRelease>
}
 8018610:	bf00      	nop
 8018612:	3708      	adds	r7, #8
 8018614:	46bd      	mov	sp, r7
 8018616:	bd80      	pop	{r7, pc}

08018618 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018618:	b580      	push	{r7, lr}
 801861a:	b082      	sub	sp, #8
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	4618      	mov	r0, r3
 8018626:	f7f0 ff63 	bl	80094f0 <osSemaphoreDelete>
}
 801862a:	bf00      	nop
 801862c:	3708      	adds	r7, #8
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}

08018632 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018632:	b480      	push	{r7}
 8018634:	b083      	sub	sp, #12
 8018636:	af00      	add	r7, sp, #0
 8018638:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d101      	bne.n	8018646 <sys_sem_valid+0x14>
    return 0;
 8018642:	2300      	movs	r3, #0
 8018644:	e000      	b.n	8018648 <sys_sem_valid+0x16>
  else
    return 1;
 8018646:	2301      	movs	r3, #1
}
 8018648:	4618      	mov	r0, r3
 801864a:	370c      	adds	r7, #12
 801864c:	46bd      	mov	sp, r7
 801864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018652:	4770      	bx	lr

08018654 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018654:	b480      	push	{r7}
 8018656:	b083      	sub	sp, #12
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	2200      	movs	r2, #0
 8018660:	601a      	str	r2, [r3, #0]
}
 8018662:	bf00      	nop
 8018664:	370c      	adds	r7, #12
 8018666:	46bd      	mov	sp, r7
 8018668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801866c:	4770      	bx	lr
	...

08018670 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018674:	4803      	ldr	r0, [pc, #12]	; (8018684 <sys_init+0x14>)
 8018676:	f7f0 fde6 	bl	8009246 <osMutexCreate>
 801867a:	4602      	mov	r2, r0
 801867c:	4b02      	ldr	r3, [pc, #8]	; (8018688 <sys_init+0x18>)
 801867e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018680:	bf00      	nop
 8018682:	bd80      	pop	{r7, pc}
 8018684:	080200fc 	.word	0x080200fc
 8018688:	20016444 	.word	0x20016444

0801868c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801868c:	b580      	push	{r7, lr}
 801868e:	b084      	sub	sp, #16
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018694:	2300      	movs	r3, #0
 8018696:	60bb      	str	r3, [r7, #8]
 8018698:	2300      	movs	r3, #0
 801869a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801869c:	f107 0308 	add.w	r3, r7, #8
 80186a0:	4618      	mov	r0, r3
 80186a2:	f7f0 fdd0 	bl	8009246 <osMutexCreate>
 80186a6:	4602      	mov	r2, r0
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d102      	bne.n	80186ba <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80186b4:	f04f 33ff 	mov.w	r3, #4294967295
 80186b8:	e000      	b.n	80186bc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80186ba:	2300      	movs	r3, #0
}
 80186bc:	4618      	mov	r0, r3
 80186be:	3710      	adds	r7, #16
 80186c0:	46bd      	mov	sp, r7
 80186c2:	bd80      	pop	{r7, pc}

080186c4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80186c4:	b580      	push	{r7, lr}
 80186c6:	b082      	sub	sp, #8
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	f04f 31ff 	mov.w	r1, #4294967295
 80186d4:	4618      	mov	r0, r3
 80186d6:	f7f0 fdcf 	bl	8009278 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80186da:	bf00      	nop
 80186dc:	3708      	adds	r7, #8
 80186de:	46bd      	mov	sp, r7
 80186e0:	bd80      	pop	{r7, pc}

080186e2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80186e2:	b580      	push	{r7, lr}
 80186e4:	b082      	sub	sp, #8
 80186e6:	af00      	add	r7, sp, #0
 80186e8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	4618      	mov	r0, r3
 80186f0:	f7f0 fe10 	bl	8009314 <osMutexRelease>
}
 80186f4:	bf00      	nop
 80186f6:	3708      	adds	r7, #8
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}

080186fc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b08c      	sub	sp, #48	; 0x30
 8018700:	af00      	add	r7, sp, #0
 8018702:	60f8      	str	r0, [r7, #12]
 8018704:	60b9      	str	r1, [r7, #8]
 8018706:	607a      	str	r2, [r7, #4]
 8018708:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801870a:	f107 0314 	add.w	r3, r7, #20
 801870e:	2200      	movs	r2, #0
 8018710:	601a      	str	r2, [r3, #0]
 8018712:	605a      	str	r2, [r3, #4]
 8018714:	609a      	str	r2, [r3, #8]
 8018716:	60da      	str	r2, [r3, #12]
 8018718:	611a      	str	r2, [r3, #16]
 801871a:	615a      	str	r2, [r3, #20]
 801871c:	619a      	str	r2, [r3, #24]
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	617b      	str	r3, [r7, #20]
 8018722:	68bb      	ldr	r3, [r7, #8]
 8018724:	61bb      	str	r3, [r7, #24]
 8018726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018728:	b21b      	sxth	r3, r3
 801872a:	83bb      	strh	r3, [r7, #28]
 801872c:	683b      	ldr	r3, [r7, #0]
 801872e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018730:	f107 0314 	add.w	r3, r7, #20
 8018734:	6879      	ldr	r1, [r7, #4]
 8018736:	4618      	mov	r0, r3
 8018738:	f7f0 fd12 	bl	8009160 <osThreadCreate>
 801873c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801873e:	4618      	mov	r0, r3
 8018740:	3730      	adds	r7, #48	; 0x30
 8018742:	46bd      	mov	sp, r7
 8018744:	bd80      	pop	{r7, pc}
	...

08018748 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018748:	b580      	push	{r7, lr}
 801874a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801874c:	4b04      	ldr	r3, [pc, #16]	; (8018760 <sys_arch_protect+0x18>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	f04f 31ff 	mov.w	r1, #4294967295
 8018754:	4618      	mov	r0, r3
 8018756:	f7f0 fd8f 	bl	8009278 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801875a:	2301      	movs	r3, #1
}
 801875c:	4618      	mov	r0, r3
 801875e:	bd80      	pop	{r7, pc}
 8018760:	20016444 	.word	0x20016444

08018764 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b082      	sub	sp, #8
 8018768:	af00      	add	r7, sp, #0
 801876a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801876c:	4b04      	ldr	r3, [pc, #16]	; (8018780 <sys_arch_unprotect+0x1c>)
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	4618      	mov	r0, r3
 8018772:	f7f0 fdcf 	bl	8009314 <osMutexRelease>
}
 8018776:	bf00      	nop
 8018778:	3708      	adds	r7, #8
 801877a:	46bd      	mov	sp, r7
 801877c:	bd80      	pop	{r7, pc}
 801877e:	bf00      	nop
 8018780:	20016444 	.word	0x20016444

08018784 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8018784:	b580      	push	{r7, lr}
 8018786:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8018788:	4803      	ldr	r0, [pc, #12]	; (8018798 <_cbSendSystemDesc+0x14>)
 801878a:	f001 fb49 	bl	8019e20 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 801878e:	4803      	ldr	r0, [pc, #12]	; (801879c <_cbSendSystemDesc+0x18>)
 8018790:	f001 fb46 	bl	8019e20 <SEGGER_SYSVIEW_SendSysDesc>
}
 8018794:	bf00      	nop
 8018796:	bd80      	pop	{r7, pc}
 8018798:	0801feec 	.word	0x0801feec
 801879c:	0801ff24 	.word	0x0801ff24

080187a0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80187a0:	b580      	push	{r7, lr}
 80187a2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80187a4:	4b06      	ldr	r3, [pc, #24]	; (80187c0 <SEGGER_SYSVIEW_Conf+0x20>)
 80187a6:	6818      	ldr	r0, [r3, #0]
 80187a8:	4b05      	ldr	r3, [pc, #20]	; (80187c0 <SEGGER_SYSVIEW_Conf+0x20>)
 80187aa:	6819      	ldr	r1, [r3, #0]
 80187ac:	4b05      	ldr	r3, [pc, #20]	; (80187c4 <SEGGER_SYSVIEW_Conf+0x24>)
 80187ae:	4a06      	ldr	r2, [pc, #24]	; (80187c8 <SEGGER_SYSVIEW_Conf+0x28>)
 80187b0:	f000 fe08 	bl	80193c4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80187b4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80187b8:	f000 fe42 	bl	8019440 <SEGGER_SYSVIEW_SetRAMBase>
}
 80187bc:	bf00      	nop
 80187be:	bd80      	pop	{r7, pc}
 80187c0:	20000000 	.word	0x20000000
 80187c4:	08018785 	.word	0x08018785
 80187c8:	08020104 	.word	0x08020104

080187cc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80187cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187ce:	b085      	sub	sp, #20
 80187d0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80187d2:	2300      	movs	r3, #0
 80187d4:	607b      	str	r3, [r7, #4]
 80187d6:	e034      	b.n	8018842 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80187d8:	491e      	ldr	r1, [pc, #120]	; (8018854 <_cbSendTaskList+0x88>)
 80187da:	687a      	ldr	r2, [r7, #4]
 80187dc:	4613      	mov	r3, r2
 80187de:	009b      	lsls	r3, r3, #2
 80187e0:	4413      	add	r3, r2
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	440b      	add	r3, r1
 80187e6:	6818      	ldr	r0, [r3, #0]
 80187e8:	491a      	ldr	r1, [pc, #104]	; (8018854 <_cbSendTaskList+0x88>)
 80187ea:	687a      	ldr	r2, [r7, #4]
 80187ec:	4613      	mov	r3, r2
 80187ee:	009b      	lsls	r3, r3, #2
 80187f0:	4413      	add	r3, r2
 80187f2:	009b      	lsls	r3, r3, #2
 80187f4:	440b      	add	r3, r1
 80187f6:	3304      	adds	r3, #4
 80187f8:	681c      	ldr	r4, [r3, #0]
 80187fa:	4916      	ldr	r1, [pc, #88]	; (8018854 <_cbSendTaskList+0x88>)
 80187fc:	687a      	ldr	r2, [r7, #4]
 80187fe:	4613      	mov	r3, r2
 8018800:	009b      	lsls	r3, r3, #2
 8018802:	4413      	add	r3, r2
 8018804:	009b      	lsls	r3, r3, #2
 8018806:	440b      	add	r3, r1
 8018808:	3308      	adds	r3, #8
 801880a:	681d      	ldr	r5, [r3, #0]
 801880c:	4911      	ldr	r1, [pc, #68]	; (8018854 <_cbSendTaskList+0x88>)
 801880e:	687a      	ldr	r2, [r7, #4]
 8018810:	4613      	mov	r3, r2
 8018812:	009b      	lsls	r3, r3, #2
 8018814:	4413      	add	r3, r2
 8018816:	009b      	lsls	r3, r3, #2
 8018818:	440b      	add	r3, r1
 801881a:	330c      	adds	r3, #12
 801881c:	681e      	ldr	r6, [r3, #0]
 801881e:	490d      	ldr	r1, [pc, #52]	; (8018854 <_cbSendTaskList+0x88>)
 8018820:	687a      	ldr	r2, [r7, #4]
 8018822:	4613      	mov	r3, r2
 8018824:	009b      	lsls	r3, r3, #2
 8018826:	4413      	add	r3, r2
 8018828:	009b      	lsls	r3, r3, #2
 801882a:	440b      	add	r3, r1
 801882c:	3310      	adds	r3, #16
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	9300      	str	r3, [sp, #0]
 8018832:	4633      	mov	r3, r6
 8018834:	462a      	mov	r2, r5
 8018836:	4621      	mov	r1, r4
 8018838:	f000 f970 	bl	8018b1c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	3301      	adds	r3, #1
 8018840:	607b      	str	r3, [r7, #4]
 8018842:	4b05      	ldr	r3, [pc, #20]	; (8018858 <_cbSendTaskList+0x8c>)
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	687a      	ldr	r2, [r7, #4]
 8018848:	429a      	cmp	r2, r3
 801884a:	d3c5      	bcc.n	80187d8 <_cbSendTaskList+0xc>
  }
}
 801884c:	bf00      	nop
 801884e:	370c      	adds	r7, #12
 8018850:	46bd      	mov	sp, r7
 8018852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018854:	2000caa8 	.word	0x2000caa8
 8018858:	2000cb48 	.word	0x2000cb48

0801885c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 801885c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801885e:	b083      	sub	sp, #12
 8018860:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8018862:	f7f2 fc8d 	bl	800b180 <xTaskGetTickCountFromISR>
 8018866:	4603      	mov	r3, r0
 8018868:	f04f 0400 	mov.w	r4, #0
 801886c:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8018870:	e9d7 5600 	ldrd	r5, r6, [r7]
 8018874:	462b      	mov	r3, r5
 8018876:	4634      	mov	r4, r6
 8018878:	f04f 0100 	mov.w	r1, #0
 801887c:	f04f 0200 	mov.w	r2, #0
 8018880:	0162      	lsls	r2, r4, #5
 8018882:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8018886:	0159      	lsls	r1, r3, #5
 8018888:	460b      	mov	r3, r1
 801888a:	4614      	mov	r4, r2
 801888c:	1b5b      	subs	r3, r3, r5
 801888e:	eb64 0406 	sbc.w	r4, r4, r6
 8018892:	f04f 0100 	mov.w	r1, #0
 8018896:	f04f 0200 	mov.w	r2, #0
 801889a:	00a2      	lsls	r2, r4, #2
 801889c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80188a0:	0099      	lsls	r1, r3, #2
 80188a2:	460b      	mov	r3, r1
 80188a4:	4614      	mov	r4, r2
 80188a6:	195b      	adds	r3, r3, r5
 80188a8:	eb44 0406 	adc.w	r4, r4, r6
 80188ac:	f04f 0100 	mov.w	r1, #0
 80188b0:	f04f 0200 	mov.w	r2, #0
 80188b4:	00e2      	lsls	r2, r4, #3
 80188b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80188ba:	00d9      	lsls	r1, r3, #3
 80188bc:	460b      	mov	r3, r1
 80188be:	4614      	mov	r4, r2
 80188c0:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 80188c4:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80188c8:	4618      	mov	r0, r3
 80188ca:	4621      	mov	r1, r4
 80188cc:	370c      	adds	r7, #12
 80188ce:	46bd      	mov	sp, r7
 80188d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080188d4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b086      	sub	sp, #24
 80188d8:	af02      	add	r7, sp, #8
 80188da:	60f8      	str	r0, [r7, #12]
 80188dc:	60b9      	str	r1, [r7, #8]
 80188de:	607a      	str	r2, [r7, #4]
 80188e0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80188e2:	2205      	movs	r2, #5
 80188e4:	492b      	ldr	r1, [pc, #172]	; (8018994 <SYSVIEW_AddTask+0xc0>)
 80188e6:	68b8      	ldr	r0, [r7, #8]
 80188e8:	f001 fdac 	bl	801a444 <memcmp>
 80188ec:	4603      	mov	r3, r0
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d04b      	beq.n	801898a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80188f2:	4b29      	ldr	r3, [pc, #164]	; (8018998 <SYSVIEW_AddTask+0xc4>)
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	2b07      	cmp	r3, #7
 80188f8:	d903      	bls.n	8018902 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80188fa:	4828      	ldr	r0, [pc, #160]	; (801899c <SYSVIEW_AddTask+0xc8>)
 80188fc:	f001 fd1a 	bl	801a334 <SEGGER_SYSVIEW_Warn>
    return;
 8018900:	e044      	b.n	801898c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8018902:	4b25      	ldr	r3, [pc, #148]	; (8018998 <SYSVIEW_AddTask+0xc4>)
 8018904:	681a      	ldr	r2, [r3, #0]
 8018906:	4926      	ldr	r1, [pc, #152]	; (80189a0 <SYSVIEW_AddTask+0xcc>)
 8018908:	4613      	mov	r3, r2
 801890a:	009b      	lsls	r3, r3, #2
 801890c:	4413      	add	r3, r2
 801890e:	009b      	lsls	r3, r3, #2
 8018910:	440b      	add	r3, r1
 8018912:	68fa      	ldr	r2, [r7, #12]
 8018914:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8018916:	4b20      	ldr	r3, [pc, #128]	; (8018998 <SYSVIEW_AddTask+0xc4>)
 8018918:	681a      	ldr	r2, [r3, #0]
 801891a:	4921      	ldr	r1, [pc, #132]	; (80189a0 <SYSVIEW_AddTask+0xcc>)
 801891c:	4613      	mov	r3, r2
 801891e:	009b      	lsls	r3, r3, #2
 8018920:	4413      	add	r3, r2
 8018922:	009b      	lsls	r3, r3, #2
 8018924:	440b      	add	r3, r1
 8018926:	3304      	adds	r3, #4
 8018928:	68ba      	ldr	r2, [r7, #8]
 801892a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 801892c:	4b1a      	ldr	r3, [pc, #104]	; (8018998 <SYSVIEW_AddTask+0xc4>)
 801892e:	681a      	ldr	r2, [r3, #0]
 8018930:	491b      	ldr	r1, [pc, #108]	; (80189a0 <SYSVIEW_AddTask+0xcc>)
 8018932:	4613      	mov	r3, r2
 8018934:	009b      	lsls	r3, r3, #2
 8018936:	4413      	add	r3, r2
 8018938:	009b      	lsls	r3, r3, #2
 801893a:	440b      	add	r3, r1
 801893c:	3308      	adds	r3, #8
 801893e:	687a      	ldr	r2, [r7, #4]
 8018940:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8018942:	4b15      	ldr	r3, [pc, #84]	; (8018998 <SYSVIEW_AddTask+0xc4>)
 8018944:	681a      	ldr	r2, [r3, #0]
 8018946:	4916      	ldr	r1, [pc, #88]	; (80189a0 <SYSVIEW_AddTask+0xcc>)
 8018948:	4613      	mov	r3, r2
 801894a:	009b      	lsls	r3, r3, #2
 801894c:	4413      	add	r3, r2
 801894e:	009b      	lsls	r3, r3, #2
 8018950:	440b      	add	r3, r1
 8018952:	330c      	adds	r3, #12
 8018954:	683a      	ldr	r2, [r7, #0]
 8018956:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8018958:	4b0f      	ldr	r3, [pc, #60]	; (8018998 <SYSVIEW_AddTask+0xc4>)
 801895a:	681a      	ldr	r2, [r3, #0]
 801895c:	4910      	ldr	r1, [pc, #64]	; (80189a0 <SYSVIEW_AddTask+0xcc>)
 801895e:	4613      	mov	r3, r2
 8018960:	009b      	lsls	r3, r3, #2
 8018962:	4413      	add	r3, r2
 8018964:	009b      	lsls	r3, r3, #2
 8018966:	440b      	add	r3, r1
 8018968:	3310      	adds	r3, #16
 801896a:	69ba      	ldr	r2, [r7, #24]
 801896c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 801896e:	4b0a      	ldr	r3, [pc, #40]	; (8018998 <SYSVIEW_AddTask+0xc4>)
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	3301      	adds	r3, #1
 8018974:	4a08      	ldr	r2, [pc, #32]	; (8018998 <SYSVIEW_AddTask+0xc4>)
 8018976:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8018978:	69bb      	ldr	r3, [r7, #24]
 801897a:	9300      	str	r3, [sp, #0]
 801897c:	683b      	ldr	r3, [r7, #0]
 801897e:	687a      	ldr	r2, [r7, #4]
 8018980:	68b9      	ldr	r1, [r7, #8]
 8018982:	68f8      	ldr	r0, [r7, #12]
 8018984:	f000 f8ca 	bl	8018b1c <SYSVIEW_SendTaskInfo>
 8018988:	e000      	b.n	801898c <SYSVIEW_AddTask+0xb8>
    return;
 801898a:	bf00      	nop

}
 801898c:	3710      	adds	r7, #16
 801898e:	46bd      	mov	sp, r7
 8018990:	bd80      	pop	{r7, pc}
 8018992:	bf00      	nop
 8018994:	0801ff34 	.word	0x0801ff34
 8018998:	2000cb48 	.word	0x2000cb48
 801899c:	0801ff3c 	.word	0x0801ff3c
 80189a0:	2000caa8 	.word	0x2000caa8

080189a4 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b084      	sub	sp, #16
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80189ac:	4b59      	ldr	r3, [pc, #356]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	f000 80ab 	beq.w	8018b0c <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80189b6:	2300      	movs	r3, #0
 80189b8:	60fb      	str	r3, [r7, #12]
 80189ba:	e00d      	b.n	80189d8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80189bc:	4956      	ldr	r1, [pc, #344]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 80189be:	68fa      	ldr	r2, [r7, #12]
 80189c0:	4613      	mov	r3, r2
 80189c2:	009b      	lsls	r3, r3, #2
 80189c4:	4413      	add	r3, r2
 80189c6:	009b      	lsls	r3, r3, #2
 80189c8:	440b      	add	r3, r1
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	687a      	ldr	r2, [r7, #4]
 80189ce:	429a      	cmp	r2, r3
 80189d0:	d008      	beq.n	80189e4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	3301      	adds	r3, #1
 80189d6:	60fb      	str	r3, [r7, #12]
 80189d8:	4b4e      	ldr	r3, [pc, #312]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	68fa      	ldr	r2, [r7, #12]
 80189de:	429a      	cmp	r2, r3
 80189e0:	d3ec      	bcc.n	80189bc <SYSVIEW_DeleteTask+0x18>
 80189e2:	e000      	b.n	80189e6 <SYSVIEW_DeleteTask+0x42>
      break;
 80189e4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80189e6:	4b4b      	ldr	r3, [pc, #300]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	3b01      	subs	r3, #1
 80189ec:	68fa      	ldr	r2, [r7, #12]
 80189ee:	429a      	cmp	r2, r3
 80189f0:	d111      	bne.n	8018a16 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80189f2:	68fa      	ldr	r2, [r7, #12]
 80189f4:	4613      	mov	r3, r2
 80189f6:	009b      	lsls	r3, r3, #2
 80189f8:	4413      	add	r3, r2
 80189fa:	009b      	lsls	r3, r3, #2
 80189fc:	4a46      	ldr	r2, [pc, #280]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 80189fe:	4413      	add	r3, r2
 8018a00:	2214      	movs	r2, #20
 8018a02:	2100      	movs	r1, #0
 8018a04:	4618      	mov	r0, r3
 8018a06:	f001 fd37 	bl	801a478 <memset>
    _NumTasks--;
 8018a0a:	4b42      	ldr	r3, [pc, #264]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	3b01      	subs	r3, #1
 8018a10:	4a40      	ldr	r2, [pc, #256]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 8018a12:	6013      	str	r3, [r2, #0]
 8018a14:	e07b      	b.n	8018b0e <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8018a16:	4b3f      	ldr	r3, [pc, #252]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	68fa      	ldr	r2, [r7, #12]
 8018a1c:	429a      	cmp	r2, r3
 8018a1e:	d276      	bcs.n	8018b0e <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8018a20:	4b3c      	ldr	r3, [pc, #240]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	1e5a      	subs	r2, r3, #1
 8018a26:	493c      	ldr	r1, [pc, #240]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 8018a28:	4613      	mov	r3, r2
 8018a2a:	009b      	lsls	r3, r3, #2
 8018a2c:	4413      	add	r3, r2
 8018a2e:	009b      	lsls	r3, r3, #2
 8018a30:	440b      	add	r3, r1
 8018a32:	6819      	ldr	r1, [r3, #0]
 8018a34:	4838      	ldr	r0, [pc, #224]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 8018a36:	68fa      	ldr	r2, [r7, #12]
 8018a38:	4613      	mov	r3, r2
 8018a3a:	009b      	lsls	r3, r3, #2
 8018a3c:	4413      	add	r3, r2
 8018a3e:	009b      	lsls	r3, r3, #2
 8018a40:	4403      	add	r3, r0
 8018a42:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8018a44:	4b33      	ldr	r3, [pc, #204]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	1e5a      	subs	r2, r3, #1
 8018a4a:	4933      	ldr	r1, [pc, #204]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 8018a4c:	4613      	mov	r3, r2
 8018a4e:	009b      	lsls	r3, r3, #2
 8018a50:	4413      	add	r3, r2
 8018a52:	009b      	lsls	r3, r3, #2
 8018a54:	440b      	add	r3, r1
 8018a56:	3304      	adds	r3, #4
 8018a58:	6819      	ldr	r1, [r3, #0]
 8018a5a:	482f      	ldr	r0, [pc, #188]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 8018a5c:	68fa      	ldr	r2, [r7, #12]
 8018a5e:	4613      	mov	r3, r2
 8018a60:	009b      	lsls	r3, r3, #2
 8018a62:	4413      	add	r3, r2
 8018a64:	009b      	lsls	r3, r3, #2
 8018a66:	4403      	add	r3, r0
 8018a68:	3304      	adds	r3, #4
 8018a6a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8018a6c:	4b29      	ldr	r3, [pc, #164]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	1e5a      	subs	r2, r3, #1
 8018a72:	4929      	ldr	r1, [pc, #164]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 8018a74:	4613      	mov	r3, r2
 8018a76:	009b      	lsls	r3, r3, #2
 8018a78:	4413      	add	r3, r2
 8018a7a:	009b      	lsls	r3, r3, #2
 8018a7c:	440b      	add	r3, r1
 8018a7e:	3308      	adds	r3, #8
 8018a80:	6819      	ldr	r1, [r3, #0]
 8018a82:	4825      	ldr	r0, [pc, #148]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 8018a84:	68fa      	ldr	r2, [r7, #12]
 8018a86:	4613      	mov	r3, r2
 8018a88:	009b      	lsls	r3, r3, #2
 8018a8a:	4413      	add	r3, r2
 8018a8c:	009b      	lsls	r3, r3, #2
 8018a8e:	4403      	add	r3, r0
 8018a90:	3308      	adds	r3, #8
 8018a92:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8018a94:	4b1f      	ldr	r3, [pc, #124]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	1e5a      	subs	r2, r3, #1
 8018a9a:	491f      	ldr	r1, [pc, #124]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 8018a9c:	4613      	mov	r3, r2
 8018a9e:	009b      	lsls	r3, r3, #2
 8018aa0:	4413      	add	r3, r2
 8018aa2:	009b      	lsls	r3, r3, #2
 8018aa4:	440b      	add	r3, r1
 8018aa6:	330c      	adds	r3, #12
 8018aa8:	6819      	ldr	r1, [r3, #0]
 8018aaa:	481b      	ldr	r0, [pc, #108]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 8018aac:	68fa      	ldr	r2, [r7, #12]
 8018aae:	4613      	mov	r3, r2
 8018ab0:	009b      	lsls	r3, r3, #2
 8018ab2:	4413      	add	r3, r2
 8018ab4:	009b      	lsls	r3, r3, #2
 8018ab6:	4403      	add	r3, r0
 8018ab8:	330c      	adds	r3, #12
 8018aba:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8018abc:	4b15      	ldr	r3, [pc, #84]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	1e5a      	subs	r2, r3, #1
 8018ac2:	4915      	ldr	r1, [pc, #84]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 8018ac4:	4613      	mov	r3, r2
 8018ac6:	009b      	lsls	r3, r3, #2
 8018ac8:	4413      	add	r3, r2
 8018aca:	009b      	lsls	r3, r3, #2
 8018acc:	440b      	add	r3, r1
 8018ace:	3310      	adds	r3, #16
 8018ad0:	6819      	ldr	r1, [r3, #0]
 8018ad2:	4811      	ldr	r0, [pc, #68]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 8018ad4:	68fa      	ldr	r2, [r7, #12]
 8018ad6:	4613      	mov	r3, r2
 8018ad8:	009b      	lsls	r3, r3, #2
 8018ada:	4413      	add	r3, r2
 8018adc:	009b      	lsls	r3, r3, #2
 8018ade:	4403      	add	r3, r0
 8018ae0:	3310      	adds	r3, #16
 8018ae2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8018ae4:	4b0b      	ldr	r3, [pc, #44]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	1e5a      	subs	r2, r3, #1
 8018aea:	4613      	mov	r3, r2
 8018aec:	009b      	lsls	r3, r3, #2
 8018aee:	4413      	add	r3, r2
 8018af0:	009b      	lsls	r3, r3, #2
 8018af2:	4a09      	ldr	r2, [pc, #36]	; (8018b18 <SYSVIEW_DeleteTask+0x174>)
 8018af4:	4413      	add	r3, r2
 8018af6:	2214      	movs	r2, #20
 8018af8:	2100      	movs	r1, #0
 8018afa:	4618      	mov	r0, r3
 8018afc:	f001 fcbc 	bl	801a478 <memset>
    _NumTasks--;
 8018b00:	4b04      	ldr	r3, [pc, #16]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	3b01      	subs	r3, #1
 8018b06:	4a03      	ldr	r2, [pc, #12]	; (8018b14 <SYSVIEW_DeleteTask+0x170>)
 8018b08:	6013      	str	r3, [r2, #0]
 8018b0a:	e000      	b.n	8018b0e <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8018b0c:	bf00      	nop
  }
}
 8018b0e:	3710      	adds	r7, #16
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}
 8018b14:	2000cb48 	.word	0x2000cb48
 8018b18:	2000caa8 	.word	0x2000caa8

08018b1c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8018b1c:	b580      	push	{r7, lr}
 8018b1e:	b08a      	sub	sp, #40	; 0x28
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	60f8      	str	r0, [r7, #12]
 8018b24:	60b9      	str	r1, [r7, #8]
 8018b26:	607a      	str	r2, [r7, #4]
 8018b28:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8018b2a:	f107 0314 	add.w	r3, r7, #20
 8018b2e:	2214      	movs	r2, #20
 8018b30:	2100      	movs	r1, #0
 8018b32:	4618      	mov	r0, r3
 8018b34:	f001 fca0 	bl	801a478 <memset>
  TaskInfo.TaskID     = TaskID;
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8018b3c:	68bb      	ldr	r3, [r7, #8]
 8018b3e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8018b44:	683b      	ldr	r3, [r7, #0]
 8018b46:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8018b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b4a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8018b4c:	f107 0314 	add.w	r3, r7, #20
 8018b50:	4618      	mov	r0, r3
 8018b52:	f001 f86b 	bl	8019c2c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8018b56:	bf00      	nop
 8018b58:	3728      	adds	r7, #40	; 0x28
 8018b5a:	46bd      	mov	sp, r7
 8018b5c:	bd80      	pop	{r7, pc}
	...

08018b60 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8018b60:	b480      	push	{r7}
 8018b62:	b083      	sub	sp, #12
 8018b64:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8018b66:	4b21      	ldr	r3, [pc, #132]	; (8018bec <_DoInit+0x8c>)
 8018b68:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	2203      	movs	r2, #3
 8018b6e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	2203      	movs	r2, #3
 8018b74:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	4a1d      	ldr	r2, [pc, #116]	; (8018bf0 <_DoInit+0x90>)
 8018b7a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	4a1d      	ldr	r2, [pc, #116]	; (8018bf4 <_DoInit+0x94>)
 8018b80:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018b88:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	2200      	movs	r2, #0
 8018b94:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	2200      	movs	r2, #0
 8018b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	4a14      	ldr	r2, [pc, #80]	; (8018bf0 <_DoInit+0x90>)
 8018ba0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	4a14      	ldr	r2, [pc, #80]	; (8018bf8 <_DoInit+0x98>)
 8018ba6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	2210      	movs	r2, #16
 8018bac:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	2200      	movs	r2, #0
 8018bb2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	2200      	movs	r2, #0
 8018bbe:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	3307      	adds	r3, #7
 8018bc4:	4a0d      	ldr	r2, [pc, #52]	; (8018bfc <_DoInit+0x9c>)
 8018bc6:	6810      	ldr	r0, [r2, #0]
 8018bc8:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	4a0c      	ldr	r2, [pc, #48]	; (8018c00 <_DoInit+0xa0>)
 8018bce:	6810      	ldr	r0, [r2, #0]
 8018bd0:	6018      	str	r0, [r3, #0]
 8018bd2:	8891      	ldrh	r1, [r2, #4]
 8018bd4:	7992      	ldrb	r2, [r2, #6]
 8018bd6:	8099      	strh	r1, [r3, #4]
 8018bd8:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	2220      	movs	r2, #32
 8018bde:	719a      	strb	r2, [r3, #6]
}
 8018be0:	bf00      	nop
 8018be2:	370c      	adds	r7, #12
 8018be4:	46bd      	mov	sp, r7
 8018be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bea:	4770      	bx	lr
 8018bec:	20016448 	.word	0x20016448
 8018bf0:	0801ff8c 	.word	0x0801ff8c
 8018bf4:	2000cb4c 	.word	0x2000cb4c
 8018bf8:	2000cf4c 	.word	0x2000cf4c
 8018bfc:	0801ff98 	.word	0x0801ff98
 8018c00:	0801ff9c 	.word	0x0801ff9c

08018c04 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b08a      	sub	sp, #40	; 0x28
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	60f8      	str	r0, [r7, #12]
 8018c0c:	60b9      	str	r1, [r7, #8]
 8018c0e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8018c10:	4b3c      	ldr	r3, [pc, #240]	; (8018d04 <SEGGER_RTT_ReadNoLock+0x100>)
 8018c12:	781b      	ldrb	r3, [r3, #0]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d101      	bne.n	8018c1c <SEGGER_RTT_ReadNoLock+0x18>
 8018c18:	f7ff ffa2 	bl	8018b60 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8018c1c:	68fa      	ldr	r2, [r7, #12]
 8018c1e:	4613      	mov	r3, r2
 8018c20:	005b      	lsls	r3, r3, #1
 8018c22:	4413      	add	r3, r2
 8018c24:	00db      	lsls	r3, r3, #3
 8018c26:	3360      	adds	r3, #96	; 0x60
 8018c28:	4a36      	ldr	r2, [pc, #216]	; (8018d04 <SEGGER_RTT_ReadNoLock+0x100>)
 8018c2a:	4413      	add	r3, r2
 8018c2c:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8018c32:	69bb      	ldr	r3, [r7, #24]
 8018c34:	691b      	ldr	r3, [r3, #16]
 8018c36:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8018c38:	69bb      	ldr	r3, [r7, #24]
 8018c3a:	68db      	ldr	r3, [r3, #12]
 8018c3c:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8018c3e:	2300      	movs	r3, #0
 8018c40:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8018c42:	6a3a      	ldr	r2, [r7, #32]
 8018c44:	697b      	ldr	r3, [r7, #20]
 8018c46:	429a      	cmp	r2, r3
 8018c48:	d92a      	bls.n	8018ca0 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8018c4a:	69bb      	ldr	r3, [r7, #24]
 8018c4c:	689a      	ldr	r2, [r3, #8]
 8018c4e:	6a3b      	ldr	r3, [r7, #32]
 8018c50:	1ad3      	subs	r3, r2, r3
 8018c52:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8018c54:	693a      	ldr	r2, [r7, #16]
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	4293      	cmp	r3, r2
 8018c5a:	bf28      	it	cs
 8018c5c:	4613      	movcs	r3, r2
 8018c5e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8018c60:	69bb      	ldr	r3, [r7, #24]
 8018c62:	685a      	ldr	r2, [r3, #4]
 8018c64:	6a3b      	ldr	r3, [r7, #32]
 8018c66:	4413      	add	r3, r2
 8018c68:	693a      	ldr	r2, [r7, #16]
 8018c6a:	4619      	mov	r1, r3
 8018c6c:	69f8      	ldr	r0, [r7, #28]
 8018c6e:	f001 fbf8 	bl	801a462 <memcpy>
    NumBytesRead += NumBytesRem;
 8018c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c74:	693b      	ldr	r3, [r7, #16]
 8018c76:	4413      	add	r3, r2
 8018c78:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8018c7a:	69fa      	ldr	r2, [r7, #28]
 8018c7c:	693b      	ldr	r3, [r7, #16]
 8018c7e:	4413      	add	r3, r2
 8018c80:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8018c82:	687a      	ldr	r2, [r7, #4]
 8018c84:	693b      	ldr	r3, [r7, #16]
 8018c86:	1ad3      	subs	r3, r2, r3
 8018c88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8018c8a:	6a3a      	ldr	r2, [r7, #32]
 8018c8c:	693b      	ldr	r3, [r7, #16]
 8018c8e:	4413      	add	r3, r2
 8018c90:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8018c92:	69bb      	ldr	r3, [r7, #24]
 8018c94:	689b      	ldr	r3, [r3, #8]
 8018c96:	6a3a      	ldr	r2, [r7, #32]
 8018c98:	429a      	cmp	r2, r3
 8018c9a:	d101      	bne.n	8018ca0 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8018ca0:	697a      	ldr	r2, [r7, #20]
 8018ca2:	6a3b      	ldr	r3, [r7, #32]
 8018ca4:	1ad3      	subs	r3, r2, r3
 8018ca6:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8018ca8:	693a      	ldr	r2, [r7, #16]
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	4293      	cmp	r3, r2
 8018cae:	bf28      	it	cs
 8018cb0:	4613      	movcs	r3, r2
 8018cb2:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8018cb4:	693b      	ldr	r3, [r7, #16]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d018      	beq.n	8018cec <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8018cba:	69bb      	ldr	r3, [r7, #24]
 8018cbc:	685a      	ldr	r2, [r3, #4]
 8018cbe:	6a3b      	ldr	r3, [r7, #32]
 8018cc0:	4413      	add	r3, r2
 8018cc2:	693a      	ldr	r2, [r7, #16]
 8018cc4:	4619      	mov	r1, r3
 8018cc6:	69f8      	ldr	r0, [r7, #28]
 8018cc8:	f001 fbcb 	bl	801a462 <memcpy>
    NumBytesRead += NumBytesRem;
 8018ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018cce:	693b      	ldr	r3, [r7, #16]
 8018cd0:	4413      	add	r3, r2
 8018cd2:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8018cd4:	69fa      	ldr	r2, [r7, #28]
 8018cd6:	693b      	ldr	r3, [r7, #16]
 8018cd8:	4413      	add	r3, r2
 8018cda:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8018cdc:	687a      	ldr	r2, [r7, #4]
 8018cde:	693b      	ldr	r3, [r7, #16]
 8018ce0:	1ad3      	subs	r3, r2, r3
 8018ce2:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8018ce4:	6a3a      	ldr	r2, [r7, #32]
 8018ce6:	693b      	ldr	r3, [r7, #16]
 8018ce8:	4413      	add	r3, r2
 8018cea:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8018cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d002      	beq.n	8018cf8 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8018cf2:	69bb      	ldr	r3, [r7, #24]
 8018cf4:	6a3a      	ldr	r2, [r7, #32]
 8018cf6:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8018cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	3728      	adds	r7, #40	; 0x28
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	bd80      	pop	{r7, pc}
 8018d02:	bf00      	nop
 8018d04:	20016448 	.word	0x20016448

08018d08 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b08a      	sub	sp, #40	; 0x28
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	60f8      	str	r0, [r7, #12]
 8018d10:	60b9      	str	r1, [r7, #8]
 8018d12:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8018d14:	68bb      	ldr	r3, [r7, #8]
 8018d16:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	1c5a      	adds	r2, r3, #1
 8018d1c:	4613      	mov	r3, r2
 8018d1e:	005b      	lsls	r3, r3, #1
 8018d20:	4413      	add	r3, r2
 8018d22:	00db      	lsls	r3, r3, #3
 8018d24:	4a3f      	ldr	r2, [pc, #252]	; (8018e24 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8018d26:	4413      	add	r3, r2
 8018d28:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8018d2a:	6a3b      	ldr	r3, [r7, #32]
 8018d2c:	691b      	ldr	r3, [r3, #16]
 8018d2e:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8018d30:	6a3b      	ldr	r3, [r7, #32]
 8018d32:	68db      	ldr	r3, [r3, #12]
 8018d34:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8018d36:	69fa      	ldr	r2, [r7, #28]
 8018d38:	69bb      	ldr	r3, [r7, #24]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d854      	bhi.n	8018de8 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8018d3e:	6a3b      	ldr	r3, [r7, #32]
 8018d40:	689a      	ldr	r2, [r3, #8]
 8018d42:	69bb      	ldr	r3, [r7, #24]
 8018d44:	1ad3      	subs	r3, r2, r3
 8018d46:	3b01      	subs	r3, #1
 8018d48:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8018d4a:	697a      	ldr	r2, [r7, #20]
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	429a      	cmp	r2, r3
 8018d50:	d30f      	bcc.n	8018d72 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8018d52:	6a3b      	ldr	r3, [r7, #32]
 8018d54:	685a      	ldr	r2, [r3, #4]
 8018d56:	69bb      	ldr	r3, [r7, #24]
 8018d58:	4413      	add	r3, r2
 8018d5a:	687a      	ldr	r2, [r7, #4]
 8018d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018d5e:	4618      	mov	r0, r3
 8018d60:	f001 fb7f 	bl	801a462 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8018d64:	69ba      	ldr	r2, [r7, #24]
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	441a      	add	r2, r3
 8018d6a:	6a3b      	ldr	r3, [r7, #32]
 8018d6c:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8018d6e:	2301      	movs	r3, #1
 8018d70:	e054      	b.n	8018e1c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8018d72:	697a      	ldr	r2, [r7, #20]
 8018d74:	69fb      	ldr	r3, [r7, #28]
 8018d76:	4413      	add	r3, r2
 8018d78:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8018d7a:	697a      	ldr	r2, [r7, #20]
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	429a      	cmp	r2, r3
 8018d80:	d34b      	bcc.n	8018e1a <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8018d82:	6a3b      	ldr	r3, [r7, #32]
 8018d84:	689a      	ldr	r2, [r3, #8]
 8018d86:	69bb      	ldr	r3, [r7, #24]
 8018d88:	1ad3      	subs	r3, r2, r3
 8018d8a:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8018d8c:	693a      	ldr	r2, [r7, #16]
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	429a      	cmp	r2, r3
 8018d92:	d90e      	bls.n	8018db2 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8018d94:	6a3b      	ldr	r3, [r7, #32]
 8018d96:	685a      	ldr	r2, [r3, #4]
 8018d98:	69bb      	ldr	r3, [r7, #24]
 8018d9a:	4413      	add	r3, r2
 8018d9c:	687a      	ldr	r2, [r7, #4]
 8018d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018da0:	4618      	mov	r0, r3
 8018da2:	f001 fb5e 	bl	801a462 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8018da6:	69ba      	ldr	r2, [r7, #24]
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	441a      	add	r2, r3
 8018dac:	6a3b      	ldr	r3, [r7, #32]
 8018dae:	60da      	str	r2, [r3, #12]
 8018db0:	e018      	b.n	8018de4 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8018db2:	6a3b      	ldr	r3, [r7, #32]
 8018db4:	685a      	ldr	r2, [r3, #4]
 8018db6:	69bb      	ldr	r3, [r7, #24]
 8018db8:	4413      	add	r3, r2
 8018dba:	693a      	ldr	r2, [r7, #16]
 8018dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	f001 fb4f 	bl	801a462 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8018dc4:	6a3b      	ldr	r3, [r7, #32]
 8018dc6:	6858      	ldr	r0, [r3, #4]
 8018dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018dca:	693b      	ldr	r3, [r7, #16]
 8018dcc:	18d1      	adds	r1, r2, r3
 8018dce:	687a      	ldr	r2, [r7, #4]
 8018dd0:	693b      	ldr	r3, [r7, #16]
 8018dd2:	1ad3      	subs	r3, r2, r3
 8018dd4:	461a      	mov	r2, r3
 8018dd6:	f001 fb44 	bl	801a462 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8018dda:	687a      	ldr	r2, [r7, #4]
 8018ddc:	693b      	ldr	r3, [r7, #16]
 8018dde:	1ad2      	subs	r2, r2, r3
 8018de0:	6a3b      	ldr	r3, [r7, #32]
 8018de2:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8018de4:	2301      	movs	r3, #1
 8018de6:	e019      	b.n	8018e1c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8018de8:	69fa      	ldr	r2, [r7, #28]
 8018dea:	69bb      	ldr	r3, [r7, #24]
 8018dec:	1ad3      	subs	r3, r2, r3
 8018dee:	3b01      	subs	r3, #1
 8018df0:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8018df2:	697a      	ldr	r2, [r7, #20]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	429a      	cmp	r2, r3
 8018df8:	d30f      	bcc.n	8018e1a <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8018dfa:	6a3b      	ldr	r3, [r7, #32]
 8018dfc:	685a      	ldr	r2, [r3, #4]
 8018dfe:	69bb      	ldr	r3, [r7, #24]
 8018e00:	4413      	add	r3, r2
 8018e02:	687a      	ldr	r2, [r7, #4]
 8018e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018e06:	4618      	mov	r0, r3
 8018e08:	f001 fb2b 	bl	801a462 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8018e0c:	69ba      	ldr	r2, [r7, #24]
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	441a      	add	r2, r3
 8018e12:	6a3b      	ldr	r3, [r7, #32]
 8018e14:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8018e16:	2301      	movs	r3, #1
 8018e18:	e000      	b.n	8018e1c <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8018e1a:	2300      	movs	r3, #0
}
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	3728      	adds	r7, #40	; 0x28
 8018e20:	46bd      	mov	sp, r7
 8018e22:	bd80      	pop	{r7, pc}
 8018e24:	20016448 	.word	0x20016448

08018e28 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b086      	sub	sp, #24
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	60f8      	str	r0, [r7, #12]
 8018e30:	60b9      	str	r1, [r7, #8]
 8018e32:	607a      	str	r2, [r7, #4]
 8018e34:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8018e36:	4b30      	ldr	r3, [pc, #192]	; (8018ef8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8018e38:	781b      	ldrb	r3, [r3, #0]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d101      	bne.n	8018e42 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8018e3e:	f7ff fe8f 	bl	8018b60 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8018e42:	4b2d      	ldr	r3, [pc, #180]	; (8018ef8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8018e44:	691b      	ldr	r3, [r3, #16]
 8018e46:	461a      	mov	r2, r3
 8018e48:	68fb      	ldr	r3, [r7, #12]
 8018e4a:	4293      	cmp	r3, r2
 8018e4c:	d24c      	bcs.n	8018ee8 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8018e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8018e52:	f04f 0120 	mov.w	r1, #32
 8018e56:	f381 8811 	msr	BASEPRI, r1
 8018e5a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d032      	beq.n	8018ec8 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8018e62:	4925      	ldr	r1, [pc, #148]	; (8018ef8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	1c5a      	adds	r2, r3, #1
 8018e68:	4613      	mov	r3, r2
 8018e6a:	005b      	lsls	r3, r3, #1
 8018e6c:	4413      	add	r3, r2
 8018e6e:	00db      	lsls	r3, r3, #3
 8018e70:	440b      	add	r3, r1
 8018e72:	68ba      	ldr	r2, [r7, #8]
 8018e74:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8018e76:	4920      	ldr	r1, [pc, #128]	; (8018ef8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	1c5a      	adds	r2, r3, #1
 8018e7c:	4613      	mov	r3, r2
 8018e7e:	005b      	lsls	r3, r3, #1
 8018e80:	4413      	add	r3, r2
 8018e82:	00db      	lsls	r3, r3, #3
 8018e84:	440b      	add	r3, r1
 8018e86:	3304      	adds	r3, #4
 8018e88:	687a      	ldr	r2, [r7, #4]
 8018e8a:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8018e8c:	491a      	ldr	r1, [pc, #104]	; (8018ef8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8018e8e:	68fa      	ldr	r2, [r7, #12]
 8018e90:	4613      	mov	r3, r2
 8018e92:	005b      	lsls	r3, r3, #1
 8018e94:	4413      	add	r3, r2
 8018e96:	00db      	lsls	r3, r3, #3
 8018e98:	440b      	add	r3, r1
 8018e9a:	3320      	adds	r3, #32
 8018e9c:	683a      	ldr	r2, [r7, #0]
 8018e9e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8018ea0:	4915      	ldr	r1, [pc, #84]	; (8018ef8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8018ea2:	68fa      	ldr	r2, [r7, #12]
 8018ea4:	4613      	mov	r3, r2
 8018ea6:	005b      	lsls	r3, r3, #1
 8018ea8:	4413      	add	r3, r2
 8018eaa:	00db      	lsls	r3, r3, #3
 8018eac:	440b      	add	r3, r1
 8018eae:	3328      	adds	r3, #40	; 0x28
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8018eb4:	4910      	ldr	r1, [pc, #64]	; (8018ef8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8018eb6:	68fa      	ldr	r2, [r7, #12]
 8018eb8:	4613      	mov	r3, r2
 8018eba:	005b      	lsls	r3, r3, #1
 8018ebc:	4413      	add	r3, r2
 8018ebe:	00db      	lsls	r3, r3, #3
 8018ec0:	440b      	add	r3, r1
 8018ec2:	3324      	adds	r3, #36	; 0x24
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8018ec8:	490b      	ldr	r1, [pc, #44]	; (8018ef8 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8018eca:	68fa      	ldr	r2, [r7, #12]
 8018ecc:	4613      	mov	r3, r2
 8018ece:	005b      	lsls	r3, r3, #1
 8018ed0:	4413      	add	r3, r2
 8018ed2:	00db      	lsls	r3, r3, #3
 8018ed4:	440b      	add	r3, r1
 8018ed6:	332c      	adds	r3, #44	; 0x2c
 8018ed8:	6a3a      	ldr	r2, [r7, #32]
 8018eda:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8018edc:	693b      	ldr	r3, [r7, #16]
 8018ede:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	617b      	str	r3, [r7, #20]
 8018ee6:	e002      	b.n	8018eee <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8018ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8018eec:	617b      	str	r3, [r7, #20]
  }
  return r;
 8018eee:	697b      	ldr	r3, [r7, #20]
}
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	3718      	adds	r7, #24
 8018ef4:	46bd      	mov	sp, r7
 8018ef6:	bd80      	pop	{r7, pc}
 8018ef8:	20016448 	.word	0x20016448

08018efc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b086      	sub	sp, #24
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	60f8      	str	r0, [r7, #12]
 8018f04:	60b9      	str	r1, [r7, #8]
 8018f06:	607a      	str	r2, [r7, #4]
 8018f08:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8018f0a:	4b30      	ldr	r3, [pc, #192]	; (8018fcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8018f0c:	781b      	ldrb	r3, [r3, #0]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d101      	bne.n	8018f16 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8018f12:	f7ff fe25 	bl	8018b60 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8018f16:	4b2d      	ldr	r3, [pc, #180]	; (8018fcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8018f18:	695b      	ldr	r3, [r3, #20]
 8018f1a:	461a      	mov	r2, r3
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	4293      	cmp	r3, r2
 8018f20:	d24b      	bcs.n	8018fba <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8018f22:	f3ef 8311 	mrs	r3, BASEPRI
 8018f26:	f04f 0120 	mov.w	r1, #32
 8018f2a:	f381 8811 	msr	BASEPRI, r1
 8018f2e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8018f30:	68fb      	ldr	r3, [r7, #12]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d031      	beq.n	8018f9a <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8018f36:	4925      	ldr	r1, [pc, #148]	; (8018fcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8018f38:	68fa      	ldr	r2, [r7, #12]
 8018f3a:	4613      	mov	r3, r2
 8018f3c:	005b      	lsls	r3, r3, #1
 8018f3e:	4413      	add	r3, r2
 8018f40:	00db      	lsls	r3, r3, #3
 8018f42:	440b      	add	r3, r1
 8018f44:	3360      	adds	r3, #96	; 0x60
 8018f46:	68ba      	ldr	r2, [r7, #8]
 8018f48:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8018f4a:	4920      	ldr	r1, [pc, #128]	; (8018fcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8018f4c:	68fa      	ldr	r2, [r7, #12]
 8018f4e:	4613      	mov	r3, r2
 8018f50:	005b      	lsls	r3, r3, #1
 8018f52:	4413      	add	r3, r2
 8018f54:	00db      	lsls	r3, r3, #3
 8018f56:	440b      	add	r3, r1
 8018f58:	3364      	adds	r3, #100	; 0x64
 8018f5a:	687a      	ldr	r2, [r7, #4]
 8018f5c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8018f5e:	491b      	ldr	r1, [pc, #108]	; (8018fcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8018f60:	68fa      	ldr	r2, [r7, #12]
 8018f62:	4613      	mov	r3, r2
 8018f64:	005b      	lsls	r3, r3, #1
 8018f66:	4413      	add	r3, r2
 8018f68:	00db      	lsls	r3, r3, #3
 8018f6a:	440b      	add	r3, r1
 8018f6c:	3368      	adds	r3, #104	; 0x68
 8018f6e:	683a      	ldr	r2, [r7, #0]
 8018f70:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8018f72:	4916      	ldr	r1, [pc, #88]	; (8018fcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8018f74:	68fa      	ldr	r2, [r7, #12]
 8018f76:	4613      	mov	r3, r2
 8018f78:	005b      	lsls	r3, r3, #1
 8018f7a:	4413      	add	r3, r2
 8018f7c:	00db      	lsls	r3, r3, #3
 8018f7e:	440b      	add	r3, r1
 8018f80:	3370      	adds	r3, #112	; 0x70
 8018f82:	2200      	movs	r2, #0
 8018f84:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 8018f86:	4911      	ldr	r1, [pc, #68]	; (8018fcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8018f88:	68fa      	ldr	r2, [r7, #12]
 8018f8a:	4613      	mov	r3, r2
 8018f8c:	005b      	lsls	r3, r3, #1
 8018f8e:	4413      	add	r3, r2
 8018f90:	00db      	lsls	r3, r3, #3
 8018f92:	440b      	add	r3, r1
 8018f94:	336c      	adds	r3, #108	; 0x6c
 8018f96:	2200      	movs	r2, #0
 8018f98:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 8018f9a:	490c      	ldr	r1, [pc, #48]	; (8018fcc <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8018f9c:	68fa      	ldr	r2, [r7, #12]
 8018f9e:	4613      	mov	r3, r2
 8018fa0:	005b      	lsls	r3, r3, #1
 8018fa2:	4413      	add	r3, r2
 8018fa4:	00db      	lsls	r3, r3, #3
 8018fa6:	440b      	add	r3, r1
 8018fa8:	3374      	adds	r3, #116	; 0x74
 8018faa:	6a3a      	ldr	r2, [r7, #32]
 8018fac:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8018fae:	693b      	ldr	r3, [r7, #16]
 8018fb0:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	617b      	str	r3, [r7, #20]
 8018fb8:	e002      	b.n	8018fc0 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8018fba:	f04f 33ff 	mov.w	r3, #4294967295
 8018fbe:	617b      	str	r3, [r7, #20]
  }
  return r;
 8018fc0:	697b      	ldr	r3, [r7, #20]
}
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	3718      	adds	r7, #24
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	bd80      	pop	{r7, pc}
 8018fca:	bf00      	nop
 8018fcc:	20016448 	.word	0x20016448

08018fd0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8018fd0:	b480      	push	{r7}
 8018fd2:	b087      	sub	sp, #28
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	60f8      	str	r0, [r7, #12]
 8018fd8:	60b9      	str	r1, [r7, #8]
 8018fda:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8018fdc:	2300      	movs	r3, #0
 8018fde:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8018fe0:	e002      	b.n	8018fe8 <_EncodeStr+0x18>
    Len++;
 8018fe2:	693b      	ldr	r3, [r7, #16]
 8018fe4:	3301      	adds	r3, #1
 8018fe6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8018fe8:	68ba      	ldr	r2, [r7, #8]
 8018fea:	693b      	ldr	r3, [r7, #16]
 8018fec:	4413      	add	r3, r2
 8018fee:	781b      	ldrb	r3, [r3, #0]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d1f6      	bne.n	8018fe2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8018ff4:	693a      	ldr	r2, [r7, #16]
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	429a      	cmp	r2, r3
 8018ffa:	d901      	bls.n	8019000 <_EncodeStr+0x30>
    Len = Limit;
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8019000:	693b      	ldr	r3, [r7, #16]
 8019002:	2bfe      	cmp	r3, #254	; 0xfe
 8019004:	d806      	bhi.n	8019014 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	1c5a      	adds	r2, r3, #1
 801900a:	60fa      	str	r2, [r7, #12]
 801900c:	693a      	ldr	r2, [r7, #16]
 801900e:	b2d2      	uxtb	r2, r2
 8019010:	701a      	strb	r2, [r3, #0]
 8019012:	e011      	b.n	8019038 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	1c5a      	adds	r2, r3, #1
 8019018:	60fa      	str	r2, [r7, #12]
 801901a:	22ff      	movs	r2, #255	; 0xff
 801901c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	1c5a      	adds	r2, r3, #1
 8019022:	60fa      	str	r2, [r7, #12]
 8019024:	693a      	ldr	r2, [r7, #16]
 8019026:	b2d2      	uxtb	r2, r2
 8019028:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 801902a:	693b      	ldr	r3, [r7, #16]
 801902c:	0a19      	lsrs	r1, r3, #8
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	1c5a      	adds	r2, r3, #1
 8019032:	60fa      	str	r2, [r7, #12]
 8019034:	b2ca      	uxtb	r2, r1
 8019036:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8019038:	2300      	movs	r3, #0
 801903a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 801903c:	e00a      	b.n	8019054 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 801903e:	68ba      	ldr	r2, [r7, #8]
 8019040:	1c53      	adds	r3, r2, #1
 8019042:	60bb      	str	r3, [r7, #8]
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	1c59      	adds	r1, r3, #1
 8019048:	60f9      	str	r1, [r7, #12]
 801904a:	7812      	ldrb	r2, [r2, #0]
 801904c:	701a      	strb	r2, [r3, #0]
    n++;
 801904e:	697b      	ldr	r3, [r7, #20]
 8019050:	3301      	adds	r3, #1
 8019052:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8019054:	697a      	ldr	r2, [r7, #20]
 8019056:	693b      	ldr	r3, [r7, #16]
 8019058:	429a      	cmp	r2, r3
 801905a:	d3f0      	bcc.n	801903e <_EncodeStr+0x6e>
  }
  return pPayload;
 801905c:	68fb      	ldr	r3, [r7, #12]
}
 801905e:	4618      	mov	r0, r3
 8019060:	371c      	adds	r7, #28
 8019062:	46bd      	mov	sp, r7
 8019064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019068:	4770      	bx	lr

0801906a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 801906a:	b480      	push	{r7}
 801906c:	b083      	sub	sp, #12
 801906e:	af00      	add	r7, sp, #0
 8019070:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	3304      	adds	r3, #4
}
 8019076:	4618      	mov	r0, r3
 8019078:	370c      	adds	r7, #12
 801907a:	46bd      	mov	sp, r7
 801907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019080:	4770      	bx	lr

08019082 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8019082:	b580      	push	{r7, lr}
 8019084:	b082      	sub	sp, #8
 8019086:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8019088:	1cfb      	adds	r3, r7, #3
 801908a:	2201      	movs	r2, #1
 801908c:	4619      	mov	r1, r3
 801908e:	2001      	movs	r0, #1
 8019090:	f7ff fdb8 	bl	8018c04 <SEGGER_RTT_ReadNoLock>
 8019094:	4603      	mov	r3, r0
 8019096:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	2b00      	cmp	r3, #0
 801909c:	dd44      	ble.n	8019128 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 801909e:	78fb      	ldrb	r3, [r7, #3]
 80190a0:	2b04      	cmp	r3, #4
 80190a2:	d01a      	beq.n	80190da <_HandleIncomingPacket+0x58>
 80190a4:	2b04      	cmp	r3, #4
 80190a6:	dc06      	bgt.n	80190b6 <_HandleIncomingPacket+0x34>
 80190a8:	2b02      	cmp	r3, #2
 80190aa:	d010      	beq.n	80190ce <_HandleIncomingPacket+0x4c>
 80190ac:	2b02      	cmp	r3, #2
 80190ae:	dc11      	bgt.n	80190d4 <_HandleIncomingPacket+0x52>
 80190b0:	2b01      	cmp	r3, #1
 80190b2:	d009      	beq.n	80190c8 <_HandleIncomingPacket+0x46>
 80190b4:	e02d      	b.n	8019112 <_HandleIncomingPacket+0x90>
 80190b6:	2b06      	cmp	r3, #6
 80190b8:	d015      	beq.n	80190e6 <_HandleIncomingPacket+0x64>
 80190ba:	2b06      	cmp	r3, #6
 80190bc:	db10      	blt.n	80190e0 <_HandleIncomingPacket+0x5e>
 80190be:	2b07      	cmp	r3, #7
 80190c0:	d014      	beq.n	80190ec <_HandleIncomingPacket+0x6a>
 80190c2:	2b80      	cmp	r3, #128	; 0x80
 80190c4:	d015      	beq.n	80190f2 <_HandleIncomingPacket+0x70>
 80190c6:	e024      	b.n	8019112 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80190c8:	f000 fc34 	bl	8019934 <SEGGER_SYSVIEW_Start>
      break;
 80190cc:	e031      	b.n	8019132 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80190ce:	f000 fced 	bl	8019aac <SEGGER_SYSVIEW_Stop>
      break;
 80190d2:	e02e      	b.n	8019132 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80190d4:	f000 fec8 	bl	8019e68 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80190d8:	e02b      	b.n	8019132 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80190da:	f000 fe8d 	bl	8019df8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80190de:	e028      	b.n	8019132 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80190e0:	f000 fd0a 	bl	8019af8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80190e4:	e025      	b.n	8019132 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80190e6:	f001 f8e7 	bl	801a2b8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80190ea:	e022      	b.n	8019132 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80190ec:	f001 f8c6 	bl	801a27c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80190f0:	e01f      	b.n	8019132 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80190f2:	1cfb      	adds	r3, r7, #3
 80190f4:	2201      	movs	r2, #1
 80190f6:	4619      	mov	r1, r3
 80190f8:	2001      	movs	r0, #1
 80190fa:	f7ff fd83 	bl	8018c04 <SEGGER_RTT_ReadNoLock>
 80190fe:	4603      	mov	r3, r0
 8019100:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	2b00      	cmp	r3, #0
 8019106:	dd11      	ble.n	801912c <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8019108:	78fb      	ldrb	r3, [r7, #3]
 801910a:	4618      	mov	r0, r3
 801910c:	f001 f836 	bl	801a17c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8019110:	e00c      	b.n	801912c <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8019112:	78fb      	ldrb	r3, [r7, #3]
 8019114:	b25b      	sxtb	r3, r3
 8019116:	2b00      	cmp	r3, #0
 8019118:	da0a      	bge.n	8019130 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 801911a:	1cfb      	adds	r3, r7, #3
 801911c:	2201      	movs	r2, #1
 801911e:	4619      	mov	r1, r3
 8019120:	2001      	movs	r0, #1
 8019122:	f7ff fd6f 	bl	8018c04 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8019126:	e003      	b.n	8019130 <_HandleIncomingPacket+0xae>
    }
  }
 8019128:	bf00      	nop
 801912a:	e002      	b.n	8019132 <_HandleIncomingPacket+0xb0>
      break;
 801912c:	bf00      	nop
 801912e:	e000      	b.n	8019132 <_HandleIncomingPacket+0xb0>
      break;
 8019130:	bf00      	nop
}
 8019132:	bf00      	nop
 8019134:	3708      	adds	r7, #8
 8019136:	46bd      	mov	sp, r7
 8019138:	bd80      	pop	{r7, pc}
	...

0801913c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 801913c:	b580      	push	{r7, lr}
 801913e:	b08c      	sub	sp, #48	; 0x30
 8019140:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8019142:	2301      	movs	r3, #1
 8019144:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8019146:	1d3b      	adds	r3, r7, #4
 8019148:	3301      	adds	r3, #1
 801914a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 801914c:	69fb      	ldr	r3, [r7, #28]
 801914e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019150:	4b30      	ldr	r3, [pc, #192]	; (8019214 <_TrySendOverflowPacket+0xd8>)
 8019152:	695b      	ldr	r3, [r3, #20]
 8019154:	62bb      	str	r3, [r7, #40]	; 0x28
 8019156:	e00b      	b.n	8019170 <_TrySendOverflowPacket+0x34>
 8019158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801915a:	b2da      	uxtb	r2, r3
 801915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801915e:	1c59      	adds	r1, r3, #1
 8019160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019166:	b2d2      	uxtb	r2, r2
 8019168:	701a      	strb	r2, [r3, #0]
 801916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801916c:	09db      	lsrs	r3, r3, #7
 801916e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019172:	2b7f      	cmp	r3, #127	; 0x7f
 8019174:	d8f0      	bhi.n	8019158 <_TrySendOverflowPacket+0x1c>
 8019176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019178:	1c5a      	adds	r2, r3, #1
 801917a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801917c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801917e:	b2d2      	uxtb	r2, r2
 8019180:	701a      	strb	r2, [r3, #0]
 8019182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019184:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8019186:	4b24      	ldr	r3, [pc, #144]	; (8019218 <_TrySendOverflowPacket+0xdc>)
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 801918c:	4b21      	ldr	r3, [pc, #132]	; (8019214 <_TrySendOverflowPacket+0xd8>)
 801918e:	68db      	ldr	r3, [r3, #12]
 8019190:	69ba      	ldr	r2, [r7, #24]
 8019192:	1ad3      	subs	r3, r2, r3
 8019194:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8019196:	69fb      	ldr	r3, [r7, #28]
 8019198:	627b      	str	r3, [r7, #36]	; 0x24
 801919a:	697b      	ldr	r3, [r7, #20]
 801919c:	623b      	str	r3, [r7, #32]
 801919e:	e00b      	b.n	80191b8 <_TrySendOverflowPacket+0x7c>
 80191a0:	6a3b      	ldr	r3, [r7, #32]
 80191a2:	b2da      	uxtb	r2, r3
 80191a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191a6:	1c59      	adds	r1, r3, #1
 80191a8:	6279      	str	r1, [r7, #36]	; 0x24
 80191aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80191ae:	b2d2      	uxtb	r2, r2
 80191b0:	701a      	strb	r2, [r3, #0]
 80191b2:	6a3b      	ldr	r3, [r7, #32]
 80191b4:	09db      	lsrs	r3, r3, #7
 80191b6:	623b      	str	r3, [r7, #32]
 80191b8:	6a3b      	ldr	r3, [r7, #32]
 80191ba:	2b7f      	cmp	r3, #127	; 0x7f
 80191bc:	d8f0      	bhi.n	80191a0 <_TrySendOverflowPacket+0x64>
 80191be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191c0:	1c5a      	adds	r2, r3, #1
 80191c2:	627a      	str	r2, [r7, #36]	; 0x24
 80191c4:	6a3a      	ldr	r2, [r7, #32]
 80191c6:	b2d2      	uxtb	r2, r2
 80191c8:	701a      	strb	r2, [r3, #0]
 80191ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80191ce:	69fa      	ldr	r2, [r7, #28]
 80191d0:	1d3b      	adds	r3, r7, #4
 80191d2:	1ad3      	subs	r3, r2, r3
 80191d4:	461a      	mov	r2, r3
 80191d6:	1d3b      	adds	r3, r7, #4
 80191d8:	4619      	mov	r1, r3
 80191da:	2001      	movs	r0, #1
 80191dc:	f7ff fd94 	bl	8018d08 <SEGGER_RTT_WriteSkipNoLock>
 80191e0:	4603      	mov	r3, r0
 80191e2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80191e4:	693b      	ldr	r3, [r7, #16]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d009      	beq.n	80191fe <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80191ea:	4a0a      	ldr	r2, [pc, #40]	; (8019214 <_TrySendOverflowPacket+0xd8>)
 80191ec:	69bb      	ldr	r3, [r7, #24]
 80191ee:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80191f0:	4b08      	ldr	r3, [pc, #32]	; (8019214 <_TrySendOverflowPacket+0xd8>)
 80191f2:	781b      	ldrb	r3, [r3, #0]
 80191f4:	3b01      	subs	r3, #1
 80191f6:	b2da      	uxtb	r2, r3
 80191f8:	4b06      	ldr	r3, [pc, #24]	; (8019214 <_TrySendOverflowPacket+0xd8>)
 80191fa:	701a      	strb	r2, [r3, #0]
 80191fc:	e004      	b.n	8019208 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80191fe:	4b05      	ldr	r3, [pc, #20]	; (8019214 <_TrySendOverflowPacket+0xd8>)
 8019200:	695b      	ldr	r3, [r3, #20]
 8019202:	3301      	adds	r3, #1
 8019204:	4a03      	ldr	r2, [pc, #12]	; (8019214 <_TrySendOverflowPacket+0xd8>)
 8019206:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8019208:	693b      	ldr	r3, [r7, #16]
}
 801920a:	4618      	mov	r0, r3
 801920c:	3730      	adds	r7, #48	; 0x30
 801920e:	46bd      	mov	sp, r7
 8019210:	bd80      	pop	{r7, pc}
 8019212:	bf00      	nop
 8019214:	2000ef64 	.word	0x2000ef64
 8019218:	e0001004 	.word	0xe0001004

0801921c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 801921c:	b580      	push	{r7, lr}
 801921e:	b08a      	sub	sp, #40	; 0x28
 8019220:	af00      	add	r7, sp, #0
 8019222:	60f8      	str	r0, [r7, #12]
 8019224:	60b9      	str	r1, [r7, #8]
 8019226:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8019228:	4b63      	ldr	r3, [pc, #396]	; (80193b8 <_SendPacket+0x19c>)
 801922a:	781b      	ldrb	r3, [r3, #0]
 801922c:	2b01      	cmp	r3, #1
 801922e:	d010      	beq.n	8019252 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8019230:	4b61      	ldr	r3, [pc, #388]	; (80193b8 <_SendPacket+0x19c>)
 8019232:	781b      	ldrb	r3, [r3, #0]
 8019234:	2b00      	cmp	r3, #0
 8019236:	f000 80a1 	beq.w	801937c <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 801923a:	4b5f      	ldr	r3, [pc, #380]	; (80193b8 <_SendPacket+0x19c>)
 801923c:	781b      	ldrb	r3, [r3, #0]
 801923e:	2b02      	cmp	r3, #2
 8019240:	d109      	bne.n	8019256 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8019242:	f7ff ff7b 	bl	801913c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8019246:	4b5c      	ldr	r3, [pc, #368]	; (80193b8 <_SendPacket+0x19c>)
 8019248:	781b      	ldrb	r3, [r3, #0]
 801924a:	2b01      	cmp	r3, #1
 801924c:	f040 8098 	bne.w	8019380 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8019250:	e001      	b.n	8019256 <_SendPacket+0x3a>
    goto Send;
 8019252:	bf00      	nop
 8019254:	e000      	b.n	8019258 <_SendPacket+0x3c>
Send:
 8019256:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	2b1f      	cmp	r3, #31
 801925c:	d809      	bhi.n	8019272 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 801925e:	4b56      	ldr	r3, [pc, #344]	; (80193b8 <_SendPacket+0x19c>)
 8019260:	69da      	ldr	r2, [r3, #28]
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	fa22 f303 	lsr.w	r3, r2, r3
 8019268:	f003 0301 	and.w	r3, r3, #1
 801926c:	2b00      	cmp	r3, #0
 801926e:	f040 8089 	bne.w	8019384 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	2b17      	cmp	r3, #23
 8019276:	d807      	bhi.n	8019288 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	3b01      	subs	r3, #1
 801927c:	60fb      	str	r3, [r7, #12]
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	b2da      	uxtb	r2, r3
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	701a      	strb	r2, [r3, #0]
 8019286:	e03d      	b.n	8019304 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8019288:	68ba      	ldr	r2, [r7, #8]
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	1ad3      	subs	r3, r2, r3
 801928e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8019290:	69fb      	ldr	r3, [r7, #28]
 8019292:	2b7f      	cmp	r3, #127	; 0x7f
 8019294:	d912      	bls.n	80192bc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8019296:	69fb      	ldr	r3, [r7, #28]
 8019298:	09da      	lsrs	r2, r3, #7
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	3b01      	subs	r3, #1
 801929e:	60fb      	str	r3, [r7, #12]
 80192a0:	b2d2      	uxtb	r2, r2
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80192a6:	69fb      	ldr	r3, [r7, #28]
 80192a8:	b2db      	uxtb	r3, r3
 80192aa:	68fa      	ldr	r2, [r7, #12]
 80192ac:	3a01      	subs	r2, #1
 80192ae:	60fa      	str	r2, [r7, #12]
 80192b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80192b4:	b2da      	uxtb	r2, r3
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	701a      	strb	r2, [r3, #0]
 80192ba:	e006      	b.n	80192ca <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	3b01      	subs	r3, #1
 80192c0:	60fb      	str	r3, [r7, #12]
 80192c2:	69fb      	ldr	r3, [r7, #28]
 80192c4:	b2da      	uxtb	r2, r3
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	2b7f      	cmp	r3, #127	; 0x7f
 80192ce:	d912      	bls.n	80192f6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	09da      	lsrs	r2, r3, #7
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	3b01      	subs	r3, #1
 80192d8:	60fb      	str	r3, [r7, #12]
 80192da:	b2d2      	uxtb	r2, r2
 80192dc:	68fb      	ldr	r3, [r7, #12]
 80192de:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	b2db      	uxtb	r3, r3
 80192e4:	68fa      	ldr	r2, [r7, #12]
 80192e6:	3a01      	subs	r2, #1
 80192e8:	60fa      	str	r2, [r7, #12]
 80192ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80192ee:	b2da      	uxtb	r2, r3
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	701a      	strb	r2, [r3, #0]
 80192f4:	e006      	b.n	8019304 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	3b01      	subs	r3, #1
 80192fa:	60fb      	str	r3, [r7, #12]
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	b2da      	uxtb	r2, r3
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8019304:	4b2d      	ldr	r3, [pc, #180]	; (80193bc <_SendPacket+0x1a0>)
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 801930a:	4b2b      	ldr	r3, [pc, #172]	; (80193b8 <_SendPacket+0x19c>)
 801930c:	68db      	ldr	r3, [r3, #12]
 801930e:	69ba      	ldr	r2, [r7, #24]
 8019310:	1ad3      	subs	r3, r2, r3
 8019312:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8019314:	68bb      	ldr	r3, [r7, #8]
 8019316:	627b      	str	r3, [r7, #36]	; 0x24
 8019318:	697b      	ldr	r3, [r7, #20]
 801931a:	623b      	str	r3, [r7, #32]
 801931c:	e00b      	b.n	8019336 <_SendPacket+0x11a>
 801931e:	6a3b      	ldr	r3, [r7, #32]
 8019320:	b2da      	uxtb	r2, r3
 8019322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019324:	1c59      	adds	r1, r3, #1
 8019326:	6279      	str	r1, [r7, #36]	; 0x24
 8019328:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801932c:	b2d2      	uxtb	r2, r2
 801932e:	701a      	strb	r2, [r3, #0]
 8019330:	6a3b      	ldr	r3, [r7, #32]
 8019332:	09db      	lsrs	r3, r3, #7
 8019334:	623b      	str	r3, [r7, #32]
 8019336:	6a3b      	ldr	r3, [r7, #32]
 8019338:	2b7f      	cmp	r3, #127	; 0x7f
 801933a:	d8f0      	bhi.n	801931e <_SendPacket+0x102>
 801933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801933e:	1c5a      	adds	r2, r3, #1
 8019340:	627a      	str	r2, [r7, #36]	; 0x24
 8019342:	6a3a      	ldr	r2, [r7, #32]
 8019344:	b2d2      	uxtb	r2, r2
 8019346:	701a      	strb	r2, [r3, #0]
 8019348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801934a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 801934c:	68ba      	ldr	r2, [r7, #8]
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	1ad3      	subs	r3, r2, r3
 8019352:	461a      	mov	r2, r3
 8019354:	68f9      	ldr	r1, [r7, #12]
 8019356:	2001      	movs	r0, #1
 8019358:	f7ff fcd6 	bl	8018d08 <SEGGER_RTT_WriteSkipNoLock>
 801935c:	4603      	mov	r3, r0
 801935e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8019360:	693b      	ldr	r3, [r7, #16]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d003      	beq.n	801936e <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8019366:	4a14      	ldr	r2, [pc, #80]	; (80193b8 <_SendPacket+0x19c>)
 8019368:	69bb      	ldr	r3, [r7, #24]
 801936a:	60d3      	str	r3, [r2, #12]
 801936c:	e00b      	b.n	8019386 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 801936e:	4b12      	ldr	r3, [pc, #72]	; (80193b8 <_SendPacket+0x19c>)
 8019370:	781b      	ldrb	r3, [r3, #0]
 8019372:	3301      	adds	r3, #1
 8019374:	b2da      	uxtb	r2, r3
 8019376:	4b10      	ldr	r3, [pc, #64]	; (80193b8 <_SendPacket+0x19c>)
 8019378:	701a      	strb	r2, [r3, #0]
 801937a:	e004      	b.n	8019386 <_SendPacket+0x16a>
    goto SendDone;
 801937c:	bf00      	nop
 801937e:	e002      	b.n	8019386 <_SendPacket+0x16a>
      goto SendDone;
 8019380:	bf00      	nop
 8019382:	e000      	b.n	8019386 <_SendPacket+0x16a>
      goto SendDone;
 8019384:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8019386:	4b0e      	ldr	r3, [pc, #56]	; (80193c0 <_SendPacket+0x1a4>)
 8019388:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801938c:	4b0c      	ldr	r3, [pc, #48]	; (80193c0 <_SendPacket+0x1a4>)
 801938e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019392:	429a      	cmp	r2, r3
 8019394:	d00b      	beq.n	80193ae <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8019396:	4b08      	ldr	r3, [pc, #32]	; (80193b8 <_SendPacket+0x19c>)
 8019398:	789b      	ldrb	r3, [r3, #2]
 801939a:	2b00      	cmp	r3, #0
 801939c:	d107      	bne.n	80193ae <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 801939e:	4b06      	ldr	r3, [pc, #24]	; (80193b8 <_SendPacket+0x19c>)
 80193a0:	2201      	movs	r2, #1
 80193a2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80193a4:	f7ff fe6d 	bl	8019082 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80193a8:	4b03      	ldr	r3, [pc, #12]	; (80193b8 <_SendPacket+0x19c>)
 80193aa:	2200      	movs	r2, #0
 80193ac:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80193ae:	bf00      	nop
 80193b0:	3728      	adds	r7, #40	; 0x28
 80193b2:	46bd      	mov	sp, r7
 80193b4:	bd80      	pop	{r7, pc}
 80193b6:	bf00      	nop
 80193b8:	2000ef64 	.word	0x2000ef64
 80193bc:	e0001004 	.word	0xe0001004
 80193c0:	20016448 	.word	0x20016448

080193c4 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b086      	sub	sp, #24
 80193c8:	af02      	add	r7, sp, #8
 80193ca:	60f8      	str	r0, [r7, #12]
 80193cc:	60b9      	str	r1, [r7, #8]
 80193ce:	607a      	str	r2, [r7, #4]
 80193d0:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80193d2:	2300      	movs	r3, #0
 80193d4:	9300      	str	r3, [sp, #0]
 80193d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80193da:	4a14      	ldr	r2, [pc, #80]	; (801942c <SEGGER_SYSVIEW_Init+0x68>)
 80193dc:	4914      	ldr	r1, [pc, #80]	; (8019430 <SEGGER_SYSVIEW_Init+0x6c>)
 80193de:	2001      	movs	r0, #1
 80193e0:	f7ff fd22 	bl	8018e28 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80193e4:	2300      	movs	r3, #0
 80193e6:	9300      	str	r3, [sp, #0]
 80193e8:	2308      	movs	r3, #8
 80193ea:	4a12      	ldr	r2, [pc, #72]	; (8019434 <SEGGER_SYSVIEW_Init+0x70>)
 80193ec:	4910      	ldr	r1, [pc, #64]	; (8019430 <SEGGER_SYSVIEW_Init+0x6c>)
 80193ee:	2001      	movs	r0, #1
 80193f0:	f7ff fd84 	bl	8018efc <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80193f4:	4b10      	ldr	r3, [pc, #64]	; (8019438 <SEGGER_SYSVIEW_Init+0x74>)
 80193f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193fa:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80193fc:	4b0f      	ldr	r3, [pc, #60]	; (801943c <SEGGER_SYSVIEW_Init+0x78>)
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	4a0d      	ldr	r2, [pc, #52]	; (8019438 <SEGGER_SYSVIEW_Init+0x74>)
 8019402:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8019404:	4a0c      	ldr	r2, [pc, #48]	; (8019438 <SEGGER_SYSVIEW_Init+0x74>)
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 801940a:	4a0b      	ldr	r2, [pc, #44]	; (8019438 <SEGGER_SYSVIEW_Init+0x74>)
 801940c:	68fb      	ldr	r3, [r7, #12]
 801940e:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8019410:	4a09      	ldr	r2, [pc, #36]	; (8019438 <SEGGER_SYSVIEW_Init+0x74>)
 8019412:	68bb      	ldr	r3, [r7, #8]
 8019414:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8019416:	4a08      	ldr	r2, [pc, #32]	; (8019438 <SEGGER_SYSVIEW_Init+0x74>)
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 801941c:	4b06      	ldr	r3, [pc, #24]	; (8019438 <SEGGER_SYSVIEW_Init+0x74>)
 801941e:	2200      	movs	r2, #0
 8019420:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8019422:	bf00      	nop
 8019424:	3710      	adds	r7, #16
 8019426:	46bd      	mov	sp, r7
 8019428:	bd80      	pop	{r7, pc}
 801942a:	bf00      	nop
 801942c:	2000cf5c 	.word	0x2000cf5c
 8019430:	0801ffa4 	.word	0x0801ffa4
 8019434:	2000ef5c 	.word	0x2000ef5c
 8019438:	2000ef64 	.word	0x2000ef64
 801943c:	e0001004 	.word	0xe0001004

08019440 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8019440:	b480      	push	{r7}
 8019442:	b083      	sub	sp, #12
 8019444:	af00      	add	r7, sp, #0
 8019446:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8019448:	4a04      	ldr	r2, [pc, #16]	; (801945c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	6113      	str	r3, [r2, #16]
}
 801944e:	bf00      	nop
 8019450:	370c      	adds	r7, #12
 8019452:	46bd      	mov	sp, r7
 8019454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019458:	4770      	bx	lr
 801945a:	bf00      	nop
 801945c:	2000ef64 	.word	0x2000ef64

08019460 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8019460:	b580      	push	{r7, lr}
 8019462:	b084      	sub	sp, #16
 8019464:	af00      	add	r7, sp, #0
 8019466:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8019468:	f3ef 8311 	mrs	r3, BASEPRI
 801946c:	f04f 0120 	mov.w	r1, #32
 8019470:	f381 8811 	msr	BASEPRI, r1
 8019474:	60fb      	str	r3, [r7, #12]
 8019476:	4808      	ldr	r0, [pc, #32]	; (8019498 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8019478:	f7ff fdf7 	bl	801906a <_PreparePacket>
 801947c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 801947e:	687a      	ldr	r2, [r7, #4]
 8019480:	68b9      	ldr	r1, [r7, #8]
 8019482:	68b8      	ldr	r0, [r7, #8]
 8019484:	f7ff feca 	bl	801921c <_SendPacket>
  RECORD_END();
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	f383 8811 	msr	BASEPRI, r3
}
 801948e:	bf00      	nop
 8019490:	3710      	adds	r7, #16
 8019492:	46bd      	mov	sp, r7
 8019494:	bd80      	pop	{r7, pc}
 8019496:	bf00      	nop
 8019498:	2000ef94 	.word	0x2000ef94

0801949c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 801949c:	b580      	push	{r7, lr}
 801949e:	b088      	sub	sp, #32
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
 80194a4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80194a6:	f3ef 8311 	mrs	r3, BASEPRI
 80194aa:	f04f 0120 	mov.w	r1, #32
 80194ae:	f381 8811 	msr	BASEPRI, r1
 80194b2:	617b      	str	r3, [r7, #20]
 80194b4:	4816      	ldr	r0, [pc, #88]	; (8019510 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80194b6:	f7ff fdd8 	bl	801906a <_PreparePacket>
 80194ba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80194bc:	693b      	ldr	r3, [r7, #16]
 80194be:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	61fb      	str	r3, [r7, #28]
 80194c4:	683b      	ldr	r3, [r7, #0]
 80194c6:	61bb      	str	r3, [r7, #24]
 80194c8:	e00b      	b.n	80194e2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80194ca:	69bb      	ldr	r3, [r7, #24]
 80194cc:	b2da      	uxtb	r2, r3
 80194ce:	69fb      	ldr	r3, [r7, #28]
 80194d0:	1c59      	adds	r1, r3, #1
 80194d2:	61f9      	str	r1, [r7, #28]
 80194d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80194d8:	b2d2      	uxtb	r2, r2
 80194da:	701a      	strb	r2, [r3, #0]
 80194dc:	69bb      	ldr	r3, [r7, #24]
 80194de:	09db      	lsrs	r3, r3, #7
 80194e0:	61bb      	str	r3, [r7, #24]
 80194e2:	69bb      	ldr	r3, [r7, #24]
 80194e4:	2b7f      	cmp	r3, #127	; 0x7f
 80194e6:	d8f0      	bhi.n	80194ca <SEGGER_SYSVIEW_RecordU32+0x2e>
 80194e8:	69fb      	ldr	r3, [r7, #28]
 80194ea:	1c5a      	adds	r2, r3, #1
 80194ec:	61fa      	str	r2, [r7, #28]
 80194ee:	69ba      	ldr	r2, [r7, #24]
 80194f0:	b2d2      	uxtb	r2, r2
 80194f2:	701a      	strb	r2, [r3, #0]
 80194f4:	69fb      	ldr	r3, [r7, #28]
 80194f6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80194f8:	687a      	ldr	r2, [r7, #4]
 80194fa:	68f9      	ldr	r1, [r7, #12]
 80194fc:	6938      	ldr	r0, [r7, #16]
 80194fe:	f7ff fe8d 	bl	801921c <_SendPacket>
  RECORD_END();
 8019502:	697b      	ldr	r3, [r7, #20]
 8019504:	f383 8811 	msr	BASEPRI, r3
}
 8019508:	bf00      	nop
 801950a:	3720      	adds	r7, #32
 801950c:	46bd      	mov	sp, r7
 801950e:	bd80      	pop	{r7, pc}
 8019510:	2000ef94 	.word	0x2000ef94

08019514 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8019514:	b580      	push	{r7, lr}
 8019516:	b08c      	sub	sp, #48	; 0x30
 8019518:	af00      	add	r7, sp, #0
 801951a:	60f8      	str	r0, [r7, #12]
 801951c:	60b9      	str	r1, [r7, #8]
 801951e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8019520:	f3ef 8311 	mrs	r3, BASEPRI
 8019524:	f04f 0120 	mov.w	r1, #32
 8019528:	f381 8811 	msr	BASEPRI, r1
 801952c:	61fb      	str	r3, [r7, #28]
 801952e:	4825      	ldr	r0, [pc, #148]	; (80195c4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8019530:	f7ff fd9b 	bl	801906a <_PreparePacket>
 8019534:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8019536:	69bb      	ldr	r3, [r7, #24]
 8019538:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 801953a:	697b      	ldr	r3, [r7, #20]
 801953c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801953e:	68bb      	ldr	r3, [r7, #8]
 8019540:	62bb      	str	r3, [r7, #40]	; 0x28
 8019542:	e00b      	b.n	801955c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8019544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019546:	b2da      	uxtb	r2, r3
 8019548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801954a:	1c59      	adds	r1, r3, #1
 801954c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801954e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019552:	b2d2      	uxtb	r2, r2
 8019554:	701a      	strb	r2, [r3, #0]
 8019556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019558:	09db      	lsrs	r3, r3, #7
 801955a:	62bb      	str	r3, [r7, #40]	; 0x28
 801955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801955e:	2b7f      	cmp	r3, #127	; 0x7f
 8019560:	d8f0      	bhi.n	8019544 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8019562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019564:	1c5a      	adds	r2, r3, #1
 8019566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801956a:	b2d2      	uxtb	r2, r2
 801956c:	701a      	strb	r2, [r3, #0]
 801956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019570:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8019572:	697b      	ldr	r3, [r7, #20]
 8019574:	627b      	str	r3, [r7, #36]	; 0x24
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	623b      	str	r3, [r7, #32]
 801957a:	e00b      	b.n	8019594 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 801957c:	6a3b      	ldr	r3, [r7, #32]
 801957e:	b2da      	uxtb	r2, r3
 8019580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019582:	1c59      	adds	r1, r3, #1
 8019584:	6279      	str	r1, [r7, #36]	; 0x24
 8019586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801958a:	b2d2      	uxtb	r2, r2
 801958c:	701a      	strb	r2, [r3, #0]
 801958e:	6a3b      	ldr	r3, [r7, #32]
 8019590:	09db      	lsrs	r3, r3, #7
 8019592:	623b      	str	r3, [r7, #32]
 8019594:	6a3b      	ldr	r3, [r7, #32]
 8019596:	2b7f      	cmp	r3, #127	; 0x7f
 8019598:	d8f0      	bhi.n	801957c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 801959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801959c:	1c5a      	adds	r2, r3, #1
 801959e:	627a      	str	r2, [r7, #36]	; 0x24
 80195a0:	6a3a      	ldr	r2, [r7, #32]
 80195a2:	b2d2      	uxtb	r2, r2
 80195a4:	701a      	strb	r2, [r3, #0]
 80195a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195a8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80195aa:	68fa      	ldr	r2, [r7, #12]
 80195ac:	6979      	ldr	r1, [r7, #20]
 80195ae:	69b8      	ldr	r0, [r7, #24]
 80195b0:	f7ff fe34 	bl	801921c <_SendPacket>
  RECORD_END();
 80195b4:	69fb      	ldr	r3, [r7, #28]
 80195b6:	f383 8811 	msr	BASEPRI, r3
}
 80195ba:	bf00      	nop
 80195bc:	3730      	adds	r7, #48	; 0x30
 80195be:	46bd      	mov	sp, r7
 80195c0:	bd80      	pop	{r7, pc}
 80195c2:	bf00      	nop
 80195c4:	2000ef94 	.word	0x2000ef94

080195c8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b08e      	sub	sp, #56	; 0x38
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	60f8      	str	r0, [r7, #12]
 80195d0:	60b9      	str	r1, [r7, #8]
 80195d2:	607a      	str	r2, [r7, #4]
 80195d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80195d6:	f3ef 8311 	mrs	r3, BASEPRI
 80195da:	f04f 0120 	mov.w	r1, #32
 80195de:	f381 8811 	msr	BASEPRI, r1
 80195e2:	61fb      	str	r3, [r7, #28]
 80195e4:	4832      	ldr	r0, [pc, #200]	; (80196b0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80195e6:	f7ff fd40 	bl	801906a <_PreparePacket>
 80195ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80195ec:	69bb      	ldr	r3, [r7, #24]
 80195ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	637b      	str	r3, [r7, #52]	; 0x34
 80195f4:	68bb      	ldr	r3, [r7, #8]
 80195f6:	633b      	str	r3, [r7, #48]	; 0x30
 80195f8:	e00b      	b.n	8019612 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80195fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195fc:	b2da      	uxtb	r2, r3
 80195fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019600:	1c59      	adds	r1, r3, #1
 8019602:	6379      	str	r1, [r7, #52]	; 0x34
 8019604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019608:	b2d2      	uxtb	r2, r2
 801960a:	701a      	strb	r2, [r3, #0]
 801960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801960e:	09db      	lsrs	r3, r3, #7
 8019610:	633b      	str	r3, [r7, #48]	; 0x30
 8019612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019614:	2b7f      	cmp	r3, #127	; 0x7f
 8019616:	d8f0      	bhi.n	80195fa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8019618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801961a:	1c5a      	adds	r2, r3, #1
 801961c:	637a      	str	r2, [r7, #52]	; 0x34
 801961e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019620:	b2d2      	uxtb	r2, r2
 8019622:	701a      	strb	r2, [r3, #0]
 8019624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019626:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8019628:	697b      	ldr	r3, [r7, #20]
 801962a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019630:	e00b      	b.n	801964a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8019632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019634:	b2da      	uxtb	r2, r3
 8019636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019638:	1c59      	adds	r1, r3, #1
 801963a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801963c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019640:	b2d2      	uxtb	r2, r2
 8019642:	701a      	strb	r2, [r3, #0]
 8019644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019646:	09db      	lsrs	r3, r3, #7
 8019648:	62bb      	str	r3, [r7, #40]	; 0x28
 801964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801964c:	2b7f      	cmp	r3, #127	; 0x7f
 801964e:	d8f0      	bhi.n	8019632 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8019650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019652:	1c5a      	adds	r2, r3, #1
 8019654:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019658:	b2d2      	uxtb	r2, r2
 801965a:	701a      	strb	r2, [r3, #0]
 801965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801965e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8019660:	697b      	ldr	r3, [r7, #20]
 8019662:	627b      	str	r3, [r7, #36]	; 0x24
 8019664:	683b      	ldr	r3, [r7, #0]
 8019666:	623b      	str	r3, [r7, #32]
 8019668:	e00b      	b.n	8019682 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 801966a:	6a3b      	ldr	r3, [r7, #32]
 801966c:	b2da      	uxtb	r2, r3
 801966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019670:	1c59      	adds	r1, r3, #1
 8019672:	6279      	str	r1, [r7, #36]	; 0x24
 8019674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019678:	b2d2      	uxtb	r2, r2
 801967a:	701a      	strb	r2, [r3, #0]
 801967c:	6a3b      	ldr	r3, [r7, #32]
 801967e:	09db      	lsrs	r3, r3, #7
 8019680:	623b      	str	r3, [r7, #32]
 8019682:	6a3b      	ldr	r3, [r7, #32]
 8019684:	2b7f      	cmp	r3, #127	; 0x7f
 8019686:	d8f0      	bhi.n	801966a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8019688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801968a:	1c5a      	adds	r2, r3, #1
 801968c:	627a      	str	r2, [r7, #36]	; 0x24
 801968e:	6a3a      	ldr	r2, [r7, #32]
 8019690:	b2d2      	uxtb	r2, r2
 8019692:	701a      	strb	r2, [r3, #0]
 8019694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019696:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8019698:	68fa      	ldr	r2, [r7, #12]
 801969a:	6979      	ldr	r1, [r7, #20]
 801969c:	69b8      	ldr	r0, [r7, #24]
 801969e:	f7ff fdbd 	bl	801921c <_SendPacket>
  RECORD_END();
 80196a2:	69fb      	ldr	r3, [r7, #28]
 80196a4:	f383 8811 	msr	BASEPRI, r3
}
 80196a8:	bf00      	nop
 80196aa:	3738      	adds	r7, #56	; 0x38
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bd80      	pop	{r7, pc}
 80196b0:	2000ef94 	.word	0x2000ef94

080196b4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b090      	sub	sp, #64	; 0x40
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	60f8      	str	r0, [r7, #12]
 80196bc:	60b9      	str	r1, [r7, #8]
 80196be:	607a      	str	r2, [r7, #4]
 80196c0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80196c2:	f3ef 8311 	mrs	r3, BASEPRI
 80196c6:	f04f 0120 	mov.w	r1, #32
 80196ca:	f381 8811 	msr	BASEPRI, r1
 80196ce:	61fb      	str	r3, [r7, #28]
 80196d0:	4840      	ldr	r0, [pc, #256]	; (80197d4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80196d2:	f7ff fcca 	bl	801906a <_PreparePacket>
 80196d6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80196d8:	69bb      	ldr	r3, [r7, #24]
 80196da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80196dc:	697b      	ldr	r3, [r7, #20]
 80196de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80196e0:	68bb      	ldr	r3, [r7, #8]
 80196e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80196e4:	e00b      	b.n	80196fe <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80196e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196e8:	b2da      	uxtb	r2, r3
 80196ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80196ec:	1c59      	adds	r1, r3, #1
 80196ee:	63f9      	str	r1, [r7, #60]	; 0x3c
 80196f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80196f4:	b2d2      	uxtb	r2, r2
 80196f6:	701a      	strb	r2, [r3, #0]
 80196f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196fa:	09db      	lsrs	r3, r3, #7
 80196fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80196fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019700:	2b7f      	cmp	r3, #127	; 0x7f
 8019702:	d8f0      	bhi.n	80196e6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8019704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019706:	1c5a      	adds	r2, r3, #1
 8019708:	63fa      	str	r2, [r7, #60]	; 0x3c
 801970a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801970c:	b2d2      	uxtb	r2, r2
 801970e:	701a      	strb	r2, [r3, #0]
 8019710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019712:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8019714:	697b      	ldr	r3, [r7, #20]
 8019716:	637b      	str	r3, [r7, #52]	; 0x34
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	633b      	str	r3, [r7, #48]	; 0x30
 801971c:	e00b      	b.n	8019736 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 801971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019720:	b2da      	uxtb	r2, r3
 8019722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019724:	1c59      	adds	r1, r3, #1
 8019726:	6379      	str	r1, [r7, #52]	; 0x34
 8019728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801972c:	b2d2      	uxtb	r2, r2
 801972e:	701a      	strb	r2, [r3, #0]
 8019730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019732:	09db      	lsrs	r3, r3, #7
 8019734:	633b      	str	r3, [r7, #48]	; 0x30
 8019736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019738:	2b7f      	cmp	r3, #127	; 0x7f
 801973a:	d8f0      	bhi.n	801971e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 801973c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801973e:	1c5a      	adds	r2, r3, #1
 8019740:	637a      	str	r2, [r7, #52]	; 0x34
 8019742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019744:	b2d2      	uxtb	r2, r2
 8019746:	701a      	strb	r2, [r3, #0]
 8019748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801974a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 801974c:	697b      	ldr	r3, [r7, #20]
 801974e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019750:	683b      	ldr	r3, [r7, #0]
 8019752:	62bb      	str	r3, [r7, #40]	; 0x28
 8019754:	e00b      	b.n	801976e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8019756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019758:	b2da      	uxtb	r2, r3
 801975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801975c:	1c59      	adds	r1, r3, #1
 801975e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019760:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019764:	b2d2      	uxtb	r2, r2
 8019766:	701a      	strb	r2, [r3, #0]
 8019768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801976a:	09db      	lsrs	r3, r3, #7
 801976c:	62bb      	str	r3, [r7, #40]	; 0x28
 801976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019770:	2b7f      	cmp	r3, #127	; 0x7f
 8019772:	d8f0      	bhi.n	8019756 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8019774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019776:	1c5a      	adds	r2, r3, #1
 8019778:	62fa      	str	r2, [r7, #44]	; 0x2c
 801977a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801977c:	b2d2      	uxtb	r2, r2
 801977e:	701a      	strb	r2, [r3, #0]
 8019780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019782:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8019784:	697b      	ldr	r3, [r7, #20]
 8019786:	627b      	str	r3, [r7, #36]	; 0x24
 8019788:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801978a:	623b      	str	r3, [r7, #32]
 801978c:	e00b      	b.n	80197a6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 801978e:	6a3b      	ldr	r3, [r7, #32]
 8019790:	b2da      	uxtb	r2, r3
 8019792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019794:	1c59      	adds	r1, r3, #1
 8019796:	6279      	str	r1, [r7, #36]	; 0x24
 8019798:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801979c:	b2d2      	uxtb	r2, r2
 801979e:	701a      	strb	r2, [r3, #0]
 80197a0:	6a3b      	ldr	r3, [r7, #32]
 80197a2:	09db      	lsrs	r3, r3, #7
 80197a4:	623b      	str	r3, [r7, #32]
 80197a6:	6a3b      	ldr	r3, [r7, #32]
 80197a8:	2b7f      	cmp	r3, #127	; 0x7f
 80197aa:	d8f0      	bhi.n	801978e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80197ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ae:	1c5a      	adds	r2, r3, #1
 80197b0:	627a      	str	r2, [r7, #36]	; 0x24
 80197b2:	6a3a      	ldr	r2, [r7, #32]
 80197b4:	b2d2      	uxtb	r2, r2
 80197b6:	701a      	strb	r2, [r3, #0]
 80197b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197ba:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80197bc:	68fa      	ldr	r2, [r7, #12]
 80197be:	6979      	ldr	r1, [r7, #20]
 80197c0:	69b8      	ldr	r0, [r7, #24]
 80197c2:	f7ff fd2b 	bl	801921c <_SendPacket>
  RECORD_END();
 80197c6:	69fb      	ldr	r3, [r7, #28]
 80197c8:	f383 8811 	msr	BASEPRI, r3
}
 80197cc:	bf00      	nop
 80197ce:	3740      	adds	r7, #64	; 0x40
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bd80      	pop	{r7, pc}
 80197d4:	2000ef94 	.word	0x2000ef94

080197d8 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 80197d8:	b580      	push	{r7, lr}
 80197da:	b092      	sub	sp, #72	; 0x48
 80197dc:	af00      	add	r7, sp, #0
 80197de:	60f8      	str	r0, [r7, #12]
 80197e0:	60b9      	str	r1, [r7, #8]
 80197e2:	607a      	str	r2, [r7, #4]
 80197e4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 80197e6:	f3ef 8311 	mrs	r3, BASEPRI
 80197ea:	f04f 0120 	mov.w	r1, #32
 80197ee:	f381 8811 	msr	BASEPRI, r1
 80197f2:	61fb      	str	r3, [r7, #28]
 80197f4:	484e      	ldr	r0, [pc, #312]	; (8019930 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80197f6:	f7ff fc38 	bl	801906a <_PreparePacket>
 80197fa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80197fc:	69bb      	ldr	r3, [r7, #24]
 80197fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8019800:	697b      	ldr	r3, [r7, #20]
 8019802:	647b      	str	r3, [r7, #68]	; 0x44
 8019804:	68bb      	ldr	r3, [r7, #8]
 8019806:	643b      	str	r3, [r7, #64]	; 0x40
 8019808:	e00b      	b.n	8019822 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 801980a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801980c:	b2da      	uxtb	r2, r3
 801980e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019810:	1c59      	adds	r1, r3, #1
 8019812:	6479      	str	r1, [r7, #68]	; 0x44
 8019814:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019818:	b2d2      	uxtb	r2, r2
 801981a:	701a      	strb	r2, [r3, #0]
 801981c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801981e:	09db      	lsrs	r3, r3, #7
 8019820:	643b      	str	r3, [r7, #64]	; 0x40
 8019822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019824:	2b7f      	cmp	r3, #127	; 0x7f
 8019826:	d8f0      	bhi.n	801980a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8019828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801982a:	1c5a      	adds	r2, r3, #1
 801982c:	647a      	str	r2, [r7, #68]	; 0x44
 801982e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019830:	b2d2      	uxtb	r2, r2
 8019832:	701a      	strb	r2, [r3, #0]
 8019834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019836:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8019838:	697b      	ldr	r3, [r7, #20]
 801983a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	63bb      	str	r3, [r7, #56]	; 0x38
 8019840:	e00b      	b.n	801985a <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8019842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019844:	b2da      	uxtb	r2, r3
 8019846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019848:	1c59      	adds	r1, r3, #1
 801984a:	63f9      	str	r1, [r7, #60]	; 0x3c
 801984c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019850:	b2d2      	uxtb	r2, r2
 8019852:	701a      	strb	r2, [r3, #0]
 8019854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019856:	09db      	lsrs	r3, r3, #7
 8019858:	63bb      	str	r3, [r7, #56]	; 0x38
 801985a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801985c:	2b7f      	cmp	r3, #127	; 0x7f
 801985e:	d8f0      	bhi.n	8019842 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8019860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019862:	1c5a      	adds	r2, r3, #1
 8019864:	63fa      	str	r2, [r7, #60]	; 0x3c
 8019866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019868:	b2d2      	uxtb	r2, r2
 801986a:	701a      	strb	r2, [r3, #0]
 801986c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801986e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8019870:	697b      	ldr	r3, [r7, #20]
 8019872:	637b      	str	r3, [r7, #52]	; 0x34
 8019874:	683b      	ldr	r3, [r7, #0]
 8019876:	633b      	str	r3, [r7, #48]	; 0x30
 8019878:	e00b      	b.n	8019892 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 801987a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801987c:	b2da      	uxtb	r2, r3
 801987e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019880:	1c59      	adds	r1, r3, #1
 8019882:	6379      	str	r1, [r7, #52]	; 0x34
 8019884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019888:	b2d2      	uxtb	r2, r2
 801988a:	701a      	strb	r2, [r3, #0]
 801988c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801988e:	09db      	lsrs	r3, r3, #7
 8019890:	633b      	str	r3, [r7, #48]	; 0x30
 8019892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019894:	2b7f      	cmp	r3, #127	; 0x7f
 8019896:	d8f0      	bhi.n	801987a <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8019898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801989a:	1c5a      	adds	r2, r3, #1
 801989c:	637a      	str	r2, [r7, #52]	; 0x34
 801989e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80198a0:	b2d2      	uxtb	r2, r2
 80198a2:	701a      	strb	r2, [r3, #0]
 80198a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80198a8:	697b      	ldr	r3, [r7, #20]
 80198aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80198ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80198ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80198b0:	e00b      	b.n	80198ca <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80198b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198b4:	b2da      	uxtb	r2, r3
 80198b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198b8:	1c59      	adds	r1, r3, #1
 80198ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80198bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80198c0:	b2d2      	uxtb	r2, r2
 80198c2:	701a      	strb	r2, [r3, #0]
 80198c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198c6:	09db      	lsrs	r3, r3, #7
 80198c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80198ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198cc:	2b7f      	cmp	r3, #127	; 0x7f
 80198ce:	d8f0      	bhi.n	80198b2 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 80198d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198d2:	1c5a      	adds	r2, r3, #1
 80198d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80198d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198d8:	b2d2      	uxtb	r2, r2
 80198da:	701a      	strb	r2, [r3, #0]
 80198dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 80198e0:	697b      	ldr	r3, [r7, #20]
 80198e2:	627b      	str	r3, [r7, #36]	; 0x24
 80198e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80198e6:	623b      	str	r3, [r7, #32]
 80198e8:	e00b      	b.n	8019902 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 80198ea:	6a3b      	ldr	r3, [r7, #32]
 80198ec:	b2da      	uxtb	r2, r3
 80198ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198f0:	1c59      	adds	r1, r3, #1
 80198f2:	6279      	str	r1, [r7, #36]	; 0x24
 80198f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80198f8:	b2d2      	uxtb	r2, r2
 80198fa:	701a      	strb	r2, [r3, #0]
 80198fc:	6a3b      	ldr	r3, [r7, #32]
 80198fe:	09db      	lsrs	r3, r3, #7
 8019900:	623b      	str	r3, [r7, #32]
 8019902:	6a3b      	ldr	r3, [r7, #32]
 8019904:	2b7f      	cmp	r3, #127	; 0x7f
 8019906:	d8f0      	bhi.n	80198ea <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8019908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801990a:	1c5a      	adds	r2, r3, #1
 801990c:	627a      	str	r2, [r7, #36]	; 0x24
 801990e:	6a3a      	ldr	r2, [r7, #32]
 8019910:	b2d2      	uxtb	r2, r2
 8019912:	701a      	strb	r2, [r3, #0]
 8019914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019916:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8019918:	68fa      	ldr	r2, [r7, #12]
 801991a:	6979      	ldr	r1, [r7, #20]
 801991c:	69b8      	ldr	r0, [r7, #24]
 801991e:	f7ff fc7d 	bl	801921c <_SendPacket>
  RECORD_END();
 8019922:	69fb      	ldr	r3, [r7, #28]
 8019924:	f383 8811 	msr	BASEPRI, r3
}
 8019928:	bf00      	nop
 801992a:	3748      	adds	r7, #72	; 0x48
 801992c:	46bd      	mov	sp, r7
 801992e:	bd80      	pop	{r7, pc}
 8019930:	2000ef94 	.word	0x2000ef94

08019934 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8019934:	b580      	push	{r7, lr}
 8019936:	b08c      	sub	sp, #48	; 0x30
 8019938:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 801993a:	4b59      	ldr	r3, [pc, #356]	; (8019aa0 <SEGGER_SYSVIEW_Start+0x16c>)
 801993c:	781b      	ldrb	r3, [r3, #0]
 801993e:	2b00      	cmp	r3, #0
 8019940:	f040 80aa 	bne.w	8019a98 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8019944:	4b56      	ldr	r3, [pc, #344]	; (8019aa0 <SEGGER_SYSVIEW_Start+0x16c>)
 8019946:	2201      	movs	r2, #1
 8019948:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 801994a:	f3ef 8311 	mrs	r3, BASEPRI
 801994e:	f04f 0120 	mov.w	r1, #32
 8019952:	f381 8811 	msr	BASEPRI, r1
 8019956:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8019958:	220a      	movs	r2, #10
 801995a:	4952      	ldr	r1, [pc, #328]	; (8019aa4 <SEGGER_SYSVIEW_Start+0x170>)
 801995c:	2001      	movs	r0, #1
 801995e:	f7ff f9d3 	bl	8018d08 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8019968:	200a      	movs	r0, #10
 801996a:	f7ff fd79 	bl	8019460 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 801996e:	f3ef 8311 	mrs	r3, BASEPRI
 8019972:	f04f 0120 	mov.w	r1, #32
 8019976:	f381 8811 	msr	BASEPRI, r1
 801997a:	60bb      	str	r3, [r7, #8]
 801997c:	484a      	ldr	r0, [pc, #296]	; (8019aa8 <SEGGER_SYSVIEW_Start+0x174>)
 801997e:	f7ff fb74 	bl	801906a <_PreparePacket>
 8019982:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8019988:	683b      	ldr	r3, [r7, #0]
 801998a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801998c:	4b44      	ldr	r3, [pc, #272]	; (8019aa0 <SEGGER_SYSVIEW_Start+0x16c>)
 801998e:	685b      	ldr	r3, [r3, #4]
 8019990:	62bb      	str	r3, [r7, #40]	; 0x28
 8019992:	e00b      	b.n	80199ac <SEGGER_SYSVIEW_Start+0x78>
 8019994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019996:	b2da      	uxtb	r2, r3
 8019998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801999a:	1c59      	adds	r1, r3, #1
 801999c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801999e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80199a2:	b2d2      	uxtb	r2, r2
 80199a4:	701a      	strb	r2, [r3, #0]
 80199a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199a8:	09db      	lsrs	r3, r3, #7
 80199aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80199ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199ae:	2b7f      	cmp	r3, #127	; 0x7f
 80199b0:	d8f0      	bhi.n	8019994 <SEGGER_SYSVIEW_Start+0x60>
 80199b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199b4:	1c5a      	adds	r2, r3, #1
 80199b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80199b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80199ba:	b2d2      	uxtb	r2, r2
 80199bc:	701a      	strb	r2, [r3, #0]
 80199be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199c0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80199c2:	683b      	ldr	r3, [r7, #0]
 80199c4:	627b      	str	r3, [r7, #36]	; 0x24
 80199c6:	4b36      	ldr	r3, [pc, #216]	; (8019aa0 <SEGGER_SYSVIEW_Start+0x16c>)
 80199c8:	689b      	ldr	r3, [r3, #8]
 80199ca:	623b      	str	r3, [r7, #32]
 80199cc:	e00b      	b.n	80199e6 <SEGGER_SYSVIEW_Start+0xb2>
 80199ce:	6a3b      	ldr	r3, [r7, #32]
 80199d0:	b2da      	uxtb	r2, r3
 80199d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199d4:	1c59      	adds	r1, r3, #1
 80199d6:	6279      	str	r1, [r7, #36]	; 0x24
 80199d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80199dc:	b2d2      	uxtb	r2, r2
 80199de:	701a      	strb	r2, [r3, #0]
 80199e0:	6a3b      	ldr	r3, [r7, #32]
 80199e2:	09db      	lsrs	r3, r3, #7
 80199e4:	623b      	str	r3, [r7, #32]
 80199e6:	6a3b      	ldr	r3, [r7, #32]
 80199e8:	2b7f      	cmp	r3, #127	; 0x7f
 80199ea:	d8f0      	bhi.n	80199ce <SEGGER_SYSVIEW_Start+0x9a>
 80199ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ee:	1c5a      	adds	r2, r3, #1
 80199f0:	627a      	str	r2, [r7, #36]	; 0x24
 80199f2:	6a3a      	ldr	r2, [r7, #32]
 80199f4:	b2d2      	uxtb	r2, r2
 80199f6:	701a      	strb	r2, [r3, #0]
 80199f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	61fb      	str	r3, [r7, #28]
 8019a00:	4b27      	ldr	r3, [pc, #156]	; (8019aa0 <SEGGER_SYSVIEW_Start+0x16c>)
 8019a02:	691b      	ldr	r3, [r3, #16]
 8019a04:	61bb      	str	r3, [r7, #24]
 8019a06:	e00b      	b.n	8019a20 <SEGGER_SYSVIEW_Start+0xec>
 8019a08:	69bb      	ldr	r3, [r7, #24]
 8019a0a:	b2da      	uxtb	r2, r3
 8019a0c:	69fb      	ldr	r3, [r7, #28]
 8019a0e:	1c59      	adds	r1, r3, #1
 8019a10:	61f9      	str	r1, [r7, #28]
 8019a12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019a16:	b2d2      	uxtb	r2, r2
 8019a18:	701a      	strb	r2, [r3, #0]
 8019a1a:	69bb      	ldr	r3, [r7, #24]
 8019a1c:	09db      	lsrs	r3, r3, #7
 8019a1e:	61bb      	str	r3, [r7, #24]
 8019a20:	69bb      	ldr	r3, [r7, #24]
 8019a22:	2b7f      	cmp	r3, #127	; 0x7f
 8019a24:	d8f0      	bhi.n	8019a08 <SEGGER_SYSVIEW_Start+0xd4>
 8019a26:	69fb      	ldr	r3, [r7, #28]
 8019a28:	1c5a      	adds	r2, r3, #1
 8019a2a:	61fa      	str	r2, [r7, #28]
 8019a2c:	69ba      	ldr	r2, [r7, #24]
 8019a2e:	b2d2      	uxtb	r2, r2
 8019a30:	701a      	strb	r2, [r3, #0]
 8019a32:	69fb      	ldr	r3, [r7, #28]
 8019a34:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8019a36:	683b      	ldr	r3, [r7, #0]
 8019a38:	617b      	str	r3, [r7, #20]
 8019a3a:	2302      	movs	r3, #2
 8019a3c:	613b      	str	r3, [r7, #16]
 8019a3e:	e00b      	b.n	8019a58 <SEGGER_SYSVIEW_Start+0x124>
 8019a40:	693b      	ldr	r3, [r7, #16]
 8019a42:	b2da      	uxtb	r2, r3
 8019a44:	697b      	ldr	r3, [r7, #20]
 8019a46:	1c59      	adds	r1, r3, #1
 8019a48:	6179      	str	r1, [r7, #20]
 8019a4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019a4e:	b2d2      	uxtb	r2, r2
 8019a50:	701a      	strb	r2, [r3, #0]
 8019a52:	693b      	ldr	r3, [r7, #16]
 8019a54:	09db      	lsrs	r3, r3, #7
 8019a56:	613b      	str	r3, [r7, #16]
 8019a58:	693b      	ldr	r3, [r7, #16]
 8019a5a:	2b7f      	cmp	r3, #127	; 0x7f
 8019a5c:	d8f0      	bhi.n	8019a40 <SEGGER_SYSVIEW_Start+0x10c>
 8019a5e:	697b      	ldr	r3, [r7, #20]
 8019a60:	1c5a      	adds	r2, r3, #1
 8019a62:	617a      	str	r2, [r7, #20]
 8019a64:	693a      	ldr	r2, [r7, #16]
 8019a66:	b2d2      	uxtb	r2, r2
 8019a68:	701a      	strb	r2, [r3, #0]
 8019a6a:	697b      	ldr	r3, [r7, #20]
 8019a6c:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8019a6e:	2218      	movs	r2, #24
 8019a70:	6839      	ldr	r1, [r7, #0]
 8019a72:	6878      	ldr	r0, [r7, #4]
 8019a74:	f7ff fbd2 	bl	801921c <_SendPacket>
      RECORD_END();
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8019a7e:	4b08      	ldr	r3, [pc, #32]	; (8019aa0 <SEGGER_SYSVIEW_Start+0x16c>)
 8019a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d002      	beq.n	8019a8c <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8019a86:	4b06      	ldr	r3, [pc, #24]	; (8019aa0 <SEGGER_SYSVIEW_Start+0x16c>)
 8019a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a8a:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8019a8c:	f000 f9ec 	bl	8019e68 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8019a90:	f000 f9b2 	bl	8019df8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8019a94:	f000 fc10 	bl	801a2b8 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8019a98:	bf00      	nop
 8019a9a:	3730      	adds	r7, #48	; 0x30
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	bd80      	pop	{r7, pc}
 8019aa0:	2000ef64 	.word	0x2000ef64
 8019aa4:	0802010c 	.word	0x0802010c
 8019aa8:	2000ef94 	.word	0x2000ef94

08019aac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b082      	sub	sp, #8
 8019ab0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8019ab2:	f3ef 8311 	mrs	r3, BASEPRI
 8019ab6:	f04f 0120 	mov.w	r1, #32
 8019aba:	f381 8811 	msr	BASEPRI, r1
 8019abe:	607b      	str	r3, [r7, #4]
 8019ac0:	480b      	ldr	r0, [pc, #44]	; (8019af0 <SEGGER_SYSVIEW_Stop+0x44>)
 8019ac2:	f7ff fad2 	bl	801906a <_PreparePacket>
 8019ac6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8019ac8:	4b0a      	ldr	r3, [pc, #40]	; (8019af4 <SEGGER_SYSVIEW_Stop+0x48>)
 8019aca:	781b      	ldrb	r3, [r3, #0]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d007      	beq.n	8019ae0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8019ad0:	220b      	movs	r2, #11
 8019ad2:	6839      	ldr	r1, [r7, #0]
 8019ad4:	6838      	ldr	r0, [r7, #0]
 8019ad6:	f7ff fba1 	bl	801921c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8019ada:	4b06      	ldr	r3, [pc, #24]	; (8019af4 <SEGGER_SYSVIEW_Stop+0x48>)
 8019adc:	2200      	movs	r2, #0
 8019ade:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	f383 8811 	msr	BASEPRI, r3
}
 8019ae6:	bf00      	nop
 8019ae8:	3708      	adds	r7, #8
 8019aea:	46bd      	mov	sp, r7
 8019aec:	bd80      	pop	{r7, pc}
 8019aee:	bf00      	nop
 8019af0:	2000ef94 	.word	0x2000ef94
 8019af4:	2000ef64 	.word	0x2000ef64

08019af8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8019af8:	b580      	push	{r7, lr}
 8019afa:	b08c      	sub	sp, #48	; 0x30
 8019afc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8019afe:	f3ef 8311 	mrs	r3, BASEPRI
 8019b02:	f04f 0120 	mov.w	r1, #32
 8019b06:	f381 8811 	msr	BASEPRI, r1
 8019b0a:	60fb      	str	r3, [r7, #12]
 8019b0c:	4845      	ldr	r0, [pc, #276]	; (8019c24 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8019b0e:	f7ff faac 	bl	801906a <_PreparePacket>
 8019b12:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8019b14:	68bb      	ldr	r3, [r7, #8]
 8019b16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019b1c:	4b42      	ldr	r3, [pc, #264]	; (8019c28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019b1e:	685b      	ldr	r3, [r3, #4]
 8019b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8019b22:	e00b      	b.n	8019b3c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8019b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b26:	b2da      	uxtb	r2, r3
 8019b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b2a:	1c59      	adds	r1, r3, #1
 8019b2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019b2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019b32:	b2d2      	uxtb	r2, r2
 8019b34:	701a      	strb	r2, [r3, #0]
 8019b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b38:	09db      	lsrs	r3, r3, #7
 8019b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8019b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8019b40:	d8f0      	bhi.n	8019b24 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8019b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b44:	1c5a      	adds	r2, r3, #1
 8019b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019b4a:	b2d2      	uxtb	r2, r2
 8019b4c:	701a      	strb	r2, [r3, #0]
 8019b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	627b      	str	r3, [r7, #36]	; 0x24
 8019b56:	4b34      	ldr	r3, [pc, #208]	; (8019c28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019b58:	689b      	ldr	r3, [r3, #8]
 8019b5a:	623b      	str	r3, [r7, #32]
 8019b5c:	e00b      	b.n	8019b76 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8019b5e:	6a3b      	ldr	r3, [r7, #32]
 8019b60:	b2da      	uxtb	r2, r3
 8019b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b64:	1c59      	adds	r1, r3, #1
 8019b66:	6279      	str	r1, [r7, #36]	; 0x24
 8019b68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019b6c:	b2d2      	uxtb	r2, r2
 8019b6e:	701a      	strb	r2, [r3, #0]
 8019b70:	6a3b      	ldr	r3, [r7, #32]
 8019b72:	09db      	lsrs	r3, r3, #7
 8019b74:	623b      	str	r3, [r7, #32]
 8019b76:	6a3b      	ldr	r3, [r7, #32]
 8019b78:	2b7f      	cmp	r3, #127	; 0x7f
 8019b7a:	d8f0      	bhi.n	8019b5e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8019b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b7e:	1c5a      	adds	r2, r3, #1
 8019b80:	627a      	str	r2, [r7, #36]	; 0x24
 8019b82:	6a3a      	ldr	r2, [r7, #32]
 8019b84:	b2d2      	uxtb	r2, r2
 8019b86:	701a      	strb	r2, [r3, #0]
 8019b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	61fb      	str	r3, [r7, #28]
 8019b90:	4b25      	ldr	r3, [pc, #148]	; (8019c28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019b92:	691b      	ldr	r3, [r3, #16]
 8019b94:	61bb      	str	r3, [r7, #24]
 8019b96:	e00b      	b.n	8019bb0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8019b98:	69bb      	ldr	r3, [r7, #24]
 8019b9a:	b2da      	uxtb	r2, r3
 8019b9c:	69fb      	ldr	r3, [r7, #28]
 8019b9e:	1c59      	adds	r1, r3, #1
 8019ba0:	61f9      	str	r1, [r7, #28]
 8019ba2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019ba6:	b2d2      	uxtb	r2, r2
 8019ba8:	701a      	strb	r2, [r3, #0]
 8019baa:	69bb      	ldr	r3, [r7, #24]
 8019bac:	09db      	lsrs	r3, r3, #7
 8019bae:	61bb      	str	r3, [r7, #24]
 8019bb0:	69bb      	ldr	r3, [r7, #24]
 8019bb2:	2b7f      	cmp	r3, #127	; 0x7f
 8019bb4:	d8f0      	bhi.n	8019b98 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8019bb6:	69fb      	ldr	r3, [r7, #28]
 8019bb8:	1c5a      	adds	r2, r3, #1
 8019bba:	61fa      	str	r2, [r7, #28]
 8019bbc:	69ba      	ldr	r2, [r7, #24]
 8019bbe:	b2d2      	uxtb	r2, r2
 8019bc0:	701a      	strb	r2, [r3, #0]
 8019bc2:	69fb      	ldr	r3, [r7, #28]
 8019bc4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	617b      	str	r3, [r7, #20]
 8019bca:	2302      	movs	r3, #2
 8019bcc:	613b      	str	r3, [r7, #16]
 8019bce:	e00b      	b.n	8019be8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8019bd0:	693b      	ldr	r3, [r7, #16]
 8019bd2:	b2da      	uxtb	r2, r3
 8019bd4:	697b      	ldr	r3, [r7, #20]
 8019bd6:	1c59      	adds	r1, r3, #1
 8019bd8:	6179      	str	r1, [r7, #20]
 8019bda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019bde:	b2d2      	uxtb	r2, r2
 8019be0:	701a      	strb	r2, [r3, #0]
 8019be2:	693b      	ldr	r3, [r7, #16]
 8019be4:	09db      	lsrs	r3, r3, #7
 8019be6:	613b      	str	r3, [r7, #16]
 8019be8:	693b      	ldr	r3, [r7, #16]
 8019bea:	2b7f      	cmp	r3, #127	; 0x7f
 8019bec:	d8f0      	bhi.n	8019bd0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8019bee:	697b      	ldr	r3, [r7, #20]
 8019bf0:	1c5a      	adds	r2, r3, #1
 8019bf2:	617a      	str	r2, [r7, #20]
 8019bf4:	693a      	ldr	r2, [r7, #16]
 8019bf6:	b2d2      	uxtb	r2, r2
 8019bf8:	701a      	strb	r2, [r3, #0]
 8019bfa:	697b      	ldr	r3, [r7, #20]
 8019bfc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8019bfe:	2218      	movs	r2, #24
 8019c00:	6879      	ldr	r1, [r7, #4]
 8019c02:	68b8      	ldr	r0, [r7, #8]
 8019c04:	f7ff fb0a 	bl	801921c <_SendPacket>
  RECORD_END();
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8019c0e:	4b06      	ldr	r3, [pc, #24]	; (8019c28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d002      	beq.n	8019c1c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8019c16:	4b04      	ldr	r3, [pc, #16]	; (8019c28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8019c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c1a:	4798      	blx	r3
  }
}
 8019c1c:	bf00      	nop
 8019c1e:	3730      	adds	r7, #48	; 0x30
 8019c20:	46bd      	mov	sp, r7
 8019c22:	bd80      	pop	{r7, pc}
 8019c24:	2000ef94 	.word	0x2000ef94
 8019c28:	2000ef64 	.word	0x2000ef64

08019c2c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8019c2c:	b580      	push	{r7, lr}
 8019c2e:	b092      	sub	sp, #72	; 0x48
 8019c30:	af00      	add	r7, sp, #0
 8019c32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8019c34:	f3ef 8311 	mrs	r3, BASEPRI
 8019c38:	f04f 0120 	mov.w	r1, #32
 8019c3c:	f381 8811 	msr	BASEPRI, r1
 8019c40:	617b      	str	r3, [r7, #20]
 8019c42:	486b      	ldr	r0, [pc, #428]	; (8019df0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8019c44:	f7ff fa11 	bl	801906a <_PreparePacket>
 8019c48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8019c4a:	693b      	ldr	r3, [r7, #16]
 8019c4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8019c4e:	68fb      	ldr	r3, [r7, #12]
 8019c50:	647b      	str	r3, [r7, #68]	; 0x44
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	681a      	ldr	r2, [r3, #0]
 8019c56:	4b67      	ldr	r3, [pc, #412]	; (8019df4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8019c58:	691b      	ldr	r3, [r3, #16]
 8019c5a:	1ad3      	subs	r3, r2, r3
 8019c5c:	089b      	lsrs	r3, r3, #2
 8019c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8019c60:	e00b      	b.n	8019c7a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8019c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c64:	b2da      	uxtb	r2, r3
 8019c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c68:	1c59      	adds	r1, r3, #1
 8019c6a:	6479      	str	r1, [r7, #68]	; 0x44
 8019c6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019c70:	b2d2      	uxtb	r2, r2
 8019c72:	701a      	strb	r2, [r3, #0]
 8019c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c76:	09db      	lsrs	r3, r3, #7
 8019c78:	643b      	str	r3, [r7, #64]	; 0x40
 8019c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8019c7e:	d8f0      	bhi.n	8019c62 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8019c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c82:	1c5a      	adds	r2, r3, #1
 8019c84:	647a      	str	r2, [r7, #68]	; 0x44
 8019c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019c88:	b2d2      	uxtb	r2, r2
 8019c8a:	701a      	strb	r2, [r3, #0]
 8019c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019c8e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	689b      	ldr	r3, [r3, #8]
 8019c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8019c9a:	e00b      	b.n	8019cb4 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8019c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c9e:	b2da      	uxtb	r2, r3
 8019ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019ca2:	1c59      	adds	r1, r3, #1
 8019ca4:	63f9      	str	r1, [r7, #60]	; 0x3c
 8019ca6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019caa:	b2d2      	uxtb	r2, r2
 8019cac:	701a      	strb	r2, [r3, #0]
 8019cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cb0:	09db      	lsrs	r3, r3, #7
 8019cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8019cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8019cb8:	d8f0      	bhi.n	8019c9c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8019cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019cbc:	1c5a      	adds	r2, r3, #1
 8019cbe:	63fa      	str	r2, [r7, #60]	; 0x3c
 8019cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019cc2:	b2d2      	uxtb	r2, r2
 8019cc4:	701a      	strb	r2, [r3, #0]
 8019cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019cc8:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	685b      	ldr	r3, [r3, #4]
 8019cce:	2220      	movs	r2, #32
 8019cd0:	4619      	mov	r1, r3
 8019cd2:	68f8      	ldr	r0, [r7, #12]
 8019cd4:	f7ff f97c 	bl	8018fd0 <_EncodeStr>
 8019cd8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8019cda:	2209      	movs	r2, #9
 8019cdc:	68f9      	ldr	r1, [r7, #12]
 8019cde:	6938      	ldr	r0, [r7, #16]
 8019ce0:	f7ff fa9c 	bl	801921c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8019ce4:	693b      	ldr	r3, [r7, #16]
 8019ce6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	637b      	str	r3, [r7, #52]	; 0x34
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	681a      	ldr	r2, [r3, #0]
 8019cf0:	4b40      	ldr	r3, [pc, #256]	; (8019df4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8019cf2:	691b      	ldr	r3, [r3, #16]
 8019cf4:	1ad3      	subs	r3, r2, r3
 8019cf6:	089b      	lsrs	r3, r3, #2
 8019cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8019cfa:	e00b      	b.n	8019d14 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8019cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cfe:	b2da      	uxtb	r2, r3
 8019d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d02:	1c59      	adds	r1, r3, #1
 8019d04:	6379      	str	r1, [r7, #52]	; 0x34
 8019d06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019d0a:	b2d2      	uxtb	r2, r2
 8019d0c:	701a      	strb	r2, [r3, #0]
 8019d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d10:	09db      	lsrs	r3, r3, #7
 8019d12:	633b      	str	r3, [r7, #48]	; 0x30
 8019d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d16:	2b7f      	cmp	r3, #127	; 0x7f
 8019d18:	d8f0      	bhi.n	8019cfc <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8019d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d1c:	1c5a      	adds	r2, r3, #1
 8019d1e:	637a      	str	r2, [r7, #52]	; 0x34
 8019d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019d22:	b2d2      	uxtb	r2, r2
 8019d24:	701a      	strb	r2, [r3, #0]
 8019d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	68db      	ldr	r3, [r3, #12]
 8019d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8019d34:	e00b      	b.n	8019d4e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8019d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d38:	b2da      	uxtb	r2, r3
 8019d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d3c:	1c59      	adds	r1, r3, #1
 8019d3e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8019d40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019d44:	b2d2      	uxtb	r2, r2
 8019d46:	701a      	strb	r2, [r3, #0]
 8019d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d4a:	09db      	lsrs	r3, r3, #7
 8019d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8019d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d50:	2b7f      	cmp	r3, #127	; 0x7f
 8019d52:	d8f0      	bhi.n	8019d36 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8019d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d56:	1c5a      	adds	r2, r3, #1
 8019d58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d5c:	b2d2      	uxtb	r2, r2
 8019d5e:	701a      	strb	r2, [r3, #0]
 8019d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d62:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	627b      	str	r3, [r7, #36]	; 0x24
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	691b      	ldr	r3, [r3, #16]
 8019d6c:	623b      	str	r3, [r7, #32]
 8019d6e:	e00b      	b.n	8019d88 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8019d70:	6a3b      	ldr	r3, [r7, #32]
 8019d72:	b2da      	uxtb	r2, r3
 8019d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d76:	1c59      	adds	r1, r3, #1
 8019d78:	6279      	str	r1, [r7, #36]	; 0x24
 8019d7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019d7e:	b2d2      	uxtb	r2, r2
 8019d80:	701a      	strb	r2, [r3, #0]
 8019d82:	6a3b      	ldr	r3, [r7, #32]
 8019d84:	09db      	lsrs	r3, r3, #7
 8019d86:	623b      	str	r3, [r7, #32]
 8019d88:	6a3b      	ldr	r3, [r7, #32]
 8019d8a:	2b7f      	cmp	r3, #127	; 0x7f
 8019d8c:	d8f0      	bhi.n	8019d70 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8019d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d90:	1c5a      	adds	r2, r3, #1
 8019d92:	627a      	str	r2, [r7, #36]	; 0x24
 8019d94:	6a3a      	ldr	r2, [r7, #32]
 8019d96:	b2d2      	uxtb	r2, r2
 8019d98:	701a      	strb	r2, [r3, #0]
 8019d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	61fb      	str	r3, [r7, #28]
 8019da2:	2300      	movs	r3, #0
 8019da4:	61bb      	str	r3, [r7, #24]
 8019da6:	e00b      	b.n	8019dc0 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8019da8:	69bb      	ldr	r3, [r7, #24]
 8019daa:	b2da      	uxtb	r2, r3
 8019dac:	69fb      	ldr	r3, [r7, #28]
 8019dae:	1c59      	adds	r1, r3, #1
 8019db0:	61f9      	str	r1, [r7, #28]
 8019db2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019db6:	b2d2      	uxtb	r2, r2
 8019db8:	701a      	strb	r2, [r3, #0]
 8019dba:	69bb      	ldr	r3, [r7, #24]
 8019dbc:	09db      	lsrs	r3, r3, #7
 8019dbe:	61bb      	str	r3, [r7, #24]
 8019dc0:	69bb      	ldr	r3, [r7, #24]
 8019dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8019dc4:	d8f0      	bhi.n	8019da8 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8019dc6:	69fb      	ldr	r3, [r7, #28]
 8019dc8:	1c5a      	adds	r2, r3, #1
 8019dca:	61fa      	str	r2, [r7, #28]
 8019dcc:	69ba      	ldr	r2, [r7, #24]
 8019dce:	b2d2      	uxtb	r2, r2
 8019dd0:	701a      	strb	r2, [r3, #0]
 8019dd2:	69fb      	ldr	r3, [r7, #28]
 8019dd4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8019dd6:	2215      	movs	r2, #21
 8019dd8:	68f9      	ldr	r1, [r7, #12]
 8019dda:	6938      	ldr	r0, [r7, #16]
 8019ddc:	f7ff fa1e 	bl	801921c <_SendPacket>
  RECORD_END();
 8019de0:	697b      	ldr	r3, [r7, #20]
 8019de2:	f383 8811 	msr	BASEPRI, r3
}
 8019de6:	bf00      	nop
 8019de8:	3748      	adds	r7, #72	; 0x48
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bd80      	pop	{r7, pc}
 8019dee:	bf00      	nop
 8019df0:	2000ef94 	.word	0x2000ef94
 8019df4:	2000ef64 	.word	0x2000ef64

08019df8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8019dfc:	4b07      	ldr	r3, [pc, #28]	; (8019e1c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8019dfe:	6a1b      	ldr	r3, [r3, #32]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d008      	beq.n	8019e16 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8019e04:	4b05      	ldr	r3, [pc, #20]	; (8019e1c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8019e06:	6a1b      	ldr	r3, [r3, #32]
 8019e08:	685b      	ldr	r3, [r3, #4]
 8019e0a:	2b00      	cmp	r3, #0
 8019e0c:	d003      	beq.n	8019e16 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8019e0e:	4b03      	ldr	r3, [pc, #12]	; (8019e1c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8019e10:	6a1b      	ldr	r3, [r3, #32]
 8019e12:	685b      	ldr	r3, [r3, #4]
 8019e14:	4798      	blx	r3
  }
}
 8019e16:	bf00      	nop
 8019e18:	bd80      	pop	{r7, pc}
 8019e1a:	bf00      	nop
 8019e1c:	2000ef64 	.word	0x2000ef64

08019e20 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b086      	sub	sp, #24
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8019e28:	f3ef 8311 	mrs	r3, BASEPRI
 8019e2c:	f04f 0120 	mov.w	r1, #32
 8019e30:	f381 8811 	msr	BASEPRI, r1
 8019e34:	617b      	str	r3, [r7, #20]
 8019e36:	480b      	ldr	r0, [pc, #44]	; (8019e64 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8019e38:	f7ff f917 	bl	801906a <_PreparePacket>
 8019e3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8019e3e:	2280      	movs	r2, #128	; 0x80
 8019e40:	6879      	ldr	r1, [r7, #4]
 8019e42:	6938      	ldr	r0, [r7, #16]
 8019e44:	f7ff f8c4 	bl	8018fd0 <_EncodeStr>
 8019e48:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8019e4a:	220e      	movs	r2, #14
 8019e4c:	68f9      	ldr	r1, [r7, #12]
 8019e4e:	6938      	ldr	r0, [r7, #16]
 8019e50:	f7ff f9e4 	bl	801921c <_SendPacket>
  RECORD_END();
 8019e54:	697b      	ldr	r3, [r7, #20]
 8019e56:	f383 8811 	msr	BASEPRI, r3
}
 8019e5a:	bf00      	nop
 8019e5c:	3718      	adds	r7, #24
 8019e5e:	46bd      	mov	sp, r7
 8019e60:	bd80      	pop	{r7, pc}
 8019e62:	bf00      	nop
 8019e64:	2000ef94 	.word	0x2000ef94

08019e68 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8019e68:	b590      	push	{r4, r7, lr}
 8019e6a:	b083      	sub	sp, #12
 8019e6c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8019e6e:	4b14      	ldr	r3, [pc, #80]	; (8019ec0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8019e70:	6a1b      	ldr	r3, [r3, #32]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d019      	beq.n	8019eaa <SEGGER_SYSVIEW_RecordSystime+0x42>
 8019e76:	4b12      	ldr	r3, [pc, #72]	; (8019ec0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8019e78:	6a1b      	ldr	r3, [r3, #32]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d014      	beq.n	8019eaa <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8019e80:	4b0f      	ldr	r3, [pc, #60]	; (8019ec0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8019e82:	6a1b      	ldr	r3, [r3, #32]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	4798      	blx	r3
 8019e88:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8019e8c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8019e8e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8019e92:	f04f 0300 	mov.w	r3, #0
 8019e96:	f04f 0400 	mov.w	r4, #0
 8019e9a:	0013      	movs	r3, r2
 8019e9c:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8019e9e:	461a      	mov	r2, r3
 8019ea0:	4601      	mov	r1, r0
 8019ea2:	200d      	movs	r0, #13
 8019ea4:	f7ff fb36 	bl	8019514 <SEGGER_SYSVIEW_RecordU32x2>
 8019ea8:	e005      	b.n	8019eb6 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8019eaa:	4b06      	ldr	r3, [pc, #24]	; (8019ec4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	4619      	mov	r1, r3
 8019eb0:	200c      	movs	r0, #12
 8019eb2:	f7ff faf3 	bl	801949c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8019eb6:	bf00      	nop
 8019eb8:	370c      	adds	r7, #12
 8019eba:	46bd      	mov	sp, r7
 8019ebc:	bd90      	pop	{r4, r7, pc}
 8019ebe:	bf00      	nop
 8019ec0:	2000ef64 	.word	0x2000ef64
 8019ec4:	e0001004 	.word	0xe0001004

08019ec8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8019ec8:	b580      	push	{r7, lr}
 8019eca:	b082      	sub	sp, #8
 8019ecc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8019ece:	f3ef 8311 	mrs	r3, BASEPRI
 8019ed2:	f04f 0120 	mov.w	r1, #32
 8019ed6:	f381 8811 	msr	BASEPRI, r1
 8019eda:	607b      	str	r3, [r7, #4]
 8019edc:	4807      	ldr	r0, [pc, #28]	; (8019efc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8019ede:	f7ff f8c4 	bl	801906a <_PreparePacket>
 8019ee2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8019ee4:	2211      	movs	r2, #17
 8019ee6:	6839      	ldr	r1, [r7, #0]
 8019ee8:	6838      	ldr	r0, [r7, #0]
 8019eea:	f7ff f997 	bl	801921c <_SendPacket>
  RECORD_END();
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	f383 8811 	msr	BASEPRI, r3
}
 8019ef4:	bf00      	nop
 8019ef6:	3708      	adds	r7, #8
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	bd80      	pop	{r7, pc}
 8019efc:	2000ef94 	.word	0x2000ef94

08019f00 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8019f00:	b580      	push	{r7, lr}
 8019f02:	b088      	sub	sp, #32
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8019f08:	f3ef 8311 	mrs	r3, BASEPRI
 8019f0c:	f04f 0120 	mov.w	r1, #32
 8019f10:	f381 8811 	msr	BASEPRI, r1
 8019f14:	617b      	str	r3, [r7, #20]
 8019f16:	481a      	ldr	r0, [pc, #104]	; (8019f80 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8019f18:	f7ff f8a7 	bl	801906a <_PreparePacket>
 8019f1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8019f1e:	693b      	ldr	r3, [r7, #16]
 8019f20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8019f22:	4b18      	ldr	r3, [pc, #96]	; (8019f84 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8019f24:	691b      	ldr	r3, [r3, #16]
 8019f26:	687a      	ldr	r2, [r7, #4]
 8019f28:	1ad3      	subs	r3, r2, r3
 8019f2a:	089b      	lsrs	r3, r3, #2
 8019f2c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	61fb      	str	r3, [r7, #28]
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	61bb      	str	r3, [r7, #24]
 8019f36:	e00b      	b.n	8019f50 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8019f38:	69bb      	ldr	r3, [r7, #24]
 8019f3a:	b2da      	uxtb	r2, r3
 8019f3c:	69fb      	ldr	r3, [r7, #28]
 8019f3e:	1c59      	adds	r1, r3, #1
 8019f40:	61f9      	str	r1, [r7, #28]
 8019f42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019f46:	b2d2      	uxtb	r2, r2
 8019f48:	701a      	strb	r2, [r3, #0]
 8019f4a:	69bb      	ldr	r3, [r7, #24]
 8019f4c:	09db      	lsrs	r3, r3, #7
 8019f4e:	61bb      	str	r3, [r7, #24]
 8019f50:	69bb      	ldr	r3, [r7, #24]
 8019f52:	2b7f      	cmp	r3, #127	; 0x7f
 8019f54:	d8f0      	bhi.n	8019f38 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8019f56:	69fb      	ldr	r3, [r7, #28]
 8019f58:	1c5a      	adds	r2, r3, #1
 8019f5a:	61fa      	str	r2, [r7, #28]
 8019f5c:	69ba      	ldr	r2, [r7, #24]
 8019f5e:	b2d2      	uxtb	r2, r2
 8019f60:	701a      	strb	r2, [r3, #0]
 8019f62:	69fb      	ldr	r3, [r7, #28]
 8019f64:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8019f66:	2208      	movs	r2, #8
 8019f68:	68f9      	ldr	r1, [r7, #12]
 8019f6a:	6938      	ldr	r0, [r7, #16]
 8019f6c:	f7ff f956 	bl	801921c <_SendPacket>
  RECORD_END();
 8019f70:	697b      	ldr	r3, [r7, #20]
 8019f72:	f383 8811 	msr	BASEPRI, r3
}
 8019f76:	bf00      	nop
 8019f78:	3720      	adds	r7, #32
 8019f7a:	46bd      	mov	sp, r7
 8019f7c:	bd80      	pop	{r7, pc}
 8019f7e:	bf00      	nop
 8019f80:	2000ef94 	.word	0x2000ef94
 8019f84:	2000ef64 	.word	0x2000ef64

08019f88 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b088      	sub	sp, #32
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8019f90:	f3ef 8311 	mrs	r3, BASEPRI
 8019f94:	f04f 0120 	mov.w	r1, #32
 8019f98:	f381 8811 	msr	BASEPRI, r1
 8019f9c:	617b      	str	r3, [r7, #20]
 8019f9e:	481a      	ldr	r0, [pc, #104]	; (801a008 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8019fa0:	f7ff f863 	bl	801906a <_PreparePacket>
 8019fa4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8019fa6:	693b      	ldr	r3, [r7, #16]
 8019fa8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8019faa:	4b18      	ldr	r3, [pc, #96]	; (801a00c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8019fac:	691b      	ldr	r3, [r3, #16]
 8019fae:	687a      	ldr	r2, [r7, #4]
 8019fb0:	1ad3      	subs	r3, r2, r3
 8019fb2:	089b      	lsrs	r3, r3, #2
 8019fb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	61fb      	str	r3, [r7, #28]
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	61bb      	str	r3, [r7, #24]
 8019fbe:	e00b      	b.n	8019fd8 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8019fc0:	69bb      	ldr	r3, [r7, #24]
 8019fc2:	b2da      	uxtb	r2, r3
 8019fc4:	69fb      	ldr	r3, [r7, #28]
 8019fc6:	1c59      	adds	r1, r3, #1
 8019fc8:	61f9      	str	r1, [r7, #28]
 8019fca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8019fce:	b2d2      	uxtb	r2, r2
 8019fd0:	701a      	strb	r2, [r3, #0]
 8019fd2:	69bb      	ldr	r3, [r7, #24]
 8019fd4:	09db      	lsrs	r3, r3, #7
 8019fd6:	61bb      	str	r3, [r7, #24]
 8019fd8:	69bb      	ldr	r3, [r7, #24]
 8019fda:	2b7f      	cmp	r3, #127	; 0x7f
 8019fdc:	d8f0      	bhi.n	8019fc0 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8019fde:	69fb      	ldr	r3, [r7, #28]
 8019fe0:	1c5a      	adds	r2, r3, #1
 8019fe2:	61fa      	str	r2, [r7, #28]
 8019fe4:	69ba      	ldr	r2, [r7, #24]
 8019fe6:	b2d2      	uxtb	r2, r2
 8019fe8:	701a      	strb	r2, [r3, #0]
 8019fea:	69fb      	ldr	r3, [r7, #28]
 8019fec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8019fee:	2204      	movs	r2, #4
 8019ff0:	68f9      	ldr	r1, [r7, #12]
 8019ff2:	6938      	ldr	r0, [r7, #16]
 8019ff4:	f7ff f912 	bl	801921c <_SendPacket>
  RECORD_END();
 8019ff8:	697b      	ldr	r3, [r7, #20]
 8019ffa:	f383 8811 	msr	BASEPRI, r3
}
 8019ffe:	bf00      	nop
 801a000:	3720      	adds	r7, #32
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}
 801a006:	bf00      	nop
 801a008:	2000ef94 	.word	0x2000ef94
 801a00c:	2000ef64 	.word	0x2000ef64

0801a010 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 801a010:	b580      	push	{r7, lr}
 801a012:	b088      	sub	sp, #32
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 801a018:	f3ef 8311 	mrs	r3, BASEPRI
 801a01c:	f04f 0120 	mov.w	r1, #32
 801a020:	f381 8811 	msr	BASEPRI, r1
 801a024:	617b      	str	r3, [r7, #20]
 801a026:	481a      	ldr	r0, [pc, #104]	; (801a090 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 801a028:	f7ff f81f 	bl	801906a <_PreparePacket>
 801a02c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801a02e:	693b      	ldr	r3, [r7, #16]
 801a030:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801a032:	4b18      	ldr	r3, [pc, #96]	; (801a094 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 801a034:	691b      	ldr	r3, [r3, #16]
 801a036:	687a      	ldr	r2, [r7, #4]
 801a038:	1ad3      	subs	r3, r2, r3
 801a03a:	089b      	lsrs	r3, r3, #2
 801a03c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	61fb      	str	r3, [r7, #28]
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	61bb      	str	r3, [r7, #24]
 801a046:	e00b      	b.n	801a060 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 801a048:	69bb      	ldr	r3, [r7, #24]
 801a04a:	b2da      	uxtb	r2, r3
 801a04c:	69fb      	ldr	r3, [r7, #28]
 801a04e:	1c59      	adds	r1, r3, #1
 801a050:	61f9      	str	r1, [r7, #28]
 801a052:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a056:	b2d2      	uxtb	r2, r2
 801a058:	701a      	strb	r2, [r3, #0]
 801a05a:	69bb      	ldr	r3, [r7, #24]
 801a05c:	09db      	lsrs	r3, r3, #7
 801a05e:	61bb      	str	r3, [r7, #24]
 801a060:	69bb      	ldr	r3, [r7, #24]
 801a062:	2b7f      	cmp	r3, #127	; 0x7f
 801a064:	d8f0      	bhi.n	801a048 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 801a066:	69fb      	ldr	r3, [r7, #28]
 801a068:	1c5a      	adds	r2, r3, #1
 801a06a:	61fa      	str	r2, [r7, #28]
 801a06c:	69ba      	ldr	r2, [r7, #24]
 801a06e:	b2d2      	uxtb	r2, r2
 801a070:	701a      	strb	r2, [r3, #0]
 801a072:	69fb      	ldr	r3, [r7, #28]
 801a074:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 801a076:	2206      	movs	r2, #6
 801a078:	68f9      	ldr	r1, [r7, #12]
 801a07a:	6938      	ldr	r0, [r7, #16]
 801a07c:	f7ff f8ce 	bl	801921c <_SendPacket>
  RECORD_END();
 801a080:	697b      	ldr	r3, [r7, #20]
 801a082:	f383 8811 	msr	BASEPRI, r3
}
 801a086:	bf00      	nop
 801a088:	3720      	adds	r7, #32
 801a08a:	46bd      	mov	sp, r7
 801a08c:	bd80      	pop	{r7, pc}
 801a08e:	bf00      	nop
 801a090:	2000ef94 	.word	0x2000ef94
 801a094:	2000ef64 	.word	0x2000ef64

0801a098 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 801a098:	b580      	push	{r7, lr}
 801a09a:	b08a      	sub	sp, #40	; 0x28
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	6078      	str	r0, [r7, #4]
 801a0a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 801a0a2:	f3ef 8311 	mrs	r3, BASEPRI
 801a0a6:	f04f 0120 	mov.w	r1, #32
 801a0aa:	f381 8811 	msr	BASEPRI, r1
 801a0ae:	617b      	str	r3, [r7, #20]
 801a0b0:	4827      	ldr	r0, [pc, #156]	; (801a150 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 801a0b2:	f7fe ffda 	bl	801906a <_PreparePacket>
 801a0b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 801a0b8:	693b      	ldr	r3, [r7, #16]
 801a0ba:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 801a0bc:	4b25      	ldr	r3, [pc, #148]	; (801a154 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 801a0be:	691b      	ldr	r3, [r3, #16]
 801a0c0:	687a      	ldr	r2, [r7, #4]
 801a0c2:	1ad3      	subs	r3, r2, r3
 801a0c4:	089b      	lsrs	r3, r3, #2
 801a0c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	627b      	str	r3, [r7, #36]	; 0x24
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	623b      	str	r3, [r7, #32]
 801a0d0:	e00b      	b.n	801a0ea <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 801a0d2:	6a3b      	ldr	r3, [r7, #32]
 801a0d4:	b2da      	uxtb	r2, r3
 801a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0d8:	1c59      	adds	r1, r3, #1
 801a0da:	6279      	str	r1, [r7, #36]	; 0x24
 801a0dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a0e0:	b2d2      	uxtb	r2, r2
 801a0e2:	701a      	strb	r2, [r3, #0]
 801a0e4:	6a3b      	ldr	r3, [r7, #32]
 801a0e6:	09db      	lsrs	r3, r3, #7
 801a0e8:	623b      	str	r3, [r7, #32]
 801a0ea:	6a3b      	ldr	r3, [r7, #32]
 801a0ec:	2b7f      	cmp	r3, #127	; 0x7f
 801a0ee:	d8f0      	bhi.n	801a0d2 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 801a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0f2:	1c5a      	adds	r2, r3, #1
 801a0f4:	627a      	str	r2, [r7, #36]	; 0x24
 801a0f6:	6a3a      	ldr	r2, [r7, #32]
 801a0f8:	b2d2      	uxtb	r2, r2
 801a0fa:	701a      	strb	r2, [r3, #0]
 801a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	61fb      	str	r3, [r7, #28]
 801a104:	683b      	ldr	r3, [r7, #0]
 801a106:	61bb      	str	r3, [r7, #24]
 801a108:	e00b      	b.n	801a122 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 801a10a:	69bb      	ldr	r3, [r7, #24]
 801a10c:	b2da      	uxtb	r2, r3
 801a10e:	69fb      	ldr	r3, [r7, #28]
 801a110:	1c59      	adds	r1, r3, #1
 801a112:	61f9      	str	r1, [r7, #28]
 801a114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a118:	b2d2      	uxtb	r2, r2
 801a11a:	701a      	strb	r2, [r3, #0]
 801a11c:	69bb      	ldr	r3, [r7, #24]
 801a11e:	09db      	lsrs	r3, r3, #7
 801a120:	61bb      	str	r3, [r7, #24]
 801a122:	69bb      	ldr	r3, [r7, #24]
 801a124:	2b7f      	cmp	r3, #127	; 0x7f
 801a126:	d8f0      	bhi.n	801a10a <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 801a128:	69fb      	ldr	r3, [r7, #28]
 801a12a:	1c5a      	adds	r2, r3, #1
 801a12c:	61fa      	str	r2, [r7, #28]
 801a12e:	69ba      	ldr	r2, [r7, #24]
 801a130:	b2d2      	uxtb	r2, r2
 801a132:	701a      	strb	r2, [r3, #0]
 801a134:	69fb      	ldr	r3, [r7, #28]
 801a136:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 801a138:	2207      	movs	r2, #7
 801a13a:	68f9      	ldr	r1, [r7, #12]
 801a13c:	6938      	ldr	r0, [r7, #16]
 801a13e:	f7ff f86d 	bl	801921c <_SendPacket>
  RECORD_END();
 801a142:	697b      	ldr	r3, [r7, #20]
 801a144:	f383 8811 	msr	BASEPRI, r3
}
 801a148:	bf00      	nop
 801a14a:	3728      	adds	r7, #40	; 0x28
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}
 801a150:	2000ef94 	.word	0x2000ef94
 801a154:	2000ef64 	.word	0x2000ef64

0801a158 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 801a158:	b480      	push	{r7}
 801a15a:	b083      	sub	sp, #12
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 801a160:	4b05      	ldr	r3, [pc, #20]	; (801a178 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 801a162:	691b      	ldr	r3, [r3, #16]
 801a164:	687a      	ldr	r2, [r7, #4]
 801a166:	1ad3      	subs	r3, r2, r3
 801a168:	089b      	lsrs	r3, r3, #2
}
 801a16a:	4618      	mov	r0, r3
 801a16c:	370c      	adds	r7, #12
 801a16e:	46bd      	mov	sp, r7
 801a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a174:	4770      	bx	lr
 801a176:	bf00      	nop
 801a178:	2000ef64 	.word	0x2000ef64

0801a17c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b08c      	sub	sp, #48	; 0x30
 801a180:	af00      	add	r7, sp, #0
 801a182:	4603      	mov	r3, r0
 801a184:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 801a186:	4b3b      	ldr	r3, [pc, #236]	; (801a274 <SEGGER_SYSVIEW_SendModule+0xf8>)
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d06d      	beq.n	801a26a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 801a18e:	4b39      	ldr	r3, [pc, #228]	; (801a274 <SEGGER_SYSVIEW_SendModule+0xf8>)
 801a190:	681b      	ldr	r3, [r3, #0]
 801a192:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 801a194:	2300      	movs	r3, #0
 801a196:	62bb      	str	r3, [r7, #40]	; 0x28
 801a198:	e008      	b.n	801a1ac <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 801a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a19c:	691b      	ldr	r3, [r3, #16]
 801a19e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 801a1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d007      	beq.n	801a1b6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 801a1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1a8:	3301      	adds	r3, #1
 801a1aa:	62bb      	str	r3, [r7, #40]	; 0x28
 801a1ac:	79fb      	ldrb	r3, [r7, #7]
 801a1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a1b0:	429a      	cmp	r2, r3
 801a1b2:	d3f2      	bcc.n	801a19a <SEGGER_SYSVIEW_SendModule+0x1e>
 801a1b4:	e000      	b.n	801a1b8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 801a1b6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 801a1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1ba:	2b00      	cmp	r3, #0
 801a1bc:	d055      	beq.n	801a26a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801a1be:	f3ef 8311 	mrs	r3, BASEPRI
 801a1c2:	f04f 0120 	mov.w	r1, #32
 801a1c6:	f381 8811 	msr	BASEPRI, r1
 801a1ca:	617b      	str	r3, [r7, #20]
 801a1cc:	482a      	ldr	r0, [pc, #168]	; (801a278 <SEGGER_SYSVIEW_SendModule+0xfc>)
 801a1ce:	f7fe ff4c 	bl	801906a <_PreparePacket>
 801a1d2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 801a1d4:	693b      	ldr	r3, [r7, #16]
 801a1d6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	627b      	str	r3, [r7, #36]	; 0x24
 801a1dc:	79fb      	ldrb	r3, [r7, #7]
 801a1de:	623b      	str	r3, [r7, #32]
 801a1e0:	e00b      	b.n	801a1fa <SEGGER_SYSVIEW_SendModule+0x7e>
 801a1e2:	6a3b      	ldr	r3, [r7, #32]
 801a1e4:	b2da      	uxtb	r2, r3
 801a1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1e8:	1c59      	adds	r1, r3, #1
 801a1ea:	6279      	str	r1, [r7, #36]	; 0x24
 801a1ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a1f0:	b2d2      	uxtb	r2, r2
 801a1f2:	701a      	strb	r2, [r3, #0]
 801a1f4:	6a3b      	ldr	r3, [r7, #32]
 801a1f6:	09db      	lsrs	r3, r3, #7
 801a1f8:	623b      	str	r3, [r7, #32]
 801a1fa:	6a3b      	ldr	r3, [r7, #32]
 801a1fc:	2b7f      	cmp	r3, #127	; 0x7f
 801a1fe:	d8f0      	bhi.n	801a1e2 <SEGGER_SYSVIEW_SendModule+0x66>
 801a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a202:	1c5a      	adds	r2, r3, #1
 801a204:	627a      	str	r2, [r7, #36]	; 0x24
 801a206:	6a3a      	ldr	r2, [r7, #32]
 801a208:	b2d2      	uxtb	r2, r2
 801a20a:	701a      	strb	r2, [r3, #0]
 801a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a20e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	61fb      	str	r3, [r7, #28]
 801a214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a216:	689b      	ldr	r3, [r3, #8]
 801a218:	61bb      	str	r3, [r7, #24]
 801a21a:	e00b      	b.n	801a234 <SEGGER_SYSVIEW_SendModule+0xb8>
 801a21c:	69bb      	ldr	r3, [r7, #24]
 801a21e:	b2da      	uxtb	r2, r3
 801a220:	69fb      	ldr	r3, [r7, #28]
 801a222:	1c59      	adds	r1, r3, #1
 801a224:	61f9      	str	r1, [r7, #28]
 801a226:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a22a:	b2d2      	uxtb	r2, r2
 801a22c:	701a      	strb	r2, [r3, #0]
 801a22e:	69bb      	ldr	r3, [r7, #24]
 801a230:	09db      	lsrs	r3, r3, #7
 801a232:	61bb      	str	r3, [r7, #24]
 801a234:	69bb      	ldr	r3, [r7, #24]
 801a236:	2b7f      	cmp	r3, #127	; 0x7f
 801a238:	d8f0      	bhi.n	801a21c <SEGGER_SYSVIEW_SendModule+0xa0>
 801a23a:	69fb      	ldr	r3, [r7, #28]
 801a23c:	1c5a      	adds	r2, r3, #1
 801a23e:	61fa      	str	r2, [r7, #28]
 801a240:	69ba      	ldr	r2, [r7, #24]
 801a242:	b2d2      	uxtb	r2, r2
 801a244:	701a      	strb	r2, [r3, #0]
 801a246:	69fb      	ldr	r3, [r7, #28]
 801a248:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	2280      	movs	r2, #128	; 0x80
 801a250:	4619      	mov	r1, r3
 801a252:	68f8      	ldr	r0, [r7, #12]
 801a254:	f7fe febc 	bl	8018fd0 <_EncodeStr>
 801a258:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 801a25a:	2216      	movs	r2, #22
 801a25c:	68f9      	ldr	r1, [r7, #12]
 801a25e:	6938      	ldr	r0, [r7, #16]
 801a260:	f7fe ffdc 	bl	801921c <_SendPacket>
      RECORD_END();
 801a264:	697b      	ldr	r3, [r7, #20]
 801a266:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 801a26a:	bf00      	nop
 801a26c:	3730      	adds	r7, #48	; 0x30
 801a26e:	46bd      	mov	sp, r7
 801a270:	bd80      	pop	{r7, pc}
 801a272:	bf00      	nop
 801a274:	2000ef8c 	.word	0x2000ef8c
 801a278:	2000ef94 	.word	0x2000ef94

0801a27c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 801a27c:	b580      	push	{r7, lr}
 801a27e:	b082      	sub	sp, #8
 801a280:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 801a282:	4b0c      	ldr	r3, [pc, #48]	; (801a2b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	2b00      	cmp	r3, #0
 801a288:	d00f      	beq.n	801a2aa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 801a28a:	4b0a      	ldr	r3, [pc, #40]	; (801a2b4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	68db      	ldr	r3, [r3, #12]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d002      	beq.n	801a29e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	68db      	ldr	r3, [r3, #12]
 801a29c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	691b      	ldr	r3, [r3, #16]
 801a2a2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d1f2      	bne.n	801a290 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 801a2aa:	bf00      	nop
 801a2ac:	3708      	adds	r7, #8
 801a2ae:	46bd      	mov	sp, r7
 801a2b0:	bd80      	pop	{r7, pc}
 801a2b2:	bf00      	nop
 801a2b4:	2000ef8c 	.word	0x2000ef8c

0801a2b8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	b086      	sub	sp, #24
 801a2bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 801a2be:	f3ef 8311 	mrs	r3, BASEPRI
 801a2c2:	f04f 0120 	mov.w	r1, #32
 801a2c6:	f381 8811 	msr	BASEPRI, r1
 801a2ca:	60fb      	str	r3, [r7, #12]
 801a2cc:	4817      	ldr	r0, [pc, #92]	; (801a32c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 801a2ce:	f7fe fecc 	bl	801906a <_PreparePacket>
 801a2d2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 801a2d4:	68bb      	ldr	r3, [r7, #8]
 801a2d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	617b      	str	r3, [r7, #20]
 801a2dc:	4b14      	ldr	r3, [pc, #80]	; (801a330 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 801a2de:	781b      	ldrb	r3, [r3, #0]
 801a2e0:	613b      	str	r3, [r7, #16]
 801a2e2:	e00b      	b.n	801a2fc <SEGGER_SYSVIEW_SendNumModules+0x44>
 801a2e4:	693b      	ldr	r3, [r7, #16]
 801a2e6:	b2da      	uxtb	r2, r3
 801a2e8:	697b      	ldr	r3, [r7, #20]
 801a2ea:	1c59      	adds	r1, r3, #1
 801a2ec:	6179      	str	r1, [r7, #20]
 801a2ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a2f2:	b2d2      	uxtb	r2, r2
 801a2f4:	701a      	strb	r2, [r3, #0]
 801a2f6:	693b      	ldr	r3, [r7, #16]
 801a2f8:	09db      	lsrs	r3, r3, #7
 801a2fa:	613b      	str	r3, [r7, #16]
 801a2fc:	693b      	ldr	r3, [r7, #16]
 801a2fe:	2b7f      	cmp	r3, #127	; 0x7f
 801a300:	d8f0      	bhi.n	801a2e4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 801a302:	697b      	ldr	r3, [r7, #20]
 801a304:	1c5a      	adds	r2, r3, #1
 801a306:	617a      	str	r2, [r7, #20]
 801a308:	693a      	ldr	r2, [r7, #16]
 801a30a:	b2d2      	uxtb	r2, r2
 801a30c:	701a      	strb	r2, [r3, #0]
 801a30e:	697b      	ldr	r3, [r7, #20]
 801a310:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 801a312:	221b      	movs	r2, #27
 801a314:	6879      	ldr	r1, [r7, #4]
 801a316:	68b8      	ldr	r0, [r7, #8]
 801a318:	f7fe ff80 	bl	801921c <_SendPacket>
  RECORD_END();
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	f383 8811 	msr	BASEPRI, r3
}
 801a322:	bf00      	nop
 801a324:	3718      	adds	r7, #24
 801a326:	46bd      	mov	sp, r7
 801a328:	bd80      	pop	{r7, pc}
 801a32a:	bf00      	nop
 801a32c:	2000ef94 	.word	0x2000ef94
 801a330:	2000ef90 	.word	0x2000ef90

0801a334 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 801a334:	b580      	push	{r7, lr}
 801a336:	b08a      	sub	sp, #40	; 0x28
 801a338:	af00      	add	r7, sp, #0
 801a33a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 801a33c:	f3ef 8311 	mrs	r3, BASEPRI
 801a340:	f04f 0120 	mov.w	r1, #32
 801a344:	f381 8811 	msr	BASEPRI, r1
 801a348:	617b      	str	r3, [r7, #20]
 801a34a:	4827      	ldr	r0, [pc, #156]	; (801a3e8 <SEGGER_SYSVIEW_Warn+0xb4>)
 801a34c:	f7fe fe8d 	bl	801906a <_PreparePacket>
 801a350:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 801a352:	2280      	movs	r2, #128	; 0x80
 801a354:	6879      	ldr	r1, [r7, #4]
 801a356:	6938      	ldr	r0, [r7, #16]
 801a358:	f7fe fe3a 	bl	8018fd0 <_EncodeStr>
 801a35c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	627b      	str	r3, [r7, #36]	; 0x24
 801a362:	2301      	movs	r3, #1
 801a364:	623b      	str	r3, [r7, #32]
 801a366:	e00b      	b.n	801a380 <SEGGER_SYSVIEW_Warn+0x4c>
 801a368:	6a3b      	ldr	r3, [r7, #32]
 801a36a:	b2da      	uxtb	r2, r3
 801a36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36e:	1c59      	adds	r1, r3, #1
 801a370:	6279      	str	r1, [r7, #36]	; 0x24
 801a372:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a376:	b2d2      	uxtb	r2, r2
 801a378:	701a      	strb	r2, [r3, #0]
 801a37a:	6a3b      	ldr	r3, [r7, #32]
 801a37c:	09db      	lsrs	r3, r3, #7
 801a37e:	623b      	str	r3, [r7, #32]
 801a380:	6a3b      	ldr	r3, [r7, #32]
 801a382:	2b7f      	cmp	r3, #127	; 0x7f
 801a384:	d8f0      	bhi.n	801a368 <SEGGER_SYSVIEW_Warn+0x34>
 801a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a388:	1c5a      	adds	r2, r3, #1
 801a38a:	627a      	str	r2, [r7, #36]	; 0x24
 801a38c:	6a3a      	ldr	r2, [r7, #32]
 801a38e:	b2d2      	uxtb	r2, r2
 801a390:	701a      	strb	r2, [r3, #0]
 801a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a394:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	61fb      	str	r3, [r7, #28]
 801a39a:	2300      	movs	r3, #0
 801a39c:	61bb      	str	r3, [r7, #24]
 801a39e:	e00b      	b.n	801a3b8 <SEGGER_SYSVIEW_Warn+0x84>
 801a3a0:	69bb      	ldr	r3, [r7, #24]
 801a3a2:	b2da      	uxtb	r2, r3
 801a3a4:	69fb      	ldr	r3, [r7, #28]
 801a3a6:	1c59      	adds	r1, r3, #1
 801a3a8:	61f9      	str	r1, [r7, #28]
 801a3aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 801a3ae:	b2d2      	uxtb	r2, r2
 801a3b0:	701a      	strb	r2, [r3, #0]
 801a3b2:	69bb      	ldr	r3, [r7, #24]
 801a3b4:	09db      	lsrs	r3, r3, #7
 801a3b6:	61bb      	str	r3, [r7, #24]
 801a3b8:	69bb      	ldr	r3, [r7, #24]
 801a3ba:	2b7f      	cmp	r3, #127	; 0x7f
 801a3bc:	d8f0      	bhi.n	801a3a0 <SEGGER_SYSVIEW_Warn+0x6c>
 801a3be:	69fb      	ldr	r3, [r7, #28]
 801a3c0:	1c5a      	adds	r2, r3, #1
 801a3c2:	61fa      	str	r2, [r7, #28]
 801a3c4:	69ba      	ldr	r2, [r7, #24]
 801a3c6:	b2d2      	uxtb	r2, r2
 801a3c8:	701a      	strb	r2, [r3, #0]
 801a3ca:	69fb      	ldr	r3, [r7, #28]
 801a3cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 801a3ce:	221a      	movs	r2, #26
 801a3d0:	68f9      	ldr	r1, [r7, #12]
 801a3d2:	6938      	ldr	r0, [r7, #16]
 801a3d4:	f7fe ff22 	bl	801921c <_SendPacket>
  RECORD_END();
 801a3d8:	697b      	ldr	r3, [r7, #20]
 801a3da:	f383 8811 	msr	BASEPRI, r3
}
 801a3de:	bf00      	nop
 801a3e0:	3728      	adds	r7, #40	; 0x28
 801a3e2:	46bd      	mov	sp, r7
 801a3e4:	bd80      	pop	{r7, pc}
 801a3e6:	bf00      	nop
 801a3e8:	2000ef94 	.word	0x2000ef94

0801a3ec <__libc_init_array>:
 801a3ec:	b570      	push	{r4, r5, r6, lr}
 801a3ee:	4e0d      	ldr	r6, [pc, #52]	; (801a424 <__libc_init_array+0x38>)
 801a3f0:	4c0d      	ldr	r4, [pc, #52]	; (801a428 <__libc_init_array+0x3c>)
 801a3f2:	1ba4      	subs	r4, r4, r6
 801a3f4:	10a4      	asrs	r4, r4, #2
 801a3f6:	2500      	movs	r5, #0
 801a3f8:	42a5      	cmp	r5, r4
 801a3fa:	d109      	bne.n	801a410 <__libc_init_array+0x24>
 801a3fc:	4e0b      	ldr	r6, [pc, #44]	; (801a42c <__libc_init_array+0x40>)
 801a3fe:	4c0c      	ldr	r4, [pc, #48]	; (801a430 <__libc_init_array+0x44>)
 801a400:	f003 f95e 	bl	801d6c0 <_init>
 801a404:	1ba4      	subs	r4, r4, r6
 801a406:	10a4      	asrs	r4, r4, #2
 801a408:	2500      	movs	r5, #0
 801a40a:	42a5      	cmp	r5, r4
 801a40c:	d105      	bne.n	801a41a <__libc_init_array+0x2e>
 801a40e:	bd70      	pop	{r4, r5, r6, pc}
 801a410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a414:	4798      	blx	r3
 801a416:	3501      	adds	r5, #1
 801a418:	e7ee      	b.n	801a3f8 <__libc_init_array+0xc>
 801a41a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a41e:	4798      	blx	r3
 801a420:	3501      	adds	r5, #1
 801a422:	e7f2      	b.n	801a40a <__libc_init_array+0x1e>
 801a424:	080203fc 	.word	0x080203fc
 801a428:	080203fc 	.word	0x080203fc
 801a42c:	080203fc 	.word	0x080203fc
 801a430:	08020400 	.word	0x08020400

0801a434 <malloc>:
 801a434:	4b02      	ldr	r3, [pc, #8]	; (801a440 <malloc+0xc>)
 801a436:	4601      	mov	r1, r0
 801a438:	6818      	ldr	r0, [r3, #0]
 801a43a:	f000 b873 	b.w	801a524 <_malloc_r>
 801a43e:	bf00      	nop
 801a440:	20000028 	.word	0x20000028

0801a444 <memcmp>:
 801a444:	b530      	push	{r4, r5, lr}
 801a446:	2400      	movs	r4, #0
 801a448:	42a2      	cmp	r2, r4
 801a44a:	d101      	bne.n	801a450 <memcmp+0xc>
 801a44c:	2000      	movs	r0, #0
 801a44e:	e007      	b.n	801a460 <memcmp+0x1c>
 801a450:	5d03      	ldrb	r3, [r0, r4]
 801a452:	3401      	adds	r4, #1
 801a454:	190d      	adds	r5, r1, r4
 801a456:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801a45a:	42ab      	cmp	r3, r5
 801a45c:	d0f4      	beq.n	801a448 <memcmp+0x4>
 801a45e:	1b58      	subs	r0, r3, r5
 801a460:	bd30      	pop	{r4, r5, pc}

0801a462 <memcpy>:
 801a462:	b510      	push	{r4, lr}
 801a464:	1e43      	subs	r3, r0, #1
 801a466:	440a      	add	r2, r1
 801a468:	4291      	cmp	r1, r2
 801a46a:	d100      	bne.n	801a46e <memcpy+0xc>
 801a46c:	bd10      	pop	{r4, pc}
 801a46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a472:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a476:	e7f7      	b.n	801a468 <memcpy+0x6>

0801a478 <memset>:
 801a478:	4402      	add	r2, r0
 801a47a:	4603      	mov	r3, r0
 801a47c:	4293      	cmp	r3, r2
 801a47e:	d100      	bne.n	801a482 <memset+0xa>
 801a480:	4770      	bx	lr
 801a482:	f803 1b01 	strb.w	r1, [r3], #1
 801a486:	e7f9      	b.n	801a47c <memset+0x4>

0801a488 <_free_r>:
 801a488:	b538      	push	{r3, r4, r5, lr}
 801a48a:	4605      	mov	r5, r0
 801a48c:	2900      	cmp	r1, #0
 801a48e:	d045      	beq.n	801a51c <_free_r+0x94>
 801a490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a494:	1f0c      	subs	r4, r1, #4
 801a496:	2b00      	cmp	r3, #0
 801a498:	bfb8      	it	lt
 801a49a:	18e4      	addlt	r4, r4, r3
 801a49c:	f001 fc8a 	bl	801bdb4 <__malloc_lock>
 801a4a0:	4a1f      	ldr	r2, [pc, #124]	; (801a520 <_free_r+0x98>)
 801a4a2:	6813      	ldr	r3, [r2, #0]
 801a4a4:	4610      	mov	r0, r2
 801a4a6:	b933      	cbnz	r3, 801a4b6 <_free_r+0x2e>
 801a4a8:	6063      	str	r3, [r4, #4]
 801a4aa:	6014      	str	r4, [r2, #0]
 801a4ac:	4628      	mov	r0, r5
 801a4ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4b2:	f001 bc80 	b.w	801bdb6 <__malloc_unlock>
 801a4b6:	42a3      	cmp	r3, r4
 801a4b8:	d90c      	bls.n	801a4d4 <_free_r+0x4c>
 801a4ba:	6821      	ldr	r1, [r4, #0]
 801a4bc:	1862      	adds	r2, r4, r1
 801a4be:	4293      	cmp	r3, r2
 801a4c0:	bf04      	itt	eq
 801a4c2:	681a      	ldreq	r2, [r3, #0]
 801a4c4:	685b      	ldreq	r3, [r3, #4]
 801a4c6:	6063      	str	r3, [r4, #4]
 801a4c8:	bf04      	itt	eq
 801a4ca:	1852      	addeq	r2, r2, r1
 801a4cc:	6022      	streq	r2, [r4, #0]
 801a4ce:	6004      	str	r4, [r0, #0]
 801a4d0:	e7ec      	b.n	801a4ac <_free_r+0x24>
 801a4d2:	4613      	mov	r3, r2
 801a4d4:	685a      	ldr	r2, [r3, #4]
 801a4d6:	b10a      	cbz	r2, 801a4dc <_free_r+0x54>
 801a4d8:	42a2      	cmp	r2, r4
 801a4da:	d9fa      	bls.n	801a4d2 <_free_r+0x4a>
 801a4dc:	6819      	ldr	r1, [r3, #0]
 801a4de:	1858      	adds	r0, r3, r1
 801a4e0:	42a0      	cmp	r0, r4
 801a4e2:	d10b      	bne.n	801a4fc <_free_r+0x74>
 801a4e4:	6820      	ldr	r0, [r4, #0]
 801a4e6:	4401      	add	r1, r0
 801a4e8:	1858      	adds	r0, r3, r1
 801a4ea:	4282      	cmp	r2, r0
 801a4ec:	6019      	str	r1, [r3, #0]
 801a4ee:	d1dd      	bne.n	801a4ac <_free_r+0x24>
 801a4f0:	6810      	ldr	r0, [r2, #0]
 801a4f2:	6852      	ldr	r2, [r2, #4]
 801a4f4:	605a      	str	r2, [r3, #4]
 801a4f6:	4401      	add	r1, r0
 801a4f8:	6019      	str	r1, [r3, #0]
 801a4fa:	e7d7      	b.n	801a4ac <_free_r+0x24>
 801a4fc:	d902      	bls.n	801a504 <_free_r+0x7c>
 801a4fe:	230c      	movs	r3, #12
 801a500:	602b      	str	r3, [r5, #0]
 801a502:	e7d3      	b.n	801a4ac <_free_r+0x24>
 801a504:	6820      	ldr	r0, [r4, #0]
 801a506:	1821      	adds	r1, r4, r0
 801a508:	428a      	cmp	r2, r1
 801a50a:	bf04      	itt	eq
 801a50c:	6811      	ldreq	r1, [r2, #0]
 801a50e:	6852      	ldreq	r2, [r2, #4]
 801a510:	6062      	str	r2, [r4, #4]
 801a512:	bf04      	itt	eq
 801a514:	1809      	addeq	r1, r1, r0
 801a516:	6021      	streq	r1, [r4, #0]
 801a518:	605c      	str	r4, [r3, #4]
 801a51a:	e7c7      	b.n	801a4ac <_free_r+0x24>
 801a51c:	bd38      	pop	{r3, r4, r5, pc}
 801a51e:	bf00      	nop
 801a520:	2000f078 	.word	0x2000f078

0801a524 <_malloc_r>:
 801a524:	b570      	push	{r4, r5, r6, lr}
 801a526:	1ccd      	adds	r5, r1, #3
 801a528:	f025 0503 	bic.w	r5, r5, #3
 801a52c:	3508      	adds	r5, #8
 801a52e:	2d0c      	cmp	r5, #12
 801a530:	bf38      	it	cc
 801a532:	250c      	movcc	r5, #12
 801a534:	2d00      	cmp	r5, #0
 801a536:	4606      	mov	r6, r0
 801a538:	db01      	blt.n	801a53e <_malloc_r+0x1a>
 801a53a:	42a9      	cmp	r1, r5
 801a53c:	d903      	bls.n	801a546 <_malloc_r+0x22>
 801a53e:	230c      	movs	r3, #12
 801a540:	6033      	str	r3, [r6, #0]
 801a542:	2000      	movs	r0, #0
 801a544:	bd70      	pop	{r4, r5, r6, pc}
 801a546:	f001 fc35 	bl	801bdb4 <__malloc_lock>
 801a54a:	4a21      	ldr	r2, [pc, #132]	; (801a5d0 <_malloc_r+0xac>)
 801a54c:	6814      	ldr	r4, [r2, #0]
 801a54e:	4621      	mov	r1, r4
 801a550:	b991      	cbnz	r1, 801a578 <_malloc_r+0x54>
 801a552:	4c20      	ldr	r4, [pc, #128]	; (801a5d4 <_malloc_r+0xb0>)
 801a554:	6823      	ldr	r3, [r4, #0]
 801a556:	b91b      	cbnz	r3, 801a560 <_malloc_r+0x3c>
 801a558:	4630      	mov	r0, r6
 801a55a:	f000 fc91 	bl	801ae80 <_sbrk_r>
 801a55e:	6020      	str	r0, [r4, #0]
 801a560:	4629      	mov	r1, r5
 801a562:	4630      	mov	r0, r6
 801a564:	f000 fc8c 	bl	801ae80 <_sbrk_r>
 801a568:	1c43      	adds	r3, r0, #1
 801a56a:	d124      	bne.n	801a5b6 <_malloc_r+0x92>
 801a56c:	230c      	movs	r3, #12
 801a56e:	6033      	str	r3, [r6, #0]
 801a570:	4630      	mov	r0, r6
 801a572:	f001 fc20 	bl	801bdb6 <__malloc_unlock>
 801a576:	e7e4      	b.n	801a542 <_malloc_r+0x1e>
 801a578:	680b      	ldr	r3, [r1, #0]
 801a57a:	1b5b      	subs	r3, r3, r5
 801a57c:	d418      	bmi.n	801a5b0 <_malloc_r+0x8c>
 801a57e:	2b0b      	cmp	r3, #11
 801a580:	d90f      	bls.n	801a5a2 <_malloc_r+0x7e>
 801a582:	600b      	str	r3, [r1, #0]
 801a584:	50cd      	str	r5, [r1, r3]
 801a586:	18cc      	adds	r4, r1, r3
 801a588:	4630      	mov	r0, r6
 801a58a:	f001 fc14 	bl	801bdb6 <__malloc_unlock>
 801a58e:	f104 000b 	add.w	r0, r4, #11
 801a592:	1d23      	adds	r3, r4, #4
 801a594:	f020 0007 	bic.w	r0, r0, #7
 801a598:	1ac3      	subs	r3, r0, r3
 801a59a:	d0d3      	beq.n	801a544 <_malloc_r+0x20>
 801a59c:	425a      	negs	r2, r3
 801a59e:	50e2      	str	r2, [r4, r3]
 801a5a0:	e7d0      	b.n	801a544 <_malloc_r+0x20>
 801a5a2:	428c      	cmp	r4, r1
 801a5a4:	684b      	ldr	r3, [r1, #4]
 801a5a6:	bf16      	itet	ne
 801a5a8:	6063      	strne	r3, [r4, #4]
 801a5aa:	6013      	streq	r3, [r2, #0]
 801a5ac:	460c      	movne	r4, r1
 801a5ae:	e7eb      	b.n	801a588 <_malloc_r+0x64>
 801a5b0:	460c      	mov	r4, r1
 801a5b2:	6849      	ldr	r1, [r1, #4]
 801a5b4:	e7cc      	b.n	801a550 <_malloc_r+0x2c>
 801a5b6:	1cc4      	adds	r4, r0, #3
 801a5b8:	f024 0403 	bic.w	r4, r4, #3
 801a5bc:	42a0      	cmp	r0, r4
 801a5be:	d005      	beq.n	801a5cc <_malloc_r+0xa8>
 801a5c0:	1a21      	subs	r1, r4, r0
 801a5c2:	4630      	mov	r0, r6
 801a5c4:	f000 fc5c 	bl	801ae80 <_sbrk_r>
 801a5c8:	3001      	adds	r0, #1
 801a5ca:	d0cf      	beq.n	801a56c <_malloc_r+0x48>
 801a5cc:	6025      	str	r5, [r4, #0]
 801a5ce:	e7db      	b.n	801a588 <_malloc_r+0x64>
 801a5d0:	2000f078 	.word	0x2000f078
 801a5d4:	2000f07c 	.word	0x2000f07c

0801a5d8 <__cvt>:
 801a5d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5da:	ed2d 8b02 	vpush	{d8}
 801a5de:	eeb0 8b40 	vmov.f64	d8, d0
 801a5e2:	b085      	sub	sp, #20
 801a5e4:	4617      	mov	r7, r2
 801a5e6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a5e8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a5ea:	ee18 2a90 	vmov	r2, s17
 801a5ee:	f025 0520 	bic.w	r5, r5, #32
 801a5f2:	2a00      	cmp	r2, #0
 801a5f4:	bfb6      	itet	lt
 801a5f6:	222d      	movlt	r2, #45	; 0x2d
 801a5f8:	2200      	movge	r2, #0
 801a5fa:	eeb1 8b40 	vneglt.f64	d8, d0
 801a5fe:	2d46      	cmp	r5, #70	; 0x46
 801a600:	460c      	mov	r4, r1
 801a602:	701a      	strb	r2, [r3, #0]
 801a604:	d004      	beq.n	801a610 <__cvt+0x38>
 801a606:	2d45      	cmp	r5, #69	; 0x45
 801a608:	d100      	bne.n	801a60c <__cvt+0x34>
 801a60a:	3401      	adds	r4, #1
 801a60c:	2102      	movs	r1, #2
 801a60e:	e000      	b.n	801a612 <__cvt+0x3a>
 801a610:	2103      	movs	r1, #3
 801a612:	ab03      	add	r3, sp, #12
 801a614:	9301      	str	r3, [sp, #4]
 801a616:	ab02      	add	r3, sp, #8
 801a618:	9300      	str	r3, [sp, #0]
 801a61a:	4622      	mov	r2, r4
 801a61c:	4633      	mov	r3, r6
 801a61e:	eeb0 0b48 	vmov.f64	d0, d8
 801a622:	f000 fd91 	bl	801b148 <_dtoa_r>
 801a626:	2d47      	cmp	r5, #71	; 0x47
 801a628:	d101      	bne.n	801a62e <__cvt+0x56>
 801a62a:	07fb      	lsls	r3, r7, #31
 801a62c:	d51e      	bpl.n	801a66c <__cvt+0x94>
 801a62e:	2d46      	cmp	r5, #70	; 0x46
 801a630:	eb00 0304 	add.w	r3, r0, r4
 801a634:	d10c      	bne.n	801a650 <__cvt+0x78>
 801a636:	7802      	ldrb	r2, [r0, #0]
 801a638:	2a30      	cmp	r2, #48	; 0x30
 801a63a:	d107      	bne.n	801a64c <__cvt+0x74>
 801a63c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a644:	bf1c      	itt	ne
 801a646:	f1c4 0401 	rsbne	r4, r4, #1
 801a64a:	6034      	strne	r4, [r6, #0]
 801a64c:	6832      	ldr	r2, [r6, #0]
 801a64e:	4413      	add	r3, r2
 801a650:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a658:	d007      	beq.n	801a66a <__cvt+0x92>
 801a65a:	2130      	movs	r1, #48	; 0x30
 801a65c:	9a03      	ldr	r2, [sp, #12]
 801a65e:	429a      	cmp	r2, r3
 801a660:	d204      	bcs.n	801a66c <__cvt+0x94>
 801a662:	1c54      	adds	r4, r2, #1
 801a664:	9403      	str	r4, [sp, #12]
 801a666:	7011      	strb	r1, [r2, #0]
 801a668:	e7f8      	b.n	801a65c <__cvt+0x84>
 801a66a:	9303      	str	r3, [sp, #12]
 801a66c:	9b03      	ldr	r3, [sp, #12]
 801a66e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a670:	1a1b      	subs	r3, r3, r0
 801a672:	6013      	str	r3, [r2, #0]
 801a674:	b005      	add	sp, #20
 801a676:	ecbd 8b02 	vpop	{d8}
 801a67a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a67c <__exponent>:
 801a67c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a67e:	2900      	cmp	r1, #0
 801a680:	4604      	mov	r4, r0
 801a682:	bfba      	itte	lt
 801a684:	4249      	neglt	r1, r1
 801a686:	232d      	movlt	r3, #45	; 0x2d
 801a688:	232b      	movge	r3, #43	; 0x2b
 801a68a:	2909      	cmp	r1, #9
 801a68c:	f804 2b02 	strb.w	r2, [r4], #2
 801a690:	7043      	strb	r3, [r0, #1]
 801a692:	dd20      	ble.n	801a6d6 <__exponent+0x5a>
 801a694:	f10d 0307 	add.w	r3, sp, #7
 801a698:	461f      	mov	r7, r3
 801a69a:	260a      	movs	r6, #10
 801a69c:	fb91 f5f6 	sdiv	r5, r1, r6
 801a6a0:	fb06 1115 	mls	r1, r6, r5, r1
 801a6a4:	3130      	adds	r1, #48	; 0x30
 801a6a6:	2d09      	cmp	r5, #9
 801a6a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a6ac:	f103 32ff 	add.w	r2, r3, #4294967295
 801a6b0:	4629      	mov	r1, r5
 801a6b2:	dc09      	bgt.n	801a6c8 <__exponent+0x4c>
 801a6b4:	3130      	adds	r1, #48	; 0x30
 801a6b6:	3b02      	subs	r3, #2
 801a6b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a6bc:	42bb      	cmp	r3, r7
 801a6be:	4622      	mov	r2, r4
 801a6c0:	d304      	bcc.n	801a6cc <__exponent+0x50>
 801a6c2:	1a10      	subs	r0, r2, r0
 801a6c4:	b003      	add	sp, #12
 801a6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6c8:	4613      	mov	r3, r2
 801a6ca:	e7e7      	b.n	801a69c <__exponent+0x20>
 801a6cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a6d0:	f804 2b01 	strb.w	r2, [r4], #1
 801a6d4:	e7f2      	b.n	801a6bc <__exponent+0x40>
 801a6d6:	2330      	movs	r3, #48	; 0x30
 801a6d8:	4419      	add	r1, r3
 801a6da:	7083      	strb	r3, [r0, #2]
 801a6dc:	1d02      	adds	r2, r0, #4
 801a6de:	70c1      	strb	r1, [r0, #3]
 801a6e0:	e7ef      	b.n	801a6c2 <__exponent+0x46>
 801a6e2:	0000      	movs	r0, r0
 801a6e4:	0000      	movs	r0, r0
	...

0801a6e8 <_printf_float>:
 801a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6ec:	b08d      	sub	sp, #52	; 0x34
 801a6ee:	460c      	mov	r4, r1
 801a6f0:	4616      	mov	r6, r2
 801a6f2:	461f      	mov	r7, r3
 801a6f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801a6f8:	4605      	mov	r5, r0
 801a6fa:	f001 fb3b 	bl	801bd74 <_localeconv_r>
 801a6fe:	f8d0 b000 	ldr.w	fp, [r0]
 801a702:	4658      	mov	r0, fp
 801a704:	f7e5 fd9c 	bl	8000240 <strlen>
 801a708:	2300      	movs	r3, #0
 801a70a:	930a      	str	r3, [sp, #40]	; 0x28
 801a70c:	f8d8 3000 	ldr.w	r3, [r8]
 801a710:	9005      	str	r0, [sp, #20]
 801a712:	3307      	adds	r3, #7
 801a714:	f023 0307 	bic.w	r3, r3, #7
 801a718:	f103 0108 	add.w	r1, r3, #8
 801a71c:	f894 9018 	ldrb.w	r9, [r4, #24]
 801a720:	6822      	ldr	r2, [r4, #0]
 801a722:	f8c8 1000 	str.w	r1, [r8]
 801a726:	e9d3 0100 	ldrd	r0, r1, [r3]
 801a72a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801a72e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 801a9b8 <_printf_float+0x2d0>
 801a732:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801a736:	eeb0 6bc0 	vabs.f64	d6, d0
 801a73a:	eeb4 6b47 	vcmp.f64	d6, d7
 801a73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a742:	dd24      	ble.n	801a78e <_printf_float+0xa6>
 801a744:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801a748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a74c:	d502      	bpl.n	801a754 <_printf_float+0x6c>
 801a74e:	232d      	movs	r3, #45	; 0x2d
 801a750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a754:	499a      	ldr	r1, [pc, #616]	; (801a9c0 <_printf_float+0x2d8>)
 801a756:	4b9b      	ldr	r3, [pc, #620]	; (801a9c4 <_printf_float+0x2dc>)
 801a758:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801a75c:	bf8c      	ite	hi
 801a75e:	4688      	movhi	r8, r1
 801a760:	4698      	movls	r8, r3
 801a762:	f022 0204 	bic.w	r2, r2, #4
 801a766:	2303      	movs	r3, #3
 801a768:	6123      	str	r3, [r4, #16]
 801a76a:	6022      	str	r2, [r4, #0]
 801a76c:	f04f 0a00 	mov.w	sl, #0
 801a770:	9700      	str	r7, [sp, #0]
 801a772:	4633      	mov	r3, r6
 801a774:	aa0b      	add	r2, sp, #44	; 0x2c
 801a776:	4621      	mov	r1, r4
 801a778:	4628      	mov	r0, r5
 801a77a:	f000 f9e1 	bl	801ab40 <_printf_common>
 801a77e:	3001      	adds	r0, #1
 801a780:	f040 8089 	bne.w	801a896 <_printf_float+0x1ae>
 801a784:	f04f 30ff 	mov.w	r0, #4294967295
 801a788:	b00d      	add	sp, #52	; 0x34
 801a78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a78e:	eeb4 0b40 	vcmp.f64	d0, d0
 801a792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a796:	d702      	bvc.n	801a79e <_printf_float+0xb6>
 801a798:	498b      	ldr	r1, [pc, #556]	; (801a9c8 <_printf_float+0x2e0>)
 801a79a:	4b8c      	ldr	r3, [pc, #560]	; (801a9cc <_printf_float+0x2e4>)
 801a79c:	e7dc      	b.n	801a758 <_printf_float+0x70>
 801a79e:	6861      	ldr	r1, [r4, #4]
 801a7a0:	1c4b      	adds	r3, r1, #1
 801a7a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801a7a6:	ab0a      	add	r3, sp, #40	; 0x28
 801a7a8:	a809      	add	r0, sp, #36	; 0x24
 801a7aa:	d13b      	bne.n	801a824 <_printf_float+0x13c>
 801a7ac:	2106      	movs	r1, #6
 801a7ae:	6061      	str	r1, [r4, #4]
 801a7b0:	f04f 0c00 	mov.w	ip, #0
 801a7b4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801a7b8:	e9cd 0900 	strd	r0, r9, [sp]
 801a7bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a7c0:	6022      	str	r2, [r4, #0]
 801a7c2:	6861      	ldr	r1, [r4, #4]
 801a7c4:	4628      	mov	r0, r5
 801a7c6:	f7ff ff07 	bl	801a5d8 <__cvt>
 801a7ca:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801a7ce:	2b47      	cmp	r3, #71	; 0x47
 801a7d0:	4680      	mov	r8, r0
 801a7d2:	d109      	bne.n	801a7e8 <_printf_float+0x100>
 801a7d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a7d6:	1cd8      	adds	r0, r3, #3
 801a7d8:	db02      	blt.n	801a7e0 <_printf_float+0xf8>
 801a7da:	6862      	ldr	r2, [r4, #4]
 801a7dc:	4293      	cmp	r3, r2
 801a7de:	dd47      	ble.n	801a870 <_printf_float+0x188>
 801a7e0:	f1a9 0902 	sub.w	r9, r9, #2
 801a7e4:	fa5f f989 	uxtb.w	r9, r9
 801a7e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801a7ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a7ee:	d824      	bhi.n	801a83a <_printf_float+0x152>
 801a7f0:	3901      	subs	r1, #1
 801a7f2:	464a      	mov	r2, r9
 801a7f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a7f8:	9109      	str	r1, [sp, #36]	; 0x24
 801a7fa:	f7ff ff3f 	bl	801a67c <__exponent>
 801a7fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a800:	1813      	adds	r3, r2, r0
 801a802:	2a01      	cmp	r2, #1
 801a804:	4682      	mov	sl, r0
 801a806:	6123      	str	r3, [r4, #16]
 801a808:	dc02      	bgt.n	801a810 <_printf_float+0x128>
 801a80a:	6822      	ldr	r2, [r4, #0]
 801a80c:	07d1      	lsls	r1, r2, #31
 801a80e:	d501      	bpl.n	801a814 <_printf_float+0x12c>
 801a810:	3301      	adds	r3, #1
 801a812:	6123      	str	r3, [r4, #16]
 801a814:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d0a9      	beq.n	801a770 <_printf_float+0x88>
 801a81c:	232d      	movs	r3, #45	; 0x2d
 801a81e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a822:	e7a5      	b.n	801a770 <_printf_float+0x88>
 801a824:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 801a828:	f000 8178 	beq.w	801ab1c <_printf_float+0x434>
 801a82c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801a830:	d1be      	bne.n	801a7b0 <_printf_float+0xc8>
 801a832:	2900      	cmp	r1, #0
 801a834:	d1bc      	bne.n	801a7b0 <_printf_float+0xc8>
 801a836:	2101      	movs	r1, #1
 801a838:	e7b9      	b.n	801a7ae <_printf_float+0xc6>
 801a83a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801a83e:	d119      	bne.n	801a874 <_printf_float+0x18c>
 801a840:	2900      	cmp	r1, #0
 801a842:	6863      	ldr	r3, [r4, #4]
 801a844:	dd0c      	ble.n	801a860 <_printf_float+0x178>
 801a846:	6121      	str	r1, [r4, #16]
 801a848:	b913      	cbnz	r3, 801a850 <_printf_float+0x168>
 801a84a:	6822      	ldr	r2, [r4, #0]
 801a84c:	07d2      	lsls	r2, r2, #31
 801a84e:	d502      	bpl.n	801a856 <_printf_float+0x16e>
 801a850:	3301      	adds	r3, #1
 801a852:	440b      	add	r3, r1
 801a854:	6123      	str	r3, [r4, #16]
 801a856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a858:	65a3      	str	r3, [r4, #88]	; 0x58
 801a85a:	f04f 0a00 	mov.w	sl, #0
 801a85e:	e7d9      	b.n	801a814 <_printf_float+0x12c>
 801a860:	b913      	cbnz	r3, 801a868 <_printf_float+0x180>
 801a862:	6822      	ldr	r2, [r4, #0]
 801a864:	07d0      	lsls	r0, r2, #31
 801a866:	d501      	bpl.n	801a86c <_printf_float+0x184>
 801a868:	3302      	adds	r3, #2
 801a86a:	e7f3      	b.n	801a854 <_printf_float+0x16c>
 801a86c:	2301      	movs	r3, #1
 801a86e:	e7f1      	b.n	801a854 <_printf_float+0x16c>
 801a870:	f04f 0967 	mov.w	r9, #103	; 0x67
 801a874:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a878:	4293      	cmp	r3, r2
 801a87a:	db05      	blt.n	801a888 <_printf_float+0x1a0>
 801a87c:	6822      	ldr	r2, [r4, #0]
 801a87e:	6123      	str	r3, [r4, #16]
 801a880:	07d1      	lsls	r1, r2, #31
 801a882:	d5e8      	bpl.n	801a856 <_printf_float+0x16e>
 801a884:	3301      	adds	r3, #1
 801a886:	e7e5      	b.n	801a854 <_printf_float+0x16c>
 801a888:	2b00      	cmp	r3, #0
 801a88a:	bfd4      	ite	le
 801a88c:	f1c3 0302 	rsble	r3, r3, #2
 801a890:	2301      	movgt	r3, #1
 801a892:	4413      	add	r3, r2
 801a894:	e7de      	b.n	801a854 <_printf_float+0x16c>
 801a896:	6823      	ldr	r3, [r4, #0]
 801a898:	055a      	lsls	r2, r3, #21
 801a89a:	d407      	bmi.n	801a8ac <_printf_float+0x1c4>
 801a89c:	6923      	ldr	r3, [r4, #16]
 801a89e:	4642      	mov	r2, r8
 801a8a0:	4631      	mov	r1, r6
 801a8a2:	4628      	mov	r0, r5
 801a8a4:	47b8      	blx	r7
 801a8a6:	3001      	adds	r0, #1
 801a8a8:	d12a      	bne.n	801a900 <_printf_float+0x218>
 801a8aa:	e76b      	b.n	801a784 <_printf_float+0x9c>
 801a8ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801a8b0:	f240 80de 	bls.w	801aa70 <_printf_float+0x388>
 801a8b4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801a8b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8c0:	d133      	bne.n	801a92a <_printf_float+0x242>
 801a8c2:	2301      	movs	r3, #1
 801a8c4:	4a42      	ldr	r2, [pc, #264]	; (801a9d0 <_printf_float+0x2e8>)
 801a8c6:	4631      	mov	r1, r6
 801a8c8:	4628      	mov	r0, r5
 801a8ca:	47b8      	blx	r7
 801a8cc:	3001      	adds	r0, #1
 801a8ce:	f43f af59 	beq.w	801a784 <_printf_float+0x9c>
 801a8d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a8d6:	429a      	cmp	r2, r3
 801a8d8:	db02      	blt.n	801a8e0 <_printf_float+0x1f8>
 801a8da:	6823      	ldr	r3, [r4, #0]
 801a8dc:	07d8      	lsls	r0, r3, #31
 801a8de:	d50f      	bpl.n	801a900 <_printf_float+0x218>
 801a8e0:	9b05      	ldr	r3, [sp, #20]
 801a8e2:	465a      	mov	r2, fp
 801a8e4:	4631      	mov	r1, r6
 801a8e6:	4628      	mov	r0, r5
 801a8e8:	47b8      	blx	r7
 801a8ea:	3001      	adds	r0, #1
 801a8ec:	f43f af4a 	beq.w	801a784 <_printf_float+0x9c>
 801a8f0:	f04f 0800 	mov.w	r8, #0
 801a8f4:	f104 091a 	add.w	r9, r4, #26
 801a8f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8fa:	3b01      	subs	r3, #1
 801a8fc:	4543      	cmp	r3, r8
 801a8fe:	dc09      	bgt.n	801a914 <_printf_float+0x22c>
 801a900:	6823      	ldr	r3, [r4, #0]
 801a902:	079b      	lsls	r3, r3, #30
 801a904:	f100 8105 	bmi.w	801ab12 <_printf_float+0x42a>
 801a908:	68e0      	ldr	r0, [r4, #12]
 801a90a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a90c:	4298      	cmp	r0, r3
 801a90e:	bfb8      	it	lt
 801a910:	4618      	movlt	r0, r3
 801a912:	e739      	b.n	801a788 <_printf_float+0xa0>
 801a914:	2301      	movs	r3, #1
 801a916:	464a      	mov	r2, r9
 801a918:	4631      	mov	r1, r6
 801a91a:	4628      	mov	r0, r5
 801a91c:	47b8      	blx	r7
 801a91e:	3001      	adds	r0, #1
 801a920:	f43f af30 	beq.w	801a784 <_printf_float+0x9c>
 801a924:	f108 0801 	add.w	r8, r8, #1
 801a928:	e7e6      	b.n	801a8f8 <_printf_float+0x210>
 801a92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	dc2b      	bgt.n	801a988 <_printf_float+0x2a0>
 801a930:	2301      	movs	r3, #1
 801a932:	4a27      	ldr	r2, [pc, #156]	; (801a9d0 <_printf_float+0x2e8>)
 801a934:	4631      	mov	r1, r6
 801a936:	4628      	mov	r0, r5
 801a938:	47b8      	blx	r7
 801a93a:	3001      	adds	r0, #1
 801a93c:	f43f af22 	beq.w	801a784 <_printf_float+0x9c>
 801a940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a942:	b923      	cbnz	r3, 801a94e <_printf_float+0x266>
 801a944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a946:	b913      	cbnz	r3, 801a94e <_printf_float+0x266>
 801a948:	6823      	ldr	r3, [r4, #0]
 801a94a:	07d9      	lsls	r1, r3, #31
 801a94c:	d5d8      	bpl.n	801a900 <_printf_float+0x218>
 801a94e:	9b05      	ldr	r3, [sp, #20]
 801a950:	465a      	mov	r2, fp
 801a952:	4631      	mov	r1, r6
 801a954:	4628      	mov	r0, r5
 801a956:	47b8      	blx	r7
 801a958:	3001      	adds	r0, #1
 801a95a:	f43f af13 	beq.w	801a784 <_printf_float+0x9c>
 801a95e:	f04f 0900 	mov.w	r9, #0
 801a962:	f104 0a1a 	add.w	sl, r4, #26
 801a966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a968:	425b      	negs	r3, r3
 801a96a:	454b      	cmp	r3, r9
 801a96c:	dc01      	bgt.n	801a972 <_printf_float+0x28a>
 801a96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a970:	e795      	b.n	801a89e <_printf_float+0x1b6>
 801a972:	2301      	movs	r3, #1
 801a974:	4652      	mov	r2, sl
 801a976:	4631      	mov	r1, r6
 801a978:	4628      	mov	r0, r5
 801a97a:	47b8      	blx	r7
 801a97c:	3001      	adds	r0, #1
 801a97e:	f43f af01 	beq.w	801a784 <_printf_float+0x9c>
 801a982:	f109 0901 	add.w	r9, r9, #1
 801a986:	e7ee      	b.n	801a966 <_printf_float+0x27e>
 801a988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a98a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a98c:	429a      	cmp	r2, r3
 801a98e:	bfa8      	it	ge
 801a990:	461a      	movge	r2, r3
 801a992:	2a00      	cmp	r2, #0
 801a994:	4691      	mov	r9, r2
 801a996:	dd07      	ble.n	801a9a8 <_printf_float+0x2c0>
 801a998:	4613      	mov	r3, r2
 801a99a:	4631      	mov	r1, r6
 801a99c:	4642      	mov	r2, r8
 801a99e:	4628      	mov	r0, r5
 801a9a0:	47b8      	blx	r7
 801a9a2:	3001      	adds	r0, #1
 801a9a4:	f43f aeee 	beq.w	801a784 <_printf_float+0x9c>
 801a9a8:	f104 031a 	add.w	r3, r4, #26
 801a9ac:	f04f 0a00 	mov.w	sl, #0
 801a9b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a9b4:	9307      	str	r3, [sp, #28]
 801a9b6:	e017      	b.n	801a9e8 <_printf_float+0x300>
 801a9b8:	ffffffff 	.word	0xffffffff
 801a9bc:	7fefffff 	.word	0x7fefffff
 801a9c0:	08020120 	.word	0x08020120
 801a9c4:	0802011c 	.word	0x0802011c
 801a9c8:	08020128 	.word	0x08020128
 801a9cc:	08020124 	.word	0x08020124
 801a9d0:	080202e3 	.word	0x080202e3
 801a9d4:	2301      	movs	r3, #1
 801a9d6:	9a07      	ldr	r2, [sp, #28]
 801a9d8:	4631      	mov	r1, r6
 801a9da:	4628      	mov	r0, r5
 801a9dc:	47b8      	blx	r7
 801a9de:	3001      	adds	r0, #1
 801a9e0:	f43f aed0 	beq.w	801a784 <_printf_float+0x9c>
 801a9e4:	f10a 0a01 	add.w	sl, sl, #1
 801a9e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a9ea:	9306      	str	r3, [sp, #24]
 801a9ec:	eba3 0309 	sub.w	r3, r3, r9
 801a9f0:	4553      	cmp	r3, sl
 801a9f2:	dcef      	bgt.n	801a9d4 <_printf_float+0x2ec>
 801a9f4:	9b06      	ldr	r3, [sp, #24]
 801a9f6:	4498      	add	r8, r3
 801a9f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a9fc:	429a      	cmp	r2, r3
 801a9fe:	db15      	blt.n	801aa2c <_printf_float+0x344>
 801aa00:	6823      	ldr	r3, [r4, #0]
 801aa02:	07da      	lsls	r2, r3, #31
 801aa04:	d412      	bmi.n	801aa2c <_printf_float+0x344>
 801aa06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa08:	9a06      	ldr	r2, [sp, #24]
 801aa0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa0c:	1a9a      	subs	r2, r3, r2
 801aa0e:	eba3 0a01 	sub.w	sl, r3, r1
 801aa12:	4592      	cmp	sl, r2
 801aa14:	bfa8      	it	ge
 801aa16:	4692      	movge	sl, r2
 801aa18:	f1ba 0f00 	cmp.w	sl, #0
 801aa1c:	dc0e      	bgt.n	801aa3c <_printf_float+0x354>
 801aa1e:	f04f 0800 	mov.w	r8, #0
 801aa22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801aa26:	f104 091a 	add.w	r9, r4, #26
 801aa2a:	e019      	b.n	801aa60 <_printf_float+0x378>
 801aa2c:	9b05      	ldr	r3, [sp, #20]
 801aa2e:	465a      	mov	r2, fp
 801aa30:	4631      	mov	r1, r6
 801aa32:	4628      	mov	r0, r5
 801aa34:	47b8      	blx	r7
 801aa36:	3001      	adds	r0, #1
 801aa38:	d1e5      	bne.n	801aa06 <_printf_float+0x31e>
 801aa3a:	e6a3      	b.n	801a784 <_printf_float+0x9c>
 801aa3c:	4653      	mov	r3, sl
 801aa3e:	4642      	mov	r2, r8
 801aa40:	4631      	mov	r1, r6
 801aa42:	4628      	mov	r0, r5
 801aa44:	47b8      	blx	r7
 801aa46:	3001      	adds	r0, #1
 801aa48:	d1e9      	bne.n	801aa1e <_printf_float+0x336>
 801aa4a:	e69b      	b.n	801a784 <_printf_float+0x9c>
 801aa4c:	2301      	movs	r3, #1
 801aa4e:	464a      	mov	r2, r9
 801aa50:	4631      	mov	r1, r6
 801aa52:	4628      	mov	r0, r5
 801aa54:	47b8      	blx	r7
 801aa56:	3001      	adds	r0, #1
 801aa58:	f43f ae94 	beq.w	801a784 <_printf_float+0x9c>
 801aa5c:	f108 0801 	add.w	r8, r8, #1
 801aa60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801aa64:	1a9b      	subs	r3, r3, r2
 801aa66:	eba3 030a 	sub.w	r3, r3, sl
 801aa6a:	4543      	cmp	r3, r8
 801aa6c:	dcee      	bgt.n	801aa4c <_printf_float+0x364>
 801aa6e:	e747      	b.n	801a900 <_printf_float+0x218>
 801aa70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aa72:	2a01      	cmp	r2, #1
 801aa74:	dc01      	bgt.n	801aa7a <_printf_float+0x392>
 801aa76:	07db      	lsls	r3, r3, #31
 801aa78:	d539      	bpl.n	801aaee <_printf_float+0x406>
 801aa7a:	2301      	movs	r3, #1
 801aa7c:	4642      	mov	r2, r8
 801aa7e:	4631      	mov	r1, r6
 801aa80:	4628      	mov	r0, r5
 801aa82:	47b8      	blx	r7
 801aa84:	3001      	adds	r0, #1
 801aa86:	f43f ae7d 	beq.w	801a784 <_printf_float+0x9c>
 801aa8a:	9b05      	ldr	r3, [sp, #20]
 801aa8c:	465a      	mov	r2, fp
 801aa8e:	4631      	mov	r1, r6
 801aa90:	4628      	mov	r0, r5
 801aa92:	47b8      	blx	r7
 801aa94:	3001      	adds	r0, #1
 801aa96:	f108 0801 	add.w	r8, r8, #1
 801aa9a:	f43f ae73 	beq.w	801a784 <_printf_float+0x9c>
 801aa9e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801aaa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aaa4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801aaa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaac:	f103 33ff 	add.w	r3, r3, #4294967295
 801aab0:	d018      	beq.n	801aae4 <_printf_float+0x3fc>
 801aab2:	4642      	mov	r2, r8
 801aab4:	4631      	mov	r1, r6
 801aab6:	4628      	mov	r0, r5
 801aab8:	47b8      	blx	r7
 801aaba:	3001      	adds	r0, #1
 801aabc:	d10e      	bne.n	801aadc <_printf_float+0x3f4>
 801aabe:	e661      	b.n	801a784 <_printf_float+0x9c>
 801aac0:	2301      	movs	r3, #1
 801aac2:	464a      	mov	r2, r9
 801aac4:	4631      	mov	r1, r6
 801aac6:	4628      	mov	r0, r5
 801aac8:	47b8      	blx	r7
 801aaca:	3001      	adds	r0, #1
 801aacc:	f43f ae5a 	beq.w	801a784 <_printf_float+0x9c>
 801aad0:	f108 0801 	add.w	r8, r8, #1
 801aad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aad6:	3b01      	subs	r3, #1
 801aad8:	4543      	cmp	r3, r8
 801aada:	dcf1      	bgt.n	801aac0 <_printf_float+0x3d8>
 801aadc:	4653      	mov	r3, sl
 801aade:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801aae2:	e6dd      	b.n	801a8a0 <_printf_float+0x1b8>
 801aae4:	f04f 0800 	mov.w	r8, #0
 801aae8:	f104 091a 	add.w	r9, r4, #26
 801aaec:	e7f2      	b.n	801aad4 <_printf_float+0x3ec>
 801aaee:	2301      	movs	r3, #1
 801aaf0:	e7df      	b.n	801aab2 <_printf_float+0x3ca>
 801aaf2:	2301      	movs	r3, #1
 801aaf4:	464a      	mov	r2, r9
 801aaf6:	4631      	mov	r1, r6
 801aaf8:	4628      	mov	r0, r5
 801aafa:	47b8      	blx	r7
 801aafc:	3001      	adds	r0, #1
 801aafe:	f43f ae41 	beq.w	801a784 <_printf_float+0x9c>
 801ab02:	f108 0801 	add.w	r8, r8, #1
 801ab06:	68e3      	ldr	r3, [r4, #12]
 801ab08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ab0a:	1a9b      	subs	r3, r3, r2
 801ab0c:	4543      	cmp	r3, r8
 801ab0e:	dcf0      	bgt.n	801aaf2 <_printf_float+0x40a>
 801ab10:	e6fa      	b.n	801a908 <_printf_float+0x220>
 801ab12:	f04f 0800 	mov.w	r8, #0
 801ab16:	f104 0919 	add.w	r9, r4, #25
 801ab1a:	e7f4      	b.n	801ab06 <_printf_float+0x41e>
 801ab1c:	2900      	cmp	r1, #0
 801ab1e:	f43f ae8a 	beq.w	801a836 <_printf_float+0x14e>
 801ab22:	f04f 0c00 	mov.w	ip, #0
 801ab26:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ab2a:	e9cd 0900 	strd	r0, r9, [sp]
 801ab2e:	6022      	str	r2, [r4, #0]
 801ab30:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801ab34:	4628      	mov	r0, r5
 801ab36:	f7ff fd4f 	bl	801a5d8 <__cvt>
 801ab3a:	4680      	mov	r8, r0
 801ab3c:	e64a      	b.n	801a7d4 <_printf_float+0xec>
 801ab3e:	bf00      	nop

0801ab40 <_printf_common>:
 801ab40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab44:	4691      	mov	r9, r2
 801ab46:	461f      	mov	r7, r3
 801ab48:	688a      	ldr	r2, [r1, #8]
 801ab4a:	690b      	ldr	r3, [r1, #16]
 801ab4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ab50:	4293      	cmp	r3, r2
 801ab52:	bfb8      	it	lt
 801ab54:	4613      	movlt	r3, r2
 801ab56:	f8c9 3000 	str.w	r3, [r9]
 801ab5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ab5e:	4606      	mov	r6, r0
 801ab60:	460c      	mov	r4, r1
 801ab62:	b112      	cbz	r2, 801ab6a <_printf_common+0x2a>
 801ab64:	3301      	adds	r3, #1
 801ab66:	f8c9 3000 	str.w	r3, [r9]
 801ab6a:	6823      	ldr	r3, [r4, #0]
 801ab6c:	0699      	lsls	r1, r3, #26
 801ab6e:	bf42      	ittt	mi
 801ab70:	f8d9 3000 	ldrmi.w	r3, [r9]
 801ab74:	3302      	addmi	r3, #2
 801ab76:	f8c9 3000 	strmi.w	r3, [r9]
 801ab7a:	6825      	ldr	r5, [r4, #0]
 801ab7c:	f015 0506 	ands.w	r5, r5, #6
 801ab80:	d107      	bne.n	801ab92 <_printf_common+0x52>
 801ab82:	f104 0a19 	add.w	sl, r4, #25
 801ab86:	68e3      	ldr	r3, [r4, #12]
 801ab88:	f8d9 2000 	ldr.w	r2, [r9]
 801ab8c:	1a9b      	subs	r3, r3, r2
 801ab8e:	42ab      	cmp	r3, r5
 801ab90:	dc28      	bgt.n	801abe4 <_printf_common+0xa4>
 801ab92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801ab96:	6822      	ldr	r2, [r4, #0]
 801ab98:	3300      	adds	r3, #0
 801ab9a:	bf18      	it	ne
 801ab9c:	2301      	movne	r3, #1
 801ab9e:	0692      	lsls	r2, r2, #26
 801aba0:	d42d      	bmi.n	801abfe <_printf_common+0xbe>
 801aba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aba6:	4639      	mov	r1, r7
 801aba8:	4630      	mov	r0, r6
 801abaa:	47c0      	blx	r8
 801abac:	3001      	adds	r0, #1
 801abae:	d020      	beq.n	801abf2 <_printf_common+0xb2>
 801abb0:	6823      	ldr	r3, [r4, #0]
 801abb2:	68e5      	ldr	r5, [r4, #12]
 801abb4:	f8d9 2000 	ldr.w	r2, [r9]
 801abb8:	f003 0306 	and.w	r3, r3, #6
 801abbc:	2b04      	cmp	r3, #4
 801abbe:	bf08      	it	eq
 801abc0:	1aad      	subeq	r5, r5, r2
 801abc2:	68a3      	ldr	r3, [r4, #8]
 801abc4:	6922      	ldr	r2, [r4, #16]
 801abc6:	bf0c      	ite	eq
 801abc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801abcc:	2500      	movne	r5, #0
 801abce:	4293      	cmp	r3, r2
 801abd0:	bfc4      	itt	gt
 801abd2:	1a9b      	subgt	r3, r3, r2
 801abd4:	18ed      	addgt	r5, r5, r3
 801abd6:	f04f 0900 	mov.w	r9, #0
 801abda:	341a      	adds	r4, #26
 801abdc:	454d      	cmp	r5, r9
 801abde:	d11a      	bne.n	801ac16 <_printf_common+0xd6>
 801abe0:	2000      	movs	r0, #0
 801abe2:	e008      	b.n	801abf6 <_printf_common+0xb6>
 801abe4:	2301      	movs	r3, #1
 801abe6:	4652      	mov	r2, sl
 801abe8:	4639      	mov	r1, r7
 801abea:	4630      	mov	r0, r6
 801abec:	47c0      	blx	r8
 801abee:	3001      	adds	r0, #1
 801abf0:	d103      	bne.n	801abfa <_printf_common+0xba>
 801abf2:	f04f 30ff 	mov.w	r0, #4294967295
 801abf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abfa:	3501      	adds	r5, #1
 801abfc:	e7c3      	b.n	801ab86 <_printf_common+0x46>
 801abfe:	18e1      	adds	r1, r4, r3
 801ac00:	1c5a      	adds	r2, r3, #1
 801ac02:	2030      	movs	r0, #48	; 0x30
 801ac04:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ac08:	4422      	add	r2, r4
 801ac0a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ac0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ac12:	3302      	adds	r3, #2
 801ac14:	e7c5      	b.n	801aba2 <_printf_common+0x62>
 801ac16:	2301      	movs	r3, #1
 801ac18:	4622      	mov	r2, r4
 801ac1a:	4639      	mov	r1, r7
 801ac1c:	4630      	mov	r0, r6
 801ac1e:	47c0      	blx	r8
 801ac20:	3001      	adds	r0, #1
 801ac22:	d0e6      	beq.n	801abf2 <_printf_common+0xb2>
 801ac24:	f109 0901 	add.w	r9, r9, #1
 801ac28:	e7d8      	b.n	801abdc <_printf_common+0x9c>
	...

0801ac2c <_printf_i>:
 801ac2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac30:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801ac34:	460c      	mov	r4, r1
 801ac36:	7e09      	ldrb	r1, [r1, #24]
 801ac38:	b085      	sub	sp, #20
 801ac3a:	296e      	cmp	r1, #110	; 0x6e
 801ac3c:	4617      	mov	r7, r2
 801ac3e:	4606      	mov	r6, r0
 801ac40:	4698      	mov	r8, r3
 801ac42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ac44:	f000 80b3 	beq.w	801adae <_printf_i+0x182>
 801ac48:	d822      	bhi.n	801ac90 <_printf_i+0x64>
 801ac4a:	2963      	cmp	r1, #99	; 0x63
 801ac4c:	d036      	beq.n	801acbc <_printf_i+0x90>
 801ac4e:	d80a      	bhi.n	801ac66 <_printf_i+0x3a>
 801ac50:	2900      	cmp	r1, #0
 801ac52:	f000 80b9 	beq.w	801adc8 <_printf_i+0x19c>
 801ac56:	2958      	cmp	r1, #88	; 0x58
 801ac58:	f000 8083 	beq.w	801ad62 <_printf_i+0x136>
 801ac5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ac60:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801ac64:	e032      	b.n	801accc <_printf_i+0xa0>
 801ac66:	2964      	cmp	r1, #100	; 0x64
 801ac68:	d001      	beq.n	801ac6e <_printf_i+0x42>
 801ac6a:	2969      	cmp	r1, #105	; 0x69
 801ac6c:	d1f6      	bne.n	801ac5c <_printf_i+0x30>
 801ac6e:	6820      	ldr	r0, [r4, #0]
 801ac70:	6813      	ldr	r3, [r2, #0]
 801ac72:	0605      	lsls	r5, r0, #24
 801ac74:	f103 0104 	add.w	r1, r3, #4
 801ac78:	d52a      	bpl.n	801acd0 <_printf_i+0xa4>
 801ac7a:	681b      	ldr	r3, [r3, #0]
 801ac7c:	6011      	str	r1, [r2, #0]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	da03      	bge.n	801ac8a <_printf_i+0x5e>
 801ac82:	222d      	movs	r2, #45	; 0x2d
 801ac84:	425b      	negs	r3, r3
 801ac86:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801ac8a:	486f      	ldr	r0, [pc, #444]	; (801ae48 <_printf_i+0x21c>)
 801ac8c:	220a      	movs	r2, #10
 801ac8e:	e039      	b.n	801ad04 <_printf_i+0xd8>
 801ac90:	2973      	cmp	r1, #115	; 0x73
 801ac92:	f000 809d 	beq.w	801add0 <_printf_i+0x1a4>
 801ac96:	d808      	bhi.n	801acaa <_printf_i+0x7e>
 801ac98:	296f      	cmp	r1, #111	; 0x6f
 801ac9a:	d020      	beq.n	801acde <_printf_i+0xb2>
 801ac9c:	2970      	cmp	r1, #112	; 0x70
 801ac9e:	d1dd      	bne.n	801ac5c <_printf_i+0x30>
 801aca0:	6823      	ldr	r3, [r4, #0]
 801aca2:	f043 0320 	orr.w	r3, r3, #32
 801aca6:	6023      	str	r3, [r4, #0]
 801aca8:	e003      	b.n	801acb2 <_printf_i+0x86>
 801acaa:	2975      	cmp	r1, #117	; 0x75
 801acac:	d017      	beq.n	801acde <_printf_i+0xb2>
 801acae:	2978      	cmp	r1, #120	; 0x78
 801acb0:	d1d4      	bne.n	801ac5c <_printf_i+0x30>
 801acb2:	2378      	movs	r3, #120	; 0x78
 801acb4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801acb8:	4864      	ldr	r0, [pc, #400]	; (801ae4c <_printf_i+0x220>)
 801acba:	e055      	b.n	801ad68 <_printf_i+0x13c>
 801acbc:	6813      	ldr	r3, [r2, #0]
 801acbe:	1d19      	adds	r1, r3, #4
 801acc0:	681b      	ldr	r3, [r3, #0]
 801acc2:	6011      	str	r1, [r2, #0]
 801acc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801acc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801accc:	2301      	movs	r3, #1
 801acce:	e08c      	b.n	801adea <_printf_i+0x1be>
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	6011      	str	r1, [r2, #0]
 801acd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801acd8:	bf18      	it	ne
 801acda:	b21b      	sxthne	r3, r3
 801acdc:	e7cf      	b.n	801ac7e <_printf_i+0x52>
 801acde:	6813      	ldr	r3, [r2, #0]
 801ace0:	6825      	ldr	r5, [r4, #0]
 801ace2:	1d18      	adds	r0, r3, #4
 801ace4:	6010      	str	r0, [r2, #0]
 801ace6:	0628      	lsls	r0, r5, #24
 801ace8:	d501      	bpl.n	801acee <_printf_i+0xc2>
 801acea:	681b      	ldr	r3, [r3, #0]
 801acec:	e002      	b.n	801acf4 <_printf_i+0xc8>
 801acee:	0668      	lsls	r0, r5, #25
 801acf0:	d5fb      	bpl.n	801acea <_printf_i+0xbe>
 801acf2:	881b      	ldrh	r3, [r3, #0]
 801acf4:	4854      	ldr	r0, [pc, #336]	; (801ae48 <_printf_i+0x21c>)
 801acf6:	296f      	cmp	r1, #111	; 0x6f
 801acf8:	bf14      	ite	ne
 801acfa:	220a      	movne	r2, #10
 801acfc:	2208      	moveq	r2, #8
 801acfe:	2100      	movs	r1, #0
 801ad00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ad04:	6865      	ldr	r5, [r4, #4]
 801ad06:	60a5      	str	r5, [r4, #8]
 801ad08:	2d00      	cmp	r5, #0
 801ad0a:	f2c0 8095 	blt.w	801ae38 <_printf_i+0x20c>
 801ad0e:	6821      	ldr	r1, [r4, #0]
 801ad10:	f021 0104 	bic.w	r1, r1, #4
 801ad14:	6021      	str	r1, [r4, #0]
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	d13d      	bne.n	801ad96 <_printf_i+0x16a>
 801ad1a:	2d00      	cmp	r5, #0
 801ad1c:	f040 808e 	bne.w	801ae3c <_printf_i+0x210>
 801ad20:	4665      	mov	r5, ip
 801ad22:	2a08      	cmp	r2, #8
 801ad24:	d10b      	bne.n	801ad3e <_printf_i+0x112>
 801ad26:	6823      	ldr	r3, [r4, #0]
 801ad28:	07db      	lsls	r3, r3, #31
 801ad2a:	d508      	bpl.n	801ad3e <_printf_i+0x112>
 801ad2c:	6923      	ldr	r3, [r4, #16]
 801ad2e:	6862      	ldr	r2, [r4, #4]
 801ad30:	429a      	cmp	r2, r3
 801ad32:	bfde      	ittt	le
 801ad34:	2330      	movle	r3, #48	; 0x30
 801ad36:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ad3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ad3e:	ebac 0305 	sub.w	r3, ip, r5
 801ad42:	6123      	str	r3, [r4, #16]
 801ad44:	f8cd 8000 	str.w	r8, [sp]
 801ad48:	463b      	mov	r3, r7
 801ad4a:	aa03      	add	r2, sp, #12
 801ad4c:	4621      	mov	r1, r4
 801ad4e:	4630      	mov	r0, r6
 801ad50:	f7ff fef6 	bl	801ab40 <_printf_common>
 801ad54:	3001      	adds	r0, #1
 801ad56:	d14d      	bne.n	801adf4 <_printf_i+0x1c8>
 801ad58:	f04f 30ff 	mov.w	r0, #4294967295
 801ad5c:	b005      	add	sp, #20
 801ad5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ad62:	4839      	ldr	r0, [pc, #228]	; (801ae48 <_printf_i+0x21c>)
 801ad64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801ad68:	6813      	ldr	r3, [r2, #0]
 801ad6a:	6821      	ldr	r1, [r4, #0]
 801ad6c:	1d1d      	adds	r5, r3, #4
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	6015      	str	r5, [r2, #0]
 801ad72:	060a      	lsls	r2, r1, #24
 801ad74:	d50b      	bpl.n	801ad8e <_printf_i+0x162>
 801ad76:	07ca      	lsls	r2, r1, #31
 801ad78:	bf44      	itt	mi
 801ad7a:	f041 0120 	orrmi.w	r1, r1, #32
 801ad7e:	6021      	strmi	r1, [r4, #0]
 801ad80:	b91b      	cbnz	r3, 801ad8a <_printf_i+0x15e>
 801ad82:	6822      	ldr	r2, [r4, #0]
 801ad84:	f022 0220 	bic.w	r2, r2, #32
 801ad88:	6022      	str	r2, [r4, #0]
 801ad8a:	2210      	movs	r2, #16
 801ad8c:	e7b7      	b.n	801acfe <_printf_i+0xd2>
 801ad8e:	064d      	lsls	r5, r1, #25
 801ad90:	bf48      	it	mi
 801ad92:	b29b      	uxthmi	r3, r3
 801ad94:	e7ef      	b.n	801ad76 <_printf_i+0x14a>
 801ad96:	4665      	mov	r5, ip
 801ad98:	fbb3 f1f2 	udiv	r1, r3, r2
 801ad9c:	fb02 3311 	mls	r3, r2, r1, r3
 801ada0:	5cc3      	ldrb	r3, [r0, r3]
 801ada2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801ada6:	460b      	mov	r3, r1
 801ada8:	2900      	cmp	r1, #0
 801adaa:	d1f5      	bne.n	801ad98 <_printf_i+0x16c>
 801adac:	e7b9      	b.n	801ad22 <_printf_i+0xf6>
 801adae:	6813      	ldr	r3, [r2, #0]
 801adb0:	6825      	ldr	r5, [r4, #0]
 801adb2:	6961      	ldr	r1, [r4, #20]
 801adb4:	1d18      	adds	r0, r3, #4
 801adb6:	6010      	str	r0, [r2, #0]
 801adb8:	0628      	lsls	r0, r5, #24
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	d501      	bpl.n	801adc2 <_printf_i+0x196>
 801adbe:	6019      	str	r1, [r3, #0]
 801adc0:	e002      	b.n	801adc8 <_printf_i+0x19c>
 801adc2:	066a      	lsls	r2, r5, #25
 801adc4:	d5fb      	bpl.n	801adbe <_printf_i+0x192>
 801adc6:	8019      	strh	r1, [r3, #0]
 801adc8:	2300      	movs	r3, #0
 801adca:	6123      	str	r3, [r4, #16]
 801adcc:	4665      	mov	r5, ip
 801adce:	e7b9      	b.n	801ad44 <_printf_i+0x118>
 801add0:	6813      	ldr	r3, [r2, #0]
 801add2:	1d19      	adds	r1, r3, #4
 801add4:	6011      	str	r1, [r2, #0]
 801add6:	681d      	ldr	r5, [r3, #0]
 801add8:	6862      	ldr	r2, [r4, #4]
 801adda:	2100      	movs	r1, #0
 801addc:	4628      	mov	r0, r5
 801adde:	f7e5 fa37 	bl	8000250 <memchr>
 801ade2:	b108      	cbz	r0, 801ade8 <_printf_i+0x1bc>
 801ade4:	1b40      	subs	r0, r0, r5
 801ade6:	6060      	str	r0, [r4, #4]
 801ade8:	6863      	ldr	r3, [r4, #4]
 801adea:	6123      	str	r3, [r4, #16]
 801adec:	2300      	movs	r3, #0
 801adee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801adf2:	e7a7      	b.n	801ad44 <_printf_i+0x118>
 801adf4:	6923      	ldr	r3, [r4, #16]
 801adf6:	462a      	mov	r2, r5
 801adf8:	4639      	mov	r1, r7
 801adfa:	4630      	mov	r0, r6
 801adfc:	47c0      	blx	r8
 801adfe:	3001      	adds	r0, #1
 801ae00:	d0aa      	beq.n	801ad58 <_printf_i+0x12c>
 801ae02:	6823      	ldr	r3, [r4, #0]
 801ae04:	079b      	lsls	r3, r3, #30
 801ae06:	d413      	bmi.n	801ae30 <_printf_i+0x204>
 801ae08:	68e0      	ldr	r0, [r4, #12]
 801ae0a:	9b03      	ldr	r3, [sp, #12]
 801ae0c:	4298      	cmp	r0, r3
 801ae0e:	bfb8      	it	lt
 801ae10:	4618      	movlt	r0, r3
 801ae12:	e7a3      	b.n	801ad5c <_printf_i+0x130>
 801ae14:	2301      	movs	r3, #1
 801ae16:	464a      	mov	r2, r9
 801ae18:	4639      	mov	r1, r7
 801ae1a:	4630      	mov	r0, r6
 801ae1c:	47c0      	blx	r8
 801ae1e:	3001      	adds	r0, #1
 801ae20:	d09a      	beq.n	801ad58 <_printf_i+0x12c>
 801ae22:	3501      	adds	r5, #1
 801ae24:	68e3      	ldr	r3, [r4, #12]
 801ae26:	9a03      	ldr	r2, [sp, #12]
 801ae28:	1a9b      	subs	r3, r3, r2
 801ae2a:	42ab      	cmp	r3, r5
 801ae2c:	dcf2      	bgt.n	801ae14 <_printf_i+0x1e8>
 801ae2e:	e7eb      	b.n	801ae08 <_printf_i+0x1dc>
 801ae30:	2500      	movs	r5, #0
 801ae32:	f104 0919 	add.w	r9, r4, #25
 801ae36:	e7f5      	b.n	801ae24 <_printf_i+0x1f8>
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d1ac      	bne.n	801ad96 <_printf_i+0x16a>
 801ae3c:	7803      	ldrb	r3, [r0, #0]
 801ae3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ae42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ae46:	e76c      	b.n	801ad22 <_printf_i+0xf6>
 801ae48:	0802012c 	.word	0x0802012c
 801ae4c:	0802013d 	.word	0x0802013d

0801ae50 <iprintf>:
 801ae50:	b40f      	push	{r0, r1, r2, r3}
 801ae52:	4b0a      	ldr	r3, [pc, #40]	; (801ae7c <iprintf+0x2c>)
 801ae54:	b513      	push	{r0, r1, r4, lr}
 801ae56:	681c      	ldr	r4, [r3, #0]
 801ae58:	b124      	cbz	r4, 801ae64 <iprintf+0x14>
 801ae5a:	69a3      	ldr	r3, [r4, #24]
 801ae5c:	b913      	cbnz	r3, 801ae64 <iprintf+0x14>
 801ae5e:	4620      	mov	r0, r4
 801ae60:	f000 fefe 	bl	801bc60 <__sinit>
 801ae64:	ab05      	add	r3, sp, #20
 801ae66:	9a04      	ldr	r2, [sp, #16]
 801ae68:	68a1      	ldr	r1, [r4, #8]
 801ae6a:	9301      	str	r3, [sp, #4]
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	f001 fdb3 	bl	801c9d8 <_vfiprintf_r>
 801ae72:	b002      	add	sp, #8
 801ae74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae78:	b004      	add	sp, #16
 801ae7a:	4770      	bx	lr
 801ae7c:	20000028 	.word	0x20000028

0801ae80 <_sbrk_r>:
 801ae80:	b538      	push	{r3, r4, r5, lr}
 801ae82:	4c06      	ldr	r4, [pc, #24]	; (801ae9c <_sbrk_r+0x1c>)
 801ae84:	2300      	movs	r3, #0
 801ae86:	4605      	mov	r5, r0
 801ae88:	4608      	mov	r0, r1
 801ae8a:	6023      	str	r3, [r4, #0]
 801ae8c:	f7e7 fa00 	bl	8002290 <_sbrk>
 801ae90:	1c43      	adds	r3, r0, #1
 801ae92:	d102      	bne.n	801ae9a <_sbrk_r+0x1a>
 801ae94:	6823      	ldr	r3, [r4, #0]
 801ae96:	b103      	cbz	r3, 801ae9a <_sbrk_r+0x1a>
 801ae98:	602b      	str	r3, [r5, #0]
 801ae9a:	bd38      	pop	{r3, r4, r5, pc}
 801ae9c:	20016440 	.word	0x20016440

0801aea0 <siprintf>:
 801aea0:	b40e      	push	{r1, r2, r3}
 801aea2:	b500      	push	{lr}
 801aea4:	b09c      	sub	sp, #112	; 0x70
 801aea6:	ab1d      	add	r3, sp, #116	; 0x74
 801aea8:	9002      	str	r0, [sp, #8]
 801aeaa:	9006      	str	r0, [sp, #24]
 801aeac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801aeb0:	4809      	ldr	r0, [pc, #36]	; (801aed8 <siprintf+0x38>)
 801aeb2:	9107      	str	r1, [sp, #28]
 801aeb4:	9104      	str	r1, [sp, #16]
 801aeb6:	4909      	ldr	r1, [pc, #36]	; (801aedc <siprintf+0x3c>)
 801aeb8:	f853 2b04 	ldr.w	r2, [r3], #4
 801aebc:	9105      	str	r1, [sp, #20]
 801aebe:	6800      	ldr	r0, [r0, #0]
 801aec0:	9301      	str	r3, [sp, #4]
 801aec2:	a902      	add	r1, sp, #8
 801aec4:	f001 fabc 	bl	801c440 <_svfiprintf_r>
 801aec8:	9b02      	ldr	r3, [sp, #8]
 801aeca:	2200      	movs	r2, #0
 801aecc:	701a      	strb	r2, [r3, #0]
 801aece:	b01c      	add	sp, #112	; 0x70
 801aed0:	f85d eb04 	ldr.w	lr, [sp], #4
 801aed4:	b003      	add	sp, #12
 801aed6:	4770      	bx	lr
 801aed8:	20000028 	.word	0x20000028
 801aedc:	ffff0208 	.word	0xffff0208

0801aee0 <siscanf>:
 801aee0:	b40e      	push	{r1, r2, r3}
 801aee2:	b530      	push	{r4, r5, lr}
 801aee4:	b09c      	sub	sp, #112	; 0x70
 801aee6:	ac1f      	add	r4, sp, #124	; 0x7c
 801aee8:	f44f 7201 	mov.w	r2, #516	; 0x204
 801aeec:	f854 5b04 	ldr.w	r5, [r4], #4
 801aef0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801aef4:	9002      	str	r0, [sp, #8]
 801aef6:	9006      	str	r0, [sp, #24]
 801aef8:	f7e5 f9a2 	bl	8000240 <strlen>
 801aefc:	4b0b      	ldr	r3, [pc, #44]	; (801af2c <siscanf+0x4c>)
 801aefe:	9003      	str	r0, [sp, #12]
 801af00:	9007      	str	r0, [sp, #28]
 801af02:	930b      	str	r3, [sp, #44]	; 0x2c
 801af04:	480a      	ldr	r0, [pc, #40]	; (801af30 <siscanf+0x50>)
 801af06:	9401      	str	r4, [sp, #4]
 801af08:	2300      	movs	r3, #0
 801af0a:	930f      	str	r3, [sp, #60]	; 0x3c
 801af0c:	9314      	str	r3, [sp, #80]	; 0x50
 801af0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af12:	f8ad 3016 	strh.w	r3, [sp, #22]
 801af16:	462a      	mov	r2, r5
 801af18:	4623      	mov	r3, r4
 801af1a:	a902      	add	r1, sp, #8
 801af1c:	6800      	ldr	r0, [r0, #0]
 801af1e:	f001 fbe1 	bl	801c6e4 <__ssvfiscanf_r>
 801af22:	b01c      	add	sp, #112	; 0x70
 801af24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801af28:	b003      	add	sp, #12
 801af2a:	4770      	bx	lr
 801af2c:	0801af57 	.word	0x0801af57
 801af30:	20000028 	.word	0x20000028

0801af34 <__sread>:
 801af34:	b510      	push	{r4, lr}
 801af36:	460c      	mov	r4, r1
 801af38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af3c:	f001 ffba 	bl	801ceb4 <_read_r>
 801af40:	2800      	cmp	r0, #0
 801af42:	bfab      	itete	ge
 801af44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801af46:	89a3      	ldrhlt	r3, [r4, #12]
 801af48:	181b      	addge	r3, r3, r0
 801af4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801af4e:	bfac      	ite	ge
 801af50:	6563      	strge	r3, [r4, #84]	; 0x54
 801af52:	81a3      	strhlt	r3, [r4, #12]
 801af54:	bd10      	pop	{r4, pc}

0801af56 <__seofread>:
 801af56:	2000      	movs	r0, #0
 801af58:	4770      	bx	lr

0801af5a <__swrite>:
 801af5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af5e:	461f      	mov	r7, r3
 801af60:	898b      	ldrh	r3, [r1, #12]
 801af62:	05db      	lsls	r3, r3, #23
 801af64:	4605      	mov	r5, r0
 801af66:	460c      	mov	r4, r1
 801af68:	4616      	mov	r6, r2
 801af6a:	d505      	bpl.n	801af78 <__swrite+0x1e>
 801af6c:	2302      	movs	r3, #2
 801af6e:	2200      	movs	r2, #0
 801af70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af74:	f000 ff0c 	bl	801bd90 <_lseek_r>
 801af78:	89a3      	ldrh	r3, [r4, #12]
 801af7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801af82:	81a3      	strh	r3, [r4, #12]
 801af84:	4632      	mov	r2, r6
 801af86:	463b      	mov	r3, r7
 801af88:	4628      	mov	r0, r5
 801af8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af8e:	f000 b82b 	b.w	801afe8 <_write_r>

0801af92 <__sseek>:
 801af92:	b510      	push	{r4, lr}
 801af94:	460c      	mov	r4, r1
 801af96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af9a:	f000 fef9 	bl	801bd90 <_lseek_r>
 801af9e:	1c43      	adds	r3, r0, #1
 801afa0:	89a3      	ldrh	r3, [r4, #12]
 801afa2:	bf15      	itete	ne
 801afa4:	6560      	strne	r0, [r4, #84]	; 0x54
 801afa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801afaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801afae:	81a3      	strheq	r3, [r4, #12]
 801afb0:	bf18      	it	ne
 801afb2:	81a3      	strhne	r3, [r4, #12]
 801afb4:	bd10      	pop	{r4, pc}

0801afb6 <__sclose>:
 801afb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801afba:	f000 b827 	b.w	801b00c <_close_r>

0801afbe <strncpy>:
 801afbe:	b570      	push	{r4, r5, r6, lr}
 801afc0:	3901      	subs	r1, #1
 801afc2:	4604      	mov	r4, r0
 801afc4:	b902      	cbnz	r2, 801afc8 <strncpy+0xa>
 801afc6:	bd70      	pop	{r4, r5, r6, pc}
 801afc8:	4623      	mov	r3, r4
 801afca:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801afce:	f803 5b01 	strb.w	r5, [r3], #1
 801afd2:	1e56      	subs	r6, r2, #1
 801afd4:	b92d      	cbnz	r5, 801afe2 <strncpy+0x24>
 801afd6:	4414      	add	r4, r2
 801afd8:	42a3      	cmp	r3, r4
 801afda:	d0f4      	beq.n	801afc6 <strncpy+0x8>
 801afdc:	f803 5b01 	strb.w	r5, [r3], #1
 801afe0:	e7fa      	b.n	801afd8 <strncpy+0x1a>
 801afe2:	461c      	mov	r4, r3
 801afe4:	4632      	mov	r2, r6
 801afe6:	e7ed      	b.n	801afc4 <strncpy+0x6>

0801afe8 <_write_r>:
 801afe8:	b538      	push	{r3, r4, r5, lr}
 801afea:	4c07      	ldr	r4, [pc, #28]	; (801b008 <_write_r+0x20>)
 801afec:	4605      	mov	r5, r0
 801afee:	4608      	mov	r0, r1
 801aff0:	4611      	mov	r1, r2
 801aff2:	2200      	movs	r2, #0
 801aff4:	6022      	str	r2, [r4, #0]
 801aff6:	461a      	mov	r2, r3
 801aff8:	f7e7 f8f9 	bl	80021ee <_write>
 801affc:	1c43      	adds	r3, r0, #1
 801affe:	d102      	bne.n	801b006 <_write_r+0x1e>
 801b000:	6823      	ldr	r3, [r4, #0]
 801b002:	b103      	cbz	r3, 801b006 <_write_r+0x1e>
 801b004:	602b      	str	r3, [r5, #0]
 801b006:	bd38      	pop	{r3, r4, r5, pc}
 801b008:	20016440 	.word	0x20016440

0801b00c <_close_r>:
 801b00c:	b538      	push	{r3, r4, r5, lr}
 801b00e:	4c06      	ldr	r4, [pc, #24]	; (801b028 <_close_r+0x1c>)
 801b010:	2300      	movs	r3, #0
 801b012:	4605      	mov	r5, r0
 801b014:	4608      	mov	r0, r1
 801b016:	6023      	str	r3, [r4, #0]
 801b018:	f7e7 f905 	bl	8002226 <_close>
 801b01c:	1c43      	adds	r3, r0, #1
 801b01e:	d102      	bne.n	801b026 <_close_r+0x1a>
 801b020:	6823      	ldr	r3, [r4, #0]
 801b022:	b103      	cbz	r3, 801b026 <_close_r+0x1a>
 801b024:	602b      	str	r3, [r5, #0]
 801b026:	bd38      	pop	{r3, r4, r5, pc}
 801b028:	20016440 	.word	0x20016440

0801b02c <quorem>:
 801b02c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b030:	6903      	ldr	r3, [r0, #16]
 801b032:	690c      	ldr	r4, [r1, #16]
 801b034:	42a3      	cmp	r3, r4
 801b036:	4680      	mov	r8, r0
 801b038:	f2c0 8082 	blt.w	801b140 <quorem+0x114>
 801b03c:	3c01      	subs	r4, #1
 801b03e:	f101 0714 	add.w	r7, r1, #20
 801b042:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801b046:	f100 0614 	add.w	r6, r0, #20
 801b04a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801b04e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801b052:	eb06 030c 	add.w	r3, r6, ip
 801b056:	3501      	adds	r5, #1
 801b058:	eb07 090c 	add.w	r9, r7, ip
 801b05c:	9301      	str	r3, [sp, #4]
 801b05e:	fbb0 f5f5 	udiv	r5, r0, r5
 801b062:	b395      	cbz	r5, 801b0ca <quorem+0x9e>
 801b064:	f04f 0a00 	mov.w	sl, #0
 801b068:	4638      	mov	r0, r7
 801b06a:	46b6      	mov	lr, r6
 801b06c:	46d3      	mov	fp, sl
 801b06e:	f850 2b04 	ldr.w	r2, [r0], #4
 801b072:	b293      	uxth	r3, r2
 801b074:	fb05 a303 	mla	r3, r5, r3, sl
 801b078:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b07c:	b29b      	uxth	r3, r3
 801b07e:	ebab 0303 	sub.w	r3, fp, r3
 801b082:	0c12      	lsrs	r2, r2, #16
 801b084:	f8de b000 	ldr.w	fp, [lr]
 801b088:	fb05 a202 	mla	r2, r5, r2, sl
 801b08c:	fa13 f38b 	uxtah	r3, r3, fp
 801b090:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801b094:	fa1f fb82 	uxth.w	fp, r2
 801b098:	f8de 2000 	ldr.w	r2, [lr]
 801b09c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801b0a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b0a4:	b29b      	uxth	r3, r3
 801b0a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b0aa:	4581      	cmp	r9, r0
 801b0ac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801b0b0:	f84e 3b04 	str.w	r3, [lr], #4
 801b0b4:	d2db      	bcs.n	801b06e <quorem+0x42>
 801b0b6:	f856 300c 	ldr.w	r3, [r6, ip]
 801b0ba:	b933      	cbnz	r3, 801b0ca <quorem+0x9e>
 801b0bc:	9b01      	ldr	r3, [sp, #4]
 801b0be:	3b04      	subs	r3, #4
 801b0c0:	429e      	cmp	r6, r3
 801b0c2:	461a      	mov	r2, r3
 801b0c4:	d330      	bcc.n	801b128 <quorem+0xfc>
 801b0c6:	f8c8 4010 	str.w	r4, [r8, #16]
 801b0ca:	4640      	mov	r0, r8
 801b0cc:	f001 f88a 	bl	801c1e4 <__mcmp>
 801b0d0:	2800      	cmp	r0, #0
 801b0d2:	db25      	blt.n	801b120 <quorem+0xf4>
 801b0d4:	3501      	adds	r5, #1
 801b0d6:	4630      	mov	r0, r6
 801b0d8:	f04f 0c00 	mov.w	ip, #0
 801b0dc:	f857 2b04 	ldr.w	r2, [r7], #4
 801b0e0:	f8d0 e000 	ldr.w	lr, [r0]
 801b0e4:	b293      	uxth	r3, r2
 801b0e6:	ebac 0303 	sub.w	r3, ip, r3
 801b0ea:	0c12      	lsrs	r2, r2, #16
 801b0ec:	fa13 f38e 	uxtah	r3, r3, lr
 801b0f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b0f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b0f8:	b29b      	uxth	r3, r3
 801b0fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b0fe:	45b9      	cmp	r9, r7
 801b100:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b104:	f840 3b04 	str.w	r3, [r0], #4
 801b108:	d2e8      	bcs.n	801b0dc <quorem+0xb0>
 801b10a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801b10e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801b112:	b92a      	cbnz	r2, 801b120 <quorem+0xf4>
 801b114:	3b04      	subs	r3, #4
 801b116:	429e      	cmp	r6, r3
 801b118:	461a      	mov	r2, r3
 801b11a:	d30b      	bcc.n	801b134 <quorem+0x108>
 801b11c:	f8c8 4010 	str.w	r4, [r8, #16]
 801b120:	4628      	mov	r0, r5
 801b122:	b003      	add	sp, #12
 801b124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b128:	6812      	ldr	r2, [r2, #0]
 801b12a:	3b04      	subs	r3, #4
 801b12c:	2a00      	cmp	r2, #0
 801b12e:	d1ca      	bne.n	801b0c6 <quorem+0x9a>
 801b130:	3c01      	subs	r4, #1
 801b132:	e7c5      	b.n	801b0c0 <quorem+0x94>
 801b134:	6812      	ldr	r2, [r2, #0]
 801b136:	3b04      	subs	r3, #4
 801b138:	2a00      	cmp	r2, #0
 801b13a:	d1ef      	bne.n	801b11c <quorem+0xf0>
 801b13c:	3c01      	subs	r4, #1
 801b13e:	e7ea      	b.n	801b116 <quorem+0xea>
 801b140:	2000      	movs	r0, #0
 801b142:	e7ee      	b.n	801b122 <quorem+0xf6>
 801b144:	0000      	movs	r0, r0
	...

0801b148 <_dtoa_r>:
 801b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b14c:	ec57 6b10 	vmov	r6, r7, d0
 801b150:	b095      	sub	sp, #84	; 0x54
 801b152:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b154:	9108      	str	r1, [sp, #32]
 801b156:	4604      	mov	r4, r0
 801b158:	920a      	str	r2, [sp, #40]	; 0x28
 801b15a:	9311      	str	r3, [sp, #68]	; 0x44
 801b15c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801b160:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801b164:	b93d      	cbnz	r5, 801b176 <_dtoa_r+0x2e>
 801b166:	2010      	movs	r0, #16
 801b168:	f7ff f964 	bl	801a434 <malloc>
 801b16c:	6260      	str	r0, [r4, #36]	; 0x24
 801b16e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b172:	6005      	str	r5, [r0, #0]
 801b174:	60c5      	str	r5, [r0, #12]
 801b176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b178:	6819      	ldr	r1, [r3, #0]
 801b17a:	b151      	cbz	r1, 801b192 <_dtoa_r+0x4a>
 801b17c:	685a      	ldr	r2, [r3, #4]
 801b17e:	604a      	str	r2, [r1, #4]
 801b180:	2301      	movs	r3, #1
 801b182:	4093      	lsls	r3, r2
 801b184:	608b      	str	r3, [r1, #8]
 801b186:	4620      	mov	r0, r4
 801b188:	f000 fe4a 	bl	801be20 <_Bfree>
 801b18c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b18e:	2200      	movs	r2, #0
 801b190:	601a      	str	r2, [r3, #0]
 801b192:	1e3b      	subs	r3, r7, #0
 801b194:	bfb9      	ittee	lt
 801b196:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b19a:	9303      	strlt	r3, [sp, #12]
 801b19c:	2300      	movge	r3, #0
 801b19e:	f8c8 3000 	strge.w	r3, [r8]
 801b1a2:	9d03      	ldr	r5, [sp, #12]
 801b1a4:	4bac      	ldr	r3, [pc, #688]	; (801b458 <_dtoa_r+0x310>)
 801b1a6:	bfbc      	itt	lt
 801b1a8:	2201      	movlt	r2, #1
 801b1aa:	f8c8 2000 	strlt.w	r2, [r8]
 801b1ae:	43ab      	bics	r3, r5
 801b1b0:	d11b      	bne.n	801b1ea <_dtoa_r+0xa2>
 801b1b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b1b4:	f242 730f 	movw	r3, #9999	; 0x270f
 801b1b8:	6013      	str	r3, [r2, #0]
 801b1ba:	9b02      	ldr	r3, [sp, #8]
 801b1bc:	b923      	cbnz	r3, 801b1c8 <_dtoa_r+0x80>
 801b1be:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801b1c2:	2d00      	cmp	r5, #0
 801b1c4:	f000 84dd 	beq.w	801bb82 <_dtoa_r+0xa3a>
 801b1c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b1ca:	b953      	cbnz	r3, 801b1e2 <_dtoa_r+0x9a>
 801b1cc:	4ba3      	ldr	r3, [pc, #652]	; (801b45c <_dtoa_r+0x314>)
 801b1ce:	e020      	b.n	801b212 <_dtoa_r+0xca>
 801b1d0:	4ba3      	ldr	r3, [pc, #652]	; (801b460 <_dtoa_r+0x318>)
 801b1d2:	9304      	str	r3, [sp, #16]
 801b1d4:	3308      	adds	r3, #8
 801b1d6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b1d8:	6013      	str	r3, [r2, #0]
 801b1da:	9804      	ldr	r0, [sp, #16]
 801b1dc:	b015      	add	sp, #84	; 0x54
 801b1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1e2:	4b9e      	ldr	r3, [pc, #632]	; (801b45c <_dtoa_r+0x314>)
 801b1e4:	9304      	str	r3, [sp, #16]
 801b1e6:	3303      	adds	r3, #3
 801b1e8:	e7f5      	b.n	801b1d6 <_dtoa_r+0x8e>
 801b1ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b1ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1f6:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b1fa:	d10c      	bne.n	801b216 <_dtoa_r+0xce>
 801b1fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b1fe:	2301      	movs	r3, #1
 801b200:	6013      	str	r3, [r2, #0]
 801b202:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b204:	2b00      	cmp	r3, #0
 801b206:	f000 84b9 	beq.w	801bb7c <_dtoa_r+0xa34>
 801b20a:	4b96      	ldr	r3, [pc, #600]	; (801b464 <_dtoa_r+0x31c>)
 801b20c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801b20e:	6013      	str	r3, [r2, #0]
 801b210:	3b01      	subs	r3, #1
 801b212:	9304      	str	r3, [sp, #16]
 801b214:	e7e1      	b.n	801b1da <_dtoa_r+0x92>
 801b216:	a913      	add	r1, sp, #76	; 0x4c
 801b218:	aa12      	add	r2, sp, #72	; 0x48
 801b21a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801b21e:	4620      	mov	r0, r4
 801b220:	f001 f857 	bl	801c2d2 <__d2b>
 801b224:	f3c5 560a 	ubfx	r6, r5, #20, #11
 801b228:	9001      	str	r0, [sp, #4]
 801b22a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b22c:	2e00      	cmp	r6, #0
 801b22e:	d046      	beq.n	801b2be <_dtoa_r+0x176>
 801b230:	9805      	ldr	r0, [sp, #20]
 801b232:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801b236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b23a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801b23e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b242:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801b246:	2700      	movs	r7, #0
 801b248:	ee07 aa90 	vmov	s15, sl
 801b24c:	ec43 2b16 	vmov	d6, r2, r3
 801b250:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801b254:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 801b440 <_dtoa_r+0x2f8>
 801b258:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801b25c:	ee36 7b47 	vsub.f64	d7, d6, d7
 801b260:	ed9f 6b79 	vldr	d6, [pc, #484]	; 801b448 <_dtoa_r+0x300>
 801b264:	eea7 6b04 	vfma.f64	d6, d7, d4
 801b268:	eeb0 7b46 	vmov.f64	d7, d6
 801b26c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801b450 <_dtoa_r+0x308>
 801b270:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b274:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b278:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b280:	ee16 ba90 	vmov	fp, s13
 801b284:	d508      	bpl.n	801b298 <_dtoa_r+0x150>
 801b286:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b28a:	eeb4 6b47 	vcmp.f64	d6, d7
 801b28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b292:	bf18      	it	ne
 801b294:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801b298:	f1bb 0f16 	cmp.w	fp, #22
 801b29c:	d834      	bhi.n	801b308 <_dtoa_r+0x1c0>
 801b29e:	4b72      	ldr	r3, [pc, #456]	; (801b468 <_dtoa_r+0x320>)
 801b2a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b2a4:	ed93 7b00 	vldr	d7, [r3]
 801b2a8:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b2ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2b4:	dd01      	ble.n	801b2ba <_dtoa_r+0x172>
 801b2b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b2ba:	2300      	movs	r3, #0
 801b2bc:	e025      	b.n	801b30a <_dtoa_r+0x1c2>
 801b2be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b2c0:	eb01 0a03 	add.w	sl, r1, r3
 801b2c4:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 801b2c8:	2b20      	cmp	r3, #32
 801b2ca:	dd17      	ble.n	801b2fc <_dtoa_r+0x1b4>
 801b2cc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 801b2d0:	9a02      	ldr	r2, [sp, #8]
 801b2d2:	409d      	lsls	r5, r3
 801b2d4:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 801b2d8:	fa22 f303 	lsr.w	r3, r2, r3
 801b2dc:	432b      	orrs	r3, r5
 801b2de:	ee07 3a90 	vmov	s15, r3
 801b2e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b2e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b2ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b2ee:	9805      	ldr	r0, [sp, #20]
 801b2f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b2f4:	2701      	movs	r7, #1
 801b2f6:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801b2fa:	e7a5      	b.n	801b248 <_dtoa_r+0x100>
 801b2fc:	9a02      	ldr	r2, [sp, #8]
 801b2fe:	f1c3 0320 	rsb	r3, r3, #32
 801b302:	fa02 f303 	lsl.w	r3, r2, r3
 801b306:	e7ea      	b.n	801b2de <_dtoa_r+0x196>
 801b308:	2301      	movs	r3, #1
 801b30a:	eba1 0a0a 	sub.w	sl, r1, sl
 801b30e:	9310      	str	r3, [sp, #64]	; 0x40
 801b310:	f1ba 0301 	subs.w	r3, sl, #1
 801b314:	9307      	str	r3, [sp, #28]
 801b316:	bf43      	ittte	mi
 801b318:	2300      	movmi	r3, #0
 801b31a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801b31e:	9307      	strmi	r3, [sp, #28]
 801b320:	f04f 0a00 	movpl.w	sl, #0
 801b324:	f1bb 0f00 	cmp.w	fp, #0
 801b328:	db19      	blt.n	801b35e <_dtoa_r+0x216>
 801b32a:	9b07      	ldr	r3, [sp, #28]
 801b32c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801b330:	445b      	add	r3, fp
 801b332:	9307      	str	r3, [sp, #28]
 801b334:	f04f 0800 	mov.w	r8, #0
 801b338:	9b08      	ldr	r3, [sp, #32]
 801b33a:	2b09      	cmp	r3, #9
 801b33c:	d866      	bhi.n	801b40c <_dtoa_r+0x2c4>
 801b33e:	2b05      	cmp	r3, #5
 801b340:	bfc4      	itt	gt
 801b342:	3b04      	subgt	r3, #4
 801b344:	9308      	strgt	r3, [sp, #32]
 801b346:	9b08      	ldr	r3, [sp, #32]
 801b348:	f1a3 0302 	sub.w	r3, r3, #2
 801b34c:	bfcc      	ite	gt
 801b34e:	2500      	movgt	r5, #0
 801b350:	2501      	movle	r5, #1
 801b352:	2b03      	cmp	r3, #3
 801b354:	d866      	bhi.n	801b424 <_dtoa_r+0x2dc>
 801b356:	e8df f003 	tbb	[pc, r3]
 801b35a:	5755      	.short	0x5755
 801b35c:	4909      	.short	0x4909
 801b35e:	2300      	movs	r3, #0
 801b360:	ebaa 0a0b 	sub.w	sl, sl, fp
 801b364:	f1cb 0800 	rsb	r8, fp, #0
 801b368:	930b      	str	r3, [sp, #44]	; 0x2c
 801b36a:	e7e5      	b.n	801b338 <_dtoa_r+0x1f0>
 801b36c:	2301      	movs	r3, #1
 801b36e:	9309      	str	r3, [sp, #36]	; 0x24
 801b370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b372:	2b00      	cmp	r3, #0
 801b374:	dd59      	ble.n	801b42a <_dtoa_r+0x2e2>
 801b376:	9306      	str	r3, [sp, #24]
 801b378:	4699      	mov	r9, r3
 801b37a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b37c:	2200      	movs	r2, #0
 801b37e:	6072      	str	r2, [r6, #4]
 801b380:	2204      	movs	r2, #4
 801b382:	f102 0014 	add.w	r0, r2, #20
 801b386:	4298      	cmp	r0, r3
 801b388:	6871      	ldr	r1, [r6, #4]
 801b38a:	d953      	bls.n	801b434 <_dtoa_r+0x2ec>
 801b38c:	4620      	mov	r0, r4
 801b38e:	f000 fd13 	bl	801bdb8 <_Balloc>
 801b392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b394:	6030      	str	r0, [r6, #0]
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	9304      	str	r3, [sp, #16]
 801b39a:	f1b9 0f0e 	cmp.w	r9, #14
 801b39e:	f200 80c2 	bhi.w	801b526 <_dtoa_r+0x3de>
 801b3a2:	2d00      	cmp	r5, #0
 801b3a4:	f000 80bf 	beq.w	801b526 <_dtoa_r+0x3de>
 801b3a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b3ac:	f1bb 0f00 	cmp.w	fp, #0
 801b3b0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801b3b4:	f340 80e6 	ble.w	801b584 <_dtoa_r+0x43c>
 801b3b8:	4a2b      	ldr	r2, [pc, #172]	; (801b468 <_dtoa_r+0x320>)
 801b3ba:	f00b 030f 	and.w	r3, fp, #15
 801b3be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b3c2:	ed93 7b00 	vldr	d7, [r3]
 801b3c6:	ea4f 132b 	mov.w	r3, fp, asr #4
 801b3ca:	06da      	lsls	r2, r3, #27
 801b3cc:	f140 80d8 	bpl.w	801b580 <_dtoa_r+0x438>
 801b3d0:	4a26      	ldr	r2, [pc, #152]	; (801b46c <_dtoa_r+0x324>)
 801b3d2:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 801b3d6:	ed92 6b08 	vldr	d6, [r2, #32]
 801b3da:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801b3de:	ed8d 6b02 	vstr	d6, [sp, #8]
 801b3e2:	f003 030f 	and.w	r3, r3, #15
 801b3e6:	2203      	movs	r2, #3
 801b3e8:	4920      	ldr	r1, [pc, #128]	; (801b46c <_dtoa_r+0x324>)
 801b3ea:	e04a      	b.n	801b482 <_dtoa_r+0x33a>
 801b3ec:	2301      	movs	r3, #1
 801b3ee:	9309      	str	r3, [sp, #36]	; 0x24
 801b3f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b3f2:	445b      	add	r3, fp
 801b3f4:	f103 0901 	add.w	r9, r3, #1
 801b3f8:	9306      	str	r3, [sp, #24]
 801b3fa:	464b      	mov	r3, r9
 801b3fc:	2b01      	cmp	r3, #1
 801b3fe:	bfb8      	it	lt
 801b400:	2301      	movlt	r3, #1
 801b402:	e7ba      	b.n	801b37a <_dtoa_r+0x232>
 801b404:	2300      	movs	r3, #0
 801b406:	e7b2      	b.n	801b36e <_dtoa_r+0x226>
 801b408:	2300      	movs	r3, #0
 801b40a:	e7f0      	b.n	801b3ee <_dtoa_r+0x2a6>
 801b40c:	2501      	movs	r5, #1
 801b40e:	2300      	movs	r3, #0
 801b410:	e9cd 3508 	strd	r3, r5, [sp, #32]
 801b414:	f04f 33ff 	mov.w	r3, #4294967295
 801b418:	9306      	str	r3, [sp, #24]
 801b41a:	4699      	mov	r9, r3
 801b41c:	2200      	movs	r2, #0
 801b41e:	2312      	movs	r3, #18
 801b420:	920a      	str	r2, [sp, #40]	; 0x28
 801b422:	e7aa      	b.n	801b37a <_dtoa_r+0x232>
 801b424:	2301      	movs	r3, #1
 801b426:	9309      	str	r3, [sp, #36]	; 0x24
 801b428:	e7f4      	b.n	801b414 <_dtoa_r+0x2cc>
 801b42a:	2301      	movs	r3, #1
 801b42c:	9306      	str	r3, [sp, #24]
 801b42e:	4699      	mov	r9, r3
 801b430:	461a      	mov	r2, r3
 801b432:	e7f5      	b.n	801b420 <_dtoa_r+0x2d8>
 801b434:	3101      	adds	r1, #1
 801b436:	6071      	str	r1, [r6, #4]
 801b438:	0052      	lsls	r2, r2, #1
 801b43a:	e7a2      	b.n	801b382 <_dtoa_r+0x23a>
 801b43c:	f3af 8000 	nop.w
 801b440:	636f4361 	.word	0x636f4361
 801b444:	3fd287a7 	.word	0x3fd287a7
 801b448:	8b60c8b3 	.word	0x8b60c8b3
 801b44c:	3fc68a28 	.word	0x3fc68a28
 801b450:	509f79fb 	.word	0x509f79fb
 801b454:	3fd34413 	.word	0x3fd34413
 801b458:	7ff00000 	.word	0x7ff00000
 801b45c:	08020157 	.word	0x08020157
 801b460:	0802014e 	.word	0x0802014e
 801b464:	080202e4 	.word	0x080202e4
 801b468:	080201e8 	.word	0x080201e8
 801b46c:	080201c0 	.word	0x080201c0
 801b470:	07de      	lsls	r6, r3, #31
 801b472:	d504      	bpl.n	801b47e <_dtoa_r+0x336>
 801b474:	ed91 6b00 	vldr	d6, [r1]
 801b478:	3201      	adds	r2, #1
 801b47a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b47e:	105b      	asrs	r3, r3, #1
 801b480:	3108      	adds	r1, #8
 801b482:	2b00      	cmp	r3, #0
 801b484:	d1f4      	bne.n	801b470 <_dtoa_r+0x328>
 801b486:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b48a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b48e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b492:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b494:	2b00      	cmp	r3, #0
 801b496:	f000 80a7 	beq.w	801b5e8 <_dtoa_r+0x4a0>
 801b49a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b49e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b4a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4aa:	f140 809d 	bpl.w	801b5e8 <_dtoa_r+0x4a0>
 801b4ae:	f1b9 0f00 	cmp.w	r9, #0
 801b4b2:	f000 8099 	beq.w	801b5e8 <_dtoa_r+0x4a0>
 801b4b6:	9b06      	ldr	r3, [sp, #24]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	dd30      	ble.n	801b51e <_dtoa_r+0x3d6>
 801b4bc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801b4c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b4c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b4c8:	9d06      	ldr	r5, [sp, #24]
 801b4ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 801b4ce:	3201      	adds	r2, #1
 801b4d0:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b4d4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801b4d8:	ee07 2a90 	vmov	s15, r2
 801b4dc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b4e0:	eea7 5b06 	vfma.f64	d5, d7, d6
 801b4e4:	ed8d 5b02 	vstr	d5, [sp, #8]
 801b4e8:	9a03      	ldr	r2, [sp, #12]
 801b4ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b4ee:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 801b4f2:	2d00      	cmp	r5, #0
 801b4f4:	d17b      	bne.n	801b5ee <_dtoa_r+0x4a6>
 801b4f6:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801b4fa:	ee36 6b47 	vsub.f64	d6, d6, d7
 801b4fe:	ec41 0b17 	vmov	d7, r0, r1
 801b502:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b50a:	f300 8253 	bgt.w	801b9b4 <_dtoa_r+0x86c>
 801b50e:	eeb1 7b47 	vneg.f64	d7, d7
 801b512:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b51a:	f100 8249 	bmi.w	801b9b0 <_dtoa_r+0x868>
 801b51e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b522:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b526:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b528:	2b00      	cmp	r3, #0
 801b52a:	f2c0 8119 	blt.w	801b760 <_dtoa_r+0x618>
 801b52e:	f1bb 0f0e 	cmp.w	fp, #14
 801b532:	f300 8115 	bgt.w	801b760 <_dtoa_r+0x618>
 801b536:	4bc3      	ldr	r3, [pc, #780]	; (801b844 <_dtoa_r+0x6fc>)
 801b538:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b53c:	ed93 6b00 	vldr	d6, [r3]
 801b540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b542:	2b00      	cmp	r3, #0
 801b544:	f280 80ba 	bge.w	801b6bc <_dtoa_r+0x574>
 801b548:	f1b9 0f00 	cmp.w	r9, #0
 801b54c:	f300 80b6 	bgt.w	801b6bc <_dtoa_r+0x574>
 801b550:	f040 822d 	bne.w	801b9ae <_dtoa_r+0x866>
 801b554:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801b558:	ee26 6b07 	vmul.f64	d6, d6, d7
 801b55c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b560:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b568:	464d      	mov	r5, r9
 801b56a:	464f      	mov	r7, r9
 801b56c:	f280 8204 	bge.w	801b978 <_dtoa_r+0x830>
 801b570:	9b04      	ldr	r3, [sp, #16]
 801b572:	9a04      	ldr	r2, [sp, #16]
 801b574:	1c5e      	adds	r6, r3, #1
 801b576:	2331      	movs	r3, #49	; 0x31
 801b578:	7013      	strb	r3, [r2, #0]
 801b57a:	f10b 0b01 	add.w	fp, fp, #1
 801b57e:	e1ff      	b.n	801b980 <_dtoa_r+0x838>
 801b580:	2202      	movs	r2, #2
 801b582:	e731      	b.n	801b3e8 <_dtoa_r+0x2a0>
 801b584:	d02e      	beq.n	801b5e4 <_dtoa_r+0x49c>
 801b586:	f1cb 0300 	rsb	r3, fp, #0
 801b58a:	4aae      	ldr	r2, [pc, #696]	; (801b844 <_dtoa_r+0x6fc>)
 801b58c:	f003 010f 	and.w	r1, r3, #15
 801b590:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801b594:	ed92 7b00 	vldr	d7, [r2]
 801b598:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 801b59c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801b5a0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801b5a4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801b5a8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b5ac:	49a6      	ldr	r1, [pc, #664]	; (801b848 <_dtoa_r+0x700>)
 801b5ae:	111b      	asrs	r3, r3, #4
 801b5b0:	2000      	movs	r0, #0
 801b5b2:	2202      	movs	r2, #2
 801b5b4:	b93b      	cbnz	r3, 801b5c6 <_dtoa_r+0x47e>
 801b5b6:	2800      	cmp	r0, #0
 801b5b8:	f43f af6b 	beq.w	801b492 <_dtoa_r+0x34a>
 801b5bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b5c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b5c4:	e765      	b.n	801b492 <_dtoa_r+0x34a>
 801b5c6:	07dd      	lsls	r5, r3, #31
 801b5c8:	d509      	bpl.n	801b5de <_dtoa_r+0x496>
 801b5ca:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801b5ce:	ed91 7b00 	vldr	d7, [r1]
 801b5d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 801b5d6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801b5da:	3201      	adds	r2, #1
 801b5dc:	2001      	movs	r0, #1
 801b5de:	105b      	asrs	r3, r3, #1
 801b5e0:	3108      	adds	r1, #8
 801b5e2:	e7e7      	b.n	801b5b4 <_dtoa_r+0x46c>
 801b5e4:	2202      	movs	r2, #2
 801b5e6:	e754      	b.n	801b492 <_dtoa_r+0x34a>
 801b5e8:	465b      	mov	r3, fp
 801b5ea:	464d      	mov	r5, r9
 801b5ec:	e770      	b.n	801b4d0 <_dtoa_r+0x388>
 801b5ee:	4a95      	ldr	r2, [pc, #596]	; (801b844 <_dtoa_r+0x6fc>)
 801b5f0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801b5f4:	ed12 4b02 	vldr	d4, [r2, #-8]
 801b5f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b5fa:	ec41 0b17 	vmov	d7, r0, r1
 801b5fe:	b35a      	cbz	r2, 801b658 <_dtoa_r+0x510>
 801b600:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801b604:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801b608:	9e04      	ldr	r6, [sp, #16]
 801b60a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801b60e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801b612:	ee35 7b47 	vsub.f64	d7, d5, d7
 801b616:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b61a:	ee14 2a90 	vmov	r2, s9
 801b61e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b622:	3230      	adds	r2, #48	; 0x30
 801b624:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b628:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b630:	f806 2b01 	strb.w	r2, [r6], #1
 801b634:	d43b      	bmi.n	801b6ae <_dtoa_r+0x566>
 801b636:	ee32 5b46 	vsub.f64	d5, d2, d6
 801b63a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801b63e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b642:	d472      	bmi.n	801b72a <_dtoa_r+0x5e2>
 801b644:	9a04      	ldr	r2, [sp, #16]
 801b646:	1ab2      	subs	r2, r6, r2
 801b648:	4295      	cmp	r5, r2
 801b64a:	f77f af68 	ble.w	801b51e <_dtoa_r+0x3d6>
 801b64e:	ee27 7b03 	vmul.f64	d7, d7, d3
 801b652:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b656:	e7de      	b.n	801b616 <_dtoa_r+0x4ce>
 801b658:	9a04      	ldr	r2, [sp, #16]
 801b65a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801b65e:	1956      	adds	r6, r2, r5
 801b660:	4611      	mov	r1, r2
 801b662:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801b666:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b66a:	ee14 2a90 	vmov	r2, s9
 801b66e:	3230      	adds	r2, #48	; 0x30
 801b670:	f801 2b01 	strb.w	r2, [r1], #1
 801b674:	42b1      	cmp	r1, r6
 801b676:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b67a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b67e:	d11a      	bne.n	801b6b6 <_dtoa_r+0x56e>
 801b680:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801b684:	ee37 4b05 	vadd.f64	d4, d7, d5
 801b688:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801b68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b690:	dc4b      	bgt.n	801b72a <_dtoa_r+0x5e2>
 801b692:	ee35 7b47 	vsub.f64	d7, d5, d7
 801b696:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b69e:	f57f af3e 	bpl.w	801b51e <_dtoa_r+0x3d6>
 801b6a2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b6a6:	2a30      	cmp	r2, #48	; 0x30
 801b6a8:	f106 31ff 	add.w	r1, r6, #4294967295
 801b6ac:	d001      	beq.n	801b6b2 <_dtoa_r+0x56a>
 801b6ae:	469b      	mov	fp, r3
 801b6b0:	e02a      	b.n	801b708 <_dtoa_r+0x5c0>
 801b6b2:	460e      	mov	r6, r1
 801b6b4:	e7f5      	b.n	801b6a2 <_dtoa_r+0x55a>
 801b6b6:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b6ba:	e7d4      	b.n	801b666 <_dtoa_r+0x51e>
 801b6bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b6c0:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801b6c4:	9e04      	ldr	r6, [sp, #16]
 801b6c6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801b6ca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801b6ce:	ee15 3a10 	vmov	r3, s10
 801b6d2:	3330      	adds	r3, #48	; 0x30
 801b6d4:	f806 3b01 	strb.w	r3, [r6], #1
 801b6d8:	9b04      	ldr	r3, [sp, #16]
 801b6da:	1af3      	subs	r3, r6, r3
 801b6dc:	4599      	cmp	r9, r3
 801b6de:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801b6e2:	eea3 7b46 	vfms.f64	d7, d3, d6
 801b6e6:	d133      	bne.n	801b750 <_dtoa_r+0x608>
 801b6e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 801b6ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6f4:	dc18      	bgt.n	801b728 <_dtoa_r+0x5e0>
 801b6f6:	eeb4 7b46 	vcmp.f64	d7, d6
 801b6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6fe:	d103      	bne.n	801b708 <_dtoa_r+0x5c0>
 801b700:	ee15 3a10 	vmov	r3, s10
 801b704:	07db      	lsls	r3, r3, #31
 801b706:	d40f      	bmi.n	801b728 <_dtoa_r+0x5e0>
 801b708:	9901      	ldr	r1, [sp, #4]
 801b70a:	4620      	mov	r0, r4
 801b70c:	f000 fb88 	bl	801be20 <_Bfree>
 801b710:	2300      	movs	r3, #0
 801b712:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b714:	7033      	strb	r3, [r6, #0]
 801b716:	f10b 0301 	add.w	r3, fp, #1
 801b71a:	6013      	str	r3, [r2, #0]
 801b71c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b71e:	2b00      	cmp	r3, #0
 801b720:	f43f ad5b 	beq.w	801b1da <_dtoa_r+0x92>
 801b724:	601e      	str	r6, [r3, #0]
 801b726:	e558      	b.n	801b1da <_dtoa_r+0x92>
 801b728:	465b      	mov	r3, fp
 801b72a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b72e:	2939      	cmp	r1, #57	; 0x39
 801b730:	f106 32ff 	add.w	r2, r6, #4294967295
 801b734:	d106      	bne.n	801b744 <_dtoa_r+0x5fc>
 801b736:	9904      	ldr	r1, [sp, #16]
 801b738:	4291      	cmp	r1, r2
 801b73a:	d107      	bne.n	801b74c <_dtoa_r+0x604>
 801b73c:	2230      	movs	r2, #48	; 0x30
 801b73e:	700a      	strb	r2, [r1, #0]
 801b740:	3301      	adds	r3, #1
 801b742:	460a      	mov	r2, r1
 801b744:	7811      	ldrb	r1, [r2, #0]
 801b746:	3101      	adds	r1, #1
 801b748:	7011      	strb	r1, [r2, #0]
 801b74a:	e7b0      	b.n	801b6ae <_dtoa_r+0x566>
 801b74c:	4616      	mov	r6, r2
 801b74e:	e7ec      	b.n	801b72a <_dtoa_r+0x5e2>
 801b750:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b754:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b75c:	d1b3      	bne.n	801b6c6 <_dtoa_r+0x57e>
 801b75e:	e7d3      	b.n	801b708 <_dtoa_r+0x5c0>
 801b760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b762:	2a00      	cmp	r2, #0
 801b764:	f000 808d 	beq.w	801b882 <_dtoa_r+0x73a>
 801b768:	9a08      	ldr	r2, [sp, #32]
 801b76a:	2a01      	cmp	r2, #1
 801b76c:	dc72      	bgt.n	801b854 <_dtoa_r+0x70c>
 801b76e:	2f00      	cmp	r7, #0
 801b770:	d06c      	beq.n	801b84c <_dtoa_r+0x704>
 801b772:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b776:	4645      	mov	r5, r8
 801b778:	4656      	mov	r6, sl
 801b77a:	9a07      	ldr	r2, [sp, #28]
 801b77c:	2101      	movs	r1, #1
 801b77e:	441a      	add	r2, r3
 801b780:	4620      	mov	r0, r4
 801b782:	449a      	add	sl, r3
 801b784:	9207      	str	r2, [sp, #28]
 801b786:	f000 fbeb 	bl	801bf60 <__i2b>
 801b78a:	4607      	mov	r7, r0
 801b78c:	2e00      	cmp	r6, #0
 801b78e:	dd0b      	ble.n	801b7a8 <_dtoa_r+0x660>
 801b790:	9b07      	ldr	r3, [sp, #28]
 801b792:	2b00      	cmp	r3, #0
 801b794:	dd08      	ble.n	801b7a8 <_dtoa_r+0x660>
 801b796:	42b3      	cmp	r3, r6
 801b798:	9a07      	ldr	r2, [sp, #28]
 801b79a:	bfa8      	it	ge
 801b79c:	4633      	movge	r3, r6
 801b79e:	ebaa 0a03 	sub.w	sl, sl, r3
 801b7a2:	1af6      	subs	r6, r6, r3
 801b7a4:	1ad3      	subs	r3, r2, r3
 801b7a6:	9307      	str	r3, [sp, #28]
 801b7a8:	f1b8 0f00 	cmp.w	r8, #0
 801b7ac:	d01d      	beq.n	801b7ea <_dtoa_r+0x6a2>
 801b7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d06a      	beq.n	801b88a <_dtoa_r+0x742>
 801b7b4:	b18d      	cbz	r5, 801b7da <_dtoa_r+0x692>
 801b7b6:	4639      	mov	r1, r7
 801b7b8:	462a      	mov	r2, r5
 801b7ba:	4620      	mov	r0, r4
 801b7bc:	f000 fc70 	bl	801c0a0 <__pow5mult>
 801b7c0:	9a01      	ldr	r2, [sp, #4]
 801b7c2:	4601      	mov	r1, r0
 801b7c4:	4607      	mov	r7, r0
 801b7c6:	4620      	mov	r0, r4
 801b7c8:	f000 fbd3 	bl	801bf72 <__multiply>
 801b7cc:	9901      	ldr	r1, [sp, #4]
 801b7ce:	900c      	str	r0, [sp, #48]	; 0x30
 801b7d0:	4620      	mov	r0, r4
 801b7d2:	f000 fb25 	bl	801be20 <_Bfree>
 801b7d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b7d8:	9301      	str	r3, [sp, #4]
 801b7da:	ebb8 0205 	subs.w	r2, r8, r5
 801b7de:	d004      	beq.n	801b7ea <_dtoa_r+0x6a2>
 801b7e0:	9901      	ldr	r1, [sp, #4]
 801b7e2:	4620      	mov	r0, r4
 801b7e4:	f000 fc5c 	bl	801c0a0 <__pow5mult>
 801b7e8:	9001      	str	r0, [sp, #4]
 801b7ea:	2101      	movs	r1, #1
 801b7ec:	4620      	mov	r0, r4
 801b7ee:	f000 fbb7 	bl	801bf60 <__i2b>
 801b7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b7f4:	4605      	mov	r5, r0
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	f000 81ca 	beq.w	801bb90 <_dtoa_r+0xa48>
 801b7fc:	461a      	mov	r2, r3
 801b7fe:	4601      	mov	r1, r0
 801b800:	4620      	mov	r0, r4
 801b802:	f000 fc4d 	bl	801c0a0 <__pow5mult>
 801b806:	9b08      	ldr	r3, [sp, #32]
 801b808:	2b01      	cmp	r3, #1
 801b80a:	4605      	mov	r5, r0
 801b80c:	dc44      	bgt.n	801b898 <_dtoa_r+0x750>
 801b80e:	9b02      	ldr	r3, [sp, #8]
 801b810:	2b00      	cmp	r3, #0
 801b812:	d13c      	bne.n	801b88e <_dtoa_r+0x746>
 801b814:	9b03      	ldr	r3, [sp, #12]
 801b816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d137      	bne.n	801b88e <_dtoa_r+0x746>
 801b81e:	9b03      	ldr	r3, [sp, #12]
 801b820:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b824:	0d1b      	lsrs	r3, r3, #20
 801b826:	051b      	lsls	r3, r3, #20
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d033      	beq.n	801b894 <_dtoa_r+0x74c>
 801b82c:	9b07      	ldr	r3, [sp, #28]
 801b82e:	3301      	adds	r3, #1
 801b830:	f10a 0a01 	add.w	sl, sl, #1
 801b834:	9307      	str	r3, [sp, #28]
 801b836:	f04f 0801 	mov.w	r8, #1
 801b83a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b83c:	bb73      	cbnz	r3, 801b89c <_dtoa_r+0x754>
 801b83e:	2001      	movs	r0, #1
 801b840:	e034      	b.n	801b8ac <_dtoa_r+0x764>
 801b842:	bf00      	nop
 801b844:	080201e8 	.word	0x080201e8
 801b848:	080201c0 	.word	0x080201c0
 801b84c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b84e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b852:	e790      	b.n	801b776 <_dtoa_r+0x62e>
 801b854:	f109 35ff 	add.w	r5, r9, #4294967295
 801b858:	45a8      	cmp	r8, r5
 801b85a:	bfbf      	itttt	lt
 801b85c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 801b85e:	eba5 0808 	sublt.w	r8, r5, r8
 801b862:	4443      	addlt	r3, r8
 801b864:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801b866:	bfb6      	itet	lt
 801b868:	46a8      	movlt	r8, r5
 801b86a:	eba8 0505 	subge.w	r5, r8, r5
 801b86e:	2500      	movlt	r5, #0
 801b870:	f1b9 0f00 	cmp.w	r9, #0
 801b874:	bfb9      	ittee	lt
 801b876:	ebaa 0609 	sublt.w	r6, sl, r9
 801b87a:	2300      	movlt	r3, #0
 801b87c:	4656      	movge	r6, sl
 801b87e:	464b      	movge	r3, r9
 801b880:	e77b      	b.n	801b77a <_dtoa_r+0x632>
 801b882:	4645      	mov	r5, r8
 801b884:	4656      	mov	r6, sl
 801b886:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b888:	e780      	b.n	801b78c <_dtoa_r+0x644>
 801b88a:	4642      	mov	r2, r8
 801b88c:	e7a8      	b.n	801b7e0 <_dtoa_r+0x698>
 801b88e:	f04f 0800 	mov.w	r8, #0
 801b892:	e7d2      	b.n	801b83a <_dtoa_r+0x6f2>
 801b894:	4698      	mov	r8, r3
 801b896:	e7d0      	b.n	801b83a <_dtoa_r+0x6f2>
 801b898:	f04f 0800 	mov.w	r8, #0
 801b89c:	692b      	ldr	r3, [r5, #16]
 801b89e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801b8a2:	6918      	ldr	r0, [r3, #16]
 801b8a4:	f000 fb0e 	bl	801bec4 <__hi0bits>
 801b8a8:	f1c0 0020 	rsb	r0, r0, #32
 801b8ac:	9b07      	ldr	r3, [sp, #28]
 801b8ae:	4418      	add	r0, r3
 801b8b0:	f010 001f 	ands.w	r0, r0, #31
 801b8b4:	d047      	beq.n	801b946 <_dtoa_r+0x7fe>
 801b8b6:	f1c0 0320 	rsb	r3, r0, #32
 801b8ba:	2b04      	cmp	r3, #4
 801b8bc:	dd3b      	ble.n	801b936 <_dtoa_r+0x7ee>
 801b8be:	9b07      	ldr	r3, [sp, #28]
 801b8c0:	f1c0 001c 	rsb	r0, r0, #28
 801b8c4:	4482      	add	sl, r0
 801b8c6:	4406      	add	r6, r0
 801b8c8:	4403      	add	r3, r0
 801b8ca:	9307      	str	r3, [sp, #28]
 801b8cc:	f1ba 0f00 	cmp.w	sl, #0
 801b8d0:	dd05      	ble.n	801b8de <_dtoa_r+0x796>
 801b8d2:	4652      	mov	r2, sl
 801b8d4:	9901      	ldr	r1, [sp, #4]
 801b8d6:	4620      	mov	r0, r4
 801b8d8:	f000 fc30 	bl	801c13c <__lshift>
 801b8dc:	9001      	str	r0, [sp, #4]
 801b8de:	9b07      	ldr	r3, [sp, #28]
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	dd05      	ble.n	801b8f0 <_dtoa_r+0x7a8>
 801b8e4:	4629      	mov	r1, r5
 801b8e6:	461a      	mov	r2, r3
 801b8e8:	4620      	mov	r0, r4
 801b8ea:	f000 fc27 	bl	801c13c <__lshift>
 801b8ee:	4605      	mov	r5, r0
 801b8f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b8f2:	b353      	cbz	r3, 801b94a <_dtoa_r+0x802>
 801b8f4:	4629      	mov	r1, r5
 801b8f6:	9801      	ldr	r0, [sp, #4]
 801b8f8:	f000 fc74 	bl	801c1e4 <__mcmp>
 801b8fc:	2800      	cmp	r0, #0
 801b8fe:	da24      	bge.n	801b94a <_dtoa_r+0x802>
 801b900:	2300      	movs	r3, #0
 801b902:	220a      	movs	r2, #10
 801b904:	9901      	ldr	r1, [sp, #4]
 801b906:	4620      	mov	r0, r4
 801b908:	f000 faa1 	bl	801be4e <__multadd>
 801b90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b90e:	9001      	str	r0, [sp, #4]
 801b910:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b914:	2b00      	cmp	r3, #0
 801b916:	f000 8142 	beq.w	801bb9e <_dtoa_r+0xa56>
 801b91a:	2300      	movs	r3, #0
 801b91c:	4639      	mov	r1, r7
 801b91e:	220a      	movs	r2, #10
 801b920:	4620      	mov	r0, r4
 801b922:	f000 fa94 	bl	801be4e <__multadd>
 801b926:	9b06      	ldr	r3, [sp, #24]
 801b928:	2b00      	cmp	r3, #0
 801b92a:	4607      	mov	r7, r0
 801b92c:	dc4b      	bgt.n	801b9c6 <_dtoa_r+0x87e>
 801b92e:	9b08      	ldr	r3, [sp, #32]
 801b930:	2b02      	cmp	r3, #2
 801b932:	dd48      	ble.n	801b9c6 <_dtoa_r+0x87e>
 801b934:	e011      	b.n	801b95a <_dtoa_r+0x812>
 801b936:	d0c9      	beq.n	801b8cc <_dtoa_r+0x784>
 801b938:	9a07      	ldr	r2, [sp, #28]
 801b93a:	331c      	adds	r3, #28
 801b93c:	441a      	add	r2, r3
 801b93e:	449a      	add	sl, r3
 801b940:	441e      	add	r6, r3
 801b942:	4613      	mov	r3, r2
 801b944:	e7c1      	b.n	801b8ca <_dtoa_r+0x782>
 801b946:	4603      	mov	r3, r0
 801b948:	e7f6      	b.n	801b938 <_dtoa_r+0x7f0>
 801b94a:	f1b9 0f00 	cmp.w	r9, #0
 801b94e:	dc34      	bgt.n	801b9ba <_dtoa_r+0x872>
 801b950:	9b08      	ldr	r3, [sp, #32]
 801b952:	2b02      	cmp	r3, #2
 801b954:	dd31      	ble.n	801b9ba <_dtoa_r+0x872>
 801b956:	f8cd 9018 	str.w	r9, [sp, #24]
 801b95a:	9b06      	ldr	r3, [sp, #24]
 801b95c:	b963      	cbnz	r3, 801b978 <_dtoa_r+0x830>
 801b95e:	4629      	mov	r1, r5
 801b960:	2205      	movs	r2, #5
 801b962:	4620      	mov	r0, r4
 801b964:	f000 fa73 	bl	801be4e <__multadd>
 801b968:	4601      	mov	r1, r0
 801b96a:	4605      	mov	r5, r0
 801b96c:	9801      	ldr	r0, [sp, #4]
 801b96e:	f000 fc39 	bl	801c1e4 <__mcmp>
 801b972:	2800      	cmp	r0, #0
 801b974:	f73f adfc 	bgt.w	801b570 <_dtoa_r+0x428>
 801b978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b97a:	9e04      	ldr	r6, [sp, #16]
 801b97c:	ea6f 0b03 	mvn.w	fp, r3
 801b980:	f04f 0900 	mov.w	r9, #0
 801b984:	4629      	mov	r1, r5
 801b986:	4620      	mov	r0, r4
 801b988:	f000 fa4a 	bl	801be20 <_Bfree>
 801b98c:	2f00      	cmp	r7, #0
 801b98e:	f43f aebb 	beq.w	801b708 <_dtoa_r+0x5c0>
 801b992:	f1b9 0f00 	cmp.w	r9, #0
 801b996:	d005      	beq.n	801b9a4 <_dtoa_r+0x85c>
 801b998:	45b9      	cmp	r9, r7
 801b99a:	d003      	beq.n	801b9a4 <_dtoa_r+0x85c>
 801b99c:	4649      	mov	r1, r9
 801b99e:	4620      	mov	r0, r4
 801b9a0:	f000 fa3e 	bl	801be20 <_Bfree>
 801b9a4:	4639      	mov	r1, r7
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	f000 fa3a 	bl	801be20 <_Bfree>
 801b9ac:	e6ac      	b.n	801b708 <_dtoa_r+0x5c0>
 801b9ae:	2500      	movs	r5, #0
 801b9b0:	462f      	mov	r7, r5
 801b9b2:	e7e1      	b.n	801b978 <_dtoa_r+0x830>
 801b9b4:	469b      	mov	fp, r3
 801b9b6:	462f      	mov	r7, r5
 801b9b8:	e5da      	b.n	801b570 <_dtoa_r+0x428>
 801b9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9bc:	f8cd 9018 	str.w	r9, [sp, #24]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	f000 80f3 	beq.w	801bbac <_dtoa_r+0xa64>
 801b9c6:	2e00      	cmp	r6, #0
 801b9c8:	dd05      	ble.n	801b9d6 <_dtoa_r+0x88e>
 801b9ca:	4639      	mov	r1, r7
 801b9cc:	4632      	mov	r2, r6
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	f000 fbb4 	bl	801c13c <__lshift>
 801b9d4:	4607      	mov	r7, r0
 801b9d6:	f1b8 0f00 	cmp.w	r8, #0
 801b9da:	d04c      	beq.n	801ba76 <_dtoa_r+0x92e>
 801b9dc:	6879      	ldr	r1, [r7, #4]
 801b9de:	4620      	mov	r0, r4
 801b9e0:	f000 f9ea 	bl	801bdb8 <_Balloc>
 801b9e4:	693a      	ldr	r2, [r7, #16]
 801b9e6:	3202      	adds	r2, #2
 801b9e8:	4606      	mov	r6, r0
 801b9ea:	0092      	lsls	r2, r2, #2
 801b9ec:	f107 010c 	add.w	r1, r7, #12
 801b9f0:	300c      	adds	r0, #12
 801b9f2:	f7fe fd36 	bl	801a462 <memcpy>
 801b9f6:	2201      	movs	r2, #1
 801b9f8:	4631      	mov	r1, r6
 801b9fa:	4620      	mov	r0, r4
 801b9fc:	f000 fb9e 	bl	801c13c <__lshift>
 801ba00:	9b02      	ldr	r3, [sp, #8]
 801ba02:	f8dd a010 	ldr.w	sl, [sp, #16]
 801ba06:	f003 0301 	and.w	r3, r3, #1
 801ba0a:	46b9      	mov	r9, r7
 801ba0c:	9307      	str	r3, [sp, #28]
 801ba0e:	4607      	mov	r7, r0
 801ba10:	4629      	mov	r1, r5
 801ba12:	9801      	ldr	r0, [sp, #4]
 801ba14:	f7ff fb0a 	bl	801b02c <quorem>
 801ba18:	4649      	mov	r1, r9
 801ba1a:	4606      	mov	r6, r0
 801ba1c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801ba20:	9801      	ldr	r0, [sp, #4]
 801ba22:	f000 fbdf 	bl	801c1e4 <__mcmp>
 801ba26:	463a      	mov	r2, r7
 801ba28:	9002      	str	r0, [sp, #8]
 801ba2a:	4629      	mov	r1, r5
 801ba2c:	4620      	mov	r0, r4
 801ba2e:	f000 fbf3 	bl	801c218 <__mdiff>
 801ba32:	68c3      	ldr	r3, [r0, #12]
 801ba34:	4602      	mov	r2, r0
 801ba36:	bb03      	cbnz	r3, 801ba7a <_dtoa_r+0x932>
 801ba38:	4601      	mov	r1, r0
 801ba3a:	9009      	str	r0, [sp, #36]	; 0x24
 801ba3c:	9801      	ldr	r0, [sp, #4]
 801ba3e:	f000 fbd1 	bl	801c1e4 <__mcmp>
 801ba42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ba44:	4603      	mov	r3, r0
 801ba46:	4611      	mov	r1, r2
 801ba48:	4620      	mov	r0, r4
 801ba4a:	9309      	str	r3, [sp, #36]	; 0x24
 801ba4c:	f000 f9e8 	bl	801be20 <_Bfree>
 801ba50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba52:	b9a3      	cbnz	r3, 801ba7e <_dtoa_r+0x936>
 801ba54:	9a08      	ldr	r2, [sp, #32]
 801ba56:	b992      	cbnz	r2, 801ba7e <_dtoa_r+0x936>
 801ba58:	9a07      	ldr	r2, [sp, #28]
 801ba5a:	b982      	cbnz	r2, 801ba7e <_dtoa_r+0x936>
 801ba5c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801ba60:	d029      	beq.n	801bab6 <_dtoa_r+0x96e>
 801ba62:	9b02      	ldr	r3, [sp, #8]
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	dd01      	ble.n	801ba6c <_dtoa_r+0x924>
 801ba68:	f106 0831 	add.w	r8, r6, #49	; 0x31
 801ba6c:	f10a 0601 	add.w	r6, sl, #1
 801ba70:	f88a 8000 	strb.w	r8, [sl]
 801ba74:	e786      	b.n	801b984 <_dtoa_r+0x83c>
 801ba76:	4638      	mov	r0, r7
 801ba78:	e7c2      	b.n	801ba00 <_dtoa_r+0x8b8>
 801ba7a:	2301      	movs	r3, #1
 801ba7c:	e7e3      	b.n	801ba46 <_dtoa_r+0x8fe>
 801ba7e:	9a02      	ldr	r2, [sp, #8]
 801ba80:	2a00      	cmp	r2, #0
 801ba82:	db04      	blt.n	801ba8e <_dtoa_r+0x946>
 801ba84:	d124      	bne.n	801bad0 <_dtoa_r+0x988>
 801ba86:	9a08      	ldr	r2, [sp, #32]
 801ba88:	bb12      	cbnz	r2, 801bad0 <_dtoa_r+0x988>
 801ba8a:	9a07      	ldr	r2, [sp, #28]
 801ba8c:	bb02      	cbnz	r2, 801bad0 <_dtoa_r+0x988>
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	ddec      	ble.n	801ba6c <_dtoa_r+0x924>
 801ba92:	2201      	movs	r2, #1
 801ba94:	9901      	ldr	r1, [sp, #4]
 801ba96:	4620      	mov	r0, r4
 801ba98:	f000 fb50 	bl	801c13c <__lshift>
 801ba9c:	4629      	mov	r1, r5
 801ba9e:	9001      	str	r0, [sp, #4]
 801baa0:	f000 fba0 	bl	801c1e4 <__mcmp>
 801baa4:	2800      	cmp	r0, #0
 801baa6:	dc03      	bgt.n	801bab0 <_dtoa_r+0x968>
 801baa8:	d1e0      	bne.n	801ba6c <_dtoa_r+0x924>
 801baaa:	f018 0f01 	tst.w	r8, #1
 801baae:	d0dd      	beq.n	801ba6c <_dtoa_r+0x924>
 801bab0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801bab4:	d1d8      	bne.n	801ba68 <_dtoa_r+0x920>
 801bab6:	2339      	movs	r3, #57	; 0x39
 801bab8:	f10a 0601 	add.w	r6, sl, #1
 801babc:	f88a 3000 	strb.w	r3, [sl]
 801bac0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bac4:	2b39      	cmp	r3, #57	; 0x39
 801bac6:	f106 32ff 	add.w	r2, r6, #4294967295
 801baca:	d04c      	beq.n	801bb66 <_dtoa_r+0xa1e>
 801bacc:	3301      	adds	r3, #1
 801bace:	e051      	b.n	801bb74 <_dtoa_r+0xa2c>
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	f10a 0601 	add.w	r6, sl, #1
 801bad6:	dd05      	ble.n	801bae4 <_dtoa_r+0x99c>
 801bad8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801badc:	d0eb      	beq.n	801bab6 <_dtoa_r+0x96e>
 801bade:	f108 0801 	add.w	r8, r8, #1
 801bae2:	e7c5      	b.n	801ba70 <_dtoa_r+0x928>
 801bae4:	9b04      	ldr	r3, [sp, #16]
 801bae6:	9a06      	ldr	r2, [sp, #24]
 801bae8:	f806 8c01 	strb.w	r8, [r6, #-1]
 801baec:	1af3      	subs	r3, r6, r3
 801baee:	4293      	cmp	r3, r2
 801baf0:	d021      	beq.n	801bb36 <_dtoa_r+0x9ee>
 801baf2:	2300      	movs	r3, #0
 801baf4:	220a      	movs	r2, #10
 801baf6:	9901      	ldr	r1, [sp, #4]
 801baf8:	4620      	mov	r0, r4
 801bafa:	f000 f9a8 	bl	801be4e <__multadd>
 801bafe:	45b9      	cmp	r9, r7
 801bb00:	9001      	str	r0, [sp, #4]
 801bb02:	f04f 0300 	mov.w	r3, #0
 801bb06:	f04f 020a 	mov.w	r2, #10
 801bb0a:	4649      	mov	r1, r9
 801bb0c:	4620      	mov	r0, r4
 801bb0e:	d105      	bne.n	801bb1c <_dtoa_r+0x9d4>
 801bb10:	f000 f99d 	bl	801be4e <__multadd>
 801bb14:	4681      	mov	r9, r0
 801bb16:	4607      	mov	r7, r0
 801bb18:	46b2      	mov	sl, r6
 801bb1a:	e779      	b.n	801ba10 <_dtoa_r+0x8c8>
 801bb1c:	f000 f997 	bl	801be4e <__multadd>
 801bb20:	4639      	mov	r1, r7
 801bb22:	4681      	mov	r9, r0
 801bb24:	2300      	movs	r3, #0
 801bb26:	220a      	movs	r2, #10
 801bb28:	4620      	mov	r0, r4
 801bb2a:	f000 f990 	bl	801be4e <__multadd>
 801bb2e:	4607      	mov	r7, r0
 801bb30:	e7f2      	b.n	801bb18 <_dtoa_r+0x9d0>
 801bb32:	f04f 0900 	mov.w	r9, #0
 801bb36:	2201      	movs	r2, #1
 801bb38:	9901      	ldr	r1, [sp, #4]
 801bb3a:	4620      	mov	r0, r4
 801bb3c:	f000 fafe 	bl	801c13c <__lshift>
 801bb40:	4629      	mov	r1, r5
 801bb42:	9001      	str	r0, [sp, #4]
 801bb44:	f000 fb4e 	bl	801c1e4 <__mcmp>
 801bb48:	2800      	cmp	r0, #0
 801bb4a:	dcb9      	bgt.n	801bac0 <_dtoa_r+0x978>
 801bb4c:	d102      	bne.n	801bb54 <_dtoa_r+0xa0c>
 801bb4e:	f018 0f01 	tst.w	r8, #1
 801bb52:	d1b5      	bne.n	801bac0 <_dtoa_r+0x978>
 801bb54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bb58:	2b30      	cmp	r3, #48	; 0x30
 801bb5a:	f106 32ff 	add.w	r2, r6, #4294967295
 801bb5e:	f47f af11 	bne.w	801b984 <_dtoa_r+0x83c>
 801bb62:	4616      	mov	r6, r2
 801bb64:	e7f6      	b.n	801bb54 <_dtoa_r+0xa0c>
 801bb66:	9b04      	ldr	r3, [sp, #16]
 801bb68:	4293      	cmp	r3, r2
 801bb6a:	d105      	bne.n	801bb78 <_dtoa_r+0xa30>
 801bb6c:	9a04      	ldr	r2, [sp, #16]
 801bb6e:	f10b 0b01 	add.w	fp, fp, #1
 801bb72:	2331      	movs	r3, #49	; 0x31
 801bb74:	7013      	strb	r3, [r2, #0]
 801bb76:	e705      	b.n	801b984 <_dtoa_r+0x83c>
 801bb78:	4616      	mov	r6, r2
 801bb7a:	e7a1      	b.n	801bac0 <_dtoa_r+0x978>
 801bb7c:	4b16      	ldr	r3, [pc, #88]	; (801bbd8 <_dtoa_r+0xa90>)
 801bb7e:	f7ff bb48 	b.w	801b212 <_dtoa_r+0xca>
 801bb82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	f47f ab23 	bne.w	801b1d0 <_dtoa_r+0x88>
 801bb8a:	4b14      	ldr	r3, [pc, #80]	; (801bbdc <_dtoa_r+0xa94>)
 801bb8c:	f7ff bb41 	b.w	801b212 <_dtoa_r+0xca>
 801bb90:	9b08      	ldr	r3, [sp, #32]
 801bb92:	2b01      	cmp	r3, #1
 801bb94:	f77f ae3b 	ble.w	801b80e <_dtoa_r+0x6c6>
 801bb98:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801bb9c:	e64f      	b.n	801b83e <_dtoa_r+0x6f6>
 801bb9e:	9b06      	ldr	r3, [sp, #24]
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	dc03      	bgt.n	801bbac <_dtoa_r+0xa64>
 801bba4:	9b08      	ldr	r3, [sp, #32]
 801bba6:	2b02      	cmp	r3, #2
 801bba8:	f73f aed7 	bgt.w	801b95a <_dtoa_r+0x812>
 801bbac:	9e04      	ldr	r6, [sp, #16]
 801bbae:	9801      	ldr	r0, [sp, #4]
 801bbb0:	4629      	mov	r1, r5
 801bbb2:	f7ff fa3b 	bl	801b02c <quorem>
 801bbb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801bbba:	f806 8b01 	strb.w	r8, [r6], #1
 801bbbe:	9b04      	ldr	r3, [sp, #16]
 801bbc0:	9a06      	ldr	r2, [sp, #24]
 801bbc2:	1af3      	subs	r3, r6, r3
 801bbc4:	429a      	cmp	r2, r3
 801bbc6:	ddb4      	ble.n	801bb32 <_dtoa_r+0x9ea>
 801bbc8:	2300      	movs	r3, #0
 801bbca:	220a      	movs	r2, #10
 801bbcc:	9901      	ldr	r1, [sp, #4]
 801bbce:	4620      	mov	r0, r4
 801bbd0:	f000 f93d 	bl	801be4e <__multadd>
 801bbd4:	9001      	str	r0, [sp, #4]
 801bbd6:	e7ea      	b.n	801bbae <_dtoa_r+0xa66>
 801bbd8:	080202e3 	.word	0x080202e3
 801bbdc:	0802014e 	.word	0x0802014e

0801bbe0 <std>:
 801bbe0:	2300      	movs	r3, #0
 801bbe2:	b510      	push	{r4, lr}
 801bbe4:	4604      	mov	r4, r0
 801bbe6:	e9c0 3300 	strd	r3, r3, [r0]
 801bbea:	6083      	str	r3, [r0, #8]
 801bbec:	8181      	strh	r1, [r0, #12]
 801bbee:	6643      	str	r3, [r0, #100]	; 0x64
 801bbf0:	81c2      	strh	r2, [r0, #14]
 801bbf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bbf6:	6183      	str	r3, [r0, #24]
 801bbf8:	4619      	mov	r1, r3
 801bbfa:	2208      	movs	r2, #8
 801bbfc:	305c      	adds	r0, #92	; 0x5c
 801bbfe:	f7fe fc3b 	bl	801a478 <memset>
 801bc02:	4b05      	ldr	r3, [pc, #20]	; (801bc18 <std+0x38>)
 801bc04:	6263      	str	r3, [r4, #36]	; 0x24
 801bc06:	4b05      	ldr	r3, [pc, #20]	; (801bc1c <std+0x3c>)
 801bc08:	62a3      	str	r3, [r4, #40]	; 0x28
 801bc0a:	4b05      	ldr	r3, [pc, #20]	; (801bc20 <std+0x40>)
 801bc0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bc0e:	4b05      	ldr	r3, [pc, #20]	; (801bc24 <std+0x44>)
 801bc10:	6224      	str	r4, [r4, #32]
 801bc12:	6323      	str	r3, [r4, #48]	; 0x30
 801bc14:	bd10      	pop	{r4, pc}
 801bc16:	bf00      	nop
 801bc18:	0801af35 	.word	0x0801af35
 801bc1c:	0801af5b 	.word	0x0801af5b
 801bc20:	0801af93 	.word	0x0801af93
 801bc24:	0801afb7 	.word	0x0801afb7

0801bc28 <_cleanup_r>:
 801bc28:	4901      	ldr	r1, [pc, #4]	; (801bc30 <_cleanup_r+0x8>)
 801bc2a:	f000 b885 	b.w	801bd38 <_fwalk_reent>
 801bc2e:	bf00      	nop
 801bc30:	0801d471 	.word	0x0801d471

0801bc34 <__sfmoreglue>:
 801bc34:	b570      	push	{r4, r5, r6, lr}
 801bc36:	1e4a      	subs	r2, r1, #1
 801bc38:	2568      	movs	r5, #104	; 0x68
 801bc3a:	4355      	muls	r5, r2
 801bc3c:	460e      	mov	r6, r1
 801bc3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bc42:	f7fe fc6f 	bl	801a524 <_malloc_r>
 801bc46:	4604      	mov	r4, r0
 801bc48:	b140      	cbz	r0, 801bc5c <__sfmoreglue+0x28>
 801bc4a:	2100      	movs	r1, #0
 801bc4c:	e9c0 1600 	strd	r1, r6, [r0]
 801bc50:	300c      	adds	r0, #12
 801bc52:	60a0      	str	r0, [r4, #8]
 801bc54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bc58:	f7fe fc0e 	bl	801a478 <memset>
 801bc5c:	4620      	mov	r0, r4
 801bc5e:	bd70      	pop	{r4, r5, r6, pc}

0801bc60 <__sinit>:
 801bc60:	6983      	ldr	r3, [r0, #24]
 801bc62:	b510      	push	{r4, lr}
 801bc64:	4604      	mov	r4, r0
 801bc66:	bb33      	cbnz	r3, 801bcb6 <__sinit+0x56>
 801bc68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801bc6c:	6503      	str	r3, [r0, #80]	; 0x50
 801bc6e:	4b12      	ldr	r3, [pc, #72]	; (801bcb8 <__sinit+0x58>)
 801bc70:	4a12      	ldr	r2, [pc, #72]	; (801bcbc <__sinit+0x5c>)
 801bc72:	681b      	ldr	r3, [r3, #0]
 801bc74:	6282      	str	r2, [r0, #40]	; 0x28
 801bc76:	4298      	cmp	r0, r3
 801bc78:	bf04      	itt	eq
 801bc7a:	2301      	moveq	r3, #1
 801bc7c:	6183      	streq	r3, [r0, #24]
 801bc7e:	f000 f81f 	bl	801bcc0 <__sfp>
 801bc82:	6060      	str	r0, [r4, #4]
 801bc84:	4620      	mov	r0, r4
 801bc86:	f000 f81b 	bl	801bcc0 <__sfp>
 801bc8a:	60a0      	str	r0, [r4, #8]
 801bc8c:	4620      	mov	r0, r4
 801bc8e:	f000 f817 	bl	801bcc0 <__sfp>
 801bc92:	2200      	movs	r2, #0
 801bc94:	60e0      	str	r0, [r4, #12]
 801bc96:	2104      	movs	r1, #4
 801bc98:	6860      	ldr	r0, [r4, #4]
 801bc9a:	f7ff ffa1 	bl	801bbe0 <std>
 801bc9e:	2201      	movs	r2, #1
 801bca0:	2109      	movs	r1, #9
 801bca2:	68a0      	ldr	r0, [r4, #8]
 801bca4:	f7ff ff9c 	bl	801bbe0 <std>
 801bca8:	2202      	movs	r2, #2
 801bcaa:	2112      	movs	r1, #18
 801bcac:	68e0      	ldr	r0, [r4, #12]
 801bcae:	f7ff ff97 	bl	801bbe0 <std>
 801bcb2:	2301      	movs	r3, #1
 801bcb4:	61a3      	str	r3, [r4, #24]
 801bcb6:	bd10      	pop	{r4, pc}
 801bcb8:	08020118 	.word	0x08020118
 801bcbc:	0801bc29 	.word	0x0801bc29

0801bcc0 <__sfp>:
 801bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcc2:	4b1b      	ldr	r3, [pc, #108]	; (801bd30 <__sfp+0x70>)
 801bcc4:	681e      	ldr	r6, [r3, #0]
 801bcc6:	69b3      	ldr	r3, [r6, #24]
 801bcc8:	4607      	mov	r7, r0
 801bcca:	b913      	cbnz	r3, 801bcd2 <__sfp+0x12>
 801bccc:	4630      	mov	r0, r6
 801bcce:	f7ff ffc7 	bl	801bc60 <__sinit>
 801bcd2:	3648      	adds	r6, #72	; 0x48
 801bcd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bcd8:	3b01      	subs	r3, #1
 801bcda:	d503      	bpl.n	801bce4 <__sfp+0x24>
 801bcdc:	6833      	ldr	r3, [r6, #0]
 801bcde:	b133      	cbz	r3, 801bcee <__sfp+0x2e>
 801bce0:	6836      	ldr	r6, [r6, #0]
 801bce2:	e7f7      	b.n	801bcd4 <__sfp+0x14>
 801bce4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bce8:	b16d      	cbz	r5, 801bd06 <__sfp+0x46>
 801bcea:	3468      	adds	r4, #104	; 0x68
 801bcec:	e7f4      	b.n	801bcd8 <__sfp+0x18>
 801bcee:	2104      	movs	r1, #4
 801bcf0:	4638      	mov	r0, r7
 801bcf2:	f7ff ff9f 	bl	801bc34 <__sfmoreglue>
 801bcf6:	6030      	str	r0, [r6, #0]
 801bcf8:	2800      	cmp	r0, #0
 801bcfa:	d1f1      	bne.n	801bce0 <__sfp+0x20>
 801bcfc:	230c      	movs	r3, #12
 801bcfe:	603b      	str	r3, [r7, #0]
 801bd00:	4604      	mov	r4, r0
 801bd02:	4620      	mov	r0, r4
 801bd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd06:	4b0b      	ldr	r3, [pc, #44]	; (801bd34 <__sfp+0x74>)
 801bd08:	6665      	str	r5, [r4, #100]	; 0x64
 801bd0a:	e9c4 5500 	strd	r5, r5, [r4]
 801bd0e:	60a5      	str	r5, [r4, #8]
 801bd10:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801bd14:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801bd18:	2208      	movs	r2, #8
 801bd1a:	4629      	mov	r1, r5
 801bd1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bd20:	f7fe fbaa 	bl	801a478 <memset>
 801bd24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bd28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bd2c:	e7e9      	b.n	801bd02 <__sfp+0x42>
 801bd2e:	bf00      	nop
 801bd30:	08020118 	.word	0x08020118
 801bd34:	ffff0001 	.word	0xffff0001

0801bd38 <_fwalk_reent>:
 801bd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd3c:	4680      	mov	r8, r0
 801bd3e:	4689      	mov	r9, r1
 801bd40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801bd44:	2600      	movs	r6, #0
 801bd46:	b914      	cbnz	r4, 801bd4e <_fwalk_reent+0x16>
 801bd48:	4630      	mov	r0, r6
 801bd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd4e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801bd52:	3f01      	subs	r7, #1
 801bd54:	d501      	bpl.n	801bd5a <_fwalk_reent+0x22>
 801bd56:	6824      	ldr	r4, [r4, #0]
 801bd58:	e7f5      	b.n	801bd46 <_fwalk_reent+0xe>
 801bd5a:	89ab      	ldrh	r3, [r5, #12]
 801bd5c:	2b01      	cmp	r3, #1
 801bd5e:	d907      	bls.n	801bd70 <_fwalk_reent+0x38>
 801bd60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bd64:	3301      	adds	r3, #1
 801bd66:	d003      	beq.n	801bd70 <_fwalk_reent+0x38>
 801bd68:	4629      	mov	r1, r5
 801bd6a:	4640      	mov	r0, r8
 801bd6c:	47c8      	blx	r9
 801bd6e:	4306      	orrs	r6, r0
 801bd70:	3568      	adds	r5, #104	; 0x68
 801bd72:	e7ee      	b.n	801bd52 <_fwalk_reent+0x1a>

0801bd74 <_localeconv_r>:
 801bd74:	4b04      	ldr	r3, [pc, #16]	; (801bd88 <_localeconv_r+0x14>)
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	6a18      	ldr	r0, [r3, #32]
 801bd7a:	4b04      	ldr	r3, [pc, #16]	; (801bd8c <_localeconv_r+0x18>)
 801bd7c:	2800      	cmp	r0, #0
 801bd7e:	bf08      	it	eq
 801bd80:	4618      	moveq	r0, r3
 801bd82:	30f0      	adds	r0, #240	; 0xf0
 801bd84:	4770      	bx	lr
 801bd86:	bf00      	nop
 801bd88:	20000028 	.word	0x20000028
 801bd8c:	2000008c 	.word	0x2000008c

0801bd90 <_lseek_r>:
 801bd90:	b538      	push	{r3, r4, r5, lr}
 801bd92:	4c07      	ldr	r4, [pc, #28]	; (801bdb0 <_lseek_r+0x20>)
 801bd94:	4605      	mov	r5, r0
 801bd96:	4608      	mov	r0, r1
 801bd98:	4611      	mov	r1, r2
 801bd9a:	2200      	movs	r2, #0
 801bd9c:	6022      	str	r2, [r4, #0]
 801bd9e:	461a      	mov	r2, r3
 801bda0:	f7e6 fa68 	bl	8002274 <_lseek>
 801bda4:	1c43      	adds	r3, r0, #1
 801bda6:	d102      	bne.n	801bdae <_lseek_r+0x1e>
 801bda8:	6823      	ldr	r3, [r4, #0]
 801bdaa:	b103      	cbz	r3, 801bdae <_lseek_r+0x1e>
 801bdac:	602b      	str	r3, [r5, #0]
 801bdae:	bd38      	pop	{r3, r4, r5, pc}
 801bdb0:	20016440 	.word	0x20016440

0801bdb4 <__malloc_lock>:
 801bdb4:	4770      	bx	lr

0801bdb6 <__malloc_unlock>:
 801bdb6:	4770      	bx	lr

0801bdb8 <_Balloc>:
 801bdb8:	b570      	push	{r4, r5, r6, lr}
 801bdba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bdbc:	4604      	mov	r4, r0
 801bdbe:	460e      	mov	r6, r1
 801bdc0:	b93d      	cbnz	r5, 801bdd2 <_Balloc+0x1a>
 801bdc2:	2010      	movs	r0, #16
 801bdc4:	f7fe fb36 	bl	801a434 <malloc>
 801bdc8:	6260      	str	r0, [r4, #36]	; 0x24
 801bdca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801bdce:	6005      	str	r5, [r0, #0]
 801bdd0:	60c5      	str	r5, [r0, #12]
 801bdd2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801bdd4:	68eb      	ldr	r3, [r5, #12]
 801bdd6:	b183      	cbz	r3, 801bdfa <_Balloc+0x42>
 801bdd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bdda:	68db      	ldr	r3, [r3, #12]
 801bddc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801bde0:	b9b8      	cbnz	r0, 801be12 <_Balloc+0x5a>
 801bde2:	2101      	movs	r1, #1
 801bde4:	fa01 f506 	lsl.w	r5, r1, r6
 801bde8:	1d6a      	adds	r2, r5, #5
 801bdea:	0092      	lsls	r2, r2, #2
 801bdec:	4620      	mov	r0, r4
 801bdee:	f000 fabf 	bl	801c370 <_calloc_r>
 801bdf2:	b160      	cbz	r0, 801be0e <_Balloc+0x56>
 801bdf4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801bdf8:	e00e      	b.n	801be18 <_Balloc+0x60>
 801bdfa:	2221      	movs	r2, #33	; 0x21
 801bdfc:	2104      	movs	r1, #4
 801bdfe:	4620      	mov	r0, r4
 801be00:	f000 fab6 	bl	801c370 <_calloc_r>
 801be04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801be06:	60e8      	str	r0, [r5, #12]
 801be08:	68db      	ldr	r3, [r3, #12]
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d1e4      	bne.n	801bdd8 <_Balloc+0x20>
 801be0e:	2000      	movs	r0, #0
 801be10:	bd70      	pop	{r4, r5, r6, pc}
 801be12:	6802      	ldr	r2, [r0, #0]
 801be14:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801be18:	2300      	movs	r3, #0
 801be1a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801be1e:	e7f7      	b.n	801be10 <_Balloc+0x58>

0801be20 <_Bfree>:
 801be20:	b570      	push	{r4, r5, r6, lr}
 801be22:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801be24:	4606      	mov	r6, r0
 801be26:	460d      	mov	r5, r1
 801be28:	b93c      	cbnz	r4, 801be3a <_Bfree+0x1a>
 801be2a:	2010      	movs	r0, #16
 801be2c:	f7fe fb02 	bl	801a434 <malloc>
 801be30:	6270      	str	r0, [r6, #36]	; 0x24
 801be32:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801be36:	6004      	str	r4, [r0, #0]
 801be38:	60c4      	str	r4, [r0, #12]
 801be3a:	b13d      	cbz	r5, 801be4c <_Bfree+0x2c>
 801be3c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801be3e:	686a      	ldr	r2, [r5, #4]
 801be40:	68db      	ldr	r3, [r3, #12]
 801be42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801be46:	6029      	str	r1, [r5, #0]
 801be48:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801be4c:	bd70      	pop	{r4, r5, r6, pc}

0801be4e <__multadd>:
 801be4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be52:	690d      	ldr	r5, [r1, #16]
 801be54:	461f      	mov	r7, r3
 801be56:	4606      	mov	r6, r0
 801be58:	460c      	mov	r4, r1
 801be5a:	f101 0c14 	add.w	ip, r1, #20
 801be5e:	2300      	movs	r3, #0
 801be60:	f8dc 0000 	ldr.w	r0, [ip]
 801be64:	b281      	uxth	r1, r0
 801be66:	fb02 7101 	mla	r1, r2, r1, r7
 801be6a:	0c0f      	lsrs	r7, r1, #16
 801be6c:	0c00      	lsrs	r0, r0, #16
 801be6e:	fb02 7000 	mla	r0, r2, r0, r7
 801be72:	b289      	uxth	r1, r1
 801be74:	3301      	adds	r3, #1
 801be76:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801be7a:	429d      	cmp	r5, r3
 801be7c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801be80:	f84c 1b04 	str.w	r1, [ip], #4
 801be84:	dcec      	bgt.n	801be60 <__multadd+0x12>
 801be86:	b1d7      	cbz	r7, 801bebe <__multadd+0x70>
 801be88:	68a3      	ldr	r3, [r4, #8]
 801be8a:	42ab      	cmp	r3, r5
 801be8c:	dc12      	bgt.n	801beb4 <__multadd+0x66>
 801be8e:	6861      	ldr	r1, [r4, #4]
 801be90:	4630      	mov	r0, r6
 801be92:	3101      	adds	r1, #1
 801be94:	f7ff ff90 	bl	801bdb8 <_Balloc>
 801be98:	6922      	ldr	r2, [r4, #16]
 801be9a:	3202      	adds	r2, #2
 801be9c:	f104 010c 	add.w	r1, r4, #12
 801bea0:	4680      	mov	r8, r0
 801bea2:	0092      	lsls	r2, r2, #2
 801bea4:	300c      	adds	r0, #12
 801bea6:	f7fe fadc 	bl	801a462 <memcpy>
 801beaa:	4621      	mov	r1, r4
 801beac:	4630      	mov	r0, r6
 801beae:	f7ff ffb7 	bl	801be20 <_Bfree>
 801beb2:	4644      	mov	r4, r8
 801beb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801beb8:	3501      	adds	r5, #1
 801beba:	615f      	str	r7, [r3, #20]
 801bebc:	6125      	str	r5, [r4, #16]
 801bebe:	4620      	mov	r0, r4
 801bec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801bec4 <__hi0bits>:
 801bec4:	0c02      	lsrs	r2, r0, #16
 801bec6:	0412      	lsls	r2, r2, #16
 801bec8:	4603      	mov	r3, r0
 801beca:	b9b2      	cbnz	r2, 801befa <__hi0bits+0x36>
 801becc:	0403      	lsls	r3, r0, #16
 801bece:	2010      	movs	r0, #16
 801bed0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801bed4:	bf04      	itt	eq
 801bed6:	021b      	lsleq	r3, r3, #8
 801bed8:	3008      	addeq	r0, #8
 801beda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801bede:	bf04      	itt	eq
 801bee0:	011b      	lsleq	r3, r3, #4
 801bee2:	3004      	addeq	r0, #4
 801bee4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801bee8:	bf04      	itt	eq
 801beea:	009b      	lsleq	r3, r3, #2
 801beec:	3002      	addeq	r0, #2
 801beee:	2b00      	cmp	r3, #0
 801bef0:	db06      	blt.n	801bf00 <__hi0bits+0x3c>
 801bef2:	005b      	lsls	r3, r3, #1
 801bef4:	d503      	bpl.n	801befe <__hi0bits+0x3a>
 801bef6:	3001      	adds	r0, #1
 801bef8:	4770      	bx	lr
 801befa:	2000      	movs	r0, #0
 801befc:	e7e8      	b.n	801bed0 <__hi0bits+0xc>
 801befe:	2020      	movs	r0, #32
 801bf00:	4770      	bx	lr

0801bf02 <__lo0bits>:
 801bf02:	6803      	ldr	r3, [r0, #0]
 801bf04:	f013 0207 	ands.w	r2, r3, #7
 801bf08:	4601      	mov	r1, r0
 801bf0a:	d00b      	beq.n	801bf24 <__lo0bits+0x22>
 801bf0c:	07da      	lsls	r2, r3, #31
 801bf0e:	d423      	bmi.n	801bf58 <__lo0bits+0x56>
 801bf10:	0798      	lsls	r0, r3, #30
 801bf12:	bf49      	itett	mi
 801bf14:	085b      	lsrmi	r3, r3, #1
 801bf16:	089b      	lsrpl	r3, r3, #2
 801bf18:	2001      	movmi	r0, #1
 801bf1a:	600b      	strmi	r3, [r1, #0]
 801bf1c:	bf5c      	itt	pl
 801bf1e:	600b      	strpl	r3, [r1, #0]
 801bf20:	2002      	movpl	r0, #2
 801bf22:	4770      	bx	lr
 801bf24:	b298      	uxth	r0, r3
 801bf26:	b9a8      	cbnz	r0, 801bf54 <__lo0bits+0x52>
 801bf28:	0c1b      	lsrs	r3, r3, #16
 801bf2a:	2010      	movs	r0, #16
 801bf2c:	f013 0fff 	tst.w	r3, #255	; 0xff
 801bf30:	bf04      	itt	eq
 801bf32:	0a1b      	lsreq	r3, r3, #8
 801bf34:	3008      	addeq	r0, #8
 801bf36:	071a      	lsls	r2, r3, #28
 801bf38:	bf04      	itt	eq
 801bf3a:	091b      	lsreq	r3, r3, #4
 801bf3c:	3004      	addeq	r0, #4
 801bf3e:	079a      	lsls	r2, r3, #30
 801bf40:	bf04      	itt	eq
 801bf42:	089b      	lsreq	r3, r3, #2
 801bf44:	3002      	addeq	r0, #2
 801bf46:	07da      	lsls	r2, r3, #31
 801bf48:	d402      	bmi.n	801bf50 <__lo0bits+0x4e>
 801bf4a:	085b      	lsrs	r3, r3, #1
 801bf4c:	d006      	beq.n	801bf5c <__lo0bits+0x5a>
 801bf4e:	3001      	adds	r0, #1
 801bf50:	600b      	str	r3, [r1, #0]
 801bf52:	4770      	bx	lr
 801bf54:	4610      	mov	r0, r2
 801bf56:	e7e9      	b.n	801bf2c <__lo0bits+0x2a>
 801bf58:	2000      	movs	r0, #0
 801bf5a:	4770      	bx	lr
 801bf5c:	2020      	movs	r0, #32
 801bf5e:	4770      	bx	lr

0801bf60 <__i2b>:
 801bf60:	b510      	push	{r4, lr}
 801bf62:	460c      	mov	r4, r1
 801bf64:	2101      	movs	r1, #1
 801bf66:	f7ff ff27 	bl	801bdb8 <_Balloc>
 801bf6a:	2201      	movs	r2, #1
 801bf6c:	6144      	str	r4, [r0, #20]
 801bf6e:	6102      	str	r2, [r0, #16]
 801bf70:	bd10      	pop	{r4, pc}

0801bf72 <__multiply>:
 801bf72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf76:	4614      	mov	r4, r2
 801bf78:	690a      	ldr	r2, [r1, #16]
 801bf7a:	6923      	ldr	r3, [r4, #16]
 801bf7c:	429a      	cmp	r2, r3
 801bf7e:	bfb8      	it	lt
 801bf80:	460b      	movlt	r3, r1
 801bf82:	4688      	mov	r8, r1
 801bf84:	bfbc      	itt	lt
 801bf86:	46a0      	movlt	r8, r4
 801bf88:	461c      	movlt	r4, r3
 801bf8a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801bf8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801bf92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bf96:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801bf9a:	eb07 0609 	add.w	r6, r7, r9
 801bf9e:	42b3      	cmp	r3, r6
 801bfa0:	bfb8      	it	lt
 801bfa2:	3101      	addlt	r1, #1
 801bfa4:	f7ff ff08 	bl	801bdb8 <_Balloc>
 801bfa8:	f100 0514 	add.w	r5, r0, #20
 801bfac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801bfb0:	462b      	mov	r3, r5
 801bfb2:	2200      	movs	r2, #0
 801bfb4:	4573      	cmp	r3, lr
 801bfb6:	d316      	bcc.n	801bfe6 <__multiply+0x74>
 801bfb8:	f104 0214 	add.w	r2, r4, #20
 801bfbc:	f108 0114 	add.w	r1, r8, #20
 801bfc0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801bfc4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801bfc8:	9300      	str	r3, [sp, #0]
 801bfca:	9b00      	ldr	r3, [sp, #0]
 801bfcc:	9201      	str	r2, [sp, #4]
 801bfce:	4293      	cmp	r3, r2
 801bfd0:	d80c      	bhi.n	801bfec <__multiply+0x7a>
 801bfd2:	2e00      	cmp	r6, #0
 801bfd4:	dd03      	ble.n	801bfde <__multiply+0x6c>
 801bfd6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d05d      	beq.n	801c09a <__multiply+0x128>
 801bfde:	6106      	str	r6, [r0, #16]
 801bfe0:	b003      	add	sp, #12
 801bfe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfe6:	f843 2b04 	str.w	r2, [r3], #4
 801bfea:	e7e3      	b.n	801bfb4 <__multiply+0x42>
 801bfec:	f8b2 b000 	ldrh.w	fp, [r2]
 801bff0:	f1bb 0f00 	cmp.w	fp, #0
 801bff4:	d023      	beq.n	801c03e <__multiply+0xcc>
 801bff6:	4689      	mov	r9, r1
 801bff8:	46ac      	mov	ip, r5
 801bffa:	f04f 0800 	mov.w	r8, #0
 801bffe:	f859 4b04 	ldr.w	r4, [r9], #4
 801c002:	f8dc a000 	ldr.w	sl, [ip]
 801c006:	b2a3      	uxth	r3, r4
 801c008:	fa1f fa8a 	uxth.w	sl, sl
 801c00c:	fb0b a303 	mla	r3, fp, r3, sl
 801c010:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801c014:	f8dc 4000 	ldr.w	r4, [ip]
 801c018:	4443      	add	r3, r8
 801c01a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801c01e:	fb0b 840a 	mla	r4, fp, sl, r8
 801c022:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801c026:	46e2      	mov	sl, ip
 801c028:	b29b      	uxth	r3, r3
 801c02a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801c02e:	454f      	cmp	r7, r9
 801c030:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801c034:	f84a 3b04 	str.w	r3, [sl], #4
 801c038:	d82b      	bhi.n	801c092 <__multiply+0x120>
 801c03a:	f8cc 8004 	str.w	r8, [ip, #4]
 801c03e:	9b01      	ldr	r3, [sp, #4]
 801c040:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801c044:	3204      	adds	r2, #4
 801c046:	f1ba 0f00 	cmp.w	sl, #0
 801c04a:	d020      	beq.n	801c08e <__multiply+0x11c>
 801c04c:	682b      	ldr	r3, [r5, #0]
 801c04e:	4689      	mov	r9, r1
 801c050:	46a8      	mov	r8, r5
 801c052:	f04f 0b00 	mov.w	fp, #0
 801c056:	f8b9 c000 	ldrh.w	ip, [r9]
 801c05a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801c05e:	fb0a 440c 	mla	r4, sl, ip, r4
 801c062:	445c      	add	r4, fp
 801c064:	46c4      	mov	ip, r8
 801c066:	b29b      	uxth	r3, r3
 801c068:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801c06c:	f84c 3b04 	str.w	r3, [ip], #4
 801c070:	f859 3b04 	ldr.w	r3, [r9], #4
 801c074:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801c078:	0c1b      	lsrs	r3, r3, #16
 801c07a:	fb0a b303 	mla	r3, sl, r3, fp
 801c07e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801c082:	454f      	cmp	r7, r9
 801c084:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801c088:	d805      	bhi.n	801c096 <__multiply+0x124>
 801c08a:	f8c8 3004 	str.w	r3, [r8, #4]
 801c08e:	3504      	adds	r5, #4
 801c090:	e79b      	b.n	801bfca <__multiply+0x58>
 801c092:	46d4      	mov	ip, sl
 801c094:	e7b3      	b.n	801bffe <__multiply+0x8c>
 801c096:	46e0      	mov	r8, ip
 801c098:	e7dd      	b.n	801c056 <__multiply+0xe4>
 801c09a:	3e01      	subs	r6, #1
 801c09c:	e799      	b.n	801bfd2 <__multiply+0x60>
	...

0801c0a0 <__pow5mult>:
 801c0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c0a4:	4615      	mov	r5, r2
 801c0a6:	f012 0203 	ands.w	r2, r2, #3
 801c0aa:	4606      	mov	r6, r0
 801c0ac:	460f      	mov	r7, r1
 801c0ae:	d007      	beq.n	801c0c0 <__pow5mult+0x20>
 801c0b0:	3a01      	subs	r2, #1
 801c0b2:	4c21      	ldr	r4, [pc, #132]	; (801c138 <__pow5mult+0x98>)
 801c0b4:	2300      	movs	r3, #0
 801c0b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c0ba:	f7ff fec8 	bl	801be4e <__multadd>
 801c0be:	4607      	mov	r7, r0
 801c0c0:	10ad      	asrs	r5, r5, #2
 801c0c2:	d035      	beq.n	801c130 <__pow5mult+0x90>
 801c0c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c0c6:	b93c      	cbnz	r4, 801c0d8 <__pow5mult+0x38>
 801c0c8:	2010      	movs	r0, #16
 801c0ca:	f7fe f9b3 	bl	801a434 <malloc>
 801c0ce:	6270      	str	r0, [r6, #36]	; 0x24
 801c0d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c0d4:	6004      	str	r4, [r0, #0]
 801c0d6:	60c4      	str	r4, [r0, #12]
 801c0d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c0dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c0e0:	b94c      	cbnz	r4, 801c0f6 <__pow5mult+0x56>
 801c0e2:	f240 2171 	movw	r1, #625	; 0x271
 801c0e6:	4630      	mov	r0, r6
 801c0e8:	f7ff ff3a 	bl	801bf60 <__i2b>
 801c0ec:	2300      	movs	r3, #0
 801c0ee:	f8c8 0008 	str.w	r0, [r8, #8]
 801c0f2:	4604      	mov	r4, r0
 801c0f4:	6003      	str	r3, [r0, #0]
 801c0f6:	f04f 0800 	mov.w	r8, #0
 801c0fa:	07eb      	lsls	r3, r5, #31
 801c0fc:	d50a      	bpl.n	801c114 <__pow5mult+0x74>
 801c0fe:	4639      	mov	r1, r7
 801c100:	4622      	mov	r2, r4
 801c102:	4630      	mov	r0, r6
 801c104:	f7ff ff35 	bl	801bf72 <__multiply>
 801c108:	4639      	mov	r1, r7
 801c10a:	4681      	mov	r9, r0
 801c10c:	4630      	mov	r0, r6
 801c10e:	f7ff fe87 	bl	801be20 <_Bfree>
 801c112:	464f      	mov	r7, r9
 801c114:	106d      	asrs	r5, r5, #1
 801c116:	d00b      	beq.n	801c130 <__pow5mult+0x90>
 801c118:	6820      	ldr	r0, [r4, #0]
 801c11a:	b938      	cbnz	r0, 801c12c <__pow5mult+0x8c>
 801c11c:	4622      	mov	r2, r4
 801c11e:	4621      	mov	r1, r4
 801c120:	4630      	mov	r0, r6
 801c122:	f7ff ff26 	bl	801bf72 <__multiply>
 801c126:	6020      	str	r0, [r4, #0]
 801c128:	f8c0 8000 	str.w	r8, [r0]
 801c12c:	4604      	mov	r4, r0
 801c12e:	e7e4      	b.n	801c0fa <__pow5mult+0x5a>
 801c130:	4638      	mov	r0, r7
 801c132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c136:	bf00      	nop
 801c138:	080202b0 	.word	0x080202b0

0801c13c <__lshift>:
 801c13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c140:	460c      	mov	r4, r1
 801c142:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c146:	6923      	ldr	r3, [r4, #16]
 801c148:	6849      	ldr	r1, [r1, #4]
 801c14a:	eb0a 0903 	add.w	r9, sl, r3
 801c14e:	68a3      	ldr	r3, [r4, #8]
 801c150:	4607      	mov	r7, r0
 801c152:	4616      	mov	r6, r2
 801c154:	f109 0501 	add.w	r5, r9, #1
 801c158:	42ab      	cmp	r3, r5
 801c15a:	db32      	blt.n	801c1c2 <__lshift+0x86>
 801c15c:	4638      	mov	r0, r7
 801c15e:	f7ff fe2b 	bl	801bdb8 <_Balloc>
 801c162:	2300      	movs	r3, #0
 801c164:	4680      	mov	r8, r0
 801c166:	f100 0114 	add.w	r1, r0, #20
 801c16a:	461a      	mov	r2, r3
 801c16c:	4553      	cmp	r3, sl
 801c16e:	db2b      	blt.n	801c1c8 <__lshift+0x8c>
 801c170:	6920      	ldr	r0, [r4, #16]
 801c172:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c176:	f104 0314 	add.w	r3, r4, #20
 801c17a:	f016 021f 	ands.w	r2, r6, #31
 801c17e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c182:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c186:	d025      	beq.n	801c1d4 <__lshift+0x98>
 801c188:	f1c2 0e20 	rsb	lr, r2, #32
 801c18c:	2000      	movs	r0, #0
 801c18e:	681e      	ldr	r6, [r3, #0]
 801c190:	468a      	mov	sl, r1
 801c192:	4096      	lsls	r6, r2
 801c194:	4330      	orrs	r0, r6
 801c196:	f84a 0b04 	str.w	r0, [sl], #4
 801c19a:	f853 0b04 	ldr.w	r0, [r3], #4
 801c19e:	459c      	cmp	ip, r3
 801c1a0:	fa20 f00e 	lsr.w	r0, r0, lr
 801c1a4:	d814      	bhi.n	801c1d0 <__lshift+0x94>
 801c1a6:	6048      	str	r0, [r1, #4]
 801c1a8:	b108      	cbz	r0, 801c1ae <__lshift+0x72>
 801c1aa:	f109 0502 	add.w	r5, r9, #2
 801c1ae:	3d01      	subs	r5, #1
 801c1b0:	4638      	mov	r0, r7
 801c1b2:	f8c8 5010 	str.w	r5, [r8, #16]
 801c1b6:	4621      	mov	r1, r4
 801c1b8:	f7ff fe32 	bl	801be20 <_Bfree>
 801c1bc:	4640      	mov	r0, r8
 801c1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1c2:	3101      	adds	r1, #1
 801c1c4:	005b      	lsls	r3, r3, #1
 801c1c6:	e7c7      	b.n	801c158 <__lshift+0x1c>
 801c1c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801c1cc:	3301      	adds	r3, #1
 801c1ce:	e7cd      	b.n	801c16c <__lshift+0x30>
 801c1d0:	4651      	mov	r1, sl
 801c1d2:	e7dc      	b.n	801c18e <__lshift+0x52>
 801c1d4:	3904      	subs	r1, #4
 801c1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c1da:	f841 2f04 	str.w	r2, [r1, #4]!
 801c1de:	459c      	cmp	ip, r3
 801c1e0:	d8f9      	bhi.n	801c1d6 <__lshift+0x9a>
 801c1e2:	e7e4      	b.n	801c1ae <__lshift+0x72>

0801c1e4 <__mcmp>:
 801c1e4:	6903      	ldr	r3, [r0, #16]
 801c1e6:	690a      	ldr	r2, [r1, #16]
 801c1e8:	1a9b      	subs	r3, r3, r2
 801c1ea:	b530      	push	{r4, r5, lr}
 801c1ec:	d10c      	bne.n	801c208 <__mcmp+0x24>
 801c1ee:	0092      	lsls	r2, r2, #2
 801c1f0:	3014      	adds	r0, #20
 801c1f2:	3114      	adds	r1, #20
 801c1f4:	1884      	adds	r4, r0, r2
 801c1f6:	4411      	add	r1, r2
 801c1f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c1fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c200:	4295      	cmp	r5, r2
 801c202:	d003      	beq.n	801c20c <__mcmp+0x28>
 801c204:	d305      	bcc.n	801c212 <__mcmp+0x2e>
 801c206:	2301      	movs	r3, #1
 801c208:	4618      	mov	r0, r3
 801c20a:	bd30      	pop	{r4, r5, pc}
 801c20c:	42a0      	cmp	r0, r4
 801c20e:	d3f3      	bcc.n	801c1f8 <__mcmp+0x14>
 801c210:	e7fa      	b.n	801c208 <__mcmp+0x24>
 801c212:	f04f 33ff 	mov.w	r3, #4294967295
 801c216:	e7f7      	b.n	801c208 <__mcmp+0x24>

0801c218 <__mdiff>:
 801c218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c21c:	460d      	mov	r5, r1
 801c21e:	4607      	mov	r7, r0
 801c220:	4611      	mov	r1, r2
 801c222:	4628      	mov	r0, r5
 801c224:	4614      	mov	r4, r2
 801c226:	f7ff ffdd 	bl	801c1e4 <__mcmp>
 801c22a:	1e06      	subs	r6, r0, #0
 801c22c:	d108      	bne.n	801c240 <__mdiff+0x28>
 801c22e:	4631      	mov	r1, r6
 801c230:	4638      	mov	r0, r7
 801c232:	f7ff fdc1 	bl	801bdb8 <_Balloc>
 801c236:	2301      	movs	r3, #1
 801c238:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801c23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c240:	bfa4      	itt	ge
 801c242:	4623      	movge	r3, r4
 801c244:	462c      	movge	r4, r5
 801c246:	4638      	mov	r0, r7
 801c248:	6861      	ldr	r1, [r4, #4]
 801c24a:	bfa6      	itte	ge
 801c24c:	461d      	movge	r5, r3
 801c24e:	2600      	movge	r6, #0
 801c250:	2601      	movlt	r6, #1
 801c252:	f7ff fdb1 	bl	801bdb8 <_Balloc>
 801c256:	692b      	ldr	r3, [r5, #16]
 801c258:	60c6      	str	r6, [r0, #12]
 801c25a:	6926      	ldr	r6, [r4, #16]
 801c25c:	f105 0914 	add.w	r9, r5, #20
 801c260:	f104 0214 	add.w	r2, r4, #20
 801c264:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801c268:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801c26c:	f100 0514 	add.w	r5, r0, #20
 801c270:	f04f 0e00 	mov.w	lr, #0
 801c274:	f852 ab04 	ldr.w	sl, [r2], #4
 801c278:	f859 4b04 	ldr.w	r4, [r9], #4
 801c27c:	fa1e f18a 	uxtah	r1, lr, sl
 801c280:	b2a3      	uxth	r3, r4
 801c282:	1ac9      	subs	r1, r1, r3
 801c284:	0c23      	lsrs	r3, r4, #16
 801c286:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801c28a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801c28e:	b289      	uxth	r1, r1
 801c290:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801c294:	45c8      	cmp	r8, r9
 801c296:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801c29a:	4694      	mov	ip, r2
 801c29c:	f845 3b04 	str.w	r3, [r5], #4
 801c2a0:	d8e8      	bhi.n	801c274 <__mdiff+0x5c>
 801c2a2:	45bc      	cmp	ip, r7
 801c2a4:	d304      	bcc.n	801c2b0 <__mdiff+0x98>
 801c2a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801c2aa:	b183      	cbz	r3, 801c2ce <__mdiff+0xb6>
 801c2ac:	6106      	str	r6, [r0, #16]
 801c2ae:	e7c5      	b.n	801c23c <__mdiff+0x24>
 801c2b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c2b4:	fa1e f381 	uxtah	r3, lr, r1
 801c2b8:	141a      	asrs	r2, r3, #16
 801c2ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c2be:	b29b      	uxth	r3, r3
 801c2c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c2c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801c2c8:	f845 3b04 	str.w	r3, [r5], #4
 801c2cc:	e7e9      	b.n	801c2a2 <__mdiff+0x8a>
 801c2ce:	3e01      	subs	r6, #1
 801c2d0:	e7e9      	b.n	801c2a6 <__mdiff+0x8e>

0801c2d2 <__d2b>:
 801c2d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c2d6:	460e      	mov	r6, r1
 801c2d8:	2101      	movs	r1, #1
 801c2da:	ec59 8b10 	vmov	r8, r9, d0
 801c2de:	4615      	mov	r5, r2
 801c2e0:	f7ff fd6a 	bl	801bdb8 <_Balloc>
 801c2e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801c2e8:	4607      	mov	r7, r0
 801c2ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c2ee:	bb34      	cbnz	r4, 801c33e <__d2b+0x6c>
 801c2f0:	9301      	str	r3, [sp, #4]
 801c2f2:	f1b8 0300 	subs.w	r3, r8, #0
 801c2f6:	d027      	beq.n	801c348 <__d2b+0x76>
 801c2f8:	a802      	add	r0, sp, #8
 801c2fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 801c2fe:	f7ff fe00 	bl	801bf02 <__lo0bits>
 801c302:	9900      	ldr	r1, [sp, #0]
 801c304:	b1f0      	cbz	r0, 801c344 <__d2b+0x72>
 801c306:	9a01      	ldr	r2, [sp, #4]
 801c308:	f1c0 0320 	rsb	r3, r0, #32
 801c30c:	fa02 f303 	lsl.w	r3, r2, r3
 801c310:	430b      	orrs	r3, r1
 801c312:	40c2      	lsrs	r2, r0
 801c314:	617b      	str	r3, [r7, #20]
 801c316:	9201      	str	r2, [sp, #4]
 801c318:	9b01      	ldr	r3, [sp, #4]
 801c31a:	61bb      	str	r3, [r7, #24]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	bf14      	ite	ne
 801c320:	2102      	movne	r1, #2
 801c322:	2101      	moveq	r1, #1
 801c324:	6139      	str	r1, [r7, #16]
 801c326:	b1c4      	cbz	r4, 801c35a <__d2b+0x88>
 801c328:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801c32c:	4404      	add	r4, r0
 801c32e:	6034      	str	r4, [r6, #0]
 801c330:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c334:	6028      	str	r0, [r5, #0]
 801c336:	4638      	mov	r0, r7
 801c338:	b003      	add	sp, #12
 801c33a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c33e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c342:	e7d5      	b.n	801c2f0 <__d2b+0x1e>
 801c344:	6179      	str	r1, [r7, #20]
 801c346:	e7e7      	b.n	801c318 <__d2b+0x46>
 801c348:	a801      	add	r0, sp, #4
 801c34a:	f7ff fdda 	bl	801bf02 <__lo0bits>
 801c34e:	9b01      	ldr	r3, [sp, #4]
 801c350:	617b      	str	r3, [r7, #20]
 801c352:	2101      	movs	r1, #1
 801c354:	6139      	str	r1, [r7, #16]
 801c356:	3020      	adds	r0, #32
 801c358:	e7e5      	b.n	801c326 <__d2b+0x54>
 801c35a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801c35e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c362:	6030      	str	r0, [r6, #0]
 801c364:	6918      	ldr	r0, [r3, #16]
 801c366:	f7ff fdad 	bl	801bec4 <__hi0bits>
 801c36a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801c36e:	e7e1      	b.n	801c334 <__d2b+0x62>

0801c370 <_calloc_r>:
 801c370:	b538      	push	{r3, r4, r5, lr}
 801c372:	fb02 f401 	mul.w	r4, r2, r1
 801c376:	4621      	mov	r1, r4
 801c378:	f7fe f8d4 	bl	801a524 <_malloc_r>
 801c37c:	4605      	mov	r5, r0
 801c37e:	b118      	cbz	r0, 801c388 <_calloc_r+0x18>
 801c380:	4622      	mov	r2, r4
 801c382:	2100      	movs	r1, #0
 801c384:	f7fe f878 	bl	801a478 <memset>
 801c388:	4628      	mov	r0, r5
 801c38a:	bd38      	pop	{r3, r4, r5, pc}

0801c38c <__ssputs_r>:
 801c38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c390:	688e      	ldr	r6, [r1, #8]
 801c392:	429e      	cmp	r6, r3
 801c394:	4682      	mov	sl, r0
 801c396:	460c      	mov	r4, r1
 801c398:	4690      	mov	r8, r2
 801c39a:	4699      	mov	r9, r3
 801c39c:	d837      	bhi.n	801c40e <__ssputs_r+0x82>
 801c39e:	898a      	ldrh	r2, [r1, #12]
 801c3a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c3a4:	d031      	beq.n	801c40a <__ssputs_r+0x7e>
 801c3a6:	6825      	ldr	r5, [r4, #0]
 801c3a8:	6909      	ldr	r1, [r1, #16]
 801c3aa:	1a6f      	subs	r7, r5, r1
 801c3ac:	6965      	ldr	r5, [r4, #20]
 801c3ae:	2302      	movs	r3, #2
 801c3b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c3b4:	fb95 f5f3 	sdiv	r5, r5, r3
 801c3b8:	f109 0301 	add.w	r3, r9, #1
 801c3bc:	443b      	add	r3, r7
 801c3be:	429d      	cmp	r5, r3
 801c3c0:	bf38      	it	cc
 801c3c2:	461d      	movcc	r5, r3
 801c3c4:	0553      	lsls	r3, r2, #21
 801c3c6:	d530      	bpl.n	801c42a <__ssputs_r+0x9e>
 801c3c8:	4629      	mov	r1, r5
 801c3ca:	f7fe f8ab 	bl	801a524 <_malloc_r>
 801c3ce:	4606      	mov	r6, r0
 801c3d0:	b950      	cbnz	r0, 801c3e8 <__ssputs_r+0x5c>
 801c3d2:	230c      	movs	r3, #12
 801c3d4:	f8ca 3000 	str.w	r3, [sl]
 801c3d8:	89a3      	ldrh	r3, [r4, #12]
 801c3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c3de:	81a3      	strh	r3, [r4, #12]
 801c3e0:	f04f 30ff 	mov.w	r0, #4294967295
 801c3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c3e8:	463a      	mov	r2, r7
 801c3ea:	6921      	ldr	r1, [r4, #16]
 801c3ec:	f7fe f839 	bl	801a462 <memcpy>
 801c3f0:	89a3      	ldrh	r3, [r4, #12]
 801c3f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c3fa:	81a3      	strh	r3, [r4, #12]
 801c3fc:	6126      	str	r6, [r4, #16]
 801c3fe:	6165      	str	r5, [r4, #20]
 801c400:	443e      	add	r6, r7
 801c402:	1bed      	subs	r5, r5, r7
 801c404:	6026      	str	r6, [r4, #0]
 801c406:	60a5      	str	r5, [r4, #8]
 801c408:	464e      	mov	r6, r9
 801c40a:	454e      	cmp	r6, r9
 801c40c:	d900      	bls.n	801c410 <__ssputs_r+0x84>
 801c40e:	464e      	mov	r6, r9
 801c410:	4632      	mov	r2, r6
 801c412:	4641      	mov	r1, r8
 801c414:	6820      	ldr	r0, [r4, #0]
 801c416:	f001 f8dd 	bl	801d5d4 <memmove>
 801c41a:	68a3      	ldr	r3, [r4, #8]
 801c41c:	1b9b      	subs	r3, r3, r6
 801c41e:	60a3      	str	r3, [r4, #8]
 801c420:	6823      	ldr	r3, [r4, #0]
 801c422:	441e      	add	r6, r3
 801c424:	6026      	str	r6, [r4, #0]
 801c426:	2000      	movs	r0, #0
 801c428:	e7dc      	b.n	801c3e4 <__ssputs_r+0x58>
 801c42a:	462a      	mov	r2, r5
 801c42c:	f001 f8eb 	bl	801d606 <_realloc_r>
 801c430:	4606      	mov	r6, r0
 801c432:	2800      	cmp	r0, #0
 801c434:	d1e2      	bne.n	801c3fc <__ssputs_r+0x70>
 801c436:	6921      	ldr	r1, [r4, #16]
 801c438:	4650      	mov	r0, sl
 801c43a:	f7fe f825 	bl	801a488 <_free_r>
 801c43e:	e7c8      	b.n	801c3d2 <__ssputs_r+0x46>

0801c440 <_svfiprintf_r>:
 801c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c444:	461d      	mov	r5, r3
 801c446:	898b      	ldrh	r3, [r1, #12]
 801c448:	061f      	lsls	r7, r3, #24
 801c44a:	b09d      	sub	sp, #116	; 0x74
 801c44c:	4680      	mov	r8, r0
 801c44e:	460c      	mov	r4, r1
 801c450:	4616      	mov	r6, r2
 801c452:	d50f      	bpl.n	801c474 <_svfiprintf_r+0x34>
 801c454:	690b      	ldr	r3, [r1, #16]
 801c456:	b96b      	cbnz	r3, 801c474 <_svfiprintf_r+0x34>
 801c458:	2140      	movs	r1, #64	; 0x40
 801c45a:	f7fe f863 	bl	801a524 <_malloc_r>
 801c45e:	6020      	str	r0, [r4, #0]
 801c460:	6120      	str	r0, [r4, #16]
 801c462:	b928      	cbnz	r0, 801c470 <_svfiprintf_r+0x30>
 801c464:	230c      	movs	r3, #12
 801c466:	f8c8 3000 	str.w	r3, [r8]
 801c46a:	f04f 30ff 	mov.w	r0, #4294967295
 801c46e:	e0c8      	b.n	801c602 <_svfiprintf_r+0x1c2>
 801c470:	2340      	movs	r3, #64	; 0x40
 801c472:	6163      	str	r3, [r4, #20]
 801c474:	2300      	movs	r3, #0
 801c476:	9309      	str	r3, [sp, #36]	; 0x24
 801c478:	2320      	movs	r3, #32
 801c47a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c47e:	2330      	movs	r3, #48	; 0x30
 801c480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c484:	9503      	str	r5, [sp, #12]
 801c486:	f04f 0b01 	mov.w	fp, #1
 801c48a:	4637      	mov	r7, r6
 801c48c:	463d      	mov	r5, r7
 801c48e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c492:	b10b      	cbz	r3, 801c498 <_svfiprintf_r+0x58>
 801c494:	2b25      	cmp	r3, #37	; 0x25
 801c496:	d13e      	bne.n	801c516 <_svfiprintf_r+0xd6>
 801c498:	ebb7 0a06 	subs.w	sl, r7, r6
 801c49c:	d00b      	beq.n	801c4b6 <_svfiprintf_r+0x76>
 801c49e:	4653      	mov	r3, sl
 801c4a0:	4632      	mov	r2, r6
 801c4a2:	4621      	mov	r1, r4
 801c4a4:	4640      	mov	r0, r8
 801c4a6:	f7ff ff71 	bl	801c38c <__ssputs_r>
 801c4aa:	3001      	adds	r0, #1
 801c4ac:	f000 80a4 	beq.w	801c5f8 <_svfiprintf_r+0x1b8>
 801c4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4b2:	4453      	add	r3, sl
 801c4b4:	9309      	str	r3, [sp, #36]	; 0x24
 801c4b6:	783b      	ldrb	r3, [r7, #0]
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	f000 809d 	beq.w	801c5f8 <_svfiprintf_r+0x1b8>
 801c4be:	2300      	movs	r3, #0
 801c4c0:	f04f 32ff 	mov.w	r2, #4294967295
 801c4c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c4c8:	9304      	str	r3, [sp, #16]
 801c4ca:	9307      	str	r3, [sp, #28]
 801c4cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c4d0:	931a      	str	r3, [sp, #104]	; 0x68
 801c4d2:	462f      	mov	r7, r5
 801c4d4:	2205      	movs	r2, #5
 801c4d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 801c4da:	4850      	ldr	r0, [pc, #320]	; (801c61c <_svfiprintf_r+0x1dc>)
 801c4dc:	f7e3 feb8 	bl	8000250 <memchr>
 801c4e0:	9b04      	ldr	r3, [sp, #16]
 801c4e2:	b9d0      	cbnz	r0, 801c51a <_svfiprintf_r+0xda>
 801c4e4:	06d9      	lsls	r1, r3, #27
 801c4e6:	bf44      	itt	mi
 801c4e8:	2220      	movmi	r2, #32
 801c4ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c4ee:	071a      	lsls	r2, r3, #28
 801c4f0:	bf44      	itt	mi
 801c4f2:	222b      	movmi	r2, #43	; 0x2b
 801c4f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801c4f8:	782a      	ldrb	r2, [r5, #0]
 801c4fa:	2a2a      	cmp	r2, #42	; 0x2a
 801c4fc:	d015      	beq.n	801c52a <_svfiprintf_r+0xea>
 801c4fe:	9a07      	ldr	r2, [sp, #28]
 801c500:	462f      	mov	r7, r5
 801c502:	2000      	movs	r0, #0
 801c504:	250a      	movs	r5, #10
 801c506:	4639      	mov	r1, r7
 801c508:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c50c:	3b30      	subs	r3, #48	; 0x30
 801c50e:	2b09      	cmp	r3, #9
 801c510:	d94d      	bls.n	801c5ae <_svfiprintf_r+0x16e>
 801c512:	b1b8      	cbz	r0, 801c544 <_svfiprintf_r+0x104>
 801c514:	e00f      	b.n	801c536 <_svfiprintf_r+0xf6>
 801c516:	462f      	mov	r7, r5
 801c518:	e7b8      	b.n	801c48c <_svfiprintf_r+0x4c>
 801c51a:	4a40      	ldr	r2, [pc, #256]	; (801c61c <_svfiprintf_r+0x1dc>)
 801c51c:	1a80      	subs	r0, r0, r2
 801c51e:	fa0b f000 	lsl.w	r0, fp, r0
 801c522:	4318      	orrs	r0, r3
 801c524:	9004      	str	r0, [sp, #16]
 801c526:	463d      	mov	r5, r7
 801c528:	e7d3      	b.n	801c4d2 <_svfiprintf_r+0x92>
 801c52a:	9a03      	ldr	r2, [sp, #12]
 801c52c:	1d11      	adds	r1, r2, #4
 801c52e:	6812      	ldr	r2, [r2, #0]
 801c530:	9103      	str	r1, [sp, #12]
 801c532:	2a00      	cmp	r2, #0
 801c534:	db01      	blt.n	801c53a <_svfiprintf_r+0xfa>
 801c536:	9207      	str	r2, [sp, #28]
 801c538:	e004      	b.n	801c544 <_svfiprintf_r+0x104>
 801c53a:	4252      	negs	r2, r2
 801c53c:	f043 0302 	orr.w	r3, r3, #2
 801c540:	9207      	str	r2, [sp, #28]
 801c542:	9304      	str	r3, [sp, #16]
 801c544:	783b      	ldrb	r3, [r7, #0]
 801c546:	2b2e      	cmp	r3, #46	; 0x2e
 801c548:	d10c      	bne.n	801c564 <_svfiprintf_r+0x124>
 801c54a:	787b      	ldrb	r3, [r7, #1]
 801c54c:	2b2a      	cmp	r3, #42	; 0x2a
 801c54e:	d133      	bne.n	801c5b8 <_svfiprintf_r+0x178>
 801c550:	9b03      	ldr	r3, [sp, #12]
 801c552:	1d1a      	adds	r2, r3, #4
 801c554:	681b      	ldr	r3, [r3, #0]
 801c556:	9203      	str	r2, [sp, #12]
 801c558:	2b00      	cmp	r3, #0
 801c55a:	bfb8      	it	lt
 801c55c:	f04f 33ff 	movlt.w	r3, #4294967295
 801c560:	3702      	adds	r7, #2
 801c562:	9305      	str	r3, [sp, #20]
 801c564:	4d2e      	ldr	r5, [pc, #184]	; (801c620 <_svfiprintf_r+0x1e0>)
 801c566:	7839      	ldrb	r1, [r7, #0]
 801c568:	2203      	movs	r2, #3
 801c56a:	4628      	mov	r0, r5
 801c56c:	f7e3 fe70 	bl	8000250 <memchr>
 801c570:	b138      	cbz	r0, 801c582 <_svfiprintf_r+0x142>
 801c572:	2340      	movs	r3, #64	; 0x40
 801c574:	1b40      	subs	r0, r0, r5
 801c576:	fa03 f000 	lsl.w	r0, r3, r0
 801c57a:	9b04      	ldr	r3, [sp, #16]
 801c57c:	4303      	orrs	r3, r0
 801c57e:	3701      	adds	r7, #1
 801c580:	9304      	str	r3, [sp, #16]
 801c582:	7839      	ldrb	r1, [r7, #0]
 801c584:	4827      	ldr	r0, [pc, #156]	; (801c624 <_svfiprintf_r+0x1e4>)
 801c586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c58a:	2206      	movs	r2, #6
 801c58c:	1c7e      	adds	r6, r7, #1
 801c58e:	f7e3 fe5f 	bl	8000250 <memchr>
 801c592:	2800      	cmp	r0, #0
 801c594:	d038      	beq.n	801c608 <_svfiprintf_r+0x1c8>
 801c596:	4b24      	ldr	r3, [pc, #144]	; (801c628 <_svfiprintf_r+0x1e8>)
 801c598:	bb13      	cbnz	r3, 801c5e0 <_svfiprintf_r+0x1a0>
 801c59a:	9b03      	ldr	r3, [sp, #12]
 801c59c:	3307      	adds	r3, #7
 801c59e:	f023 0307 	bic.w	r3, r3, #7
 801c5a2:	3308      	adds	r3, #8
 801c5a4:	9303      	str	r3, [sp, #12]
 801c5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c5a8:	444b      	add	r3, r9
 801c5aa:	9309      	str	r3, [sp, #36]	; 0x24
 801c5ac:	e76d      	b.n	801c48a <_svfiprintf_r+0x4a>
 801c5ae:	fb05 3202 	mla	r2, r5, r2, r3
 801c5b2:	2001      	movs	r0, #1
 801c5b4:	460f      	mov	r7, r1
 801c5b6:	e7a6      	b.n	801c506 <_svfiprintf_r+0xc6>
 801c5b8:	2300      	movs	r3, #0
 801c5ba:	3701      	adds	r7, #1
 801c5bc:	9305      	str	r3, [sp, #20]
 801c5be:	4619      	mov	r1, r3
 801c5c0:	250a      	movs	r5, #10
 801c5c2:	4638      	mov	r0, r7
 801c5c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c5c8:	3a30      	subs	r2, #48	; 0x30
 801c5ca:	2a09      	cmp	r2, #9
 801c5cc:	d903      	bls.n	801c5d6 <_svfiprintf_r+0x196>
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	d0c8      	beq.n	801c564 <_svfiprintf_r+0x124>
 801c5d2:	9105      	str	r1, [sp, #20]
 801c5d4:	e7c6      	b.n	801c564 <_svfiprintf_r+0x124>
 801c5d6:	fb05 2101 	mla	r1, r5, r1, r2
 801c5da:	2301      	movs	r3, #1
 801c5dc:	4607      	mov	r7, r0
 801c5de:	e7f0      	b.n	801c5c2 <_svfiprintf_r+0x182>
 801c5e0:	ab03      	add	r3, sp, #12
 801c5e2:	9300      	str	r3, [sp, #0]
 801c5e4:	4622      	mov	r2, r4
 801c5e6:	4b11      	ldr	r3, [pc, #68]	; (801c62c <_svfiprintf_r+0x1ec>)
 801c5e8:	a904      	add	r1, sp, #16
 801c5ea:	4640      	mov	r0, r8
 801c5ec:	f7fe f87c 	bl	801a6e8 <_printf_float>
 801c5f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 801c5f4:	4681      	mov	r9, r0
 801c5f6:	d1d6      	bne.n	801c5a6 <_svfiprintf_r+0x166>
 801c5f8:	89a3      	ldrh	r3, [r4, #12]
 801c5fa:	065b      	lsls	r3, r3, #25
 801c5fc:	f53f af35 	bmi.w	801c46a <_svfiprintf_r+0x2a>
 801c600:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c602:	b01d      	add	sp, #116	; 0x74
 801c604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c608:	ab03      	add	r3, sp, #12
 801c60a:	9300      	str	r3, [sp, #0]
 801c60c:	4622      	mov	r2, r4
 801c60e:	4b07      	ldr	r3, [pc, #28]	; (801c62c <_svfiprintf_r+0x1ec>)
 801c610:	a904      	add	r1, sp, #16
 801c612:	4640      	mov	r0, r8
 801c614:	f7fe fb0a 	bl	801ac2c <_printf_i>
 801c618:	e7ea      	b.n	801c5f0 <_svfiprintf_r+0x1b0>
 801c61a:	bf00      	nop
 801c61c:	080202bc 	.word	0x080202bc
 801c620:	080202c2 	.word	0x080202c2
 801c624:	080202c6 	.word	0x080202c6
 801c628:	0801a6e9 	.word	0x0801a6e9
 801c62c:	0801c38d 	.word	0x0801c38d

0801c630 <_sungetc_r>:
 801c630:	b538      	push	{r3, r4, r5, lr}
 801c632:	1c4b      	adds	r3, r1, #1
 801c634:	4614      	mov	r4, r2
 801c636:	d103      	bne.n	801c640 <_sungetc_r+0x10>
 801c638:	f04f 35ff 	mov.w	r5, #4294967295
 801c63c:	4628      	mov	r0, r5
 801c63e:	bd38      	pop	{r3, r4, r5, pc}
 801c640:	8993      	ldrh	r3, [r2, #12]
 801c642:	f023 0320 	bic.w	r3, r3, #32
 801c646:	8193      	strh	r3, [r2, #12]
 801c648:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c64a:	6852      	ldr	r2, [r2, #4]
 801c64c:	b2cd      	uxtb	r5, r1
 801c64e:	b18b      	cbz	r3, 801c674 <_sungetc_r+0x44>
 801c650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c652:	4293      	cmp	r3, r2
 801c654:	dd08      	ble.n	801c668 <_sungetc_r+0x38>
 801c656:	6823      	ldr	r3, [r4, #0]
 801c658:	1e5a      	subs	r2, r3, #1
 801c65a:	6022      	str	r2, [r4, #0]
 801c65c:	f803 5c01 	strb.w	r5, [r3, #-1]
 801c660:	6863      	ldr	r3, [r4, #4]
 801c662:	3301      	adds	r3, #1
 801c664:	6063      	str	r3, [r4, #4]
 801c666:	e7e9      	b.n	801c63c <_sungetc_r+0xc>
 801c668:	4621      	mov	r1, r4
 801c66a:	f000 fd81 	bl	801d170 <__submore>
 801c66e:	2800      	cmp	r0, #0
 801c670:	d0f1      	beq.n	801c656 <_sungetc_r+0x26>
 801c672:	e7e1      	b.n	801c638 <_sungetc_r+0x8>
 801c674:	6921      	ldr	r1, [r4, #16]
 801c676:	6823      	ldr	r3, [r4, #0]
 801c678:	b151      	cbz	r1, 801c690 <_sungetc_r+0x60>
 801c67a:	4299      	cmp	r1, r3
 801c67c:	d208      	bcs.n	801c690 <_sungetc_r+0x60>
 801c67e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801c682:	42a9      	cmp	r1, r5
 801c684:	d104      	bne.n	801c690 <_sungetc_r+0x60>
 801c686:	3b01      	subs	r3, #1
 801c688:	3201      	adds	r2, #1
 801c68a:	6023      	str	r3, [r4, #0]
 801c68c:	6062      	str	r2, [r4, #4]
 801c68e:	e7d5      	b.n	801c63c <_sungetc_r+0xc>
 801c690:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801c694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c698:	6363      	str	r3, [r4, #52]	; 0x34
 801c69a:	2303      	movs	r3, #3
 801c69c:	63a3      	str	r3, [r4, #56]	; 0x38
 801c69e:	4623      	mov	r3, r4
 801c6a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 801c6a4:	6023      	str	r3, [r4, #0]
 801c6a6:	2301      	movs	r3, #1
 801c6a8:	e7dc      	b.n	801c664 <_sungetc_r+0x34>

0801c6aa <__ssrefill_r>:
 801c6aa:	b510      	push	{r4, lr}
 801c6ac:	460c      	mov	r4, r1
 801c6ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801c6b0:	b169      	cbz	r1, 801c6ce <__ssrefill_r+0x24>
 801c6b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c6b6:	4299      	cmp	r1, r3
 801c6b8:	d001      	beq.n	801c6be <__ssrefill_r+0x14>
 801c6ba:	f7fd fee5 	bl	801a488 <_free_r>
 801c6be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c6c0:	6063      	str	r3, [r4, #4]
 801c6c2:	2000      	movs	r0, #0
 801c6c4:	6360      	str	r0, [r4, #52]	; 0x34
 801c6c6:	b113      	cbz	r3, 801c6ce <__ssrefill_r+0x24>
 801c6c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c6ca:	6023      	str	r3, [r4, #0]
 801c6cc:	bd10      	pop	{r4, pc}
 801c6ce:	6923      	ldr	r3, [r4, #16]
 801c6d0:	6023      	str	r3, [r4, #0]
 801c6d2:	2300      	movs	r3, #0
 801c6d4:	6063      	str	r3, [r4, #4]
 801c6d6:	89a3      	ldrh	r3, [r4, #12]
 801c6d8:	f043 0320 	orr.w	r3, r3, #32
 801c6dc:	81a3      	strh	r3, [r4, #12]
 801c6de:	f04f 30ff 	mov.w	r0, #4294967295
 801c6e2:	e7f3      	b.n	801c6cc <__ssrefill_r+0x22>

0801c6e4 <__ssvfiscanf_r>:
 801c6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6e8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801c6ec:	460c      	mov	r4, r1
 801c6ee:	2100      	movs	r1, #0
 801c6f0:	9144      	str	r1, [sp, #272]	; 0x110
 801c6f2:	9145      	str	r1, [sp, #276]	; 0x114
 801c6f4:	499f      	ldr	r1, [pc, #636]	; (801c974 <__ssvfiscanf_r+0x290>)
 801c6f6:	91a0      	str	r1, [sp, #640]	; 0x280
 801c6f8:	f10d 0804 	add.w	r8, sp, #4
 801c6fc:	499e      	ldr	r1, [pc, #632]	; (801c978 <__ssvfiscanf_r+0x294>)
 801c6fe:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801c97c <__ssvfiscanf_r+0x298>
 801c702:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801c706:	4606      	mov	r6, r0
 801c708:	4692      	mov	sl, r2
 801c70a:	91a1      	str	r1, [sp, #644]	; 0x284
 801c70c:	9300      	str	r3, [sp, #0]
 801c70e:	270a      	movs	r7, #10
 801c710:	f89a 3000 	ldrb.w	r3, [sl]
 801c714:	2b00      	cmp	r3, #0
 801c716:	f000 812a 	beq.w	801c96e <__ssvfiscanf_r+0x28a>
 801c71a:	4655      	mov	r5, sl
 801c71c:	f000 fed6 	bl	801d4cc <__locale_ctype_ptr>
 801c720:	f815 bb01 	ldrb.w	fp, [r5], #1
 801c724:	4458      	add	r0, fp
 801c726:	7843      	ldrb	r3, [r0, #1]
 801c728:	f013 0308 	ands.w	r3, r3, #8
 801c72c:	d01c      	beq.n	801c768 <__ssvfiscanf_r+0x84>
 801c72e:	6863      	ldr	r3, [r4, #4]
 801c730:	2b00      	cmp	r3, #0
 801c732:	dd12      	ble.n	801c75a <__ssvfiscanf_r+0x76>
 801c734:	f000 feca 	bl	801d4cc <__locale_ctype_ptr>
 801c738:	6823      	ldr	r3, [r4, #0]
 801c73a:	781a      	ldrb	r2, [r3, #0]
 801c73c:	4410      	add	r0, r2
 801c73e:	7842      	ldrb	r2, [r0, #1]
 801c740:	0712      	lsls	r2, r2, #28
 801c742:	d401      	bmi.n	801c748 <__ssvfiscanf_r+0x64>
 801c744:	46aa      	mov	sl, r5
 801c746:	e7e3      	b.n	801c710 <__ssvfiscanf_r+0x2c>
 801c748:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801c74a:	3201      	adds	r2, #1
 801c74c:	9245      	str	r2, [sp, #276]	; 0x114
 801c74e:	6862      	ldr	r2, [r4, #4]
 801c750:	3301      	adds	r3, #1
 801c752:	3a01      	subs	r2, #1
 801c754:	6062      	str	r2, [r4, #4]
 801c756:	6023      	str	r3, [r4, #0]
 801c758:	e7e9      	b.n	801c72e <__ssvfiscanf_r+0x4a>
 801c75a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c75c:	4621      	mov	r1, r4
 801c75e:	4630      	mov	r0, r6
 801c760:	4798      	blx	r3
 801c762:	2800      	cmp	r0, #0
 801c764:	d0e6      	beq.n	801c734 <__ssvfiscanf_r+0x50>
 801c766:	e7ed      	b.n	801c744 <__ssvfiscanf_r+0x60>
 801c768:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801c76c:	f040 8082 	bne.w	801c874 <__ssvfiscanf_r+0x190>
 801c770:	9343      	str	r3, [sp, #268]	; 0x10c
 801c772:	9341      	str	r3, [sp, #260]	; 0x104
 801c774:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801c778:	2b2a      	cmp	r3, #42	; 0x2a
 801c77a:	d103      	bne.n	801c784 <__ssvfiscanf_r+0xa0>
 801c77c:	2310      	movs	r3, #16
 801c77e:	9341      	str	r3, [sp, #260]	; 0x104
 801c780:	f10a 0502 	add.w	r5, sl, #2
 801c784:	46aa      	mov	sl, r5
 801c786:	f815 1b01 	ldrb.w	r1, [r5], #1
 801c78a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801c78e:	2a09      	cmp	r2, #9
 801c790:	d922      	bls.n	801c7d8 <__ssvfiscanf_r+0xf4>
 801c792:	2203      	movs	r2, #3
 801c794:	4879      	ldr	r0, [pc, #484]	; (801c97c <__ssvfiscanf_r+0x298>)
 801c796:	f7e3 fd5b 	bl	8000250 <memchr>
 801c79a:	b138      	cbz	r0, 801c7ac <__ssvfiscanf_r+0xc8>
 801c79c:	eba0 0309 	sub.w	r3, r0, r9
 801c7a0:	2001      	movs	r0, #1
 801c7a2:	4098      	lsls	r0, r3
 801c7a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c7a6:	4318      	orrs	r0, r3
 801c7a8:	9041      	str	r0, [sp, #260]	; 0x104
 801c7aa:	46aa      	mov	sl, r5
 801c7ac:	f89a 3000 	ldrb.w	r3, [sl]
 801c7b0:	2b67      	cmp	r3, #103	; 0x67
 801c7b2:	f10a 0501 	add.w	r5, sl, #1
 801c7b6:	d82b      	bhi.n	801c810 <__ssvfiscanf_r+0x12c>
 801c7b8:	2b65      	cmp	r3, #101	; 0x65
 801c7ba:	f080 809f 	bcs.w	801c8fc <__ssvfiscanf_r+0x218>
 801c7be:	2b47      	cmp	r3, #71	; 0x47
 801c7c0:	d810      	bhi.n	801c7e4 <__ssvfiscanf_r+0x100>
 801c7c2:	2b45      	cmp	r3, #69	; 0x45
 801c7c4:	f080 809a 	bcs.w	801c8fc <__ssvfiscanf_r+0x218>
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d06c      	beq.n	801c8a6 <__ssvfiscanf_r+0x1c2>
 801c7cc:	2b25      	cmp	r3, #37	; 0x25
 801c7ce:	d051      	beq.n	801c874 <__ssvfiscanf_r+0x190>
 801c7d0:	2303      	movs	r3, #3
 801c7d2:	9347      	str	r3, [sp, #284]	; 0x11c
 801c7d4:	9742      	str	r7, [sp, #264]	; 0x108
 801c7d6:	e027      	b.n	801c828 <__ssvfiscanf_r+0x144>
 801c7d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801c7da:	fb07 1303 	mla	r3, r7, r3, r1
 801c7de:	3b30      	subs	r3, #48	; 0x30
 801c7e0:	9343      	str	r3, [sp, #268]	; 0x10c
 801c7e2:	e7cf      	b.n	801c784 <__ssvfiscanf_r+0xa0>
 801c7e4:	2b5b      	cmp	r3, #91	; 0x5b
 801c7e6:	d06a      	beq.n	801c8be <__ssvfiscanf_r+0x1da>
 801c7e8:	d80c      	bhi.n	801c804 <__ssvfiscanf_r+0x120>
 801c7ea:	2b58      	cmp	r3, #88	; 0x58
 801c7ec:	d1f0      	bne.n	801c7d0 <__ssvfiscanf_r+0xec>
 801c7ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801c7f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801c7f4:	9241      	str	r2, [sp, #260]	; 0x104
 801c7f6:	2210      	movs	r2, #16
 801c7f8:	9242      	str	r2, [sp, #264]	; 0x108
 801c7fa:	2b6e      	cmp	r3, #110	; 0x6e
 801c7fc:	bf8c      	ite	hi
 801c7fe:	2304      	movhi	r3, #4
 801c800:	2303      	movls	r3, #3
 801c802:	e010      	b.n	801c826 <__ssvfiscanf_r+0x142>
 801c804:	2b63      	cmp	r3, #99	; 0x63
 801c806:	d065      	beq.n	801c8d4 <__ssvfiscanf_r+0x1f0>
 801c808:	2b64      	cmp	r3, #100	; 0x64
 801c80a:	d1e1      	bne.n	801c7d0 <__ssvfiscanf_r+0xec>
 801c80c:	9742      	str	r7, [sp, #264]	; 0x108
 801c80e:	e7f4      	b.n	801c7fa <__ssvfiscanf_r+0x116>
 801c810:	2b70      	cmp	r3, #112	; 0x70
 801c812:	d04b      	beq.n	801c8ac <__ssvfiscanf_r+0x1c8>
 801c814:	d826      	bhi.n	801c864 <__ssvfiscanf_r+0x180>
 801c816:	2b6e      	cmp	r3, #110	; 0x6e
 801c818:	d062      	beq.n	801c8e0 <__ssvfiscanf_r+0x1fc>
 801c81a:	d84c      	bhi.n	801c8b6 <__ssvfiscanf_r+0x1d2>
 801c81c:	2b69      	cmp	r3, #105	; 0x69
 801c81e:	d1d7      	bne.n	801c7d0 <__ssvfiscanf_r+0xec>
 801c820:	2300      	movs	r3, #0
 801c822:	9342      	str	r3, [sp, #264]	; 0x108
 801c824:	2303      	movs	r3, #3
 801c826:	9347      	str	r3, [sp, #284]	; 0x11c
 801c828:	6863      	ldr	r3, [r4, #4]
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	dd68      	ble.n	801c900 <__ssvfiscanf_r+0x21c>
 801c82e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c830:	0659      	lsls	r1, r3, #25
 801c832:	d407      	bmi.n	801c844 <__ssvfiscanf_r+0x160>
 801c834:	f000 fe4a 	bl	801d4cc <__locale_ctype_ptr>
 801c838:	6823      	ldr	r3, [r4, #0]
 801c83a:	781a      	ldrb	r2, [r3, #0]
 801c83c:	4410      	add	r0, r2
 801c83e:	7842      	ldrb	r2, [r0, #1]
 801c840:	0712      	lsls	r2, r2, #28
 801c842:	d464      	bmi.n	801c90e <__ssvfiscanf_r+0x22a>
 801c844:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801c846:	2b02      	cmp	r3, #2
 801c848:	dc73      	bgt.n	801c932 <__ssvfiscanf_r+0x24e>
 801c84a:	466b      	mov	r3, sp
 801c84c:	4622      	mov	r2, r4
 801c84e:	a941      	add	r1, sp, #260	; 0x104
 801c850:	4630      	mov	r0, r6
 801c852:	f000 f9d7 	bl	801cc04 <_scanf_chars>
 801c856:	2801      	cmp	r0, #1
 801c858:	f000 8089 	beq.w	801c96e <__ssvfiscanf_r+0x28a>
 801c85c:	2802      	cmp	r0, #2
 801c85e:	f47f af71 	bne.w	801c744 <__ssvfiscanf_r+0x60>
 801c862:	e01d      	b.n	801c8a0 <__ssvfiscanf_r+0x1bc>
 801c864:	2b75      	cmp	r3, #117	; 0x75
 801c866:	d0d1      	beq.n	801c80c <__ssvfiscanf_r+0x128>
 801c868:	2b78      	cmp	r3, #120	; 0x78
 801c86a:	d0c0      	beq.n	801c7ee <__ssvfiscanf_r+0x10a>
 801c86c:	2b73      	cmp	r3, #115	; 0x73
 801c86e:	d1af      	bne.n	801c7d0 <__ssvfiscanf_r+0xec>
 801c870:	2302      	movs	r3, #2
 801c872:	e7d8      	b.n	801c826 <__ssvfiscanf_r+0x142>
 801c874:	6863      	ldr	r3, [r4, #4]
 801c876:	2b00      	cmp	r3, #0
 801c878:	dd0c      	ble.n	801c894 <__ssvfiscanf_r+0x1b0>
 801c87a:	6823      	ldr	r3, [r4, #0]
 801c87c:	781a      	ldrb	r2, [r3, #0]
 801c87e:	455a      	cmp	r2, fp
 801c880:	d175      	bne.n	801c96e <__ssvfiscanf_r+0x28a>
 801c882:	3301      	adds	r3, #1
 801c884:	6862      	ldr	r2, [r4, #4]
 801c886:	6023      	str	r3, [r4, #0]
 801c888:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801c88a:	3a01      	subs	r2, #1
 801c88c:	3301      	adds	r3, #1
 801c88e:	6062      	str	r2, [r4, #4]
 801c890:	9345      	str	r3, [sp, #276]	; 0x114
 801c892:	e757      	b.n	801c744 <__ssvfiscanf_r+0x60>
 801c894:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c896:	4621      	mov	r1, r4
 801c898:	4630      	mov	r0, r6
 801c89a:	4798      	blx	r3
 801c89c:	2800      	cmp	r0, #0
 801c89e:	d0ec      	beq.n	801c87a <__ssvfiscanf_r+0x196>
 801c8a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 801c8a2:	2800      	cmp	r0, #0
 801c8a4:	d159      	bne.n	801c95a <__ssvfiscanf_r+0x276>
 801c8a6:	f04f 30ff 	mov.w	r0, #4294967295
 801c8aa:	e05c      	b.n	801c966 <__ssvfiscanf_r+0x282>
 801c8ac:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801c8ae:	f042 0220 	orr.w	r2, r2, #32
 801c8b2:	9241      	str	r2, [sp, #260]	; 0x104
 801c8b4:	e79b      	b.n	801c7ee <__ssvfiscanf_r+0x10a>
 801c8b6:	2308      	movs	r3, #8
 801c8b8:	9342      	str	r3, [sp, #264]	; 0x108
 801c8ba:	2304      	movs	r3, #4
 801c8bc:	e7b3      	b.n	801c826 <__ssvfiscanf_r+0x142>
 801c8be:	4629      	mov	r1, r5
 801c8c0:	4640      	mov	r0, r8
 801c8c2:	f000 fb09 	bl	801ced8 <__sccl>
 801c8c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c8c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c8cc:	9341      	str	r3, [sp, #260]	; 0x104
 801c8ce:	4605      	mov	r5, r0
 801c8d0:	2301      	movs	r3, #1
 801c8d2:	e7a8      	b.n	801c826 <__ssvfiscanf_r+0x142>
 801c8d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801c8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c8da:	9341      	str	r3, [sp, #260]	; 0x104
 801c8dc:	2300      	movs	r3, #0
 801c8de:	e7a2      	b.n	801c826 <__ssvfiscanf_r+0x142>
 801c8e0:	9841      	ldr	r0, [sp, #260]	; 0x104
 801c8e2:	06c3      	lsls	r3, r0, #27
 801c8e4:	f53f af2e 	bmi.w	801c744 <__ssvfiscanf_r+0x60>
 801c8e8:	9b00      	ldr	r3, [sp, #0]
 801c8ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801c8ec:	1d19      	adds	r1, r3, #4
 801c8ee:	9100      	str	r1, [sp, #0]
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	07c0      	lsls	r0, r0, #31
 801c8f4:	bf4c      	ite	mi
 801c8f6:	801a      	strhmi	r2, [r3, #0]
 801c8f8:	601a      	strpl	r2, [r3, #0]
 801c8fa:	e723      	b.n	801c744 <__ssvfiscanf_r+0x60>
 801c8fc:	2305      	movs	r3, #5
 801c8fe:	e792      	b.n	801c826 <__ssvfiscanf_r+0x142>
 801c900:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c902:	4621      	mov	r1, r4
 801c904:	4630      	mov	r0, r6
 801c906:	4798      	blx	r3
 801c908:	2800      	cmp	r0, #0
 801c90a:	d090      	beq.n	801c82e <__ssvfiscanf_r+0x14a>
 801c90c:	e7c8      	b.n	801c8a0 <__ssvfiscanf_r+0x1bc>
 801c90e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801c910:	3201      	adds	r2, #1
 801c912:	9245      	str	r2, [sp, #276]	; 0x114
 801c914:	6862      	ldr	r2, [r4, #4]
 801c916:	3a01      	subs	r2, #1
 801c918:	2a00      	cmp	r2, #0
 801c91a:	6062      	str	r2, [r4, #4]
 801c91c:	dd02      	ble.n	801c924 <__ssvfiscanf_r+0x240>
 801c91e:	3301      	adds	r3, #1
 801c920:	6023      	str	r3, [r4, #0]
 801c922:	e787      	b.n	801c834 <__ssvfiscanf_r+0x150>
 801c924:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801c926:	4621      	mov	r1, r4
 801c928:	4630      	mov	r0, r6
 801c92a:	4798      	blx	r3
 801c92c:	2800      	cmp	r0, #0
 801c92e:	d081      	beq.n	801c834 <__ssvfiscanf_r+0x150>
 801c930:	e7b6      	b.n	801c8a0 <__ssvfiscanf_r+0x1bc>
 801c932:	2b04      	cmp	r3, #4
 801c934:	dc06      	bgt.n	801c944 <__ssvfiscanf_r+0x260>
 801c936:	466b      	mov	r3, sp
 801c938:	4622      	mov	r2, r4
 801c93a:	a941      	add	r1, sp, #260	; 0x104
 801c93c:	4630      	mov	r0, r6
 801c93e:	f000 f9c5 	bl	801cccc <_scanf_i>
 801c942:	e788      	b.n	801c856 <__ssvfiscanf_r+0x172>
 801c944:	4b0e      	ldr	r3, [pc, #56]	; (801c980 <__ssvfiscanf_r+0x29c>)
 801c946:	2b00      	cmp	r3, #0
 801c948:	f43f aefc 	beq.w	801c744 <__ssvfiscanf_r+0x60>
 801c94c:	466b      	mov	r3, sp
 801c94e:	4622      	mov	r2, r4
 801c950:	a941      	add	r1, sp, #260	; 0x104
 801c952:	4630      	mov	r0, r6
 801c954:	f3af 8000 	nop.w
 801c958:	e77d      	b.n	801c856 <__ssvfiscanf_r+0x172>
 801c95a:	89a3      	ldrh	r3, [r4, #12]
 801c95c:	f013 0f40 	tst.w	r3, #64	; 0x40
 801c960:	bf18      	it	ne
 801c962:	f04f 30ff 	movne.w	r0, #4294967295
 801c966:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c96e:	9844      	ldr	r0, [sp, #272]	; 0x110
 801c970:	e7f9      	b.n	801c966 <__ssvfiscanf_r+0x282>
 801c972:	bf00      	nop
 801c974:	0801c631 	.word	0x0801c631
 801c978:	0801c6ab 	.word	0x0801c6ab
 801c97c:	080202c2 	.word	0x080202c2
 801c980:	00000000 	.word	0x00000000

0801c984 <__sfputc_r>:
 801c984:	6893      	ldr	r3, [r2, #8]
 801c986:	3b01      	subs	r3, #1
 801c988:	2b00      	cmp	r3, #0
 801c98a:	b410      	push	{r4}
 801c98c:	6093      	str	r3, [r2, #8]
 801c98e:	da08      	bge.n	801c9a2 <__sfputc_r+0x1e>
 801c990:	6994      	ldr	r4, [r2, #24]
 801c992:	42a3      	cmp	r3, r4
 801c994:	db01      	blt.n	801c99a <__sfputc_r+0x16>
 801c996:	290a      	cmp	r1, #10
 801c998:	d103      	bne.n	801c9a2 <__sfputc_r+0x1e>
 801c99a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c99e:	f000 bc21 	b.w	801d1e4 <__swbuf_r>
 801c9a2:	6813      	ldr	r3, [r2, #0]
 801c9a4:	1c58      	adds	r0, r3, #1
 801c9a6:	6010      	str	r0, [r2, #0]
 801c9a8:	7019      	strb	r1, [r3, #0]
 801c9aa:	4608      	mov	r0, r1
 801c9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9b0:	4770      	bx	lr

0801c9b2 <__sfputs_r>:
 801c9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9b4:	4606      	mov	r6, r0
 801c9b6:	460f      	mov	r7, r1
 801c9b8:	4614      	mov	r4, r2
 801c9ba:	18d5      	adds	r5, r2, r3
 801c9bc:	42ac      	cmp	r4, r5
 801c9be:	d101      	bne.n	801c9c4 <__sfputs_r+0x12>
 801c9c0:	2000      	movs	r0, #0
 801c9c2:	e007      	b.n	801c9d4 <__sfputs_r+0x22>
 801c9c4:	463a      	mov	r2, r7
 801c9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9ca:	4630      	mov	r0, r6
 801c9cc:	f7ff ffda 	bl	801c984 <__sfputc_r>
 801c9d0:	1c43      	adds	r3, r0, #1
 801c9d2:	d1f3      	bne.n	801c9bc <__sfputs_r+0xa>
 801c9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c9d8 <_vfiprintf_r>:
 801c9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9dc:	460c      	mov	r4, r1
 801c9de:	b09d      	sub	sp, #116	; 0x74
 801c9e0:	4617      	mov	r7, r2
 801c9e2:	461d      	mov	r5, r3
 801c9e4:	4606      	mov	r6, r0
 801c9e6:	b118      	cbz	r0, 801c9f0 <_vfiprintf_r+0x18>
 801c9e8:	6983      	ldr	r3, [r0, #24]
 801c9ea:	b90b      	cbnz	r3, 801c9f0 <_vfiprintf_r+0x18>
 801c9ec:	f7ff f938 	bl	801bc60 <__sinit>
 801c9f0:	4b7c      	ldr	r3, [pc, #496]	; (801cbe4 <_vfiprintf_r+0x20c>)
 801c9f2:	429c      	cmp	r4, r3
 801c9f4:	d158      	bne.n	801caa8 <_vfiprintf_r+0xd0>
 801c9f6:	6874      	ldr	r4, [r6, #4]
 801c9f8:	89a3      	ldrh	r3, [r4, #12]
 801c9fa:	0718      	lsls	r0, r3, #28
 801c9fc:	d55e      	bpl.n	801cabc <_vfiprintf_r+0xe4>
 801c9fe:	6923      	ldr	r3, [r4, #16]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d05b      	beq.n	801cabc <_vfiprintf_r+0xe4>
 801ca04:	2300      	movs	r3, #0
 801ca06:	9309      	str	r3, [sp, #36]	; 0x24
 801ca08:	2320      	movs	r3, #32
 801ca0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ca0e:	2330      	movs	r3, #48	; 0x30
 801ca10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ca14:	9503      	str	r5, [sp, #12]
 801ca16:	f04f 0b01 	mov.w	fp, #1
 801ca1a:	46b8      	mov	r8, r7
 801ca1c:	4645      	mov	r5, r8
 801ca1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ca22:	b10b      	cbz	r3, 801ca28 <_vfiprintf_r+0x50>
 801ca24:	2b25      	cmp	r3, #37	; 0x25
 801ca26:	d154      	bne.n	801cad2 <_vfiprintf_r+0xfa>
 801ca28:	ebb8 0a07 	subs.w	sl, r8, r7
 801ca2c:	d00b      	beq.n	801ca46 <_vfiprintf_r+0x6e>
 801ca2e:	4653      	mov	r3, sl
 801ca30:	463a      	mov	r2, r7
 801ca32:	4621      	mov	r1, r4
 801ca34:	4630      	mov	r0, r6
 801ca36:	f7ff ffbc 	bl	801c9b2 <__sfputs_r>
 801ca3a:	3001      	adds	r0, #1
 801ca3c:	f000 80c2 	beq.w	801cbc4 <_vfiprintf_r+0x1ec>
 801ca40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca42:	4453      	add	r3, sl
 801ca44:	9309      	str	r3, [sp, #36]	; 0x24
 801ca46:	f898 3000 	ldrb.w	r3, [r8]
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	f000 80ba 	beq.w	801cbc4 <_vfiprintf_r+0x1ec>
 801ca50:	2300      	movs	r3, #0
 801ca52:	f04f 32ff 	mov.w	r2, #4294967295
 801ca56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca5a:	9304      	str	r3, [sp, #16]
 801ca5c:	9307      	str	r3, [sp, #28]
 801ca5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ca62:	931a      	str	r3, [sp, #104]	; 0x68
 801ca64:	46a8      	mov	r8, r5
 801ca66:	2205      	movs	r2, #5
 801ca68:	f818 1b01 	ldrb.w	r1, [r8], #1
 801ca6c:	485e      	ldr	r0, [pc, #376]	; (801cbe8 <_vfiprintf_r+0x210>)
 801ca6e:	f7e3 fbef 	bl	8000250 <memchr>
 801ca72:	9b04      	ldr	r3, [sp, #16]
 801ca74:	bb78      	cbnz	r0, 801cad6 <_vfiprintf_r+0xfe>
 801ca76:	06d9      	lsls	r1, r3, #27
 801ca78:	bf44      	itt	mi
 801ca7a:	2220      	movmi	r2, #32
 801ca7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ca80:	071a      	lsls	r2, r3, #28
 801ca82:	bf44      	itt	mi
 801ca84:	222b      	movmi	r2, #43	; 0x2b
 801ca86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ca8a:	782a      	ldrb	r2, [r5, #0]
 801ca8c:	2a2a      	cmp	r2, #42	; 0x2a
 801ca8e:	d02a      	beq.n	801cae6 <_vfiprintf_r+0x10e>
 801ca90:	9a07      	ldr	r2, [sp, #28]
 801ca92:	46a8      	mov	r8, r5
 801ca94:	2000      	movs	r0, #0
 801ca96:	250a      	movs	r5, #10
 801ca98:	4641      	mov	r1, r8
 801ca9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ca9e:	3b30      	subs	r3, #48	; 0x30
 801caa0:	2b09      	cmp	r3, #9
 801caa2:	d969      	bls.n	801cb78 <_vfiprintf_r+0x1a0>
 801caa4:	b360      	cbz	r0, 801cb00 <_vfiprintf_r+0x128>
 801caa6:	e024      	b.n	801caf2 <_vfiprintf_r+0x11a>
 801caa8:	4b50      	ldr	r3, [pc, #320]	; (801cbec <_vfiprintf_r+0x214>)
 801caaa:	429c      	cmp	r4, r3
 801caac:	d101      	bne.n	801cab2 <_vfiprintf_r+0xda>
 801caae:	68b4      	ldr	r4, [r6, #8]
 801cab0:	e7a2      	b.n	801c9f8 <_vfiprintf_r+0x20>
 801cab2:	4b4f      	ldr	r3, [pc, #316]	; (801cbf0 <_vfiprintf_r+0x218>)
 801cab4:	429c      	cmp	r4, r3
 801cab6:	bf08      	it	eq
 801cab8:	68f4      	ldreq	r4, [r6, #12]
 801caba:	e79d      	b.n	801c9f8 <_vfiprintf_r+0x20>
 801cabc:	4621      	mov	r1, r4
 801cabe:	4630      	mov	r0, r6
 801cac0:	f000 fbe2 	bl	801d288 <__swsetup_r>
 801cac4:	2800      	cmp	r0, #0
 801cac6:	d09d      	beq.n	801ca04 <_vfiprintf_r+0x2c>
 801cac8:	f04f 30ff 	mov.w	r0, #4294967295
 801cacc:	b01d      	add	sp, #116	; 0x74
 801cace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cad2:	46a8      	mov	r8, r5
 801cad4:	e7a2      	b.n	801ca1c <_vfiprintf_r+0x44>
 801cad6:	4a44      	ldr	r2, [pc, #272]	; (801cbe8 <_vfiprintf_r+0x210>)
 801cad8:	1a80      	subs	r0, r0, r2
 801cada:	fa0b f000 	lsl.w	r0, fp, r0
 801cade:	4318      	orrs	r0, r3
 801cae0:	9004      	str	r0, [sp, #16]
 801cae2:	4645      	mov	r5, r8
 801cae4:	e7be      	b.n	801ca64 <_vfiprintf_r+0x8c>
 801cae6:	9a03      	ldr	r2, [sp, #12]
 801cae8:	1d11      	adds	r1, r2, #4
 801caea:	6812      	ldr	r2, [r2, #0]
 801caec:	9103      	str	r1, [sp, #12]
 801caee:	2a00      	cmp	r2, #0
 801caf0:	db01      	blt.n	801caf6 <_vfiprintf_r+0x11e>
 801caf2:	9207      	str	r2, [sp, #28]
 801caf4:	e004      	b.n	801cb00 <_vfiprintf_r+0x128>
 801caf6:	4252      	negs	r2, r2
 801caf8:	f043 0302 	orr.w	r3, r3, #2
 801cafc:	9207      	str	r2, [sp, #28]
 801cafe:	9304      	str	r3, [sp, #16]
 801cb00:	f898 3000 	ldrb.w	r3, [r8]
 801cb04:	2b2e      	cmp	r3, #46	; 0x2e
 801cb06:	d10e      	bne.n	801cb26 <_vfiprintf_r+0x14e>
 801cb08:	f898 3001 	ldrb.w	r3, [r8, #1]
 801cb0c:	2b2a      	cmp	r3, #42	; 0x2a
 801cb0e:	d138      	bne.n	801cb82 <_vfiprintf_r+0x1aa>
 801cb10:	9b03      	ldr	r3, [sp, #12]
 801cb12:	1d1a      	adds	r2, r3, #4
 801cb14:	681b      	ldr	r3, [r3, #0]
 801cb16:	9203      	str	r2, [sp, #12]
 801cb18:	2b00      	cmp	r3, #0
 801cb1a:	bfb8      	it	lt
 801cb1c:	f04f 33ff 	movlt.w	r3, #4294967295
 801cb20:	f108 0802 	add.w	r8, r8, #2
 801cb24:	9305      	str	r3, [sp, #20]
 801cb26:	4d33      	ldr	r5, [pc, #204]	; (801cbf4 <_vfiprintf_r+0x21c>)
 801cb28:	f898 1000 	ldrb.w	r1, [r8]
 801cb2c:	2203      	movs	r2, #3
 801cb2e:	4628      	mov	r0, r5
 801cb30:	f7e3 fb8e 	bl	8000250 <memchr>
 801cb34:	b140      	cbz	r0, 801cb48 <_vfiprintf_r+0x170>
 801cb36:	2340      	movs	r3, #64	; 0x40
 801cb38:	1b40      	subs	r0, r0, r5
 801cb3a:	fa03 f000 	lsl.w	r0, r3, r0
 801cb3e:	9b04      	ldr	r3, [sp, #16]
 801cb40:	4303      	orrs	r3, r0
 801cb42:	f108 0801 	add.w	r8, r8, #1
 801cb46:	9304      	str	r3, [sp, #16]
 801cb48:	f898 1000 	ldrb.w	r1, [r8]
 801cb4c:	482a      	ldr	r0, [pc, #168]	; (801cbf8 <_vfiprintf_r+0x220>)
 801cb4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cb52:	2206      	movs	r2, #6
 801cb54:	f108 0701 	add.w	r7, r8, #1
 801cb58:	f7e3 fb7a 	bl	8000250 <memchr>
 801cb5c:	2800      	cmp	r0, #0
 801cb5e:	d037      	beq.n	801cbd0 <_vfiprintf_r+0x1f8>
 801cb60:	4b26      	ldr	r3, [pc, #152]	; (801cbfc <_vfiprintf_r+0x224>)
 801cb62:	bb1b      	cbnz	r3, 801cbac <_vfiprintf_r+0x1d4>
 801cb64:	9b03      	ldr	r3, [sp, #12]
 801cb66:	3307      	adds	r3, #7
 801cb68:	f023 0307 	bic.w	r3, r3, #7
 801cb6c:	3308      	adds	r3, #8
 801cb6e:	9303      	str	r3, [sp, #12]
 801cb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb72:	444b      	add	r3, r9
 801cb74:	9309      	str	r3, [sp, #36]	; 0x24
 801cb76:	e750      	b.n	801ca1a <_vfiprintf_r+0x42>
 801cb78:	fb05 3202 	mla	r2, r5, r2, r3
 801cb7c:	2001      	movs	r0, #1
 801cb7e:	4688      	mov	r8, r1
 801cb80:	e78a      	b.n	801ca98 <_vfiprintf_r+0xc0>
 801cb82:	2300      	movs	r3, #0
 801cb84:	f108 0801 	add.w	r8, r8, #1
 801cb88:	9305      	str	r3, [sp, #20]
 801cb8a:	4619      	mov	r1, r3
 801cb8c:	250a      	movs	r5, #10
 801cb8e:	4640      	mov	r0, r8
 801cb90:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb94:	3a30      	subs	r2, #48	; 0x30
 801cb96:	2a09      	cmp	r2, #9
 801cb98:	d903      	bls.n	801cba2 <_vfiprintf_r+0x1ca>
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d0c3      	beq.n	801cb26 <_vfiprintf_r+0x14e>
 801cb9e:	9105      	str	r1, [sp, #20]
 801cba0:	e7c1      	b.n	801cb26 <_vfiprintf_r+0x14e>
 801cba2:	fb05 2101 	mla	r1, r5, r1, r2
 801cba6:	2301      	movs	r3, #1
 801cba8:	4680      	mov	r8, r0
 801cbaa:	e7f0      	b.n	801cb8e <_vfiprintf_r+0x1b6>
 801cbac:	ab03      	add	r3, sp, #12
 801cbae:	9300      	str	r3, [sp, #0]
 801cbb0:	4622      	mov	r2, r4
 801cbb2:	4b13      	ldr	r3, [pc, #76]	; (801cc00 <_vfiprintf_r+0x228>)
 801cbb4:	a904      	add	r1, sp, #16
 801cbb6:	4630      	mov	r0, r6
 801cbb8:	f7fd fd96 	bl	801a6e8 <_printf_float>
 801cbbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 801cbc0:	4681      	mov	r9, r0
 801cbc2:	d1d5      	bne.n	801cb70 <_vfiprintf_r+0x198>
 801cbc4:	89a3      	ldrh	r3, [r4, #12]
 801cbc6:	065b      	lsls	r3, r3, #25
 801cbc8:	f53f af7e 	bmi.w	801cac8 <_vfiprintf_r+0xf0>
 801cbcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cbce:	e77d      	b.n	801cacc <_vfiprintf_r+0xf4>
 801cbd0:	ab03      	add	r3, sp, #12
 801cbd2:	9300      	str	r3, [sp, #0]
 801cbd4:	4622      	mov	r2, r4
 801cbd6:	4b0a      	ldr	r3, [pc, #40]	; (801cc00 <_vfiprintf_r+0x228>)
 801cbd8:	a904      	add	r1, sp, #16
 801cbda:	4630      	mov	r0, r6
 801cbdc:	f7fe f826 	bl	801ac2c <_printf_i>
 801cbe0:	e7ec      	b.n	801cbbc <_vfiprintf_r+0x1e4>
 801cbe2:	bf00      	nop
 801cbe4:	0802017c 	.word	0x0802017c
 801cbe8:	080202bc 	.word	0x080202bc
 801cbec:	0802019c 	.word	0x0802019c
 801cbf0:	0802015c 	.word	0x0802015c
 801cbf4:	080202c2 	.word	0x080202c2
 801cbf8:	080202c6 	.word	0x080202c6
 801cbfc:	0801a6e9 	.word	0x0801a6e9
 801cc00:	0801c9b3 	.word	0x0801c9b3

0801cc04 <_scanf_chars>:
 801cc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc08:	4615      	mov	r5, r2
 801cc0a:	688a      	ldr	r2, [r1, #8]
 801cc0c:	4680      	mov	r8, r0
 801cc0e:	460c      	mov	r4, r1
 801cc10:	b932      	cbnz	r2, 801cc20 <_scanf_chars+0x1c>
 801cc12:	698a      	ldr	r2, [r1, #24]
 801cc14:	2a00      	cmp	r2, #0
 801cc16:	bf14      	ite	ne
 801cc18:	f04f 32ff 	movne.w	r2, #4294967295
 801cc1c:	2201      	moveq	r2, #1
 801cc1e:	608a      	str	r2, [r1, #8]
 801cc20:	6822      	ldr	r2, [r4, #0]
 801cc22:	06d1      	lsls	r1, r2, #27
 801cc24:	bf5f      	itttt	pl
 801cc26:	681a      	ldrpl	r2, [r3, #0]
 801cc28:	1d11      	addpl	r1, r2, #4
 801cc2a:	6019      	strpl	r1, [r3, #0]
 801cc2c:	6817      	ldrpl	r7, [r2, #0]
 801cc2e:	2600      	movs	r6, #0
 801cc30:	69a3      	ldr	r3, [r4, #24]
 801cc32:	b1db      	cbz	r3, 801cc6c <_scanf_chars+0x68>
 801cc34:	2b01      	cmp	r3, #1
 801cc36:	d107      	bne.n	801cc48 <_scanf_chars+0x44>
 801cc38:	682b      	ldr	r3, [r5, #0]
 801cc3a:	6962      	ldr	r2, [r4, #20]
 801cc3c:	781b      	ldrb	r3, [r3, #0]
 801cc3e:	5cd3      	ldrb	r3, [r2, r3]
 801cc40:	b9a3      	cbnz	r3, 801cc6c <_scanf_chars+0x68>
 801cc42:	2e00      	cmp	r6, #0
 801cc44:	d132      	bne.n	801ccac <_scanf_chars+0xa8>
 801cc46:	e006      	b.n	801cc56 <_scanf_chars+0x52>
 801cc48:	2b02      	cmp	r3, #2
 801cc4a:	d007      	beq.n	801cc5c <_scanf_chars+0x58>
 801cc4c:	2e00      	cmp	r6, #0
 801cc4e:	d12d      	bne.n	801ccac <_scanf_chars+0xa8>
 801cc50:	69a3      	ldr	r3, [r4, #24]
 801cc52:	2b01      	cmp	r3, #1
 801cc54:	d12a      	bne.n	801ccac <_scanf_chars+0xa8>
 801cc56:	2001      	movs	r0, #1
 801cc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc5c:	f000 fc36 	bl	801d4cc <__locale_ctype_ptr>
 801cc60:	682b      	ldr	r3, [r5, #0]
 801cc62:	781b      	ldrb	r3, [r3, #0]
 801cc64:	4418      	add	r0, r3
 801cc66:	7843      	ldrb	r3, [r0, #1]
 801cc68:	071b      	lsls	r3, r3, #28
 801cc6a:	d4ef      	bmi.n	801cc4c <_scanf_chars+0x48>
 801cc6c:	6823      	ldr	r3, [r4, #0]
 801cc6e:	06da      	lsls	r2, r3, #27
 801cc70:	bf5e      	ittt	pl
 801cc72:	682b      	ldrpl	r3, [r5, #0]
 801cc74:	781b      	ldrbpl	r3, [r3, #0]
 801cc76:	703b      	strbpl	r3, [r7, #0]
 801cc78:	682a      	ldr	r2, [r5, #0]
 801cc7a:	686b      	ldr	r3, [r5, #4]
 801cc7c:	f102 0201 	add.w	r2, r2, #1
 801cc80:	602a      	str	r2, [r5, #0]
 801cc82:	68a2      	ldr	r2, [r4, #8]
 801cc84:	f103 33ff 	add.w	r3, r3, #4294967295
 801cc88:	f102 32ff 	add.w	r2, r2, #4294967295
 801cc8c:	606b      	str	r3, [r5, #4]
 801cc8e:	f106 0601 	add.w	r6, r6, #1
 801cc92:	bf58      	it	pl
 801cc94:	3701      	addpl	r7, #1
 801cc96:	60a2      	str	r2, [r4, #8]
 801cc98:	b142      	cbz	r2, 801ccac <_scanf_chars+0xa8>
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	dcc8      	bgt.n	801cc30 <_scanf_chars+0x2c>
 801cc9e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801cca2:	4629      	mov	r1, r5
 801cca4:	4640      	mov	r0, r8
 801cca6:	4798      	blx	r3
 801cca8:	2800      	cmp	r0, #0
 801ccaa:	d0c1      	beq.n	801cc30 <_scanf_chars+0x2c>
 801ccac:	6823      	ldr	r3, [r4, #0]
 801ccae:	f013 0310 	ands.w	r3, r3, #16
 801ccb2:	d105      	bne.n	801ccc0 <_scanf_chars+0xbc>
 801ccb4:	68e2      	ldr	r2, [r4, #12]
 801ccb6:	3201      	adds	r2, #1
 801ccb8:	60e2      	str	r2, [r4, #12]
 801ccba:	69a2      	ldr	r2, [r4, #24]
 801ccbc:	b102      	cbz	r2, 801ccc0 <_scanf_chars+0xbc>
 801ccbe:	703b      	strb	r3, [r7, #0]
 801ccc0:	6923      	ldr	r3, [r4, #16]
 801ccc2:	441e      	add	r6, r3
 801ccc4:	6126      	str	r6, [r4, #16]
 801ccc6:	2000      	movs	r0, #0
 801ccc8:	e7c6      	b.n	801cc58 <_scanf_chars+0x54>
	...

0801cccc <_scanf_i>:
 801cccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccd0:	469a      	mov	sl, r3
 801ccd2:	4b74      	ldr	r3, [pc, #464]	; (801cea4 <_scanf_i+0x1d8>)
 801ccd4:	460c      	mov	r4, r1
 801ccd6:	4683      	mov	fp, r0
 801ccd8:	4616      	mov	r6, r2
 801ccda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ccde:	b087      	sub	sp, #28
 801cce0:	ab03      	add	r3, sp, #12
 801cce2:	68a7      	ldr	r7, [r4, #8]
 801cce4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801cce8:	4b6f      	ldr	r3, [pc, #444]	; (801cea8 <_scanf_i+0x1dc>)
 801ccea:	69a1      	ldr	r1, [r4, #24]
 801ccec:	4a6f      	ldr	r2, [pc, #444]	; (801ceac <_scanf_i+0x1e0>)
 801ccee:	2903      	cmp	r1, #3
 801ccf0:	bf08      	it	eq
 801ccf2:	461a      	moveq	r2, r3
 801ccf4:	1e7b      	subs	r3, r7, #1
 801ccf6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801ccfa:	bf84      	itt	hi
 801ccfc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801cd00:	60a3      	strhi	r3, [r4, #8]
 801cd02:	6823      	ldr	r3, [r4, #0]
 801cd04:	9200      	str	r2, [sp, #0]
 801cd06:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801cd0a:	bf88      	it	hi
 801cd0c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801cd10:	f104 091c 	add.w	r9, r4, #28
 801cd14:	6023      	str	r3, [r4, #0]
 801cd16:	bf8c      	ite	hi
 801cd18:	197f      	addhi	r7, r7, r5
 801cd1a:	2700      	movls	r7, #0
 801cd1c:	464b      	mov	r3, r9
 801cd1e:	f04f 0800 	mov.w	r8, #0
 801cd22:	9301      	str	r3, [sp, #4]
 801cd24:	6831      	ldr	r1, [r6, #0]
 801cd26:	ab03      	add	r3, sp, #12
 801cd28:	2202      	movs	r2, #2
 801cd2a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801cd2e:	7809      	ldrb	r1, [r1, #0]
 801cd30:	f7e3 fa8e 	bl	8000250 <memchr>
 801cd34:	9b01      	ldr	r3, [sp, #4]
 801cd36:	b330      	cbz	r0, 801cd86 <_scanf_i+0xba>
 801cd38:	f1b8 0f01 	cmp.w	r8, #1
 801cd3c:	d15a      	bne.n	801cdf4 <_scanf_i+0x128>
 801cd3e:	6862      	ldr	r2, [r4, #4]
 801cd40:	b92a      	cbnz	r2, 801cd4e <_scanf_i+0x82>
 801cd42:	6822      	ldr	r2, [r4, #0]
 801cd44:	2108      	movs	r1, #8
 801cd46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801cd4a:	6061      	str	r1, [r4, #4]
 801cd4c:	6022      	str	r2, [r4, #0]
 801cd4e:	6822      	ldr	r2, [r4, #0]
 801cd50:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801cd54:	6022      	str	r2, [r4, #0]
 801cd56:	68a2      	ldr	r2, [r4, #8]
 801cd58:	1e51      	subs	r1, r2, #1
 801cd5a:	60a1      	str	r1, [r4, #8]
 801cd5c:	b19a      	cbz	r2, 801cd86 <_scanf_i+0xba>
 801cd5e:	6832      	ldr	r2, [r6, #0]
 801cd60:	1c51      	adds	r1, r2, #1
 801cd62:	6031      	str	r1, [r6, #0]
 801cd64:	7812      	ldrb	r2, [r2, #0]
 801cd66:	701a      	strb	r2, [r3, #0]
 801cd68:	1c5d      	adds	r5, r3, #1
 801cd6a:	6873      	ldr	r3, [r6, #4]
 801cd6c:	3b01      	subs	r3, #1
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	6073      	str	r3, [r6, #4]
 801cd72:	dc07      	bgt.n	801cd84 <_scanf_i+0xb8>
 801cd74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801cd78:	4631      	mov	r1, r6
 801cd7a:	4658      	mov	r0, fp
 801cd7c:	4798      	blx	r3
 801cd7e:	2800      	cmp	r0, #0
 801cd80:	f040 8086 	bne.w	801ce90 <_scanf_i+0x1c4>
 801cd84:	462b      	mov	r3, r5
 801cd86:	f108 0801 	add.w	r8, r8, #1
 801cd8a:	f1b8 0f03 	cmp.w	r8, #3
 801cd8e:	d1c8      	bne.n	801cd22 <_scanf_i+0x56>
 801cd90:	6862      	ldr	r2, [r4, #4]
 801cd92:	b90a      	cbnz	r2, 801cd98 <_scanf_i+0xcc>
 801cd94:	220a      	movs	r2, #10
 801cd96:	6062      	str	r2, [r4, #4]
 801cd98:	6862      	ldr	r2, [r4, #4]
 801cd9a:	4945      	ldr	r1, [pc, #276]	; (801ceb0 <_scanf_i+0x1e4>)
 801cd9c:	6960      	ldr	r0, [r4, #20]
 801cd9e:	9301      	str	r3, [sp, #4]
 801cda0:	1a89      	subs	r1, r1, r2
 801cda2:	f000 f899 	bl	801ced8 <__sccl>
 801cda6:	9b01      	ldr	r3, [sp, #4]
 801cda8:	f04f 0800 	mov.w	r8, #0
 801cdac:	461d      	mov	r5, r3
 801cdae:	68a3      	ldr	r3, [r4, #8]
 801cdb0:	6822      	ldr	r2, [r4, #0]
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	d03a      	beq.n	801ce2c <_scanf_i+0x160>
 801cdb6:	6831      	ldr	r1, [r6, #0]
 801cdb8:	6960      	ldr	r0, [r4, #20]
 801cdba:	f891 c000 	ldrb.w	ip, [r1]
 801cdbe:	f810 000c 	ldrb.w	r0, [r0, ip]
 801cdc2:	2800      	cmp	r0, #0
 801cdc4:	d032      	beq.n	801ce2c <_scanf_i+0x160>
 801cdc6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801cdca:	d121      	bne.n	801ce10 <_scanf_i+0x144>
 801cdcc:	0510      	lsls	r0, r2, #20
 801cdce:	d51f      	bpl.n	801ce10 <_scanf_i+0x144>
 801cdd0:	f108 0801 	add.w	r8, r8, #1
 801cdd4:	b117      	cbz	r7, 801cddc <_scanf_i+0x110>
 801cdd6:	3301      	adds	r3, #1
 801cdd8:	3f01      	subs	r7, #1
 801cdda:	60a3      	str	r3, [r4, #8]
 801cddc:	6873      	ldr	r3, [r6, #4]
 801cdde:	3b01      	subs	r3, #1
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	6073      	str	r3, [r6, #4]
 801cde4:	dd1b      	ble.n	801ce1e <_scanf_i+0x152>
 801cde6:	6833      	ldr	r3, [r6, #0]
 801cde8:	3301      	adds	r3, #1
 801cdea:	6033      	str	r3, [r6, #0]
 801cdec:	68a3      	ldr	r3, [r4, #8]
 801cdee:	3b01      	subs	r3, #1
 801cdf0:	60a3      	str	r3, [r4, #8]
 801cdf2:	e7dc      	b.n	801cdae <_scanf_i+0xe2>
 801cdf4:	f1b8 0f02 	cmp.w	r8, #2
 801cdf8:	d1ad      	bne.n	801cd56 <_scanf_i+0x8a>
 801cdfa:	6822      	ldr	r2, [r4, #0]
 801cdfc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801ce00:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801ce04:	d1bf      	bne.n	801cd86 <_scanf_i+0xba>
 801ce06:	2110      	movs	r1, #16
 801ce08:	6061      	str	r1, [r4, #4]
 801ce0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ce0e:	e7a1      	b.n	801cd54 <_scanf_i+0x88>
 801ce10:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801ce14:	6022      	str	r2, [r4, #0]
 801ce16:	780b      	ldrb	r3, [r1, #0]
 801ce18:	702b      	strb	r3, [r5, #0]
 801ce1a:	3501      	adds	r5, #1
 801ce1c:	e7de      	b.n	801cddc <_scanf_i+0x110>
 801ce1e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ce22:	4631      	mov	r1, r6
 801ce24:	4658      	mov	r0, fp
 801ce26:	4798      	blx	r3
 801ce28:	2800      	cmp	r0, #0
 801ce2a:	d0df      	beq.n	801cdec <_scanf_i+0x120>
 801ce2c:	6823      	ldr	r3, [r4, #0]
 801ce2e:	05d9      	lsls	r1, r3, #23
 801ce30:	d50c      	bpl.n	801ce4c <_scanf_i+0x180>
 801ce32:	454d      	cmp	r5, r9
 801ce34:	d908      	bls.n	801ce48 <_scanf_i+0x17c>
 801ce36:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801ce3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ce3e:	4632      	mov	r2, r6
 801ce40:	4658      	mov	r0, fp
 801ce42:	4798      	blx	r3
 801ce44:	1e6f      	subs	r7, r5, #1
 801ce46:	463d      	mov	r5, r7
 801ce48:	454d      	cmp	r5, r9
 801ce4a:	d029      	beq.n	801cea0 <_scanf_i+0x1d4>
 801ce4c:	6822      	ldr	r2, [r4, #0]
 801ce4e:	f012 0210 	ands.w	r2, r2, #16
 801ce52:	d113      	bne.n	801ce7c <_scanf_i+0x1b0>
 801ce54:	702a      	strb	r2, [r5, #0]
 801ce56:	6863      	ldr	r3, [r4, #4]
 801ce58:	9e00      	ldr	r6, [sp, #0]
 801ce5a:	4649      	mov	r1, r9
 801ce5c:	4658      	mov	r0, fp
 801ce5e:	47b0      	blx	r6
 801ce60:	f8da 3000 	ldr.w	r3, [sl]
 801ce64:	6821      	ldr	r1, [r4, #0]
 801ce66:	1d1a      	adds	r2, r3, #4
 801ce68:	f8ca 2000 	str.w	r2, [sl]
 801ce6c:	f011 0f20 	tst.w	r1, #32
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	d010      	beq.n	801ce96 <_scanf_i+0x1ca>
 801ce74:	6018      	str	r0, [r3, #0]
 801ce76:	68e3      	ldr	r3, [r4, #12]
 801ce78:	3301      	adds	r3, #1
 801ce7a:	60e3      	str	r3, [r4, #12]
 801ce7c:	eba5 0509 	sub.w	r5, r5, r9
 801ce80:	44a8      	add	r8, r5
 801ce82:	6925      	ldr	r5, [r4, #16]
 801ce84:	4445      	add	r5, r8
 801ce86:	6125      	str	r5, [r4, #16]
 801ce88:	2000      	movs	r0, #0
 801ce8a:	b007      	add	sp, #28
 801ce8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce90:	f04f 0800 	mov.w	r8, #0
 801ce94:	e7ca      	b.n	801ce2c <_scanf_i+0x160>
 801ce96:	07ca      	lsls	r2, r1, #31
 801ce98:	bf4c      	ite	mi
 801ce9a:	8018      	strhmi	r0, [r3, #0]
 801ce9c:	6018      	strpl	r0, [r3, #0]
 801ce9e:	e7ea      	b.n	801ce76 <_scanf_i+0x1aa>
 801cea0:	2001      	movs	r0, #1
 801cea2:	e7f2      	b.n	801ce8a <_scanf_i+0x1be>
 801cea4:	0801ffac 	.word	0x0801ffac
 801cea8:	0801d035 	.word	0x0801d035
 801ceac:	0801d14d 	.word	0x0801d14d
 801ceb0:	080202dd 	.word	0x080202dd

0801ceb4 <_read_r>:
 801ceb4:	b538      	push	{r3, r4, r5, lr}
 801ceb6:	4c07      	ldr	r4, [pc, #28]	; (801ced4 <_read_r+0x20>)
 801ceb8:	4605      	mov	r5, r0
 801ceba:	4608      	mov	r0, r1
 801cebc:	4611      	mov	r1, r2
 801cebe:	2200      	movs	r2, #0
 801cec0:	6022      	str	r2, [r4, #0]
 801cec2:	461a      	mov	r2, r3
 801cec4:	f7e5 f976 	bl	80021b4 <_read>
 801cec8:	1c43      	adds	r3, r0, #1
 801ceca:	d102      	bne.n	801ced2 <_read_r+0x1e>
 801cecc:	6823      	ldr	r3, [r4, #0]
 801cece:	b103      	cbz	r3, 801ced2 <_read_r+0x1e>
 801ced0:	602b      	str	r3, [r5, #0]
 801ced2:	bd38      	pop	{r3, r4, r5, pc}
 801ced4:	20016440 	.word	0x20016440

0801ced8 <__sccl>:
 801ced8:	b570      	push	{r4, r5, r6, lr}
 801ceda:	780b      	ldrb	r3, [r1, #0]
 801cedc:	2b5e      	cmp	r3, #94	; 0x5e
 801cede:	bf13      	iteet	ne
 801cee0:	1c4a      	addne	r2, r1, #1
 801cee2:	1c8a      	addeq	r2, r1, #2
 801cee4:	784b      	ldrbeq	r3, [r1, #1]
 801cee6:	2100      	movne	r1, #0
 801cee8:	bf08      	it	eq
 801ceea:	2101      	moveq	r1, #1
 801ceec:	1e44      	subs	r4, r0, #1
 801ceee:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801cef2:	f804 1f01 	strb.w	r1, [r4, #1]!
 801cef6:	42ac      	cmp	r4, r5
 801cef8:	d1fb      	bne.n	801cef2 <__sccl+0x1a>
 801cefa:	b913      	cbnz	r3, 801cf02 <__sccl+0x2a>
 801cefc:	3a01      	subs	r2, #1
 801cefe:	4610      	mov	r0, r2
 801cf00:	bd70      	pop	{r4, r5, r6, pc}
 801cf02:	f081 0401 	eor.w	r4, r1, #1
 801cf06:	54c4      	strb	r4, [r0, r3]
 801cf08:	1c51      	adds	r1, r2, #1
 801cf0a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801cf0e:	2d2d      	cmp	r5, #45	; 0x2d
 801cf10:	f101 36ff 	add.w	r6, r1, #4294967295
 801cf14:	460a      	mov	r2, r1
 801cf16:	d006      	beq.n	801cf26 <__sccl+0x4e>
 801cf18:	2d5d      	cmp	r5, #93	; 0x5d
 801cf1a:	d0f0      	beq.n	801cefe <__sccl+0x26>
 801cf1c:	b90d      	cbnz	r5, 801cf22 <__sccl+0x4a>
 801cf1e:	4632      	mov	r2, r6
 801cf20:	e7ed      	b.n	801cefe <__sccl+0x26>
 801cf22:	462b      	mov	r3, r5
 801cf24:	e7ef      	b.n	801cf06 <__sccl+0x2e>
 801cf26:	780e      	ldrb	r6, [r1, #0]
 801cf28:	2e5d      	cmp	r6, #93	; 0x5d
 801cf2a:	d0fa      	beq.n	801cf22 <__sccl+0x4a>
 801cf2c:	42b3      	cmp	r3, r6
 801cf2e:	dcf8      	bgt.n	801cf22 <__sccl+0x4a>
 801cf30:	3301      	adds	r3, #1
 801cf32:	429e      	cmp	r6, r3
 801cf34:	54c4      	strb	r4, [r0, r3]
 801cf36:	dcfb      	bgt.n	801cf30 <__sccl+0x58>
 801cf38:	3102      	adds	r1, #2
 801cf3a:	e7e6      	b.n	801cf0a <__sccl+0x32>

0801cf3c <_strtol_l.isra.0>:
 801cf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf40:	4680      	mov	r8, r0
 801cf42:	4689      	mov	r9, r1
 801cf44:	4692      	mov	sl, r2
 801cf46:	461e      	mov	r6, r3
 801cf48:	460f      	mov	r7, r1
 801cf4a:	463d      	mov	r5, r7
 801cf4c:	9808      	ldr	r0, [sp, #32]
 801cf4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cf52:	f000 fab7 	bl	801d4c4 <__locale_ctype_ptr_l>
 801cf56:	4420      	add	r0, r4
 801cf58:	7843      	ldrb	r3, [r0, #1]
 801cf5a:	f013 0308 	ands.w	r3, r3, #8
 801cf5e:	d132      	bne.n	801cfc6 <_strtol_l.isra.0+0x8a>
 801cf60:	2c2d      	cmp	r4, #45	; 0x2d
 801cf62:	d132      	bne.n	801cfca <_strtol_l.isra.0+0x8e>
 801cf64:	787c      	ldrb	r4, [r7, #1]
 801cf66:	1cbd      	adds	r5, r7, #2
 801cf68:	2201      	movs	r2, #1
 801cf6a:	2e00      	cmp	r6, #0
 801cf6c:	d05d      	beq.n	801d02a <_strtol_l.isra.0+0xee>
 801cf6e:	2e10      	cmp	r6, #16
 801cf70:	d109      	bne.n	801cf86 <_strtol_l.isra.0+0x4a>
 801cf72:	2c30      	cmp	r4, #48	; 0x30
 801cf74:	d107      	bne.n	801cf86 <_strtol_l.isra.0+0x4a>
 801cf76:	782b      	ldrb	r3, [r5, #0]
 801cf78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801cf7c:	2b58      	cmp	r3, #88	; 0x58
 801cf7e:	d14f      	bne.n	801d020 <_strtol_l.isra.0+0xe4>
 801cf80:	786c      	ldrb	r4, [r5, #1]
 801cf82:	2610      	movs	r6, #16
 801cf84:	3502      	adds	r5, #2
 801cf86:	2a00      	cmp	r2, #0
 801cf88:	bf14      	ite	ne
 801cf8a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801cf8e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801cf92:	2700      	movs	r7, #0
 801cf94:	fbb1 fcf6 	udiv	ip, r1, r6
 801cf98:	4638      	mov	r0, r7
 801cf9a:	fb06 1e1c 	mls	lr, r6, ip, r1
 801cf9e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801cfa2:	2b09      	cmp	r3, #9
 801cfa4:	d817      	bhi.n	801cfd6 <_strtol_l.isra.0+0x9a>
 801cfa6:	461c      	mov	r4, r3
 801cfa8:	42a6      	cmp	r6, r4
 801cfaa:	dd23      	ble.n	801cff4 <_strtol_l.isra.0+0xb8>
 801cfac:	1c7b      	adds	r3, r7, #1
 801cfae:	d007      	beq.n	801cfc0 <_strtol_l.isra.0+0x84>
 801cfb0:	4584      	cmp	ip, r0
 801cfb2:	d31c      	bcc.n	801cfee <_strtol_l.isra.0+0xb2>
 801cfb4:	d101      	bne.n	801cfba <_strtol_l.isra.0+0x7e>
 801cfb6:	45a6      	cmp	lr, r4
 801cfb8:	db19      	blt.n	801cfee <_strtol_l.isra.0+0xb2>
 801cfba:	fb00 4006 	mla	r0, r0, r6, r4
 801cfbe:	2701      	movs	r7, #1
 801cfc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cfc4:	e7eb      	b.n	801cf9e <_strtol_l.isra.0+0x62>
 801cfc6:	462f      	mov	r7, r5
 801cfc8:	e7bf      	b.n	801cf4a <_strtol_l.isra.0+0xe>
 801cfca:	2c2b      	cmp	r4, #43	; 0x2b
 801cfcc:	bf04      	itt	eq
 801cfce:	1cbd      	addeq	r5, r7, #2
 801cfd0:	787c      	ldrbeq	r4, [r7, #1]
 801cfd2:	461a      	mov	r2, r3
 801cfd4:	e7c9      	b.n	801cf6a <_strtol_l.isra.0+0x2e>
 801cfd6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801cfda:	2b19      	cmp	r3, #25
 801cfdc:	d801      	bhi.n	801cfe2 <_strtol_l.isra.0+0xa6>
 801cfde:	3c37      	subs	r4, #55	; 0x37
 801cfe0:	e7e2      	b.n	801cfa8 <_strtol_l.isra.0+0x6c>
 801cfe2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801cfe6:	2b19      	cmp	r3, #25
 801cfe8:	d804      	bhi.n	801cff4 <_strtol_l.isra.0+0xb8>
 801cfea:	3c57      	subs	r4, #87	; 0x57
 801cfec:	e7dc      	b.n	801cfa8 <_strtol_l.isra.0+0x6c>
 801cfee:	f04f 37ff 	mov.w	r7, #4294967295
 801cff2:	e7e5      	b.n	801cfc0 <_strtol_l.isra.0+0x84>
 801cff4:	1c7b      	adds	r3, r7, #1
 801cff6:	d108      	bne.n	801d00a <_strtol_l.isra.0+0xce>
 801cff8:	2322      	movs	r3, #34	; 0x22
 801cffa:	f8c8 3000 	str.w	r3, [r8]
 801cffe:	4608      	mov	r0, r1
 801d000:	f1ba 0f00 	cmp.w	sl, #0
 801d004:	d107      	bne.n	801d016 <_strtol_l.isra.0+0xda>
 801d006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d00a:	b102      	cbz	r2, 801d00e <_strtol_l.isra.0+0xd2>
 801d00c:	4240      	negs	r0, r0
 801d00e:	f1ba 0f00 	cmp.w	sl, #0
 801d012:	d0f8      	beq.n	801d006 <_strtol_l.isra.0+0xca>
 801d014:	b10f      	cbz	r7, 801d01a <_strtol_l.isra.0+0xde>
 801d016:	f105 39ff 	add.w	r9, r5, #4294967295
 801d01a:	f8ca 9000 	str.w	r9, [sl]
 801d01e:	e7f2      	b.n	801d006 <_strtol_l.isra.0+0xca>
 801d020:	2430      	movs	r4, #48	; 0x30
 801d022:	2e00      	cmp	r6, #0
 801d024:	d1af      	bne.n	801cf86 <_strtol_l.isra.0+0x4a>
 801d026:	2608      	movs	r6, #8
 801d028:	e7ad      	b.n	801cf86 <_strtol_l.isra.0+0x4a>
 801d02a:	2c30      	cmp	r4, #48	; 0x30
 801d02c:	d0a3      	beq.n	801cf76 <_strtol_l.isra.0+0x3a>
 801d02e:	260a      	movs	r6, #10
 801d030:	e7a9      	b.n	801cf86 <_strtol_l.isra.0+0x4a>
	...

0801d034 <_strtol_r>:
 801d034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d036:	4c06      	ldr	r4, [pc, #24]	; (801d050 <_strtol_r+0x1c>)
 801d038:	4d06      	ldr	r5, [pc, #24]	; (801d054 <_strtol_r+0x20>)
 801d03a:	6824      	ldr	r4, [r4, #0]
 801d03c:	6a24      	ldr	r4, [r4, #32]
 801d03e:	2c00      	cmp	r4, #0
 801d040:	bf08      	it	eq
 801d042:	462c      	moveq	r4, r5
 801d044:	9400      	str	r4, [sp, #0]
 801d046:	f7ff ff79 	bl	801cf3c <_strtol_l.isra.0>
 801d04a:	b003      	add	sp, #12
 801d04c:	bd30      	pop	{r4, r5, pc}
 801d04e:	bf00      	nop
 801d050:	20000028 	.word	0x20000028
 801d054:	2000008c 	.word	0x2000008c

0801d058 <_strtoul_l.isra.0>:
 801d058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d05c:	4680      	mov	r8, r0
 801d05e:	4689      	mov	r9, r1
 801d060:	4692      	mov	sl, r2
 801d062:	461e      	mov	r6, r3
 801d064:	460f      	mov	r7, r1
 801d066:	463d      	mov	r5, r7
 801d068:	9808      	ldr	r0, [sp, #32]
 801d06a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d06e:	f000 fa29 	bl	801d4c4 <__locale_ctype_ptr_l>
 801d072:	4420      	add	r0, r4
 801d074:	7843      	ldrb	r3, [r0, #1]
 801d076:	f013 0308 	ands.w	r3, r3, #8
 801d07a:	d130      	bne.n	801d0de <_strtoul_l.isra.0+0x86>
 801d07c:	2c2d      	cmp	r4, #45	; 0x2d
 801d07e:	d130      	bne.n	801d0e2 <_strtoul_l.isra.0+0x8a>
 801d080:	787c      	ldrb	r4, [r7, #1]
 801d082:	1cbd      	adds	r5, r7, #2
 801d084:	2101      	movs	r1, #1
 801d086:	2e00      	cmp	r6, #0
 801d088:	d05c      	beq.n	801d144 <_strtoul_l.isra.0+0xec>
 801d08a:	2e10      	cmp	r6, #16
 801d08c:	d109      	bne.n	801d0a2 <_strtoul_l.isra.0+0x4a>
 801d08e:	2c30      	cmp	r4, #48	; 0x30
 801d090:	d107      	bne.n	801d0a2 <_strtoul_l.isra.0+0x4a>
 801d092:	782b      	ldrb	r3, [r5, #0]
 801d094:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d098:	2b58      	cmp	r3, #88	; 0x58
 801d09a:	d14e      	bne.n	801d13a <_strtoul_l.isra.0+0xe2>
 801d09c:	786c      	ldrb	r4, [r5, #1]
 801d09e:	2610      	movs	r6, #16
 801d0a0:	3502      	adds	r5, #2
 801d0a2:	f04f 32ff 	mov.w	r2, #4294967295
 801d0a6:	2300      	movs	r3, #0
 801d0a8:	fbb2 f2f6 	udiv	r2, r2, r6
 801d0ac:	fb06 fc02 	mul.w	ip, r6, r2
 801d0b0:	ea6f 0c0c 	mvn.w	ip, ip
 801d0b4:	4618      	mov	r0, r3
 801d0b6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801d0ba:	2f09      	cmp	r7, #9
 801d0bc:	d817      	bhi.n	801d0ee <_strtoul_l.isra.0+0x96>
 801d0be:	463c      	mov	r4, r7
 801d0c0:	42a6      	cmp	r6, r4
 801d0c2:	dd23      	ble.n	801d10c <_strtoul_l.isra.0+0xb4>
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	db1e      	blt.n	801d106 <_strtoul_l.isra.0+0xae>
 801d0c8:	4282      	cmp	r2, r0
 801d0ca:	d31c      	bcc.n	801d106 <_strtoul_l.isra.0+0xae>
 801d0cc:	d101      	bne.n	801d0d2 <_strtoul_l.isra.0+0x7a>
 801d0ce:	45a4      	cmp	ip, r4
 801d0d0:	db19      	blt.n	801d106 <_strtoul_l.isra.0+0xae>
 801d0d2:	fb00 4006 	mla	r0, r0, r6, r4
 801d0d6:	2301      	movs	r3, #1
 801d0d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d0dc:	e7eb      	b.n	801d0b6 <_strtoul_l.isra.0+0x5e>
 801d0de:	462f      	mov	r7, r5
 801d0e0:	e7c1      	b.n	801d066 <_strtoul_l.isra.0+0xe>
 801d0e2:	2c2b      	cmp	r4, #43	; 0x2b
 801d0e4:	bf04      	itt	eq
 801d0e6:	1cbd      	addeq	r5, r7, #2
 801d0e8:	787c      	ldrbeq	r4, [r7, #1]
 801d0ea:	4619      	mov	r1, r3
 801d0ec:	e7cb      	b.n	801d086 <_strtoul_l.isra.0+0x2e>
 801d0ee:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801d0f2:	2f19      	cmp	r7, #25
 801d0f4:	d801      	bhi.n	801d0fa <_strtoul_l.isra.0+0xa2>
 801d0f6:	3c37      	subs	r4, #55	; 0x37
 801d0f8:	e7e2      	b.n	801d0c0 <_strtoul_l.isra.0+0x68>
 801d0fa:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801d0fe:	2f19      	cmp	r7, #25
 801d100:	d804      	bhi.n	801d10c <_strtoul_l.isra.0+0xb4>
 801d102:	3c57      	subs	r4, #87	; 0x57
 801d104:	e7dc      	b.n	801d0c0 <_strtoul_l.isra.0+0x68>
 801d106:	f04f 33ff 	mov.w	r3, #4294967295
 801d10a:	e7e5      	b.n	801d0d8 <_strtoul_l.isra.0+0x80>
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	da09      	bge.n	801d124 <_strtoul_l.isra.0+0xcc>
 801d110:	2322      	movs	r3, #34	; 0x22
 801d112:	f8c8 3000 	str.w	r3, [r8]
 801d116:	f04f 30ff 	mov.w	r0, #4294967295
 801d11a:	f1ba 0f00 	cmp.w	sl, #0
 801d11e:	d107      	bne.n	801d130 <_strtoul_l.isra.0+0xd8>
 801d120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d124:	b101      	cbz	r1, 801d128 <_strtoul_l.isra.0+0xd0>
 801d126:	4240      	negs	r0, r0
 801d128:	f1ba 0f00 	cmp.w	sl, #0
 801d12c:	d0f8      	beq.n	801d120 <_strtoul_l.isra.0+0xc8>
 801d12e:	b10b      	cbz	r3, 801d134 <_strtoul_l.isra.0+0xdc>
 801d130:	f105 39ff 	add.w	r9, r5, #4294967295
 801d134:	f8ca 9000 	str.w	r9, [sl]
 801d138:	e7f2      	b.n	801d120 <_strtoul_l.isra.0+0xc8>
 801d13a:	2430      	movs	r4, #48	; 0x30
 801d13c:	2e00      	cmp	r6, #0
 801d13e:	d1b0      	bne.n	801d0a2 <_strtoul_l.isra.0+0x4a>
 801d140:	2608      	movs	r6, #8
 801d142:	e7ae      	b.n	801d0a2 <_strtoul_l.isra.0+0x4a>
 801d144:	2c30      	cmp	r4, #48	; 0x30
 801d146:	d0a4      	beq.n	801d092 <_strtoul_l.isra.0+0x3a>
 801d148:	260a      	movs	r6, #10
 801d14a:	e7aa      	b.n	801d0a2 <_strtoul_l.isra.0+0x4a>

0801d14c <_strtoul_r>:
 801d14c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d14e:	4c06      	ldr	r4, [pc, #24]	; (801d168 <_strtoul_r+0x1c>)
 801d150:	4d06      	ldr	r5, [pc, #24]	; (801d16c <_strtoul_r+0x20>)
 801d152:	6824      	ldr	r4, [r4, #0]
 801d154:	6a24      	ldr	r4, [r4, #32]
 801d156:	2c00      	cmp	r4, #0
 801d158:	bf08      	it	eq
 801d15a:	462c      	moveq	r4, r5
 801d15c:	9400      	str	r4, [sp, #0]
 801d15e:	f7ff ff7b 	bl	801d058 <_strtoul_l.isra.0>
 801d162:	b003      	add	sp, #12
 801d164:	bd30      	pop	{r4, r5, pc}
 801d166:	bf00      	nop
 801d168:	20000028 	.word	0x20000028
 801d16c:	2000008c 	.word	0x2000008c

0801d170 <__submore>:
 801d170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d174:	460c      	mov	r4, r1
 801d176:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801d178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d17c:	4299      	cmp	r1, r3
 801d17e:	d11d      	bne.n	801d1bc <__submore+0x4c>
 801d180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d184:	f7fd f9ce 	bl	801a524 <_malloc_r>
 801d188:	b918      	cbnz	r0, 801d192 <__submore+0x22>
 801d18a:	f04f 30ff 	mov.w	r0, #4294967295
 801d18e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d196:	63a3      	str	r3, [r4, #56]	; 0x38
 801d198:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801d19c:	6360      	str	r0, [r4, #52]	; 0x34
 801d19e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801d1a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801d1a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801d1aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801d1ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801d1b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801d1b6:	6020      	str	r0, [r4, #0]
 801d1b8:	2000      	movs	r0, #0
 801d1ba:	e7e8      	b.n	801d18e <__submore+0x1e>
 801d1bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801d1be:	0077      	lsls	r7, r6, #1
 801d1c0:	463a      	mov	r2, r7
 801d1c2:	f000 fa20 	bl	801d606 <_realloc_r>
 801d1c6:	4605      	mov	r5, r0
 801d1c8:	2800      	cmp	r0, #0
 801d1ca:	d0de      	beq.n	801d18a <__submore+0x1a>
 801d1cc:	eb00 0806 	add.w	r8, r0, r6
 801d1d0:	4601      	mov	r1, r0
 801d1d2:	4632      	mov	r2, r6
 801d1d4:	4640      	mov	r0, r8
 801d1d6:	f7fd f944 	bl	801a462 <memcpy>
 801d1da:	f8c4 8000 	str.w	r8, [r4]
 801d1de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801d1e2:	e7e9      	b.n	801d1b8 <__submore+0x48>

0801d1e4 <__swbuf_r>:
 801d1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1e6:	460e      	mov	r6, r1
 801d1e8:	4614      	mov	r4, r2
 801d1ea:	4605      	mov	r5, r0
 801d1ec:	b118      	cbz	r0, 801d1f6 <__swbuf_r+0x12>
 801d1ee:	6983      	ldr	r3, [r0, #24]
 801d1f0:	b90b      	cbnz	r3, 801d1f6 <__swbuf_r+0x12>
 801d1f2:	f7fe fd35 	bl	801bc60 <__sinit>
 801d1f6:	4b21      	ldr	r3, [pc, #132]	; (801d27c <__swbuf_r+0x98>)
 801d1f8:	429c      	cmp	r4, r3
 801d1fa:	d12a      	bne.n	801d252 <__swbuf_r+0x6e>
 801d1fc:	686c      	ldr	r4, [r5, #4]
 801d1fe:	69a3      	ldr	r3, [r4, #24]
 801d200:	60a3      	str	r3, [r4, #8]
 801d202:	89a3      	ldrh	r3, [r4, #12]
 801d204:	071a      	lsls	r2, r3, #28
 801d206:	d52e      	bpl.n	801d266 <__swbuf_r+0x82>
 801d208:	6923      	ldr	r3, [r4, #16]
 801d20a:	b363      	cbz	r3, 801d266 <__swbuf_r+0x82>
 801d20c:	6923      	ldr	r3, [r4, #16]
 801d20e:	6820      	ldr	r0, [r4, #0]
 801d210:	1ac0      	subs	r0, r0, r3
 801d212:	6963      	ldr	r3, [r4, #20]
 801d214:	b2f6      	uxtb	r6, r6
 801d216:	4283      	cmp	r3, r0
 801d218:	4637      	mov	r7, r6
 801d21a:	dc04      	bgt.n	801d226 <__swbuf_r+0x42>
 801d21c:	4621      	mov	r1, r4
 801d21e:	4628      	mov	r0, r5
 801d220:	f000 f926 	bl	801d470 <_fflush_r>
 801d224:	bb28      	cbnz	r0, 801d272 <__swbuf_r+0x8e>
 801d226:	68a3      	ldr	r3, [r4, #8]
 801d228:	3b01      	subs	r3, #1
 801d22a:	60a3      	str	r3, [r4, #8]
 801d22c:	6823      	ldr	r3, [r4, #0]
 801d22e:	1c5a      	adds	r2, r3, #1
 801d230:	6022      	str	r2, [r4, #0]
 801d232:	701e      	strb	r6, [r3, #0]
 801d234:	6963      	ldr	r3, [r4, #20]
 801d236:	3001      	adds	r0, #1
 801d238:	4283      	cmp	r3, r0
 801d23a:	d004      	beq.n	801d246 <__swbuf_r+0x62>
 801d23c:	89a3      	ldrh	r3, [r4, #12]
 801d23e:	07db      	lsls	r3, r3, #31
 801d240:	d519      	bpl.n	801d276 <__swbuf_r+0x92>
 801d242:	2e0a      	cmp	r6, #10
 801d244:	d117      	bne.n	801d276 <__swbuf_r+0x92>
 801d246:	4621      	mov	r1, r4
 801d248:	4628      	mov	r0, r5
 801d24a:	f000 f911 	bl	801d470 <_fflush_r>
 801d24e:	b190      	cbz	r0, 801d276 <__swbuf_r+0x92>
 801d250:	e00f      	b.n	801d272 <__swbuf_r+0x8e>
 801d252:	4b0b      	ldr	r3, [pc, #44]	; (801d280 <__swbuf_r+0x9c>)
 801d254:	429c      	cmp	r4, r3
 801d256:	d101      	bne.n	801d25c <__swbuf_r+0x78>
 801d258:	68ac      	ldr	r4, [r5, #8]
 801d25a:	e7d0      	b.n	801d1fe <__swbuf_r+0x1a>
 801d25c:	4b09      	ldr	r3, [pc, #36]	; (801d284 <__swbuf_r+0xa0>)
 801d25e:	429c      	cmp	r4, r3
 801d260:	bf08      	it	eq
 801d262:	68ec      	ldreq	r4, [r5, #12]
 801d264:	e7cb      	b.n	801d1fe <__swbuf_r+0x1a>
 801d266:	4621      	mov	r1, r4
 801d268:	4628      	mov	r0, r5
 801d26a:	f000 f80d 	bl	801d288 <__swsetup_r>
 801d26e:	2800      	cmp	r0, #0
 801d270:	d0cc      	beq.n	801d20c <__swbuf_r+0x28>
 801d272:	f04f 37ff 	mov.w	r7, #4294967295
 801d276:	4638      	mov	r0, r7
 801d278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d27a:	bf00      	nop
 801d27c:	0802017c 	.word	0x0802017c
 801d280:	0802019c 	.word	0x0802019c
 801d284:	0802015c 	.word	0x0802015c

0801d288 <__swsetup_r>:
 801d288:	4b32      	ldr	r3, [pc, #200]	; (801d354 <__swsetup_r+0xcc>)
 801d28a:	b570      	push	{r4, r5, r6, lr}
 801d28c:	681d      	ldr	r5, [r3, #0]
 801d28e:	4606      	mov	r6, r0
 801d290:	460c      	mov	r4, r1
 801d292:	b125      	cbz	r5, 801d29e <__swsetup_r+0x16>
 801d294:	69ab      	ldr	r3, [r5, #24]
 801d296:	b913      	cbnz	r3, 801d29e <__swsetup_r+0x16>
 801d298:	4628      	mov	r0, r5
 801d29a:	f7fe fce1 	bl	801bc60 <__sinit>
 801d29e:	4b2e      	ldr	r3, [pc, #184]	; (801d358 <__swsetup_r+0xd0>)
 801d2a0:	429c      	cmp	r4, r3
 801d2a2:	d10f      	bne.n	801d2c4 <__swsetup_r+0x3c>
 801d2a4:	686c      	ldr	r4, [r5, #4]
 801d2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d2aa:	b29a      	uxth	r2, r3
 801d2ac:	0715      	lsls	r5, r2, #28
 801d2ae:	d42c      	bmi.n	801d30a <__swsetup_r+0x82>
 801d2b0:	06d0      	lsls	r0, r2, #27
 801d2b2:	d411      	bmi.n	801d2d8 <__swsetup_r+0x50>
 801d2b4:	2209      	movs	r2, #9
 801d2b6:	6032      	str	r2, [r6, #0]
 801d2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d2bc:	81a3      	strh	r3, [r4, #12]
 801d2be:	f04f 30ff 	mov.w	r0, #4294967295
 801d2c2:	e03e      	b.n	801d342 <__swsetup_r+0xba>
 801d2c4:	4b25      	ldr	r3, [pc, #148]	; (801d35c <__swsetup_r+0xd4>)
 801d2c6:	429c      	cmp	r4, r3
 801d2c8:	d101      	bne.n	801d2ce <__swsetup_r+0x46>
 801d2ca:	68ac      	ldr	r4, [r5, #8]
 801d2cc:	e7eb      	b.n	801d2a6 <__swsetup_r+0x1e>
 801d2ce:	4b24      	ldr	r3, [pc, #144]	; (801d360 <__swsetup_r+0xd8>)
 801d2d0:	429c      	cmp	r4, r3
 801d2d2:	bf08      	it	eq
 801d2d4:	68ec      	ldreq	r4, [r5, #12]
 801d2d6:	e7e6      	b.n	801d2a6 <__swsetup_r+0x1e>
 801d2d8:	0751      	lsls	r1, r2, #29
 801d2da:	d512      	bpl.n	801d302 <__swsetup_r+0x7a>
 801d2dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d2de:	b141      	cbz	r1, 801d2f2 <__swsetup_r+0x6a>
 801d2e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d2e4:	4299      	cmp	r1, r3
 801d2e6:	d002      	beq.n	801d2ee <__swsetup_r+0x66>
 801d2e8:	4630      	mov	r0, r6
 801d2ea:	f7fd f8cd 	bl	801a488 <_free_r>
 801d2ee:	2300      	movs	r3, #0
 801d2f0:	6363      	str	r3, [r4, #52]	; 0x34
 801d2f2:	89a3      	ldrh	r3, [r4, #12]
 801d2f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d2f8:	81a3      	strh	r3, [r4, #12]
 801d2fa:	2300      	movs	r3, #0
 801d2fc:	6063      	str	r3, [r4, #4]
 801d2fe:	6923      	ldr	r3, [r4, #16]
 801d300:	6023      	str	r3, [r4, #0]
 801d302:	89a3      	ldrh	r3, [r4, #12]
 801d304:	f043 0308 	orr.w	r3, r3, #8
 801d308:	81a3      	strh	r3, [r4, #12]
 801d30a:	6923      	ldr	r3, [r4, #16]
 801d30c:	b94b      	cbnz	r3, 801d322 <__swsetup_r+0x9a>
 801d30e:	89a3      	ldrh	r3, [r4, #12]
 801d310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d318:	d003      	beq.n	801d322 <__swsetup_r+0x9a>
 801d31a:	4621      	mov	r1, r4
 801d31c:	4630      	mov	r0, r6
 801d31e:	f000 f907 	bl	801d530 <__smakebuf_r>
 801d322:	89a2      	ldrh	r2, [r4, #12]
 801d324:	f012 0301 	ands.w	r3, r2, #1
 801d328:	d00c      	beq.n	801d344 <__swsetup_r+0xbc>
 801d32a:	2300      	movs	r3, #0
 801d32c:	60a3      	str	r3, [r4, #8]
 801d32e:	6963      	ldr	r3, [r4, #20]
 801d330:	425b      	negs	r3, r3
 801d332:	61a3      	str	r3, [r4, #24]
 801d334:	6923      	ldr	r3, [r4, #16]
 801d336:	b953      	cbnz	r3, 801d34e <__swsetup_r+0xc6>
 801d338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d33c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801d340:	d1ba      	bne.n	801d2b8 <__swsetup_r+0x30>
 801d342:	bd70      	pop	{r4, r5, r6, pc}
 801d344:	0792      	lsls	r2, r2, #30
 801d346:	bf58      	it	pl
 801d348:	6963      	ldrpl	r3, [r4, #20]
 801d34a:	60a3      	str	r3, [r4, #8]
 801d34c:	e7f2      	b.n	801d334 <__swsetup_r+0xac>
 801d34e:	2000      	movs	r0, #0
 801d350:	e7f7      	b.n	801d342 <__swsetup_r+0xba>
 801d352:	bf00      	nop
 801d354:	20000028 	.word	0x20000028
 801d358:	0802017c 	.word	0x0802017c
 801d35c:	0802019c 	.word	0x0802019c
 801d360:	0802015c 	.word	0x0802015c

0801d364 <__sflush_r>:
 801d364:	898a      	ldrh	r2, [r1, #12]
 801d366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d36a:	4605      	mov	r5, r0
 801d36c:	0710      	lsls	r0, r2, #28
 801d36e:	460c      	mov	r4, r1
 801d370:	d458      	bmi.n	801d424 <__sflush_r+0xc0>
 801d372:	684b      	ldr	r3, [r1, #4]
 801d374:	2b00      	cmp	r3, #0
 801d376:	dc05      	bgt.n	801d384 <__sflush_r+0x20>
 801d378:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	dc02      	bgt.n	801d384 <__sflush_r+0x20>
 801d37e:	2000      	movs	r0, #0
 801d380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d384:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d386:	2e00      	cmp	r6, #0
 801d388:	d0f9      	beq.n	801d37e <__sflush_r+0x1a>
 801d38a:	2300      	movs	r3, #0
 801d38c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d390:	682f      	ldr	r7, [r5, #0]
 801d392:	6a21      	ldr	r1, [r4, #32]
 801d394:	602b      	str	r3, [r5, #0]
 801d396:	d032      	beq.n	801d3fe <__sflush_r+0x9a>
 801d398:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d39a:	89a3      	ldrh	r3, [r4, #12]
 801d39c:	075a      	lsls	r2, r3, #29
 801d39e:	d505      	bpl.n	801d3ac <__sflush_r+0x48>
 801d3a0:	6863      	ldr	r3, [r4, #4]
 801d3a2:	1ac0      	subs	r0, r0, r3
 801d3a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d3a6:	b10b      	cbz	r3, 801d3ac <__sflush_r+0x48>
 801d3a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d3aa:	1ac0      	subs	r0, r0, r3
 801d3ac:	2300      	movs	r3, #0
 801d3ae:	4602      	mov	r2, r0
 801d3b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d3b2:	6a21      	ldr	r1, [r4, #32]
 801d3b4:	4628      	mov	r0, r5
 801d3b6:	47b0      	blx	r6
 801d3b8:	1c43      	adds	r3, r0, #1
 801d3ba:	89a3      	ldrh	r3, [r4, #12]
 801d3bc:	d106      	bne.n	801d3cc <__sflush_r+0x68>
 801d3be:	6829      	ldr	r1, [r5, #0]
 801d3c0:	291d      	cmp	r1, #29
 801d3c2:	d848      	bhi.n	801d456 <__sflush_r+0xf2>
 801d3c4:	4a29      	ldr	r2, [pc, #164]	; (801d46c <__sflush_r+0x108>)
 801d3c6:	40ca      	lsrs	r2, r1
 801d3c8:	07d6      	lsls	r6, r2, #31
 801d3ca:	d544      	bpl.n	801d456 <__sflush_r+0xf2>
 801d3cc:	2200      	movs	r2, #0
 801d3ce:	6062      	str	r2, [r4, #4]
 801d3d0:	04d9      	lsls	r1, r3, #19
 801d3d2:	6922      	ldr	r2, [r4, #16]
 801d3d4:	6022      	str	r2, [r4, #0]
 801d3d6:	d504      	bpl.n	801d3e2 <__sflush_r+0x7e>
 801d3d8:	1c42      	adds	r2, r0, #1
 801d3da:	d101      	bne.n	801d3e0 <__sflush_r+0x7c>
 801d3dc:	682b      	ldr	r3, [r5, #0]
 801d3de:	b903      	cbnz	r3, 801d3e2 <__sflush_r+0x7e>
 801d3e0:	6560      	str	r0, [r4, #84]	; 0x54
 801d3e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d3e4:	602f      	str	r7, [r5, #0]
 801d3e6:	2900      	cmp	r1, #0
 801d3e8:	d0c9      	beq.n	801d37e <__sflush_r+0x1a>
 801d3ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d3ee:	4299      	cmp	r1, r3
 801d3f0:	d002      	beq.n	801d3f8 <__sflush_r+0x94>
 801d3f2:	4628      	mov	r0, r5
 801d3f4:	f7fd f848 	bl	801a488 <_free_r>
 801d3f8:	2000      	movs	r0, #0
 801d3fa:	6360      	str	r0, [r4, #52]	; 0x34
 801d3fc:	e7c0      	b.n	801d380 <__sflush_r+0x1c>
 801d3fe:	2301      	movs	r3, #1
 801d400:	4628      	mov	r0, r5
 801d402:	47b0      	blx	r6
 801d404:	1c41      	adds	r1, r0, #1
 801d406:	d1c8      	bne.n	801d39a <__sflush_r+0x36>
 801d408:	682b      	ldr	r3, [r5, #0]
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	d0c5      	beq.n	801d39a <__sflush_r+0x36>
 801d40e:	2b1d      	cmp	r3, #29
 801d410:	d001      	beq.n	801d416 <__sflush_r+0xb2>
 801d412:	2b16      	cmp	r3, #22
 801d414:	d101      	bne.n	801d41a <__sflush_r+0xb6>
 801d416:	602f      	str	r7, [r5, #0]
 801d418:	e7b1      	b.n	801d37e <__sflush_r+0x1a>
 801d41a:	89a3      	ldrh	r3, [r4, #12]
 801d41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d420:	81a3      	strh	r3, [r4, #12]
 801d422:	e7ad      	b.n	801d380 <__sflush_r+0x1c>
 801d424:	690f      	ldr	r7, [r1, #16]
 801d426:	2f00      	cmp	r7, #0
 801d428:	d0a9      	beq.n	801d37e <__sflush_r+0x1a>
 801d42a:	0793      	lsls	r3, r2, #30
 801d42c:	680e      	ldr	r6, [r1, #0]
 801d42e:	bf08      	it	eq
 801d430:	694b      	ldreq	r3, [r1, #20]
 801d432:	600f      	str	r7, [r1, #0]
 801d434:	bf18      	it	ne
 801d436:	2300      	movne	r3, #0
 801d438:	eba6 0807 	sub.w	r8, r6, r7
 801d43c:	608b      	str	r3, [r1, #8]
 801d43e:	f1b8 0f00 	cmp.w	r8, #0
 801d442:	dd9c      	ble.n	801d37e <__sflush_r+0x1a>
 801d444:	4643      	mov	r3, r8
 801d446:	463a      	mov	r2, r7
 801d448:	6a21      	ldr	r1, [r4, #32]
 801d44a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d44c:	4628      	mov	r0, r5
 801d44e:	47b0      	blx	r6
 801d450:	2800      	cmp	r0, #0
 801d452:	dc06      	bgt.n	801d462 <__sflush_r+0xfe>
 801d454:	89a3      	ldrh	r3, [r4, #12]
 801d456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d45a:	81a3      	strh	r3, [r4, #12]
 801d45c:	f04f 30ff 	mov.w	r0, #4294967295
 801d460:	e78e      	b.n	801d380 <__sflush_r+0x1c>
 801d462:	4407      	add	r7, r0
 801d464:	eba8 0800 	sub.w	r8, r8, r0
 801d468:	e7e9      	b.n	801d43e <__sflush_r+0xda>
 801d46a:	bf00      	nop
 801d46c:	20400001 	.word	0x20400001

0801d470 <_fflush_r>:
 801d470:	b538      	push	{r3, r4, r5, lr}
 801d472:	690b      	ldr	r3, [r1, #16]
 801d474:	4605      	mov	r5, r0
 801d476:	460c      	mov	r4, r1
 801d478:	b1db      	cbz	r3, 801d4b2 <_fflush_r+0x42>
 801d47a:	b118      	cbz	r0, 801d484 <_fflush_r+0x14>
 801d47c:	6983      	ldr	r3, [r0, #24]
 801d47e:	b90b      	cbnz	r3, 801d484 <_fflush_r+0x14>
 801d480:	f7fe fbee 	bl	801bc60 <__sinit>
 801d484:	4b0c      	ldr	r3, [pc, #48]	; (801d4b8 <_fflush_r+0x48>)
 801d486:	429c      	cmp	r4, r3
 801d488:	d109      	bne.n	801d49e <_fflush_r+0x2e>
 801d48a:	686c      	ldr	r4, [r5, #4]
 801d48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d490:	b17b      	cbz	r3, 801d4b2 <_fflush_r+0x42>
 801d492:	4621      	mov	r1, r4
 801d494:	4628      	mov	r0, r5
 801d496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d49a:	f7ff bf63 	b.w	801d364 <__sflush_r>
 801d49e:	4b07      	ldr	r3, [pc, #28]	; (801d4bc <_fflush_r+0x4c>)
 801d4a0:	429c      	cmp	r4, r3
 801d4a2:	d101      	bne.n	801d4a8 <_fflush_r+0x38>
 801d4a4:	68ac      	ldr	r4, [r5, #8]
 801d4a6:	e7f1      	b.n	801d48c <_fflush_r+0x1c>
 801d4a8:	4b05      	ldr	r3, [pc, #20]	; (801d4c0 <_fflush_r+0x50>)
 801d4aa:	429c      	cmp	r4, r3
 801d4ac:	bf08      	it	eq
 801d4ae:	68ec      	ldreq	r4, [r5, #12]
 801d4b0:	e7ec      	b.n	801d48c <_fflush_r+0x1c>
 801d4b2:	2000      	movs	r0, #0
 801d4b4:	bd38      	pop	{r3, r4, r5, pc}
 801d4b6:	bf00      	nop
 801d4b8:	0802017c 	.word	0x0802017c
 801d4bc:	0802019c 	.word	0x0802019c
 801d4c0:	0802015c 	.word	0x0802015c

0801d4c4 <__locale_ctype_ptr_l>:
 801d4c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801d4c8:	4770      	bx	lr
	...

0801d4cc <__locale_ctype_ptr>:
 801d4cc:	4b04      	ldr	r3, [pc, #16]	; (801d4e0 <__locale_ctype_ptr+0x14>)
 801d4ce:	4a05      	ldr	r2, [pc, #20]	; (801d4e4 <__locale_ctype_ptr+0x18>)
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	6a1b      	ldr	r3, [r3, #32]
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	bf08      	it	eq
 801d4d8:	4613      	moveq	r3, r2
 801d4da:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801d4de:	4770      	bx	lr
 801d4e0:	20000028 	.word	0x20000028
 801d4e4:	2000008c 	.word	0x2000008c

0801d4e8 <__swhatbuf_r>:
 801d4e8:	b570      	push	{r4, r5, r6, lr}
 801d4ea:	460e      	mov	r6, r1
 801d4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4f0:	2900      	cmp	r1, #0
 801d4f2:	b096      	sub	sp, #88	; 0x58
 801d4f4:	4614      	mov	r4, r2
 801d4f6:	461d      	mov	r5, r3
 801d4f8:	da07      	bge.n	801d50a <__swhatbuf_r+0x22>
 801d4fa:	2300      	movs	r3, #0
 801d4fc:	602b      	str	r3, [r5, #0]
 801d4fe:	89b3      	ldrh	r3, [r6, #12]
 801d500:	061a      	lsls	r2, r3, #24
 801d502:	d410      	bmi.n	801d526 <__swhatbuf_r+0x3e>
 801d504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d508:	e00e      	b.n	801d528 <__swhatbuf_r+0x40>
 801d50a:	466a      	mov	r2, sp
 801d50c:	f000 f8ae 	bl	801d66c <_fstat_r>
 801d510:	2800      	cmp	r0, #0
 801d512:	dbf2      	blt.n	801d4fa <__swhatbuf_r+0x12>
 801d514:	9a01      	ldr	r2, [sp, #4]
 801d516:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d51a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d51e:	425a      	negs	r2, r3
 801d520:	415a      	adcs	r2, r3
 801d522:	602a      	str	r2, [r5, #0]
 801d524:	e7ee      	b.n	801d504 <__swhatbuf_r+0x1c>
 801d526:	2340      	movs	r3, #64	; 0x40
 801d528:	2000      	movs	r0, #0
 801d52a:	6023      	str	r3, [r4, #0]
 801d52c:	b016      	add	sp, #88	; 0x58
 801d52e:	bd70      	pop	{r4, r5, r6, pc}

0801d530 <__smakebuf_r>:
 801d530:	898b      	ldrh	r3, [r1, #12]
 801d532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d534:	079d      	lsls	r5, r3, #30
 801d536:	4606      	mov	r6, r0
 801d538:	460c      	mov	r4, r1
 801d53a:	d507      	bpl.n	801d54c <__smakebuf_r+0x1c>
 801d53c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d540:	6023      	str	r3, [r4, #0]
 801d542:	6123      	str	r3, [r4, #16]
 801d544:	2301      	movs	r3, #1
 801d546:	6163      	str	r3, [r4, #20]
 801d548:	b002      	add	sp, #8
 801d54a:	bd70      	pop	{r4, r5, r6, pc}
 801d54c:	ab01      	add	r3, sp, #4
 801d54e:	466a      	mov	r2, sp
 801d550:	f7ff ffca 	bl	801d4e8 <__swhatbuf_r>
 801d554:	9900      	ldr	r1, [sp, #0]
 801d556:	4605      	mov	r5, r0
 801d558:	4630      	mov	r0, r6
 801d55a:	f7fc ffe3 	bl	801a524 <_malloc_r>
 801d55e:	b948      	cbnz	r0, 801d574 <__smakebuf_r+0x44>
 801d560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d564:	059a      	lsls	r2, r3, #22
 801d566:	d4ef      	bmi.n	801d548 <__smakebuf_r+0x18>
 801d568:	f023 0303 	bic.w	r3, r3, #3
 801d56c:	f043 0302 	orr.w	r3, r3, #2
 801d570:	81a3      	strh	r3, [r4, #12]
 801d572:	e7e3      	b.n	801d53c <__smakebuf_r+0xc>
 801d574:	4b0d      	ldr	r3, [pc, #52]	; (801d5ac <__smakebuf_r+0x7c>)
 801d576:	62b3      	str	r3, [r6, #40]	; 0x28
 801d578:	89a3      	ldrh	r3, [r4, #12]
 801d57a:	6020      	str	r0, [r4, #0]
 801d57c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d580:	81a3      	strh	r3, [r4, #12]
 801d582:	9b00      	ldr	r3, [sp, #0]
 801d584:	6163      	str	r3, [r4, #20]
 801d586:	9b01      	ldr	r3, [sp, #4]
 801d588:	6120      	str	r0, [r4, #16]
 801d58a:	b15b      	cbz	r3, 801d5a4 <__smakebuf_r+0x74>
 801d58c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d590:	4630      	mov	r0, r6
 801d592:	f000 f87d 	bl	801d690 <_isatty_r>
 801d596:	b128      	cbz	r0, 801d5a4 <__smakebuf_r+0x74>
 801d598:	89a3      	ldrh	r3, [r4, #12]
 801d59a:	f023 0303 	bic.w	r3, r3, #3
 801d59e:	f043 0301 	orr.w	r3, r3, #1
 801d5a2:	81a3      	strh	r3, [r4, #12]
 801d5a4:	89a3      	ldrh	r3, [r4, #12]
 801d5a6:	431d      	orrs	r5, r3
 801d5a8:	81a5      	strh	r5, [r4, #12]
 801d5aa:	e7cd      	b.n	801d548 <__smakebuf_r+0x18>
 801d5ac:	0801bc29 	.word	0x0801bc29

0801d5b0 <__ascii_mbtowc>:
 801d5b0:	b082      	sub	sp, #8
 801d5b2:	b901      	cbnz	r1, 801d5b6 <__ascii_mbtowc+0x6>
 801d5b4:	a901      	add	r1, sp, #4
 801d5b6:	b142      	cbz	r2, 801d5ca <__ascii_mbtowc+0x1a>
 801d5b8:	b14b      	cbz	r3, 801d5ce <__ascii_mbtowc+0x1e>
 801d5ba:	7813      	ldrb	r3, [r2, #0]
 801d5bc:	600b      	str	r3, [r1, #0]
 801d5be:	7812      	ldrb	r2, [r2, #0]
 801d5c0:	1c10      	adds	r0, r2, #0
 801d5c2:	bf18      	it	ne
 801d5c4:	2001      	movne	r0, #1
 801d5c6:	b002      	add	sp, #8
 801d5c8:	4770      	bx	lr
 801d5ca:	4610      	mov	r0, r2
 801d5cc:	e7fb      	b.n	801d5c6 <__ascii_mbtowc+0x16>
 801d5ce:	f06f 0001 	mvn.w	r0, #1
 801d5d2:	e7f8      	b.n	801d5c6 <__ascii_mbtowc+0x16>

0801d5d4 <memmove>:
 801d5d4:	4288      	cmp	r0, r1
 801d5d6:	b510      	push	{r4, lr}
 801d5d8:	eb01 0302 	add.w	r3, r1, r2
 801d5dc:	d807      	bhi.n	801d5ee <memmove+0x1a>
 801d5de:	1e42      	subs	r2, r0, #1
 801d5e0:	4299      	cmp	r1, r3
 801d5e2:	d00a      	beq.n	801d5fa <memmove+0x26>
 801d5e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d5e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 801d5ec:	e7f8      	b.n	801d5e0 <memmove+0xc>
 801d5ee:	4283      	cmp	r3, r0
 801d5f0:	d9f5      	bls.n	801d5de <memmove+0xa>
 801d5f2:	1881      	adds	r1, r0, r2
 801d5f4:	1ad2      	subs	r2, r2, r3
 801d5f6:	42d3      	cmn	r3, r2
 801d5f8:	d100      	bne.n	801d5fc <memmove+0x28>
 801d5fa:	bd10      	pop	{r4, pc}
 801d5fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d600:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801d604:	e7f7      	b.n	801d5f6 <memmove+0x22>

0801d606 <_realloc_r>:
 801d606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d608:	4607      	mov	r7, r0
 801d60a:	4614      	mov	r4, r2
 801d60c:	460e      	mov	r6, r1
 801d60e:	b921      	cbnz	r1, 801d61a <_realloc_r+0x14>
 801d610:	4611      	mov	r1, r2
 801d612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801d616:	f7fc bf85 	b.w	801a524 <_malloc_r>
 801d61a:	b922      	cbnz	r2, 801d626 <_realloc_r+0x20>
 801d61c:	f7fc ff34 	bl	801a488 <_free_r>
 801d620:	4625      	mov	r5, r4
 801d622:	4628      	mov	r0, r5
 801d624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d626:	f000 f843 	bl	801d6b0 <_malloc_usable_size_r>
 801d62a:	42a0      	cmp	r0, r4
 801d62c:	d20f      	bcs.n	801d64e <_realloc_r+0x48>
 801d62e:	4621      	mov	r1, r4
 801d630:	4638      	mov	r0, r7
 801d632:	f7fc ff77 	bl	801a524 <_malloc_r>
 801d636:	4605      	mov	r5, r0
 801d638:	2800      	cmp	r0, #0
 801d63a:	d0f2      	beq.n	801d622 <_realloc_r+0x1c>
 801d63c:	4631      	mov	r1, r6
 801d63e:	4622      	mov	r2, r4
 801d640:	f7fc ff0f 	bl	801a462 <memcpy>
 801d644:	4631      	mov	r1, r6
 801d646:	4638      	mov	r0, r7
 801d648:	f7fc ff1e 	bl	801a488 <_free_r>
 801d64c:	e7e9      	b.n	801d622 <_realloc_r+0x1c>
 801d64e:	4635      	mov	r5, r6
 801d650:	e7e7      	b.n	801d622 <_realloc_r+0x1c>

0801d652 <__ascii_wctomb>:
 801d652:	b149      	cbz	r1, 801d668 <__ascii_wctomb+0x16>
 801d654:	2aff      	cmp	r2, #255	; 0xff
 801d656:	bf85      	ittet	hi
 801d658:	238a      	movhi	r3, #138	; 0x8a
 801d65a:	6003      	strhi	r3, [r0, #0]
 801d65c:	700a      	strbls	r2, [r1, #0]
 801d65e:	f04f 30ff 	movhi.w	r0, #4294967295
 801d662:	bf98      	it	ls
 801d664:	2001      	movls	r0, #1
 801d666:	4770      	bx	lr
 801d668:	4608      	mov	r0, r1
 801d66a:	4770      	bx	lr

0801d66c <_fstat_r>:
 801d66c:	b538      	push	{r3, r4, r5, lr}
 801d66e:	4c07      	ldr	r4, [pc, #28]	; (801d68c <_fstat_r+0x20>)
 801d670:	2300      	movs	r3, #0
 801d672:	4605      	mov	r5, r0
 801d674:	4608      	mov	r0, r1
 801d676:	4611      	mov	r1, r2
 801d678:	6023      	str	r3, [r4, #0]
 801d67a:	f7e4 fde0 	bl	800223e <_fstat>
 801d67e:	1c43      	adds	r3, r0, #1
 801d680:	d102      	bne.n	801d688 <_fstat_r+0x1c>
 801d682:	6823      	ldr	r3, [r4, #0]
 801d684:	b103      	cbz	r3, 801d688 <_fstat_r+0x1c>
 801d686:	602b      	str	r3, [r5, #0]
 801d688:	bd38      	pop	{r3, r4, r5, pc}
 801d68a:	bf00      	nop
 801d68c:	20016440 	.word	0x20016440

0801d690 <_isatty_r>:
 801d690:	b538      	push	{r3, r4, r5, lr}
 801d692:	4c06      	ldr	r4, [pc, #24]	; (801d6ac <_isatty_r+0x1c>)
 801d694:	2300      	movs	r3, #0
 801d696:	4605      	mov	r5, r0
 801d698:	4608      	mov	r0, r1
 801d69a:	6023      	str	r3, [r4, #0]
 801d69c:	f7e4 fddf 	bl	800225e <_isatty>
 801d6a0:	1c43      	adds	r3, r0, #1
 801d6a2:	d102      	bne.n	801d6aa <_isatty_r+0x1a>
 801d6a4:	6823      	ldr	r3, [r4, #0]
 801d6a6:	b103      	cbz	r3, 801d6aa <_isatty_r+0x1a>
 801d6a8:	602b      	str	r3, [r5, #0]
 801d6aa:	bd38      	pop	{r3, r4, r5, pc}
 801d6ac:	20016440 	.word	0x20016440

0801d6b0 <_malloc_usable_size_r>:
 801d6b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d6b4:	1f18      	subs	r0, r3, #4
 801d6b6:	2b00      	cmp	r3, #0
 801d6b8:	bfbc      	itt	lt
 801d6ba:	580b      	ldrlt	r3, [r1, r0]
 801d6bc:	18c0      	addlt	r0, r0, r3
 801d6be:	4770      	bx	lr

0801d6c0 <_init>:
 801d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6c2:	bf00      	nop
 801d6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6c6:	bc08      	pop	{r3}
 801d6c8:	469e      	mov	lr, r3
 801d6ca:	4770      	bx	lr

0801d6cc <_fini>:
 801d6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6ce:	bf00      	nop
 801d6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6d2:	bc08      	pop	{r3}
 801d6d4:	469e      	mov	lr, r3
 801d6d6:	4770      	bx	lr
